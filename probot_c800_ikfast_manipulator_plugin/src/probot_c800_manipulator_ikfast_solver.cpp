/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2020-01-27 22:40:28.054694
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKsin(j[2]);
x3=IKcos(j[2]);
x4=IKsin(j[1]);
x5=IKcos(j[3]);
x6=IKsin(j[3]);
x7=IKsin(j[4]);
x8=IKcos(j[4]);
x9=IKsin(j[0]);
x10=IKsin(j[5]);
x11=IKcos(j[5]);
x12=((0.3495)*x0);
x13=((1.0)*x5);
x14=((0.08338)*x5);
x15=((1.0)*x6);
x16=((1.0)*x9);
x17=((0.3484)*x4);
x18=((1.0)*x0);
x19=((0.1005)*x9);
x20=((0.1005)*x0);
x21=((0.08338)*x6);
x22=((0.3495)*x9);
x23=(x0*x8);
x24=(x2*x4);
x25=(x1*x2);
x26=(x8*x9);
x27=(x3*x4);
x28=((-1.0)*x6);
x29=(x1*x3);
x30=((-1.0)*x5);
x31=(x18*x24);
x32=(x16*x29);
x33=((((-1.0)*x24))+x29);
x34=(x25+x27);
x35=((((-1.0)*x27))+(((-1.0)*x25)));
x36=((((-1.0)*x31))+((x0*x29)));
x37=(x9*((x25+x27)));
x38=((((-1.0)*x32))+((x24*x9)));
x39=((((-1.0)*x18*x29))+x31);
x40=((((-1.0)*x16*x24))+x32);
x41=(x18*(((((-1.0)*x27))+(((-1.0)*x25)))));
x42=(x38*x6);
x43=(x36*x6);
x44=(x40*x5);
x45=((((-1.0)*x13*x35))+(((-1.0)*x15*x33)));
x46=(x45*x8);
x47=((((-1.0)*x13*x40))+(((-1.0)*x15*x37)));
x48=((((-1.0)*x15*x41))+(((-1.0)*x13*x39)));
x49=(((x47*x8))+(((-1.0)*x18*x7)));
eerot[0]=(((x10*((((x28*x36))+((x30*x41))))))+((x11*(((((-1.0)*x16*x7))+((x48*x8)))))));
eerot[1]=(x26+((x48*x7)));
eerot[2]=(((x11*((((x41*x5))+x43))))+((x10*((((x8*((((x28*x41))+((x30*x39))))))+(((-1.0)*x7*x9)))))));
IkReal x50=((1.0)*x20);
IkReal x51=((1.0)*x12);
eetrans[0]=(((x5*(((((-1.0)*x25*x50))+(((-1.0)*x27*x50))))))+(((-1.0)*x25*x51))+((x6*(((((-1.0)*x24*x50))+((x20*x29))))))+(((-1.0)*x0*x17))+(((-1.0)*x27*x51))+(((-0.1002)*x9))+(((-0.08338)*x26))+((x7*((((x21*x41))+((x14*x39)))))));
eerot[3]=(((x10*(((((-1.0)*x13*x37))+(((-1.0)*x15*x38))))))+((x11*x49)));
eerot[4]=(((x47*x7))+x23);
eerot[5]=(((x10*x49))+((x11*((x42+((x37*x5)))))));
eetrans[1]=(((x22*x27))+((x22*x25))+((x6*((((x19*x24))+(((-1.0)*x19*x29))))))+((x5*((((x19*x25))+((x19*x27))))))+(((-0.1002)*x0))+(((-0.08338)*x23))+((x17*x9))+((x7*((((x21*x37))+((x14*x40)))))));
eerot[6]=(((x11*x46))+((x10*((((x28*x34))+((x30*x33)))))));
eerot[7]=(x45*x7);
eerot[8]=(((x10*x46))+((x11*((((x34*x6))+((x33*x5)))))));
eetrans[2]=((0.1197)+((x5*(((((-0.1005)*x24))+(((0.1005)*x29))))))+(((0.3495)*x29))+(((0.3484)*x1))+((x6*(((((0.1005)*x25))+(((0.1005)*x27))))))+((x7*((((x21*x33))+((x14*x35))))))+(((-0.3495)*x24)));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r12;
new_r01=r10;
new_r02=((-1.0)*r11);
new_px=((((-1.0)*py))+(((-0.08338)*r11)));
new_r10=r02;
new_r11=r00;
new_r12=((-1.0)*r01);
new_py=((((-1.0)*px))+(((-0.08338)*r01)));
new_r20=r22;
new_r21=r20;
new_r22=((-1.0)*r21);
new_pz=((0.1197)+(((-1.0)*pz))+(((-0.08338)*r21)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x52=((1.0)*px);
IkReal x53=((1.0)*pz);
IkReal x54=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x54))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x53)));
rxp0_2=((((-1.0)*r10*x52))+((py*r00)));
rxp1_0=((((-1.0)*r21*x54))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x53)));
rxp1_2=((((-1.0)*r11*x52))+((py*r01)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x54)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x53)));
rxp2_2=((((-1.0)*r12*x52))+((py*r02)));
IkReal IKFAST_ALIGNED16(matrixinvcoeffs[256]);
IkReal x55=((0.1005)*r21);
IkReal x56=((0.201)*npx);
IkReal x57=((0.1005)*r20);
IkReal x58=((-0.201)*npy);
IkReal x59=((-1.0)*r21);
IkReal x60=((-1.0)*rxp1_2);
IkReal x61=((-0.1005)*r20);
IkReal x62=((-1.0)*npx);
IkReal x63=((-0.1005)*r22);
IkReal x64=((-1.0)*r20);
IkReal x65=((-1.0)*npy);
IkReal x66=((-1.0)*r22);
IkReal x67=((-1.0)*npz);
matrixinvcoeffs[0]=x55;
matrixinvcoeffs[1]=x58;
matrixinvcoeffs[2]=0;
matrixinvcoeffs[3]=0;
matrixinvcoeffs[4]=0;
matrixinvcoeffs[5]=0;
matrixinvcoeffs[6]=0;
matrixinvcoeffs[7]=0;
matrixinvcoeffs[8]=0;
matrixinvcoeffs[9]=npy;
matrixinvcoeffs[10]=0;
matrixinvcoeffs[11]=x59;
matrixinvcoeffs[12]=0;
matrixinvcoeffs[13]=0;
matrixinvcoeffs[14]=0;
matrixinvcoeffs[15]=x60;
matrixinvcoeffs[16]=0;
matrixinvcoeffs[17]=0;
matrixinvcoeffs[18]=x55;
matrixinvcoeffs[19]=x58;
matrixinvcoeffs[20]=0;
matrixinvcoeffs[21]=0;
matrixinvcoeffs[22]=0;
matrixinvcoeffs[23]=0;
matrixinvcoeffs[24]=x59;
matrixinvcoeffs[25]=0;
matrixinvcoeffs[26]=npy;
matrixinvcoeffs[27]=0;
matrixinvcoeffs[28]=0;
matrixinvcoeffs[29]=0;
matrixinvcoeffs[30]=x60;
matrixinvcoeffs[31]=0;
matrixinvcoeffs[32]=x61;
matrixinvcoeffs[33]=x56;
matrixinvcoeffs[34]=0;
matrixinvcoeffs[35]=0;
matrixinvcoeffs[36]=0;
matrixinvcoeffs[37]=0;
matrixinvcoeffs[38]=0;
matrixinvcoeffs[39]=0;
matrixinvcoeffs[40]=0;
matrixinvcoeffs[41]=x62;
matrixinvcoeffs[42]=0;
matrixinvcoeffs[43]=r20;
matrixinvcoeffs[44]=0;
matrixinvcoeffs[45]=0;
matrixinvcoeffs[46]=0;
matrixinvcoeffs[47]=rxp0_2;
matrixinvcoeffs[48]=0;
matrixinvcoeffs[49]=0;
matrixinvcoeffs[50]=x61;
matrixinvcoeffs[51]=x56;
matrixinvcoeffs[52]=0;
matrixinvcoeffs[53]=0;
matrixinvcoeffs[54]=0;
matrixinvcoeffs[55]=0;
matrixinvcoeffs[56]=r20;
matrixinvcoeffs[57]=0;
matrixinvcoeffs[58]=x62;
matrixinvcoeffs[59]=0;
matrixinvcoeffs[60]=0;
matrixinvcoeffs[61]=0;
matrixinvcoeffs[62]=rxp0_2;
matrixinvcoeffs[63]=0;
matrixinvcoeffs[64]=0;
matrixinvcoeffs[65]=0;
matrixinvcoeffs[66]=0;
matrixinvcoeffs[67]=0;
matrixinvcoeffs[68]=0;
matrixinvcoeffs[69]=0;
matrixinvcoeffs[70]=0;
matrixinvcoeffs[71]=0;
matrixinvcoeffs[72]=x66;
matrixinvcoeffs[73]=0;
matrixinvcoeffs[74]=npz;
matrixinvcoeffs[75]=0;
matrixinvcoeffs[76]=x63;
matrixinvcoeffs[77]=0;
matrixinvcoeffs[78]=((-1.0)*rxp2_2);
matrixinvcoeffs[79]=0;
matrixinvcoeffs[80]=0;
matrixinvcoeffs[81]=0;
matrixinvcoeffs[82]=0;
matrixinvcoeffs[83]=0;
matrixinvcoeffs[84]=0;
matrixinvcoeffs[85]=0;
matrixinvcoeffs[86]=0;
matrixinvcoeffs[87]=0;
matrixinvcoeffs[88]=0;
matrixinvcoeffs[89]=x67;
matrixinvcoeffs[90]=0;
matrixinvcoeffs[91]=r22;
matrixinvcoeffs[92]=0;
matrixinvcoeffs[93]=x63;
matrixinvcoeffs[94]=0;
matrixinvcoeffs[95]=rxp2_2;
matrixinvcoeffs[96]=0;
matrixinvcoeffs[97]=0;
matrixinvcoeffs[98]=0;
matrixinvcoeffs[99]=0;
matrixinvcoeffs[100]=x64;
matrixinvcoeffs[101]=x62;
matrixinvcoeffs[102]=0;
matrixinvcoeffs[103]=0;
matrixinvcoeffs[104]=0;
matrixinvcoeffs[105]=0;
matrixinvcoeffs[106]=0;
matrixinvcoeffs[107]=0;
matrixinvcoeffs[108]=rxp0_2;
matrixinvcoeffs[109]=0;
matrixinvcoeffs[110]=x61;
matrixinvcoeffs[111]=0;
matrixinvcoeffs[112]=0;
matrixinvcoeffs[113]=0;
matrixinvcoeffs[114]=0;
matrixinvcoeffs[115]=0;
matrixinvcoeffs[116]=0;
matrixinvcoeffs[117]=0;
matrixinvcoeffs[118]=x64;
matrixinvcoeffs[119]=x62;
matrixinvcoeffs[120]=0;
matrixinvcoeffs[121]=0;
matrixinvcoeffs[122]=0;
matrixinvcoeffs[123]=0;
matrixinvcoeffs[124]=0;
matrixinvcoeffs[125]=rxp0_2;
matrixinvcoeffs[126]=0;
matrixinvcoeffs[127]=x57;
matrixinvcoeffs[128]=0;
matrixinvcoeffs[129]=0;
matrixinvcoeffs[130]=0;
matrixinvcoeffs[131]=0;
matrixinvcoeffs[132]=x59;
matrixinvcoeffs[133]=x65;
matrixinvcoeffs[134]=0;
matrixinvcoeffs[135]=0;
matrixinvcoeffs[136]=0;
matrixinvcoeffs[137]=0;
matrixinvcoeffs[138]=0;
matrixinvcoeffs[139]=0;
matrixinvcoeffs[140]=rxp1_2;
matrixinvcoeffs[141]=0;
matrixinvcoeffs[142]=((-0.1005)*r21);
matrixinvcoeffs[143]=0;
matrixinvcoeffs[144]=0;
matrixinvcoeffs[145]=0;
matrixinvcoeffs[146]=0;
matrixinvcoeffs[147]=0;
matrixinvcoeffs[148]=0;
matrixinvcoeffs[149]=0;
matrixinvcoeffs[150]=x59;
matrixinvcoeffs[151]=x65;
matrixinvcoeffs[152]=0;
matrixinvcoeffs[153]=0;
matrixinvcoeffs[154]=0;
matrixinvcoeffs[155]=0;
matrixinvcoeffs[156]=0;
matrixinvcoeffs[157]=rxp1_2;
matrixinvcoeffs[158]=0;
matrixinvcoeffs[159]=x55;
matrixinvcoeffs[160]=0;
matrixinvcoeffs[161]=0;
matrixinvcoeffs[162]=0;
matrixinvcoeffs[163]=0;
matrixinvcoeffs[164]=x66;
matrixinvcoeffs[165]=x67;
matrixinvcoeffs[166]=0;
matrixinvcoeffs[167]=0;
matrixinvcoeffs[168]=0;
matrixinvcoeffs[169]=0;
matrixinvcoeffs[170]=0;
matrixinvcoeffs[171]=0;
matrixinvcoeffs[172]=rxp2_2;
matrixinvcoeffs[173]=0;
matrixinvcoeffs[174]=x63;
matrixinvcoeffs[175]=0;
matrixinvcoeffs[176]=0;
matrixinvcoeffs[177]=0;
matrixinvcoeffs[178]=0;
matrixinvcoeffs[179]=0;
matrixinvcoeffs[180]=0;
matrixinvcoeffs[181]=0;
matrixinvcoeffs[182]=x66;
matrixinvcoeffs[183]=x67;
matrixinvcoeffs[184]=0;
matrixinvcoeffs[185]=0;
matrixinvcoeffs[186]=0;
matrixinvcoeffs[187]=0;
matrixinvcoeffs[188]=0;
matrixinvcoeffs[189]=rxp2_2;
matrixinvcoeffs[190]=0;
matrixinvcoeffs[191]=((0.1005)*r22);
matrixinvcoeffs[192]=0;
matrixinvcoeffs[193]=0;
matrixinvcoeffs[194]=0;
matrixinvcoeffs[195]=0;
matrixinvcoeffs[196]=0;
matrixinvcoeffs[197]=0;
matrixinvcoeffs[198]=0;
matrixinvcoeffs[199]=0;
matrixinvcoeffs[200]=r20;
matrixinvcoeffs[201]=0;
matrixinvcoeffs[202]=x62;
matrixinvcoeffs[203]=0;
matrixinvcoeffs[204]=x57;
matrixinvcoeffs[205]=0;
matrixinvcoeffs[206]=rxp0_2;
matrixinvcoeffs[207]=0;
matrixinvcoeffs[208]=0;
matrixinvcoeffs[209]=0;
matrixinvcoeffs[210]=0;
matrixinvcoeffs[211]=0;
matrixinvcoeffs[212]=0;
matrixinvcoeffs[213]=0;
matrixinvcoeffs[214]=0;
matrixinvcoeffs[215]=0;
matrixinvcoeffs[216]=0;
matrixinvcoeffs[217]=npx;
matrixinvcoeffs[218]=0;
matrixinvcoeffs[219]=x64;
matrixinvcoeffs[220]=0;
matrixinvcoeffs[221]=x57;
matrixinvcoeffs[222]=0;
matrixinvcoeffs[223]=((-1.0)*rxp0_2);
matrixinvcoeffs[224]=0;
matrixinvcoeffs[225]=0;
matrixinvcoeffs[226]=0;
matrixinvcoeffs[227]=0;
matrixinvcoeffs[228]=0;
matrixinvcoeffs[229]=0;
matrixinvcoeffs[230]=0;
matrixinvcoeffs[231]=0;
matrixinvcoeffs[232]=r21;
matrixinvcoeffs[233]=0;
matrixinvcoeffs[234]=x65;
matrixinvcoeffs[235]=0;
matrixinvcoeffs[236]=x55;
matrixinvcoeffs[237]=0;
matrixinvcoeffs[238]=rxp1_2;
matrixinvcoeffs[239]=0;
matrixinvcoeffs[240]=0;
matrixinvcoeffs[241]=0;
matrixinvcoeffs[242]=0;
matrixinvcoeffs[243]=0;
matrixinvcoeffs[244]=0;
matrixinvcoeffs[245]=0;
matrixinvcoeffs[246]=0;
matrixinvcoeffs[247]=0;
matrixinvcoeffs[248]=0;
matrixinvcoeffs[249]=npy;
matrixinvcoeffs[250]=0;
matrixinvcoeffs[251]=x59;
matrixinvcoeffs[252]=0;
matrixinvcoeffs[253]=x55;
matrixinvcoeffs[254]=0;
matrixinvcoeffs[255]=x60;
if( !matrixinverse<16>(matrixinvcoeffs) ) {
continue;
}
IkReal gclwh0_0=matrixinvcoeffs[0], gclwh0_1=matrixinvcoeffs[16], gclwh1_2=matrixinvcoeffs[33], gclwh1_3=matrixinvcoeffs[49], gclwh2_0=matrixinvcoeffs[2], gclwh2_1=matrixinvcoeffs[18], gclwh3_2=matrixinvcoeffs[35], gclwh3_3=matrixinvcoeffs[51], gclwh4_2=matrixinvcoeffs[36], gclwh4_3=matrixinvcoeffs[52], gclwh4_4=matrixinvcoeffs[68], gclwh4_8=matrixinvcoeffs[132], gclwh4_10=matrixinvcoeffs[164], gclwh4_14=matrixinvcoeffs[228], gclwh5_0=matrixinvcoeffs[5], gclwh5_1=matrixinvcoeffs[21], gclwh5_6=matrixinvcoeffs[101], gclwh5_9=matrixinvcoeffs[149], gclwh5_11=matrixinvcoeffs[181], gclwh5_15=matrixinvcoeffs[245], gclwh6_2=matrixinvcoeffs[38], gclwh6_4=matrixinvcoeffs[70], gclwh6_5=matrixinvcoeffs[86], gclwh6_8=matrixinvcoeffs[134], gclwh6_12=matrixinvcoeffs[198], gclwh7_0=matrixinvcoeffs[7], gclwh7_1=matrixinvcoeffs[23], gclwh7_6=matrixinvcoeffs[103], gclwh7_7=matrixinvcoeffs[119], gclwh7_9=matrixinvcoeffs[151], gclwh7_11=matrixinvcoeffs[183], gclwh7_13=matrixinvcoeffs[215], gclwh8_2=matrixinvcoeffs[40], gclwh8_4=matrixinvcoeffs[72], gclwh8_5=matrixinvcoeffs[88], gclwh8_8=matrixinvcoeffs[136], gclwh8_12=matrixinvcoeffs[200], gclwh9_0=matrixinvcoeffs[9], gclwh9_1=matrixinvcoeffs[25], gclwh9_6=matrixinvcoeffs[105], gclwh9_7=matrixinvcoeffs[121], gclwh9_11=matrixinvcoeffs[185], gclwh9_13=matrixinvcoeffs[217], gclwh10_2=matrixinvcoeffs[42], gclwh10_4=matrixinvcoeffs[74], gclwh10_5=matrixinvcoeffs[90], gclwh10_8=matrixinvcoeffs[138], gclwh10_12=matrixinvcoeffs[202], gclwh11_0=matrixinvcoeffs[11], gclwh11_1=matrixinvcoeffs[27], gclwh11_6=matrixinvcoeffs[107], gclwh11_7=matrixinvcoeffs[123], gclwh11_11=matrixinvcoeffs[187], gclwh11_13=matrixinvcoeffs[219], gclwh11_15=matrixinvcoeffs[251], gclwh12_2=matrixinvcoeffs[44], gclwh12_3=matrixinvcoeffs[60], gclwh12_4=matrixinvcoeffs[76], gclwh12_8=matrixinvcoeffs[140], gclwh12_10=matrixinvcoeffs[172], gclwh12_14=matrixinvcoeffs[236], gclwh13_0=matrixinvcoeffs[13], gclwh13_1=matrixinvcoeffs[29], gclwh13_6=matrixinvcoeffs[109], gclwh13_9=matrixinvcoeffs[157], gclwh13_11=matrixinvcoeffs[189], gclwh13_15=matrixinvcoeffs[253], gclwh14_2=matrixinvcoeffs[46], gclwh14_3=matrixinvcoeffs[62], gclwh14_4=matrixinvcoeffs[78], gclwh14_8=matrixinvcoeffs[142], gclwh14_10=matrixinvcoeffs[174], gclwh14_14=matrixinvcoeffs[238], gclwh15_0=matrixinvcoeffs[15], gclwh15_1=matrixinvcoeffs[31], gclwh15_6=matrixinvcoeffs[111], gclwh15_9=matrixinvcoeffs[159], gclwh15_11=matrixinvcoeffs[191], gclwh15_15=matrixinvcoeffs[255];
IkReal op[72], zeror[48];
int numroots;;
IkReal x68=pz*pz;
IkReal x69=pp*pp;
IkReal x70=(npx*pz);
IkReal x71=((2.0)*pp);
IkReal x72=(pp*r22);
IkReal x73=(gclwh4_3*rxp2_2);
IkReal x74=(npz*pz);
IkReal x75=(npy*pz);
IkReal x76=((0.00101204505)*r22);
IkReal x77=(gclwh8_2*r21);
IkReal x78=(gclwh9_1*r21);
IkReal x79=(gclwh9_13*r21);
IkReal x80=(gclwh4_8*rxp2_2);
IkReal x81=((1.1859e-5)*rxp1_2);
IkReal x82=((0.0202005)*r21);
IkReal x83=((0.0201402)*rxp0_2);
IkReal x84=((0.01409792895)*r22);
IkReal x85=(gclwh7_11*r20);
IkReal x86=((0.201)*rxp0_2);
IkReal x87=((0.2004)*gclwh12_14);
IkReal x88=(gclwh8_12*r21);
IkReal x89=((0.0201402)*rxp1_2);
IkReal x90=(gclwh13_11*r20);
IkReal x91=((0.0020240901)*r22);
IkReal x92=(gclwh10_12*r22);
IkReal x93=(gclwh6_8*r20);
IkReal x94=(gclwh8_8*r21);
IkReal x95=(pp*r21);
IkReal x96=((0.0201402)*rxp2_2);
IkReal x97=(gclwh9_0*pz);
IkReal x98=((1.3958)*pp);
IkReal x99=(gclwh9_11*r21);
IkReal x100=((0.2004)*gclwh5_15);
IkReal x101=(gclwh15_11*rxp1_2);
IkReal x102=((4.0)*pp);
IkReal x103=(gclwh6_12*r20);
IkReal x104=((0.0070378542)*r21);
IkReal x105=((0.0070378542)*r22);
IkReal x106=(gclwh5_0*rxp2_2);
IkReal x107=(gclwh11_11*r22);
IkReal x108=(gclwh14_8*rxp1_2);
IkReal x109=(gclwh11_0*r22);
IkReal x110=((0.01010025)*pz);
IkReal x111=(gclwh15_0*rxp1_2);
IkReal x112=((4.0)*gclwh11_11);
IkReal x113=(pp*pz);
IkReal x114=(gclwh13_9*rxp0_2);
IkReal x115=((0.2004)*gclwh14_14);
IkReal x116=((0.2004)*gclwh15_15);
IkReal x117=(pp*r20);
IkReal x118=(gclwh11_1*r22);
IkReal x119=(gclwh12_2*rxp0_2);
IkReal x120=((0.0978878442)*rxp1_2);
IkReal x121=((0.0020240901)*r20);
IkReal x122=(gclwh6_2*r20);
IkReal x123=(gclwh12_10*rxp0_2);
IkReal x124=((0.402)*rxp0_2);
IkReal x125=((0.0402804)*rxp2_2);
IkReal x126=(gclwh14_2*rxp1_2);
IkReal x127=((0.2004)*gclwh13_15);
IkReal x128=(gclwh12_3*rxp0_2);
IkReal x129=((0.00101204505)*r20);
IkReal x130=(gclwh7_0*r20);
IkReal x131=(gclwh5_1*rxp2_2);
IkReal x132=((0.201)*pp);
IkReal x133=(gclwh15_9*rxp1_2);
IkReal x134=(gclwh7_13*r20);
IkReal x135=((0.0402804)*rxp0_2);
IkReal x136=(gclwh12_8*r20);
IkReal x137=((0.402)*rxp2_2);
IkReal x138=((0.1400568)*rxp2_2);
IkReal x139=((0.140499)*rxp0_2);
IkReal x140=(gclwh9_0*r21);
IkReal x141=(gclwh4_2*rxp2_2);
IkReal x142=(gclwh14_14*rxp1_2);
IkReal x143=((0.201)*pz);
IkReal x144=((0.699)*pp);
IkReal x145=(gclwh7_9*r20);
IkReal x146=(gclwh10_2*r22);
IkReal x147=(gclwh4_10*rxp2_2);
IkReal x148=((0.140499)*rxp1_2);
IkReal x149=((0.2004)*gclwh4_14);
IkReal x150=(gclwh14_10*rxp1_2);
IkReal x151=(gclwh5_11*rxp2_2);
IkReal x152=((0.00101204505)*r21);
IkReal x153=(gclwh10_8*r22);
IkReal x154=((0.140499)*rxp2_2);
IkReal x155=((1.0)*pp);
IkReal x156=((4.0)*gclwh10_8);
IkReal x157=(gclwh4_8*r22);
IkReal x158=((0.804)*rxp0_2);
IkReal x159=((0.2004)*gclwh11_15);
IkReal x160=((4.0)*gclwh9_11);
IkReal x161=(gclwh13_0*rxp0_2);
IkReal x162=(gclwh13_1*rxp0_2);
IkReal x163=((0.0070378542)*r20);
IkReal x164=((0.0020240901)*r21);
IkReal x165=(gclwh7_1*r20);
IkReal x166=(gclwh5_9*rxp2_2);
IkReal x167=((0.0022)*pp);
IkReal x168=(gclwh5_11*r22);
IkReal x169=((0.402)*rxp1_2);
IkReal x170=(gclwh6_5*x129);
IkReal x171=(gclwh10_5*x76);
IkReal x172=(gclwh8_5*x152);
IkReal x173=(gclwh4_14*x96);
IkReal x174=(gclwh14_14*x89);
IkReal x175=(gclwh12_14*x83);
IkReal x176=((0.201)*x80);
IkReal x177=((0.01010025)*x94);
IkReal x178=((0.01010025)*x153);
IkReal x179=((0.01010025)*x93);
IkReal x180=(gclwh12_8*x86);
IkReal x181=((0.201)*x108);
IkReal x182=(gclwh13_11*x86);
IkReal x183=((0.201)*x101);
IkReal x184=((0.201)*x151);
IkReal x185=((0.01010025)*x85);
IkReal x186=((0.01010025)*x107);
IkReal x187=((0.01010025)*x99);
IkReal x188=(gclwh5_15*x96);
IkReal x189=(gclwh9_7*x152);
IkReal x190=(gclwh7_7*x129);
IkReal x191=(gclwh11_7*x76);
IkReal x192=(gclwh11_15*x76);
IkReal x193=(gclwh13_15*x83);
IkReal x194=(gclwh15_15*x89);
IkReal x195=(gclwh6_5*x83);
IkReal x196=(gclwh8_5*x89);
IkReal x197=(gclwh12_14*x129);
IkReal x198=(gclwh14_14*x152);
IkReal x199=(gclwh10_5*x96);
IkReal x200=(gclwh4_14*x76);
IkReal x201=(gclwh5_15*x76);
IkReal x202=(gclwh11_7*x96);
IkReal x203=(gclwh15_15*x152);
IkReal x204=(gclwh9_7*x89);
IkReal x205=(gclwh13_15*x129);
IkReal x206=(gclwh7_7*x83);
IkReal x207=(gclwh11_15*x96);
IkReal x208=((0.0202005)*x153);
IkReal x209=(gclwh8_8*x82);
IkReal x210=((0.402)*x80);
IkReal x211=((0.0202005)*x93);
IkReal x212=((0.402)*x108);
IkReal x213=(gclwh12_8*x124);
IkReal x214=(gclwh4_14*x125);
IkReal x215=((0.0202005)*x107);
IkReal x216=((0.0202005)*x85);
IkReal x217=(gclwh9_11*x82);
IkReal x218=(gclwh5_11*x137);
IkReal x219=((0.402)*x101);
IkReal x220=(gclwh13_11*x124);
IkReal x221=((0.1002)*x117);
IkReal x222=((0.0011)*x117);
IkReal x223=((2.0)*x68);
IkReal x224=((1.0)*x69);
IkReal x225=((0.1002)*gclwh8_5*x95);
IkReal x226=((0.1002)*gclwh10_5*x72);
IkReal x227=(gclwh6_5*x221);
IkReal x228=((0.2004)*gclwh8_5*x75);
IkReal x229=((0.2004)*gclwh10_5*x74);
IkReal x230=((0.2004)*gclwh6_5*x70);
IkReal x231=(x113*x122);
IkReal x232=(gclwh12_3*pp*x86);
IkReal x233=(gclwh14_3*rxp1_2*x132);
IkReal x234=(x110*x146);
IkReal x235=(gclwh10_2*pz*x72);
IkReal x236=(x141*x143);
IkReal x237=(x110*x122);
IkReal x238=(x113*x77);
IkReal x239=(x110*x77);
IkReal x240=(x132*x73);
IkReal x241=(gclwh12_2*pz*x86);
IkReal x242=(x126*x143);
IkReal x243=((2.0)*gclwh10_8*x74);
IkReal x244=((2.0)*gclwh6_8*x70);
IkReal x245=((2.0)*gclwh8_8*x75);
IkReal x246=(x113*x130);
IkReal x247=((2.0)*gclwh9_11*x75);
IkReal x248=((2.0)*gclwh7_11*x70);
IkReal x249=(x106*x143);
IkReal x250=(gclwh11_0*pz*x72);
IkReal x251=(x109*x110);
IkReal x252=(gclwh13_1*pp*x86);
IkReal x253=((2.0)*gclwh11_11*x74);
IkReal x254=(x110*x130);
IkReal x255=((0.01010025)*r21*x97);
IkReal x256=(x95*x97);
IkReal x257=(gclwh15_1*rxp1_2*x132);
IkReal x258=(x131*x132);
IkReal x259=(x111*x143);
IkReal x260=(gclwh13_0*pz*x86);
IkReal x261=((0.1002)*gclwh11_15*x72);
IkReal x262=(gclwh7_7*x221);
IkReal x263=((0.1002)*gclwh11_7*x72);
IkReal x264=((0.1002)*gclwh9_7*x95);
IkReal x265=((0.2004)*gclwh9_7*x75);
IkReal x266=(x159*x74);
IkReal x267=((0.2004)*gclwh11_7*x74);
IkReal x268=((0.2004)*gclwh7_7*x70);
IkReal x269=(x149*x74);
IkReal x270=((0.1002)*gclwh14_14*x95);
IkReal x271=(gclwh12_14*x221);
IkReal x272=(x115*x75);
IkReal x273=(x70*x87);
IkReal x274=((0.1002)*gclwh4_14*x72);
IkReal x275=(x127*x70);
IkReal x276=(x116*x75);
IkReal x277=((0.1002)*gclwh5_15*x72);
IkReal x278=(gclwh13_15*x221);
IkReal x279=(x100*x74);
IkReal x280=((0.1002)*gclwh15_15*x95);
IkReal x281=(x153*x71);
IkReal x282=(x71*x94);
IkReal x283=(x71*x93);
IkReal x284=((4.0)*gclwh8_8*x75);
IkReal x285=(x156*x74);
IkReal x286=((4.0)*gclwh6_8*x70);
IkReal x287=(x71*x99);
IkReal x288=(x71*x85);
IkReal x289=(x107*x71);
IkReal x290=((4.0)*gclwh7_11*x70);
IkReal x291=(x160*x75);
IkReal x292=(x112*x74);
IkReal x293=(gclwh6_2*npx*x223);
IkReal x294=(gclwh10_2*npz*x223);
IkReal x295=(gclwh8_2*npy*x223);
IkReal x296=(gclwh9_1*x71*x75);
IkReal x297=(gclwh11_1*x71*x74);
IkReal x298=(gclwh7_1*x70*x71);
IkReal x299=(gclwh7_0*npx*x223);
IkReal x300=(x224*x78);
IkReal x301=(x165*x224);
IkReal x302=(x118*x224);
IkReal x303=(gclwh11_0*npz*x223);
IkReal x304=(gclwh9_0*npy*x223);
IkReal x305=((((0.0402804)*x142))+((gclwh12_14*x135)));
IkReal x306=(x175+x174);
IkReal x307=(x305+(((-1.0)*x214)));
IkReal x308=(x206+x204+x202);
IkReal x309=(x199+x196+x195);
IkReal x310=(x192+x188+x261);
IkReal x311=(x193+x194+x266);
IkReal x312=(x184+x185+x186+x187);
IkReal x313=(x229+x228+x230);
IkReal x314=(x265+x267+x268);
IkReal x315=(x179+x178+x177+x176);
IkReal x316=(x201+x276+x277+x275);
IkReal x317=(x200+x274+x272+x273);
IkReal x318=(x180+x181+x243+x245+x244);
IkReal x319=(x219+x220+x290+x291+x292);
IkReal x320=(x182+x183+x253+x247+x248);
IkReal x321=(x212+x213+x286+x285+x284);
IkReal x322=(x198+x197+x269+x270+x271);
IkReal x323=(((gclwh5_15*x125))+((x159*x72))+(((-0.0402804)*gclwh15_15*rxp1_2))+(((-0.4008)*gclwh11_15*x74))+((gclwh11_15*x91))+(((-1.0)*gclwh13_15*x135)));
IkReal x324=(x171+x170+x172+x225+x227+x226);
IkReal x325=(x207+x205+x203+x278+x279+x280);
IkReal x326=(x191+x190+x189+x264+x263+x262);
IkReal x327=(x215+x216+x217+x218+x289+x288+x287);
IkReal x328=(x210+x211+x209+x208+x283+x282+x281);
IkReal x329=(x293+x294+x295+x242+x241+x240);
IkReal x330=(x238+x239+x232+x233+x231+x236+x237+x234+x235);
IkReal x331=(x304+x302+x303+x300+x301+x258+x259+x299+x260);
IkReal x332=(x254+x255+x256+x257+x250+x251+x252+x298+x296+x297+x246+x249);
op[0]=((0.13985916)+(((-1.0)*x173))+x306+x324+(((-1.0)*x313)));
op[1]=((((0.1402779)*x141))+(((-0.1200774)*x147))+(((-1.0)*gclwh10_8*x72))+(((-1.0)*gclwh14_3*x120))+(((0.007048964475)*x77))+(((-0.1402779)*x119))+(((0.6979)*gclwh6_2*x117))+(((-1.0)*x329))+(((0.1200774)*x123))+(((-0.1402779)*x126))+(((0.6979)*gclwh10_2*x72))+(((-1.3958)*gclwh10_2*x74))+x330+x318+(((-1.0)*x155*x93))+(((-1.0)*x155*x94))+(((-1.0)*x315))+(((0.007048964475)*x122))+(((0.6979)*pp*x77))+(((0.0978878442)*x73))+(((-1.3958)*gclwh8_2*x75))+(((0.007048964475)*x146))+(((-0.0978878442)*x128))+(((0.1200774)*x150))+(((-1.3958)*gclwh6_2*x70)));
op[2]=((((1.398)*gclwh6_12*x70))+(((-0.00706007475)*x92))+(((-1.0)*x144*x88))+(((-0.00706007475)*x88))+(((-1.0)*x321))+((gclwh4_10*x138))+(((-1.0)*x103*x144))+x328+(((-0.699)*gclwh10_12*x72))+(((-0.1400568)*x123))+(((-0.00706007475)*x103))+(((1.398)*gclwh10_12*x74))+(((1.398)*gclwh8_12*x75))+(((-0.1400568)*x150)));
op[3]=x307;
op[4]=((-0.00022044)+x173+x324+(((-1.0)*x313))+(((-1.0)*x306)));
op[5]=((((-0.0011)*pp*x77))+(((0.0199794)*x147))+(((-0.0011)*gclwh10_2*x72))+(((-0.0199794)*x150))+(((0.0022)*gclwh8_2*x75))+(((-0.0002211)*x141))+(((-1.1859e-5)*x73))+((pp*x94))+((pp*x93))+(((-1.0)*x329))+x330+x315+(((0.0022)*gclwh6_2*x70))+((gclwh10_8*x72))+(((-1.0)*x318))+((gclwh14_3*x81))+(((-1.1110275e-5)*x77))+(((-1.0)*gclwh6_2*x222))+(((-0.0199794)*x123))+(((1.1859e-5)*x128))+(((0.0002211)*x126))+(((-1.1110275e-5)*x146))+(((0.0022)*gclwh10_2*x74))+(((0.0002211)*x119))+(((-1.1110275e-5)*x122)));
op[6]=((((0.47690395)*gclwh7_1*x117))+(((-0.1604784)*x114))+(((0.0978878442)*x131))+(((0.7984)*gclwh7_9*x117))+(((0.6979)*gclwh9_0*x95))+(((0.0080640396)*x145))+(((-0.9740084)*gclwh11_1*x74))+(((-1.5968)*gclwh7_9*x70))+(((0.00491886417105)*x165))+((pp*x85))+(((0.47690395)*pp*x78))+(((-0.9740084)*gclwh9_1*x75))+(((-1.3958)*gclwh7_0*x70))+(((-1.3958)*gclwh11_0*x74))+(((-0.1402779)*x111))+(((-1.0)*x320))+(((0.6979)*gclwh11_0*x72))+(((-1.0)*gclwh15_1*x120))+(((-0.9740084)*gclwh7_1*x70))+(((0.007048964475)*x109))+(((0.00491886417105)*x78))+x332+x312+((gclwh9_11*x95))+(((-0.0978878442)*x162))+(((0.1604784)*x166))+(((0.007048964475)*x130))+(((-0.1402779)*x161))+(((-1.0)*x331))+(((0.007048964475)*x140))+((gclwh11_11*x72))+(((0.1402779)*x106))+(((0.6979)*gclwh7_0*x117))+(((-0.1604784)*x133))+(((0.47690395)*gclwh11_1*x72))+(((-1.3958)*gclwh9_0*x75))+(((0.00491886417105)*x118)));
op[7]=((0.13985916)+x326+x311+(((-1.0)*x310))+(((-1.0)*x314)));
op[8]=x323;
op[9]=((((-0.00706007475)*gclwh11_13*r22))+(((-0.699)*gclwh7_13*x117))+(((0.0070378542)*x145))+((gclwh5_9*x138))+(((1.398)*gclwh7_13*x70))+(((-0.699)*gclwh11_13*x72))+x327+(((-1.0)*x319))+(((-1.0)*x144*x79))+(((-0.00706007475)*x79))+(((-0.1400568)*x114))+(((0.6968)*gclwh7_9*x117))+(((-0.1400568)*x133))+(((1.398)*gclwh11_13*x74))+(((1.398)*gclwh9_13*x75))+(((-1.3936)*gclwh7_9*x70))+(((-0.00706007475)*x134)));
op[10]=((((0.000118)*gclwh11_1*x74))+(((-1.0)*gclwh9_11*x95))+(((1.1859e-5)*x162))+(((-0.01015925)*gclwh11_1*x72))+(((0.0002211)*x161))+(((-1.1110275e-5)*x109))+(((0.000118)*gclwh9_1*x75))+(((-5.9591475e-7)*x118))+(((0.0010261854)*x145))+(((0.0022)*gclwh9_0*x75))+(((-1.0)*gclwh7_0*x222))+(((0.1016)*gclwh7_9*x117))+((gclwh15_1*x81))+(((0.0204216)*x166))+(((-0.0204216)*x133))+x332+x320+(((-0.0204216)*x114))+(((-1.0)*x312))+(((-1.0)*x155*x85))+(((-0.01015925)*gclwh7_1*x117))+(((-5.9591475e-7)*x78))+(((-1.1859e-5)*x131))+(((-0.01015925)*pp*x78))+(((-1.0)*x331))+(((-0.2032)*gclwh7_9*x70))+(((0.0022)*gclwh7_0*x70))+(((-0.0011)*gclwh9_0*x95))+(((-0.0011)*gclwh11_0*x72))+(((-1.1110275e-5)*x140))+(((0.0022)*gclwh11_0*x74))+(((-1.1110275e-5)*x130))+(((0.0002211)*x111))+(((-1.0)*gclwh11_11*x72))+(((0.000118)*gclwh7_1*x70))+(((-0.0002211)*x106))+(((-5.9591475e-7)*x165)));
op[11]=((-0.00022044)+x326+x310+(((-1.0)*x311))+(((-1.0)*x314)));
op[12]=((((-1.0)*x322))+x309+x317);
op[13]=((-0.47702437)+(((-0.00603388935)*gclwh12_10*r20))+(((0.47690395)*gclwh12_3*pp*r20))+(((0.5974)*gclwh4_10*pp*r22))+(((-0.007048964475)*gclwh3_2*r20))+(((0.00491886417105)*gclwh14_3*r21))+((gclwh14_2*pp*pz*r21))+(((-1.3958)*gclwh3_2*npx*pz))+(((-1.0)*gclwh3_3*r20*(pp*pp)))+(((2.0)*gclwh1_2*npy*(pz*pz)))+(((-0.00603388935)*gclwh14_10*r21))+(((0.1402779)*gclwh8_2*rxp1_2))+(((-2.0)*gclwh4_3*npz*pp*pz))+(((0.00491886417105)*gclwh1_3*r21))+(((0.01010025)*gclwh4_8*r22))+(((-0.5974)*gclwh12_10*pp*r20))+(((0.01010025)*gclwh1_2*pz*r21))+(((-0.6979)*gclwh1_2*pp*r21))+(((-0.01010025)*gclwh14_8*r21))+(((-0.201)*gclwh8_8*rxp1_2))+(((0.6979)*gclwh12_2*pp*r20))+(((1.1948)*gclwh12_10*npx*pz))+(((1.3958)*gclwh1_2*npy*pz))+(((-2.0)*gclwh4_8*npz*pz))+(((-1.0)*gclwh14_8*pp*r21))+(((-1.0)*gclwh1_2*pp*pz*r21))+(((0.00491886417105)*gclwh12_3*r20))+(((0.9740084)*gclwh1_3*npy*pz))+(((0.201)*gclwh8_2*pz*rxp1_2))+(((2.0)*gclwh12_8*npx*pz))+(((-0.201)*gclwh10_8*rxp2_2))+(((-2.0)*gclwh14_2*npy*(pz*pz)))+(((-1.3958)*gclwh14_2*npy*pz))+(((0.01010025)*gclwh14_2*pz*r21))+(((-0.00491886417105)*gclwh3_3*r20))+(((-2.0)*gclwh12_2*npx*(pz*pz)))+(((-1.0)*gclwh12_3*r20*(pp*pp)))+(((-2.0)*gclwh3_2*npx*(pz*pz)))+(((-1.0)*gclwh12_8*pp*r20))+(((0.007048964475)*gclwh1_2*r21))+(((-0.49710445)*gclwh1_3*pp*r21))+((gclwh3_2*pp*pz*r20))+(((-2.0)*gclwh1_3*npy*pp*pz))+(((-1.3958)*gclwh12_2*npx*pz))+(((0.007048964475)*gclwh14_2*r21))+(((0.47690395)*gclwh14_3*pp*r21))+(((0.9740084)*gclwh4_3*npz*pz))+((gclwh1_3*r21*(pp*pp)))+(((2.0)*gclwh14_8*npy*pz))+(((0.1402779)*gclwh6_2*rxp0_2))+(((-0.201)*pz))+(((-0.9740084)*gclwh14_3*npy*pz))+(((0.00603388935)*gclwh4_10*r22))+(((-0.01010025)*gclwh12_8*r20))+(((2.0)*gclwh3_3*npx*pp*pz))+(((-0.00491886417105)*gclwh4_3*r22))+(((0.1402779)*gclwh10_2*rxp2_2))+(((0.201)*gclwh10_2*pz*rxp2_2))+(((-1.1948)*gclwh4_10*npz*pz))+(((-0.01010025)*gclwh4_2*pz*r22))+(((0.49710445)*gclwh3_3*pp*r20))+(((-0.9740084)*gclwh12_3*npx*pz))+(((2.0)*gclwh14_3*npy*pp*pz))+(((-0.47690395)*gclwh4_3*pp*r22))+((gclwh4_3*r22*(pp*pp)))+(((0.01010025)*gclwh12_2*pz*r20))+(((2.0)*gclwh4_2*npz*(pz*pz)))+(((1.1948)*gclwh14_10*npy*pz))+(((0.6979)*gclwh3_2*pp*r20))+(((-0.5974)*gclwh14_10*pp*r21))+(((-1.0)*gclwh14_3*r21*(pp*pp)))+(((-0.007048964475)*gclwh4_2*r22))+(((-0.6979)*gclwh4_2*pp*r22))+(((-0.01010025)*gclwh3_2*pz*r20))+((gclwh4_8*pp*r22))+(((0.201)*gclwh6_2*pz*rxp0_2))+(((2.0)*gclwh12_3*npx*pp*pz))+(((0.6979)*gclwh14_2*pp*r21))+(((1.3958)*gclwh4_2*npz*pz))+(((0.007048964475)*gclwh12_2*r20))+(((-1.0)*gclwh4_2*pp*pz*r22))+(((-0.9740084)*gclwh3_3*npx*pz))+((gclwh12_2*pp*pz*r20))+(((-0.201)*gclwh6_8*rxp0_2)));
op[14]=((-0.02161546)+(((-4.0)*gclwh12_8*x70))+((gclwh12_10*x163))+(((-1.0)*gclwh4_10*x105))+((gclwh8_8*x169))+(((4.0)*gclwh4_8*x74))+(((-1.0)*gclwh6_12*x139))+(((-0.0202005)*x157))+(((0.6968)*gclwh14_10*x95))+((gclwh14_8*x82))+(((-1.0)*x157*x71))+((gclwh10_8*x137))+((gclwh6_8*x124))+((gclwh14_8*r21*x71))+(((-0.6968)*gclwh4_10*x72))+((x136*x71))+((gclwh14_10*x104))+(((-4.0)*gclwh14_8*x75))+(((-1.0)*gclwh8_12*x148))+(((-1.3936)*gclwh12_10*x70))+(((1.3936)*gclwh4_10*x74))+(((-1.3936)*gclwh14_10*x75))+(((0.0202005)*x136))+(((0.6968)*gclwh12_10*x117))+(((-1.0)*gclwh10_12*x154)));
op[15]=((((-1.0)*x115*x95))+(((-1.0)*gclwh14_14*x164))+(((-1.0)*gclwh12_14*x121))+((gclwh4_14*x91))+(((0.4008)*gclwh12_14*x70))+(((-0.4008)*gclwh4_14*x74))+(((-1.0)*x117*x87))+(((0.4008)*gclwh14_14*x75))+((x149*x72)));
op[16]=(x309+x322+(((-1.0)*x317)));
op[17]=((-0.01003883)+((gclwh14_2*pp*pz*r21))+(((0.000118)*gclwh3_3*npx*pz))+(((-0.0002211)*gclwh8_2*rxp1_2))+(((-1.0)*gclwh3_3*r20*(pp*pp)))+(((0.0022)*gclwh14_2*npy*pz))+(((2.0)*gclwh1_2*npy*(pz*pz)))+(((0.0994)*gclwh14_10*pp*r21))+(((0.00100396485)*gclwh12_10*r20))+(((1.1110275e-5)*gclwh4_2*r22))+(((-2.0)*gclwh4_3*npz*pp*pz))+(((-0.1988)*gclwh14_10*npy*pz))+(((-0.0011)*gclwh3_2*pp*r20))+(((0.01010025)*gclwh12_8*r20))+(((0.01010025)*gclwh1_2*pz*r21))+(((0.1988)*gclwh4_10*npz*pz))+(((0.0994)*gclwh12_10*pp*r20))+(((-0.000118)*gclwh1_3*npy*pz))+(((0.01004125)*gclwh3_3*pp*r20))+(((-1.0)*gclwh1_2*pp*pz*r21))+(((0.201)*gclwh10_8*rxp2_2))+(((0.201)*gclwh8_2*pz*rxp1_2))+(((-2.0)*gclwh14_2*npy*(pz*pz)))+(((-5.9591475e-7)*gclwh14_3*r21))+(((0.01015925)*gclwh4_3*pp*r22))+(((-2.0)*gclwh14_8*npy*pz))+(((0.01010025)*gclwh14_8*r21))+(((0.01010025)*gclwh14_2*pz*r21))+(((-1.1110275e-5)*gclwh14_2*r21))+(((-2.0)*gclwh12_2*npx*(pz*pz)))+(((-1.0)*gclwh12_3*r20*(pp*pp)))+(((-0.00100396485)*gclwh4_10*r22))+(((-2.0)*gclwh3_2*npx*(pz*pz)))+(((-0.0994)*gclwh4_10*pp*r22))+(((-0.000118)*gclwh4_3*npz*pz))+(((-0.01010025)*gclwh4_8*r22))+(((-0.01015925)*gclwh14_3*pp*r21))+((gclwh3_2*pp*pz*r20))+(((-2.0)*gclwh1_3*npy*pp*pz))+(((0.0022)*gclwh3_2*npx*pz))+((gclwh14_8*pp*r21))+(((-5.9591475e-7)*gclwh12_3*r20))+(((1.1110275e-5)*gclwh3_2*r20))+(((-5.9591475e-7)*gclwh1_3*r21))+(((0.201)*gclwh8_8*rxp1_2))+((gclwh1_3*r21*(pp*pp)))+(((-0.201)*pz))+(((-1.1110275e-5)*gclwh1_2*r21))+(((5.9591475e-7)*gclwh4_3*r22))+((gclwh12_8*pp*r20))+(((2.0)*gclwh3_3*npx*pp*pz))+(((0.000118)*gclwh14_3*npy*pz))+(((0.201)*gclwh10_2*pz*rxp2_2))+(((-0.0011)*gclwh14_2*pp*r21))+(((0.201)*gclwh6_8*rxp0_2))+(((-0.01010025)*gclwh4_2*pz*r22))+(((-0.0022)*gclwh4_2*npz*pz))+(((0.0011)*gclwh4_2*pp*r22))+(((-0.0002211)*gclwh6_2*rxp0_2))+(((-1.0)*gclwh4_8*pp*r22))+(((2.0)*gclwh14_3*npy*pp*pz))+(((-0.0002211)*gclwh10_2*rxp2_2))+(((-0.0011)*gclwh12_2*pp*r20))+((gclwh4_3*r22*(pp*pp)))+(((0.01010025)*gclwh12_2*pz*r20))+(((2.0)*gclwh4_2*npz*(pz*pz)))+(((-0.1988)*gclwh12_10*npx*pz))+(((-0.01004125)*gclwh1_3*pp*r21))+(((-1.0)*gclwh14_3*r21*(pp*pp)))+(((-1.1110275e-5)*gclwh12_2*r20))+(((2.0)*gclwh4_8*npz*pz))+(((0.000118)*gclwh12_3*npx*pz))+(((0.00100396485)*gclwh14_10*r21))+(((0.0022)*gclwh12_2*npx*pz))+(((-0.0022)*gclwh1_2*npy*pz))+(((-2.0)*gclwh12_8*npx*pz))+(((5.9591475e-7)*gclwh3_3*r20))+(((-0.01015925)*gclwh12_3*pp*r20))+(((-0.01010025)*gclwh3_2*pz*r20))+(((0.201)*gclwh6_2*pz*rxp0_2))+(((2.0)*gclwh12_3*npx*pp*pz))+(((-1.0)*gclwh4_2*pp*pz*r22))+((gclwh12_2*pp*pz*r20))+(((0.0011)*gclwh1_2*pp*r21)));
op[18]=((0.47702437)+(((-0.0978878442)*gclwh9_1*rxp1_2))+(((-0.9740084)*gclwh5_1*npz*pz))+(((0.01010025)*gclwh5_11*r22))+(((-1.0)*gclwh2_1*r20*(pp*pp)))+(((-0.007048964475)*gclwh15_0*r21))+(((-0.6979)*gclwh0_0*pp*r21))+(((1.5968)*gclwh15_9*npy*pz))+(((1.5968)*gclwh13_9*npx*pz))+(((-0.7984)*gclwh15_9*pp*r21))+(((-1.0)*gclwh13_11*pp*r20))+(((-0.7984)*gclwh13_9*pp*r20))+(((0.9740084)*gclwh15_1*npy*pz))+(((-0.007048964475)*gclwh2_0*r20))+((gclwh13_1*r20*(pp*pp)))+(((2.0)*gclwh13_0*npx*(pz*pz)))+((gclwh5_0*pp*pz*r22))+((gclwh2_0*pp*pz*r20))+(((-0.1402779)*gclwh9_0*rxp1_2))+(((-0.201)*gclwh11_11*rxp2_2))+(((-1.0)*gclwh0_0*pp*pz*r21))+(((-0.00491886417105)*gclwh13_1*r20))+(((2.0)*gclwh5_1*npz*pp*pz))+(((-0.1402779)*gclwh7_0*rxp0_2))+(((2.0)*gclwh0_0*npy*(pz*pz)))+(((-0.01010025)*gclwh15_0*pz*r21))+(((-1.5968)*gclwh5_9*npz*pz))+(((-0.201)*gclwh9_0*pz*rxp1_2))+(((2.0)*gclwh13_11*npx*pz))+(((-0.6979)*gclwh13_0*pp*r20))+(((0.007048964475)*gclwh0_0*r21))+(((1.3958)*gclwh13_0*npx*pz))+(((1.3958)*gclwh0_0*npy*pz))+(((-2.0)*gclwh15_1*npy*pp*pz))+(((-1.3958)*gclwh5_0*npz*pz))+(((-0.00491886417105)*gclwh15_1*r21))+(((0.00491886417105)*gclwh0_1*r21))+(((-0.0080640396)*gclwh15_9*r21))+(((0.6979)*gclwh5_0*pp*r22))+(((2.0)*gclwh15_0*npy*(pz*pz)))+(((0.0080640396)*gclwh5_9*r22))+(((-0.47690395)*gclwh15_1*pp*r21))+(((-0.201)*pz))+(((-0.0080640396)*gclwh13_9*r20))+(((2.0)*gclwh2_1*npx*pp*pz))+(((-0.9740084)*gclwh2_1*npx*pz))+(((-0.201)*gclwh7_11*rxp0_2))+(((-2.0)*gclwh0_1*npy*pp*pz))+(((-0.201)*gclwh9_11*rxp1_2))+(((-2.0)*gclwh2_0*npx*(pz*pz)))+(((-2.0)*gclwh5_11*npz*pz))+(((-0.00491886417105)*gclwh2_1*r20))+(((0.9740084)*gclwh13_1*npx*pz))+(((-2.0)*gclwh5_0*npz*(pz*pz)))+(((-0.6979)*gclwh15_0*pp*r21))+(((0.7984)*gclwh5_9*pp*r22))+(((0.01010025)*gclwh0_0*pz*r21))+(((0.201)*gclwh11_1*pp*rxp2_2))+(((0.47690395)*gclwh5_1*pp*r22))+(((-0.0978878442)*gclwh11_1*rxp2_2))+((gclwh5_11*pp*r22))+(((-0.01010025)*gclwh13_11*r20))+(((-1.0)*gclwh13_0*pp*pz*r20))+(((0.201)*gclwh7_1*pp*rxp0_2))+((gclwh0_1*r21*(pp*pp)))+(((-1.0)*gclwh5_1*r22*(pp*pp)))+(((-0.01010025)*gclwh13_0*pz*r20))+(((0.00491886417105)*gclwh5_1*r22))+(((0.6979)*gclwh2_0*pp*r20))+(((-1.3958)*gclwh2_0*npx*pz))+(((-0.01010025)*gclwh15_11*r21))+(((2.0)*gclwh15_11*npy*pz))+(((-0.007048964475)*gclwh13_0*r20))+(((0.01010025)*gclwh5_0*pz*r22))+(((0.007048964475)*gclwh5_0*r22))+(((-0.47690395)*gclwh13_1*pp*r20))+(((-1.0)*gclwh15_11*pp*r21))+(((-0.49710445)*gclwh0_1*pp*r21))+(((-0.0978878442)*gclwh7_1*rxp0_2))+(((0.201)*gclwh9_1*pp*rxp1_2))+(((-0.1402779)*gclwh11_0*rxp2_2))+(((-1.0)*gclwh15_0*pp*pz*r21))+(((0.9740084)*gclwh0_1*npy*pz))+(((-0.01010025)*gclwh2_0*pz*r20))+(((-0.1604784)*gclwh7_9*rxp0_2))+(((-0.201)*gclwh7_0*pz*rxp0_2))+(((-2.0)*gclwh13_1*npx*pp*pz))+((gclwh15_1*r21*(pp*pp)))+(((-0.201)*gclwh11_0*pz*rxp2_2))+(((1.3958)*gclwh15_0*npy*pz))+(((0.49710445)*gclwh2_1*pp*r20)));
op[19]=(x325+(((-1.0)*x316))+(((-1.0)*x308)));
op[20]=((((-1.0)*gclwh11_15*x125))+((x100*x72))+(((-1.0)*x117*x127))+(((-0.4008)*gclwh5_15*x74))+(((0.4008)*gclwh15_15*x75))+(((-1.0)*x116*x95))+(((0.4008)*gclwh13_15*x70))+(((-1.0)*gclwh15_15*x164))+(((-1.0)*gclwh13_15*x121))+((gclwh5_15*x91)));
op[21]=((-0.02161546)+(((-0.6968)*gclwh13_9*x117))+(((-1.0)*gclwh15_11*r21*x71))+(((1.3936)*gclwh15_9*x75))+(((-0.1400568)*gclwh7_9*rxp0_2))+(((-1.0)*x71*x90))+((gclwh11_13*x154))+(((-1.0)*gclwh15_11*x82))+((gclwh7_13*x139))+(((-1.0)*gclwh9_11*x169))+((gclwh5_9*x105))+((x168*x71))+(((-1.0)*gclwh7_11*x124))+(((-1.0)*gclwh13_9*x163))+(((-1.0)*gclwh11_11*x137))+(((4.0)*gclwh15_11*x75))+(((0.0202005)*x168))+(((4.0)*gclwh13_11*x70))+(((1.3936)*gclwh13_9*x70))+((gclwh9_13*x148))+(((-1.3936)*gclwh5_9*x74))+(((0.6968)*gclwh5_9*x72))+(((-0.0202005)*x90))+(((-4.0)*gclwh5_11*x74))+(((-1.0)*gclwh15_9*x104))+(((-0.6968)*gclwh15_9*x95)));
op[22]=((0.01003883)+(((0.000118)*gclwh2_1*npx*pz))+(((0.2032)*gclwh13_9*npx*pz))+(((5.9591475e-7)*gclwh2_1*r20))+(((-0.0022)*gclwh15_0*npy*pz))+(((-0.0204216)*gclwh7_9*rxp0_2))+(((-1.0)*gclwh2_1*r20*(pp*pp)))+(((0.0010261854)*gclwh5_9*r22))+(((-2.0)*gclwh15_11*npy*pz))+(((-2.0)*gclwh13_11*npx*pz))+(((-0.01015925)*gclwh5_1*pp*r22))+(((0.0022)*gclwh5_0*npz*pz))+(((1.1859e-5)*gclwh7_1*rxp0_2))+(((0.2032)*gclwh15_9*npy*pz))+((gclwh13_1*r20*(pp*pp)))+(((2.0)*gclwh13_0*npx*(pz*pz)))+((gclwh5_0*pp*pz*r22))+((gclwh2_0*pp*pz*r20))+(((-0.000118)*gclwh15_1*npy*pz))+(((0.0022)*gclwh2_0*npx*pz))+(((0.01010025)*gclwh15_11*r21))+(((-0.000118)*gclwh13_1*npx*pz))+(((-1.0)*gclwh0_0*pp*pz*r21))+(((2.0)*gclwh5_1*npz*pp*pz))+(((-5.9591475e-7)*gclwh0_1*r21))+(((2.0)*gclwh0_0*npy*(pz*pz)))+(((-0.01010025)*gclwh15_0*pz*r21))+(((-1.1110275e-5)*gclwh5_0*r22))+(((-0.201)*gclwh9_0*pz*rxp1_2))+((gclwh15_11*pp*r21))+(((2.0)*gclwh5_11*npz*pz))+(((0.000118)*gclwh5_1*npz*pz))+(((-2.0)*gclwh15_1*npy*pp*pz))+(((-0.0022)*gclwh13_0*npx*pz))+(((-1.0)*gclwh5_11*pp*r22))+(((-5.9591475e-7)*gclwh5_1*r22))+(((0.201)*gclwh9_11*rxp1_2))+(((0.201)*gclwh11_11*rxp2_2))+(((-1.1110275e-5)*gclwh0_0*r21))+(((2.0)*gclwh15_0*npy*(pz*pz)))+(((5.9591475e-7)*gclwh15_1*r21))+(((5.9591475e-7)*gclwh13_1*r20))+(((-0.01004125)*gclwh0_1*pp*r21))+(((-0.201)*pz))+(((2.0)*gclwh2_1*npx*pp*pz))+(((0.1016)*gclwh5_9*pp*r22))+(((-2.0)*gclwh0_1*npy*pp*pz))+(((-0.000118)*gclwh0_1*npy*pz))+(((0.0011)*gclwh0_0*pp*r21))+(((-2.0)*gclwh2_0*npx*(pz*pz)))+(((1.1110275e-5)*gclwh2_0*r20))+(((-0.0011)*gclwh2_0*pp*r20))+(((0.0002211)*gclwh11_0*rxp2_2))+(((0.01015925)*gclwh13_1*pp*r20))+(((-0.0010261854)*gclwh15_9*r21))+(((-2.0)*gclwh5_0*npz*(pz*pz)))+(((0.01010025)*gclwh0_0*pz*r21))+(((-0.01010025)*gclwh5_11*r22))+(((-0.1016)*gclwh13_9*pp*r20))+(((1.1110275e-5)*gclwh13_0*r20))+(((0.201)*gclwh11_1*pp*rxp2_2))+(((0.201)*gclwh7_11*rxp0_2))+(((-1.0)*gclwh13_0*pp*pz*r20))+(((-0.0010261854)*gclwh13_9*r20))+(((0.01015925)*gclwh15_1*pp*r21))+(((0.0011)*gclwh15_0*pp*r21))+(((0.201)*gclwh7_1*pp*rxp0_2))+((gclwh0_1*r21*(pp*pp)))+(((-1.0)*gclwh5_1*r22*(pp*pp)))+(((-0.01010025)*gclwh13_0*pz*r20))+(((-0.1016)*gclwh15_9*pp*r21))+(((0.0002211)*gclwh7_0*rxp0_2))+(((1.1859e-5)*gclwh11_1*rxp2_2))+(((0.01010025)*gclwh5_0*pz*r22))+(((0.0002211)*gclwh9_0*rxp1_2))+((gclwh13_11*pp*r20))+(((0.0011)*gclwh13_0*pp*r20))+(((-0.0022)*gclwh0_0*npy*pz))+(((0.201)*gclwh9_1*pp*rxp1_2))+(((-0.2032)*gclwh5_9*npz*pz))+(((-1.0)*gclwh15_0*pp*pz*r21))+(((0.01010025)*gclwh13_11*r20))+(((-0.01010025)*gclwh2_0*pz*r20))+(((-0.0011)*gclwh5_0*pp*r22))+(((1.1859e-5)*gclwh9_1*rxp1_2))+(((-0.201)*gclwh7_0*pz*rxp0_2))+(((-2.0)*gclwh13_1*npx*pp*pz))+((gclwh15_1*r21*(pp*pp)))+(((-0.201)*gclwh11_0*pz*rxp2_2))+(((1.1110275e-5)*gclwh15_0*r21))+(((0.01004125)*gclwh2_1*pp*r20)));
op[23]=((((-1.0)*x325))+x316+(((-1.0)*x308)));
op[24]=((((2.7916)*gclwh8_12*x75))+(((-1.0)*x103*x98))+(((2.7916)*gclwh10_12*x74))+(((-1.0)*x321))+x328+(((-0.01409792895)*x103))+(((-1.3958)*gclwh10_12*x72))+(((-0.01409792895)*x88))+(((2.7916)*gclwh6_12*x70))+(((-1.0)*x88*x98))+(((-1.0)*gclwh10_12*x84)));
op[25]=x307;
op[26]=((-0.2801592)+(((0.0805608)*gclwh4_14*rxp2_2))+(((-0.0805608)*x142))+(((-0.0805608)*gclwh12_14*rxp0_2)));
op[27]=((((0.280998)*x119))+(((-1.398)*pp*x77))+(((-1.398)*gclwh6_2*x117))+(((-8.0)*gclwh6_8*x70))+(((2.796)*gclwh6_2*x70))+(((0.040401)*x153))+(((-0.804)*x108))+(((2.796)*gclwh8_2*x75))+(((-1.398)*gclwh10_2*x72))+((x102*x93))+((x102*x94))+(((-0.0141201495)*x77))+(((2.796)*gclwh10_2*x74))+(((-0.0141201495)*x146))+(((-1.0)*gclwh12_8*x158))+(((0.040401)*x94))+(((0.040401)*x93))+((x156*x72))+(((-8.0)*gclwh10_8*x74))+(((-8.0)*gclwh8_8*x75))+(((-0.280998)*x141))+(((0.804)*x80))+(((-0.0141201495)*x122))+(((0.280998)*x126)));
op[28]=((((2.222055e-5)*x88))+((x103*x167))+(((2.222055e-5)*x92))+(((0.0022)*gclwh10_12*x72))+(((-1.0)*x328))+(((-0.0044)*gclwh6_12*x70))+((x167*x88))+x321+(((-0.0044)*gclwh8_12*x75))+(((-0.0044)*gclwh10_12*x74))+(((2.222055e-5)*x103)));
op[29]=(x214+(((-1.0)*x305)));
op[30]=x323;
op[31]=((((2.7916)*gclwh7_13*x70))+(((-0.01409792895)*x79))+(((-1.0)*gclwh11_13*x84))+x327+(((-1.0)*x79*x98))+(((-1.0)*x319))+(((-1.3958)*gclwh11_13*x72))+(((-0.01409792895)*x134))+(((2.7916)*gclwh9_13*x75))+(((2.7916)*gclwh11_13*x74))+(((-1.0)*x134*x98)));
op[32]=((((-1.0)*x160*x95))+(((0.280998)*x111))+(((-1.398)*gclwh9_0*x95))+(((-0.0141201495)*x130))+(((-0.0141201495)*x109))+(((-1.398)*gclwh7_0*x117))+(((-0.280998)*x106))+(((-1.0)*x102*x85))+(((0.280998)*x161))+(((-1.0)*x112*x72))+(((-0.0141201495)*x140))+(((-0.040401)*x107))+(((8.0)*gclwh7_11*x70))+(((0.804)*x101))+(((2.796)*gclwh9_0*x75))+(((2.796)*gclwh11_0*x74))+(((8.0)*gclwh11_11*x74))+((gclwh13_11*x158))+(((2.796)*gclwh7_0*x70))+(((-0.040401)*x99))+(((8.0)*gclwh9_11*x75))+(((-0.040401)*x85))+(((-0.804)*x151))+(((-1.398)*gclwh11_0*x72)));
IkReal x333=pz*pz;
IkReal x334=pp*pp;
IkReal x335=(npx*pz);
IkReal x336=((2.0)*pp);
IkReal x337=(pp*r22);
IkReal x338=((0.0141201495)*r22);
IkReal x339=((0.280998)*rxp1_2);
IkReal x340=(npz*pz);
IkReal x341=(gclwh4_14*r22);
IkReal x342=(gclwh8_2*r21);
IkReal x343=(gclwh9_1*r21);
IkReal x344=(gclwh4_3*rxp2_2);
IkReal x345=(gclwh4_8*rxp2_2);
IkReal x346=(pp*r20);
IkReal x347=((0.0202005)*r21);
IkReal x348=((0.0402804)*rxp1_2);
IkReal x349=((0.0201402)*rxp0_2);
IkReal x350=(npy*pz);
IkReal x351=(gclwh15_15*r21);
IkReal x352=(gclwh14_8*r21);
IkReal x353=((0.201)*rxp1_2);
IkReal x354=(gclwh7_11*r20);
IkReal x355=((4.0)*gclwh15_11);
IkReal x356=((0.0201402)*rxp1_2);
IkReal x357=(gclwh5_9*rxp2_2);
IkReal x358=((0.0141201495)*r21);
IkReal x359=((0.2004)*gclwh12_14);
IkReal x360=((4.0)*gclwh4_8);
IkReal x361=((0.00706007475)*r21);
IkReal x362=(gclwh13_11*r20);
IkReal x363=((0.00101204505)*r22);
IkReal x364=((0.01010025)*r20);
IkReal x365=(gclwh6_12*rxp0_2);
IkReal x366=(gclwh8_8*r21);
IkReal x367=((0.4008)*gclwh4_14);
IkReal x368=(pp*r21);
IkReal x369=((0.0201402)*rxp2_2);
IkReal x370=(gclwh14_2*rxp1_2);
IkReal x371=(gclwh9_0*pz);
IkReal x372=(gclwh9_0*r21);
IkReal x373=((4.0)*gclwh12_8);
IkReal x374=((0.2004)*gclwh5_15);
IkReal x375=(gclwh15_11*r21);
IkReal x376=((0.0070378542)*r21);
IkReal x377=(gclwh5_0*rxp2_2);
IkReal x378=(gclwh15_0*rxp1_2);
IkReal x379=(gclwh9_11*r21);
IkReal x380=(gclwh13_9*rxp0_2);
IkReal x381=((0.2004)*gclwh14_14);
IkReal x382=(gclwh9_13*rxp1_2);
IkReal x383=((0.4008)*gclwh5_15);
IkReal x384=(gclwh11_11*r22);
IkReal x385=(gclwh11_1*r22);
IkReal x386=(gclwh12_10*rxp0_2);
IkReal x387=((0.402)*rxp1_2);
IkReal x388=((1.1859e-5)*rxp1_2);
IkReal x389=((0.280998)*rxp2_2);
IkReal x390=(gclwh13_15*rxp0_2);
IkReal x391=(gclwh4_8*r22);
IkReal x392=((0.0020240901)*r22);
IkReal x393=((0.0978878442)*rxp1_2);
IkReal x394=((0.00706007475)*r22);
IkReal x395=((0.0020240901)*r20);
IkReal x396=((0.4008)*gclwh12_14);
IkReal x397=(gclwh6_2*r20);
IkReal x398=(gclwh6_8*rxp0_2);
IkReal x399=(gclwh5_15*rxp2_2);
IkReal x400=((0.0040481802)*r22);
IkReal x401=((0.2004)*gclwh13_15);
IkReal x402=(gclwh12_3*rxp0_2);
IkReal x403=(gclwh7_11*rxp0_2);
IkReal x404=((0.00101204505)*r20);
IkReal x405=((0.0141201495)*r20);
IkReal x406=((0.201)*pp);
IkReal x407=(gclwh7_0*r20);
IkReal x408=(gclwh5_1*rxp2_2);
IkReal x409=((0.00706007475)*r20);
IkReal x410=((0.4008)*gclwh14_14);
IkReal x411=(gclwh15_9*rxp1_2);
IkReal x412=(gclwh7_0*pz);
IkReal x413=((0.280998)*rxp0_2);
IkReal x414=(gclwh12_8*r20);
IkReal x415=(gclwh11_11*rxp2_2);
IkReal x416=((0.201)*rxp0_2);
IkReal x417=(gclwh7_13*rxp0_2);
IkReal x418=((0.4008)*gclwh11_15);
IkReal x419=(gclwh4_2*rxp2_2);
IkReal x420=(gclwh7_9*r20);
IkReal x421=(gclwh10_2*r22);
IkReal x422=(gclwh4_10*rxp2_2);
IkReal x423=((0.804)*rxp1_2);
IkReal x424=((0.2004)*gclwh4_14);
IkReal x425=((0.0070378542)*r22);
IkReal x426=(gclwh14_10*rxp1_2);
IkReal x427=((0.00101204505)*r21);
IkReal x428=(gclwh10_8*r22);
IkReal x429=((0.140499)*rxp2_2);
IkReal x430=((0.4008)*gclwh13_15);
IkReal x431=((0.0002211)*rxp0_2);
IkReal x432=((0.2004)*gclwh11_15);
IkReal x433=(gclwh11_15*rxp2_2);
IkReal x434=(gclwh13_1*rxp0_2);
IkReal x435=((0.01010025)*pz);
IkReal x436=(gclwh6_8*r20);
IkReal x437=((0.0070378542)*r20);
IkReal x438=((0.201)*pz);
IkReal x439=(gclwh8_12*rxp1_2);
IkReal x440=(gclwh11_0*r22);
IkReal x441=((0.0040481802)*r20);
IkReal x442=(gclwh7_1*r20);
IkReal x443=(gclwh5_11*r22);
IkReal x444=((0.1402779)*rxp0_2);
IkReal x445=((0.2805558)*rxp2_2);
IkReal x446=(gclwh5_11*rxp2_2);
IkReal x447=(gclwh14_14*r21);
IkReal x448=(gclwh6_2*pz);
IkReal x449=(gclwh10_8*rxp2_2);
IkReal x450=((0.402)*rxp0_2);
IkReal x451=((4.0)*gclwh13_11);
IkReal x452=((4.0)*gclwh5_11);
IkReal x453=((0.0004422)*rxp2_2);
IkReal x454=((0.0202005)*x391);
IkReal x455=((0.402)*x398);
IkReal x456=(gclwh14_8*x347);
IkReal x457=((0.0202005)*x414);
IkReal x458=((0.402)*x449);
IkReal x459=(gclwh8_8*x387);
IkReal x460=((0.0202005)*x362);
IkReal x461=((0.402)*x403);
IkReal x462=(gclwh15_11*x347);
IkReal x463=(gclwh9_11*x387);
IkReal x464=((0.402)*x415);
IkReal x465=((0.0202005)*x443);
IkReal x466=(gclwh6_5*x404);
IkReal x467=(gclwh14_14*x356);
IkReal x468=(gclwh10_5*x363);
IkReal x469=(gclwh8_5*x427);
IkReal x470=(gclwh12_14*x349);
IkReal x471=(gclwh4_14*x369);
IkReal x472=(gclwh12_8*x416);
IkReal x473=(gclwh14_8*x353);
IkReal x474=((0.201)*x345);
IkReal x475=((0.01010025)*x366);
IkReal x476=((0.01010025)*x428);
IkReal x477=(gclwh6_8*x364);
IkReal x478=(gclwh15_11*x387);
IkReal x479=(gclwh13_11*x450);
IkReal x480=((0.0202005)*x384);
IkReal x481=((0.0202005)*x354);
IkReal x482=(gclwh9_11*x347);
IkReal x483=((0.402)*x446);
IkReal x484=((0.201)*x446);
IkReal x485=((0.01010025)*x354);
IkReal x486=((0.01010025)*x384);
IkReal x487=((0.01010025)*x379);
IkReal x488=(gclwh13_11*x416);
IkReal x489=(gclwh15_11*x353);
IkReal x490=(gclwh13_15*x349);
IkReal x491=(gclwh9_7*x427);
IkReal x492=(gclwh7_7*x404);
IkReal x493=(gclwh15_15*x356);
IkReal x494=(gclwh11_7*x363);
IkReal x495=(gclwh5_15*x369);
IkReal x496=(gclwh11_15*x363);
IkReal x497=((0.00101204505)*x341);
IkReal x498=(gclwh6_5*x349);
IkReal x499=(gclwh8_5*x356);
IkReal x500=(gclwh10_5*x369);
IkReal x501=(gclwh12_14*x404);
IkReal x502=(gclwh14_14*x427);
IkReal x503=((2.0)*x333);
IkReal x504=((1.0)*x334);
IkReal x505=((4.0)*gclwh14_8*x350);
IkReal x506=(x336*x391);
IkReal x507=(x335*x373);
IkReal x508=(x340*x360);
IkReal x509=(x336*x414);
IkReal x510=(x336*x352);
IkReal x511=(x336*x375);
IkReal x512=(x340*x452);
IkReal x513=(x336*x362);
IkReal x514=(x336*x443);
IkReal x515=(x350*x355);
IkReal x516=(x335*x451);
IkReal x517=((0.1002)*gclwh8_5*x368);
IkReal x518=((0.1002)*gclwh10_5*x337);
IkReal x519=((0.1002)*gclwh6_5*x346);
IkReal x520=((0.2004)*gclwh8_5*x350);
IkReal x521=((0.2004)*gclwh10_5*x340);
IkReal x522=((0.2004)*gclwh6_5*x335);
IkReal x523=(x346*x448);
IkReal x524=(x402*x406);
IkReal x525=(gclwh14_3*pp*x353);
IkReal x526=(x421*x435);
IkReal x527=(gclwh10_2*pz*x337);
IkReal x528=(x419*x438);
IkReal x529=(x364*x448);
IkReal x530=(pp*pz*x342);
IkReal x531=((2.0)*gclwh10_8*x340);
IkReal x532=(x342*x435);
IkReal x533=((2.0)*gclwh6_8*x335);
IkReal x534=((2.0)*gclwh8_8*x350);
IkReal x535=(x344*x406);
IkReal x536=(gclwh12_2*pz*x416);
IkReal x537=(gclwh14_2*pz*x353);
IkReal x538=((4.0)*gclwh7_11*x335);
IkReal x539=((4.0)*gclwh9_11*x350);
IkReal x540=((4.0)*gclwh11_11*x340);
IkReal x541=(x336*x379);
IkReal x542=(x336*x354);
IkReal x543=(x336*x384);
IkReal x544=(x346*x412);
IkReal x545=(x377*x438);
IkReal x546=(gclwh11_0*pz*x337);
IkReal x547=(x435*x440);
IkReal x548=(x406*x434);
IkReal x549=(x364*x412);
IkReal x550=((0.01010025)*r21*x371);
IkReal x551=(x368*x371);
IkReal x552=(gclwh15_1*pp*x353);
IkReal x553=(x406*x408);
IkReal x554=((2.0)*gclwh9_11*x350);
IkReal x555=((2.0)*gclwh7_11*x335);
IkReal x556=(gclwh15_0*pz*x353);
IkReal x557=((2.0)*gclwh11_11*x340);
IkReal x558=(gclwh13_0*pz*x416);
IkReal x559=((0.1002)*gclwh7_7*x346);
IkReal x560=(x340*x432);
IkReal x561=((0.1002)*gclwh11_7*x337);
IkReal x562=((0.1002)*gclwh9_7*x368);
IkReal x563=((0.1002)*gclwh11_15*x337);
IkReal x564=((0.2004)*gclwh9_7*x350);
IkReal x565=((0.2004)*gclwh11_7*x340);
IkReal x566=((0.2004)*gclwh7_7*x335);
IkReal x567=(x350*x381);
IkReal x568=(x335*x359);
IkReal x569=((0.1002)*gclwh4_14*x337);
IkReal x570=(x340*x424);
IkReal x571=((0.1002)*gclwh14_14*x368);
IkReal x572=((0.1002)*gclwh12_14*x346);
IkReal x573=(gclwh6_2*npx*x503);
IkReal x574=(gclwh10_2*npz*x503);
IkReal x575=(gclwh8_2*npy*x503);
IkReal x576=(gclwh9_1*x336*x350);
IkReal x577=(gclwh11_1*x336*x340);
IkReal x578=(gclwh7_1*x335*x336);
IkReal x579=(gclwh7_0*npx*x503);
IkReal x580=(x343*x504);
IkReal x581=(x442*x504);
IkReal x582=(x385*x504);
IkReal x583=(gclwh11_0*npz*x503);
IkReal x584=(gclwh9_0*npy*x503);
IkReal x585=(x467+x470);
IkReal x586=(x498+x499+x500);
IkReal x587=(x496+x495+x563);
IkReal x588=(x493+x490+x560);
IkReal x589=(x485+x484+x487+x486);
IkReal x590=(x566+x564+x565);
IkReal x591=(x474+x475+x476+x477);
IkReal x592=(x522+x520+x521);
IkReal x593=((((0.0020240901)*x341))+((x337*x424))+((x350*x410))+((x335*x396)));
IkReal x594=(((gclwh5_15*x392))+((x335*x430))+((x337*x374))+(((0.4008)*gclwh15_15*x350)));
IkReal x595=(x497+x568+x569+x567);
IkReal x596=(x454+x505+x506+x507);
IkReal x597=(x465+x516+x515+x514);
IkReal x598=(((x340*x367))+(((0.0020240901)*x447))+((x346*x359))+((x368*x381))+((gclwh12_14*x395)));
IkReal x599=(x489+x488+x557+x555+x554);
IkReal x600=(x478+x479+x540+x539+x538);
IkReal x601=(x472+x473+x531+x533+x534);
IkReal x602=(x501+x502+x571+x570+x572);
IkReal x603=((((-1.0)*x337*x432))+((gclwh15_15*x348))+(((-0.0402804)*x399))+(((0.0402804)*x390))+((x340*x418))+(((-1.0)*gclwh11_15*x392)));
IkReal x604=((((0.0020240901)*x351))+((x340*x383))+((gclwh13_15*x395))+((x346*x401))+(((0.0402804)*x433))+(((0.2004)*pp*x351)));
IkReal x605=(x469+x468+x466+x519+x518+x517);
IkReal x606=(x492+x491+x494+x559+x562+x561);
IkReal x607=(x481+x480+x483+x482+x541+x542+x543);
IkReal x608=(x463+x462+x461+x460+x464+x513+x512+x511);
IkReal x609=(x458+x459+x456+x457+x455+x508+x509+x510);
IkReal x610=(x535+x537+x536+x575+x574+x573);
IkReal x611=((((-1.0)*x593))+x598);
IkReal x612=((((-1.0)*x594))+x604);
IkReal x613=(x530+x532+x523+x526+x527+x524+x525+x528+x529);
IkReal x614=(x558+x553+x556+x579+x580+x581+x582+x583+x584);
IkReal x615=(x552+x551+x550+x544+x545+x546+x547+x548+x549+x578+x577+x576);
op[33]=((-0.2801592)+((x337*x418))+(((-0.0805608)*x390))+(((0.0805608)*x399))+(((-0.0805608)*gclwh15_15*rxp1_2))+(((-0.8016)*gclwh11_15*x340))+((gclwh11_15*x400)));
op[34]=x603;
op[35]=((((0.0022)*gclwh9_13*x368))+(((-0.0044)*gclwh11_13*x340))+(((2.222055e-5)*gclwh11_13*r22))+(((2.222055e-5)*gclwh9_13*r21))+(((0.0022)*gclwh7_13*x346))+(((-0.0044)*gclwh7_13*x335))+x600+(((-1.0)*x607))+(((2.222055e-5)*gclwh7_13*r20))+(((-0.0044)*gclwh9_13*x350))+(((0.0022)*gclwh11_13*x337)));
op[36]=((-0.9942089)+(((-0.2805558)*x365))+(((-1.0)*x596))+(((-1.0)*gclwh10_12*x445))+(((-0.2805558)*x439))+x609);
op[37]=((((-1.0)*x598))+x593);
op[38]=((((-0.8016)*gclwh14_14*x350))+(((-0.0040481802)*x341))+((x368*x410))+((x346*x396))+(((0.0040481802)*x447))+((gclwh12_14*x441))+(((-0.8016)*gclwh12_14*x335))+(((-1.0)*x337*x367))+(((0.8016)*gclwh4_14*x340)));
op[39]=((-0.0370894)+(((4.0)*pp*x352))+(((-2.796)*gclwh1_2*x350))+(((-1.0)*gclwh14_2*x358))+((gclwh4_2*x338))+(((-1.398)*gclwh12_2*x346))+(((0.040401)*x414))+(((-1.0)*gclwh12_2*x405))+(((-2.796)*gclwh4_2*x340))+(((1.398)*gclwh1_2*x368))+((gclwh8_8*x423))+(((2.796)*gclwh3_2*x335))+(((-1.0)*gclwh1_2*x358))+(((-1.398)*gclwh3_2*x346))+(((-0.040401)*x391))+(((2.796)*gclwh12_2*x335))+((x346*x373))+(((0.804)*x449))+(((8.0)*gclwh4_8*x340))+(((-1.0)*gclwh10_2*x389))+(((-8.0)*gclwh12_8*x335))+(((-1.0)*gclwh6_2*x413))+(((-1.0)*gclwh8_2*x339))+(((-8.0)*gclwh14_8*x350))+(((1.398)*gclwh4_2*x337))+(((0.040401)*x352))+(((2.796)*gclwh14_2*x350))+(((-1.0)*x337*x360))+(((0.804)*x398))+((gclwh3_2*x405))+(((-1.398)*gclwh14_2*x368)));
op[40]=((0.0200825)+((gclwh10_12*x453))+(((0.0004422)*x439))+(((0.0004422)*x365))+x596+(((-1.0)*x609)));
op[41]=x611;
op[42]=(x594+(((-1.0)*x604)));
op[43]=((-0.9942089)+((gclwh11_13*x445))+(((0.2805558)*x417))+(((0.2805558)*x382))+x597+(((-1.0)*x608)));
op[44]=((0.0370894)+(((-1.398)*gclwh2_0*x346))+(((-0.040401)*x443))+((x346*x451))+((gclwh7_0*x413))+(((-8.0)*gclwh15_11*x350))+(((0.804)*x415))+(((1.398)*gclwh15_0*x368))+(((-1.0)*gclwh0_0*x358))+(((0.804)*x403))+((x355*x368))+(((2.796)*gclwh2_0*x335))+(((-2.796)*gclwh15_0*x350))+(((-2.796)*gclwh13_0*x335))+(((-2.796)*gclwh0_0*x350))+((gclwh13_0*x405))+(((8.0)*gclwh5_11*x340))+(((0.040401)*x375))+(((-1.0)*x337*x452))+((gclwh15_0*x358))+(((0.040401)*x362))+(((-1.0)*gclwh5_0*x338))+((gclwh9_0*x339))+(((1.398)*gclwh0_0*x368))+((gclwh9_11*x423))+((gclwh2_0*x405))+(((1.398)*gclwh13_0*x346))+(((2.796)*gclwh5_0*x340))+((gclwh11_0*x389))+(((-8.0)*gclwh13_11*x335))+(((-1.398)*gclwh5_0*x337)));
op[45]=((((-0.0040481802)*x351))+(((-0.0805608)*x433))+(((-1.0)*x346*x430))+(((-0.8016)*gclwh5_15*x340))+((x337*x383))+((gclwh5_15*x400))+(((-1.0)*gclwh13_15*x441))+(((0.8016)*gclwh15_15*x350))+(((0.8016)*gclwh13_15*x335))+(((-0.4008)*pp*x351)));
op[46]=x612;
op[47]=((0.0200825)+(((-1.0)*x597))+(((-1.0)*gclwh11_13*x453))+(((-0.0004422)*x382))+(((-0.0004422)*x417))+x608);
op[48]=((-0.13985916)+(((-1.0)*x592))+x471+x605+(((-1.0)*x585)));
op[49]=((((-0.1200774)*x422))+(((0.0978878442)*x344))+(((-0.6979)*gclwh6_2*x346))+(((0.1402779)*x370))+(((-0.007048964475)*x397))+(((1.3958)*gclwh6_2*x335))+(((-0.007048964475)*x421))+(((1.3958)*gclwh8_2*x350))+((gclwh6_8*x346))+(((-0.0978878442)*x402))+x591+(((-1.0)*x610))+(((1.3958)*gclwh10_2*x340))+x613+(((-1.0)*gclwh14_3*x393))+(((-1.0)*x601))+(((-0.6979)*pp*x342))+(((0.1200774)*x426))+((gclwh10_8*x337))+((pp*x366))+(((-0.1402779)*x419))+(((0.1200774)*x386))+(((-0.6979)*gclwh10_2*x337))+((gclwh12_2*x444))+(((-0.007048964475)*x342)));
op[50]=(((gclwh8_12*x361))+(((4.0)*gclwh6_8*x335))+(((-1.0)*x336*x436))+(((-1.0)*gclwh8_8*x347))+(((4.0)*gclwh8_8*x350))+(((-1.398)*gclwh10_12*x340))+(((-0.1400568)*x386))+(((-1.398)*gclwh6_12*x335))+(((0.1400568)*x422))+(((-1.398)*gclwh8_12*x350))+((gclwh12_8*x450))+(((0.699)*gclwh8_12*x368))+(((-0.0202005)*x436))+((gclwh6_12*x409))+(((-0.0202005)*x428))+(((-0.402)*x345))+((gclwh14_8*x387))+((gclwh10_12*x394))+(((-1.0)*x336*x366))+(((0.699)*gclwh10_12*x337))+(((0.699)*gclwh6_12*x346))+(((4.0)*gclwh10_8*x340))+(((-0.1400568)*x426))+(((-1.0)*x336*x428)));
op[51]=((((-0.0402804)*gclwh12_14*rxp0_2))+(((0.0402804)*gclwh4_14*rxp2_2))+(((-1.0)*gclwh14_14*x348)));
op[52]=((0.00022044)+(((-1.0)*x471))+(((-1.0)*x592))+x585+x605);
op[53]=((((-0.0022)*gclwh8_2*x350))+(((-0.0022)*gclwh6_2*x335))+(((-0.0199794)*x386))+(((0.0011)*gclwh10_2*x337))+(((-1.0)*gclwh12_2*x431))+(((1.1110275e-5)*x421))+(((-1.0)*pp*x366))+((gclwh14_3*x388))+(((0.0011)*pp*x342))+(((-1.0)*x591))+(((-0.0002211)*x370))+(((-1.0)*gclwh10_8*x337))+(((-0.0199794)*x426))+(((-1.1859e-5)*x344))+(((-1.0)*x610))+(((0.0011)*gclwh6_2*x346))+x601+x613+(((-1.0)*gclwh6_8*x346))+(((1.1110275e-5)*x397))+(((0.0002211)*x419))+(((-0.0022)*gclwh10_2*x340))+(((0.0199794)*x422))+(((1.1859e-5)*x402))+(((1.1110275e-5)*x342)));
op[54]=((((-0.1402779)*x377))+(((0.00491886417105)*x442))+(((0.1604784)*x357))+(((0.00491886417105)*x385))+(((-0.007048964475)*x440))+(((-1.0)*gclwh11_11*x337))+(((1.3958)*gclwh7_0*x335))+(((-1.0)*gclwh7_11*x346))+(((0.1402779)*x378))+(((0.7984)*gclwh7_9*x346))+(((1.3958)*gclwh9_0*x350))+(((0.0080640396)*x420))+(((-1.0)*gclwh9_11*x368))+(((-0.007048964475)*x372))+(((1.3958)*gclwh11_0*x340))+(((-0.6979)*gclwh11_0*x337))+(((-0.6979)*gclwh9_0*x368))+(((0.47690395)*gclwh7_1*x346))+(((-0.9740084)*gclwh11_1*x340))+(((0.47690395)*pp*x343))+(((-0.1604784)*x380))+(((0.47690395)*gclwh11_1*x337))+(((0.0978878442)*x408))+x599+(((-0.9740084)*gclwh9_1*x350))+(((-1.5968)*gclwh7_9*x335))+(((-1.0)*x614))+x615+(((-0.0978878442)*x434))+((gclwh13_0*x444))+(((-0.007048964475)*x407))+(((-1.0)*x589))+(((0.00491886417105)*x343))+(((-0.1604784)*x411))+(((-0.6979)*gclwh7_0*x346))+(((-0.9740084)*gclwh7_1*x335))+(((-1.0)*gclwh15_1*x393)));
op[55]=((-0.13985916)+(((-1.0)*x590))+x587+x606+(((-1.0)*x588)));
op[56]=x603;
op[57]=((((-0.1400568)*x411))+((gclwh9_13*x361))+(((-1.398)*gclwh7_13*x335))+(((0.699)*gclwh11_13*x337))+(((0.6968)*gclwh7_9*x346))+(((-0.1400568)*x380))+(((-1.398)*gclwh11_13*x340))+((gclwh11_13*x394))+(((-1.3936)*gclwh7_9*x335))+(((-1.398)*gclwh9_13*x350))+(((0.699)*gclwh7_13*x346))+x600+(((-1.0)*x607))+(((0.0070378542)*x420))+((gclwh7_13*x409))+(((0.699)*gclwh9_13*x368))+(((0.1400568)*x357)));
op[58]=((((-0.0022)*gclwh7_0*x335))+((gclwh15_1*x388))+(((0.0011)*gclwh7_0*x346))+(((-5.9591475e-7)*x385))+((gclwh9_11*x368))+(((-5.9591475e-7)*x343))+(((-0.0204216)*x411))+(((-0.01015925)*pp*x343))+(((0.1016)*gclwh7_9*x346))+(((-1.1859e-5)*x408))+(((0.0010261854)*x420))+(((-0.01015925)*gclwh11_1*x337))+(((1.1110275e-5)*x440))+(((0.0204216)*x357))+(((-1.0)*x599))+(((-0.01015925)*gclwh7_1*x346))+((gclwh7_11*x346))+(((-1.0)*gclwh13_0*x431))+(((-0.0002211)*x378))+(((1.1110275e-5)*x372))+(((1.1110275e-5)*x407))+x589+(((-0.2032)*gclwh7_9*x335))+(((-1.0)*x614))+(((0.000118)*gclwh7_1*x335))+x615+(((-0.0204216)*x380))+(((1.1859e-5)*x434))+(((0.0011)*gclwh11_0*x337))+(((-0.0022)*gclwh11_0*x340))+(((-5.9591475e-7)*x442))+((gclwh11_11*x337))+(((-0.0022)*gclwh9_0*x350))+(((0.000118)*gclwh11_1*x340))+(((0.0011)*gclwh9_0*x368))+(((0.000118)*gclwh9_1*x350))+(((0.0002211)*x377)));
op[59]=((0.00022044)+(((-1.0)*x590))+x588+x606+(((-1.0)*x587)));
op[60]=((((-1.0)*x595))+x586+x602);
op[61]=((0.47702437)+(((-0.00603388935)*gclwh12_10*r20))+(((0.47690395)*gclwh12_3*pp*r20))+(((0.5974)*gclwh4_10*pp*r22))+(((-0.007048964475)*gclwh14_2*r21))+(((0.00491886417105)*gclwh14_3*r21))+((gclwh14_2*pp*pz*r21))+(((-1.0)*gclwh3_3*r20*(pp*pp)))+(((2.0)*gclwh1_2*npy*(pz*pz)))+(((-0.00603388935)*gclwh14_10*r21))+(((-2.0)*gclwh4_3*npz*pp*pz))+(((1.3958)*gclwh14_2*npy*pz))+(((0.00491886417105)*gclwh1_3*r21))+(((-0.5974)*gclwh12_10*pp*r20))+(((0.01010025)*gclwh12_8*r20))+(((0.01010025)*gclwh1_2*pz*r21))+(((-0.1402779)*gclwh8_2*rxp1_2))+(((-0.1402779)*gclwh6_2*rxp0_2))+(((0.6979)*gclwh1_2*pp*r21))+(((1.1948)*gclwh12_10*npx*pz))+(((0.6979)*gclwh4_2*pp*r22))+(((-1.0)*gclwh1_2*pp*pz*r21))+(((0.00491886417105)*gclwh12_3*r20))+(((0.201)*gclwh10_8*rxp2_2))+(((-0.6979)*gclwh14_2*pp*r21))+(((0.9740084)*gclwh1_3*npy*pz))+(((0.201)*gclwh8_2*pz*rxp1_2))+(((-2.0)*gclwh14_2*npy*(pz*pz)))+(((-2.0)*gclwh14_8*npy*pz))+(((0.01010025)*gclwh14_8*r21))+(((-0.6979)*gclwh3_2*pp*r20))+(((0.01010025)*gclwh14_2*pz*r21))+(((-0.00491886417105)*gclwh3_3*r20))+(((-2.0)*gclwh12_2*npx*(pz*pz)))+(((-1.0)*gclwh12_3*r20*(pp*pp)))+(((-2.0)*gclwh3_2*npx*(pz*pz)))+(((-0.01010025)*gclwh4_8*r22))+(((-0.49710445)*gclwh1_3*pp*r21))+((gclwh3_2*pp*pz*r20))+(((-2.0)*gclwh1_3*npy*pp*pz))+(((-1.3958)*gclwh4_2*npz*pz))+(((-0.1402779)*gclwh10_2*rxp2_2))+((gclwh14_8*pp*r21))+(((0.007048964475)*gclwh3_2*r20))+(((0.47690395)*gclwh14_3*pp*r21))+(((0.9740084)*gclwh4_3*npz*pz))+(((0.201)*gclwh8_8*rxp1_2))+((gclwh1_3*r21*(pp*pp)))+(((0.007048964475)*gclwh4_2*r22))+(((-0.007048964475)*gclwh1_2*r21))+(((-0.201)*pz))+(((-0.007048964475)*gclwh12_2*r20))+(((-0.9740084)*gclwh14_3*npy*pz))+(((0.00603388935)*gclwh4_10*r22))+((gclwh12_8*pp*r20))+(((2.0)*gclwh3_3*npx*pp*pz))+(((-0.00491886417105)*gclwh4_3*r22))+(((0.201)*gclwh10_2*pz*rxp2_2))+(((-1.1948)*gclwh4_10*npz*pz))+(((0.201)*gclwh6_8*rxp0_2))+(((-0.01010025)*gclwh4_2*pz*r22))+(((0.49710445)*gclwh3_3*pp*r20))+(((-0.9740084)*gclwh12_3*npx*pz))+(((-1.0)*gclwh4_8*pp*r22))+(((2.0)*gclwh14_3*npy*pp*pz))+(((-0.47690395)*gclwh4_3*pp*r22))+((gclwh4_3*r22*(pp*pp)))+(((0.01010025)*gclwh12_2*pz*r20))+(((2.0)*gclwh4_2*npz*(pz*pz)))+(((1.1948)*gclwh14_10*npy*pz))+(((-0.5974)*gclwh14_10*pp*r21))+(((1.3958)*gclwh12_2*npx*pz))+(((-1.0)*gclwh14_3*r21*(pp*pp)))+(((2.0)*gclwh4_8*npz*pz))+(((-1.3958)*gclwh1_2*npy*pz))+(((1.3958)*gclwh3_2*npx*pz))+(((-2.0)*gclwh12_8*npx*pz))+(((-0.01010025)*gclwh3_2*pz*r20))+(((0.201)*gclwh6_2*pz*rxp0_2))+(((2.0)*gclwh12_3*npx*pp*pz))+(((-1.0)*gclwh4_2*pp*pz*r22))+(((-0.9740084)*gclwh3_3*npx*pz))+((gclwh12_2*pp*pz*r20))+(((-0.6979)*gclwh12_2*pp*r20)));
op[62]=((0.02161546)+(((-1.0)*gclwh4_10*x425))+((gclwh10_12*x429))+(((0.140499)*x439))+x596+(((-1.3936)*gclwh14_10*x350))+(((-0.6968)*gclwh4_10*x337))+(((0.6968)*gclwh14_10*x368))+(((-1.3936)*gclwh12_10*x335))+(((-1.0)*x609))+((gclwh14_10*x376))+(((0.6968)*gclwh12_10*x346))+(((0.140499)*x365))+(((1.3936)*gclwh4_10*x340))+((gclwh12_10*x437)));
op[63]=x611;
op[64]=(x586+x595+(((-1.0)*x602)));
op[65]=((0.01003883)+((gclwh14_2*pp*pz*r21))+(((0.000118)*gclwh3_3*npx*pz))+(((-1.0)*gclwh3_3*r20*(pp*pp)))+(((2.0)*gclwh1_2*npy*(pz*pz)))+(((0.0994)*gclwh14_10*pp*r21))+(((0.00100396485)*gclwh12_10*r20))+(((-2.0)*gclwh4_3*npz*pp*pz))+(((-0.1988)*gclwh14_10*npy*pz))+(((1.1110275e-5)*gclwh1_2*r21))+(((0.01010025)*gclwh4_8*r22))+(((-1.1110275e-5)*gclwh4_2*r22))+(((0.01010025)*gclwh1_2*pz*r21))+(((-0.01010025)*gclwh14_8*r21))+(((0.1988)*gclwh4_10*npz*pz))+(((-0.201)*gclwh8_8*rxp1_2))+(((-0.0011)*gclwh1_2*pp*r21))+(((0.0994)*gclwh12_10*pp*r20))+(((-0.0022)*gclwh3_2*npx*pz))+(((-0.000118)*gclwh1_3*npy*pz))+(((0.01004125)*gclwh3_3*pp*r20))+(((-2.0)*gclwh4_8*npz*pz))+(((-1.0)*gclwh14_8*pp*r21))+(((-1.0)*gclwh1_2*pp*pz*r21))+(((0.0011)*gclwh14_2*pp*r21))+(((-0.0022)*gclwh12_2*npx*pz))+(((0.201)*gclwh8_2*pz*rxp1_2))+(((2.0)*gclwh12_8*npx*pz))+(((-0.201)*gclwh10_8*rxp2_2))+(((-2.0)*gclwh14_2*npy*(pz*pz)))+(((-5.9591475e-7)*gclwh14_3*r21))+(((0.01015925)*gclwh4_3*pp*r22))+(((0.01010025)*gclwh14_2*pz*r21))+(((-2.0)*gclwh12_2*npx*(pz*pz)))+(((0.0002211)*gclwh8_2*rxp1_2))+(((-0.0022)*gclwh14_2*npy*pz))+(((0.0011)*gclwh12_2*pp*r20))+(((-1.0)*gclwh12_3*r20*(pp*pp)))+(((-0.00100396485)*gclwh4_10*r22))+(((-2.0)*gclwh3_2*npx*(pz*pz)))+(((-0.0994)*gclwh4_10*pp*r22))+(((-0.000118)*gclwh4_3*npz*pz))+(((-1.0)*gclwh12_8*pp*r20))+(((-1.1110275e-5)*gclwh3_2*r20))+(((-0.01015925)*gclwh14_3*pp*r21))+((gclwh3_2*pp*pz*r20))+(((-2.0)*gclwh1_3*npy*pp*pz))+(((-5.9591475e-7)*gclwh12_3*r20))+(((-5.9591475e-7)*gclwh1_3*r21))+(((0.0002211)*gclwh6_2*rxp0_2))+(((-0.0011)*gclwh4_2*pp*r22))+((gclwh1_3*r21*(pp*pp)))+(((2.0)*gclwh14_8*npy*pz))+(((-0.201)*pz))+(((5.9591475e-7)*gclwh4_3*r22))+(((-0.01010025)*gclwh12_8*r20))+(((2.0)*gclwh3_3*npx*pp*pz))+(((0.0011)*gclwh3_2*pp*r20))+(((0.000118)*gclwh14_3*npy*pz))+(((0.201)*gclwh10_2*pz*rxp2_2))+(((0.0022)*gclwh4_2*npz*pz))+(((-0.01010025)*gclwh4_2*pz*r22))+(((1.1110275e-5)*gclwh14_2*r21))+(((1.1110275e-5)*gclwh12_2*r20))+(((2.0)*gclwh14_3*npy*pp*pz))+((gclwh4_3*r22*(pp*pp)))+(((0.01010025)*gclwh12_2*pz*r20))+(((2.0)*gclwh4_2*npz*(pz*pz)))+(((-0.1988)*gclwh12_10*npx*pz))+(((-0.01004125)*gclwh1_3*pp*r21))+(((0.0002211)*gclwh10_2*rxp2_2))+(((-1.0)*gclwh14_3*r21*(pp*pp)))+(((0.000118)*gclwh12_3*npx*pz))+(((0.00100396485)*gclwh14_10*r21))+(((5.9591475e-7)*gclwh3_3*r20))+(((-0.01015925)*gclwh12_3*pp*r20))+(((-0.01010025)*gclwh3_2*pz*r20))+((gclwh4_8*pp*r22))+(((0.201)*gclwh6_2*pz*rxp0_2))+(((2.0)*gclwh12_3*npx*pp*pz))+(((-1.0)*gclwh4_2*pp*pz*r22))+(((0.0022)*gclwh1_2*npy*pz))+((gclwh12_2*pp*pz*r20))+(((-0.201)*gclwh6_8*rxp0_2)));
op[66]=((-0.47702437)+(((-0.0978878442)*gclwh9_1*rxp1_2))+(((-0.9740084)*gclwh5_1*npz*pz))+(((-1.3958)*gclwh13_0*npx*pz))+(((-1.0)*gclwh2_1*r20*(pp*pp)))+(((-2.0)*gclwh15_11*npy*pz))+(((1.5968)*gclwh15_9*npy*pz))+(((-0.6979)*gclwh2_0*pp*r20))+(((1.5968)*gclwh13_9*npx*pz))+(((-2.0)*gclwh13_11*npx*pz))+(((-0.7984)*gclwh15_9*pp*r21))+(((1.3958)*gclwh5_0*npz*pz))+(((-0.7984)*gclwh13_9*pp*r20))+(((0.9740084)*gclwh15_1*npy*pz))+((gclwh13_1*r20*(pp*pp)))+(((2.0)*gclwh13_0*npx*(pz*pz)))+(((0.1402779)*gclwh11_0*rxp2_2))+((gclwh5_0*pp*pz*r22))+((gclwh2_0*pp*pz*r20))+(((0.007048964475)*gclwh2_0*r20))+(((1.3958)*gclwh2_0*npx*pz))+(((0.01010025)*gclwh15_11*r21))+(((0.6979)*gclwh13_0*pp*r20))+(((-1.0)*gclwh0_0*pp*pz*r21))+(((-0.6979)*gclwh5_0*pp*r22))+(((-0.00491886417105)*gclwh13_1*r20))+(((2.0)*gclwh5_1*npz*pp*pz))+(((2.0)*gclwh0_0*npy*(pz*pz)))+(((-0.01010025)*gclwh15_0*pz*r21))+(((-1.5968)*gclwh5_9*npz*pz))+(((-0.201)*gclwh9_0*pz*rxp1_2))+((gclwh15_11*pp*r21))+(((2.0)*gclwh5_11*npz*pz))+(((-0.007048964475)*gclwh5_0*r22))+(((-2.0)*gclwh15_1*npy*pp*pz))+(((-0.00491886417105)*gclwh15_1*r21))+(((0.6979)*gclwh0_0*pp*r21))+(((-1.0)*gclwh5_11*pp*r22))+(((0.00491886417105)*gclwh0_1*r21))+(((0.201)*gclwh9_11*rxp1_2))+(((0.201)*gclwh11_11*rxp2_2))+(((-1.3958)*gclwh15_0*npy*pz))+(((-0.0080640396)*gclwh15_9*r21))+(((2.0)*gclwh15_0*npy*(pz*pz)))+(((0.0080640396)*gclwh5_9*r22))+(((-0.47690395)*gclwh15_1*pp*r21))+(((0.007048964475)*gclwh15_0*r21))+(((-0.201)*pz))+(((-0.0080640396)*gclwh13_9*r20))+(((2.0)*gclwh2_1*npx*pp*pz))+(((-0.9740084)*gclwh2_1*npx*pz))+(((0.007048964475)*gclwh13_0*r20))+(((-2.0)*gclwh0_1*npy*pp*pz))+(((-2.0)*gclwh2_0*npx*(pz*pz)))+(((-0.00491886417105)*gclwh2_1*r20))+(((0.9740084)*gclwh13_1*npx*pz))+(((-0.007048964475)*gclwh0_0*r21))+(((-2.0)*gclwh5_0*npz*(pz*pz)))+(((0.1402779)*gclwh9_0*rxp1_2))+(((0.7984)*gclwh5_9*pp*r22))+(((0.01010025)*gclwh0_0*pz*r21))+(((-0.01010025)*gclwh5_11*r22))+(((0.201)*gclwh11_1*pp*rxp2_2))+(((0.1402779)*gclwh7_0*rxp0_2))+(((-1.3958)*gclwh0_0*npy*pz))+(((0.47690395)*gclwh5_1*pp*r22))+(((-0.0978878442)*gclwh11_1*rxp2_2))+(((0.201)*gclwh7_11*rxp0_2))+(((-1.0)*gclwh13_0*pp*pz*r20))+(((0.201)*gclwh7_1*pp*rxp0_2))+((gclwh0_1*r21*(pp*pp)))+(((-1.0)*gclwh5_1*r22*(pp*pp)))+(((-0.01010025)*gclwh13_0*pz*r20))+(((0.00491886417105)*gclwh5_1*r22))+(((0.01010025)*gclwh5_0*pz*r22))+(((-0.47690395)*gclwh13_1*pp*r20))+((gclwh13_11*pp*r20))+(((0.6979)*gclwh15_0*pp*r21))+(((-0.49710445)*gclwh0_1*pp*r21))+(((-0.0978878442)*gclwh7_1*rxp0_2))+(((0.201)*gclwh9_1*pp*rxp1_2))+(((-1.0)*gclwh15_0*pp*pz*r21))+(((0.9740084)*gclwh0_1*npy*pz))+(((0.01010025)*gclwh13_11*r20))+(((-0.01010025)*gclwh2_0*pz*r20))+(((-0.1604784)*gclwh7_9*rxp0_2))+(((-0.201)*gclwh7_0*pz*rxp0_2))+(((-2.0)*gclwh13_1*npx*pp*pz))+((gclwh15_1*r21*(pp*pp)))+(((-0.201)*gclwh11_0*pz*rxp2_2))+(((0.49710445)*gclwh2_1*pp*r20)));
op[67]=((((-1.0)*gclwh9_7*x356))+(((-1.0)*gclwh11_15*x369))+(((0.2004)*gclwh15_15*x350))+(((-0.1002)*gclwh13_15*x346))+((gclwh5_15*x363))+(((-1.0)*gclwh11_7*x369))+(((-0.1002)*pp*x351))+(((-1.0)*x340*x374))+(((-0.00101204505)*x351))+(((-1.0)*gclwh7_7*x349))+(((-1.0)*gclwh13_15*x404))+(((0.1002)*gclwh5_15*x337))+((x335*x401)));
op[68]=x612;
op[69]=((0.02161546)+(((0.6968)*gclwh5_9*x337))+(((-0.6968)*gclwh15_9*x368))+(((-0.140499)*x417))+(((-0.1400568)*gclwh7_9*rxp0_2))+(((-1.0)*gclwh11_13*x429))+(((1.3936)*gclwh13_9*x335))+(((-1.0)*gclwh13_9*x437))+(((-0.140499)*x382))+(((-1.0)*x597))+(((-1.3936)*gclwh5_9*x340))+x608+(((1.3936)*gclwh15_9*x350))+((gclwh5_9*x425))+(((-1.0)*gclwh15_9*x376))+(((-0.6968)*gclwh13_9*x346)));
op[70]=((-0.01003883)+(((0.000118)*gclwh2_1*npx*pz))+(((0.2032)*gclwh13_9*npx*pz))+(((5.9591475e-7)*gclwh2_1*r20))+(((-0.0204216)*gclwh7_9*rxp0_2))+(((0.01010025)*gclwh5_11*r22))+(((-1.0)*gclwh2_1*r20*(pp*pp)))+(((0.0010261854)*gclwh5_9*r22))+(((-0.01015925)*gclwh5_1*pp*r22))+(((-1.0)*gclwh13_11*pp*r20))+(((1.1859e-5)*gclwh7_1*rxp0_2))+(((0.2032)*gclwh15_9*npy*pz))+(((-0.0022)*gclwh5_0*npz*pz))+((gclwh13_1*r20*(pp*pp)))+(((-0.0022)*gclwh2_0*npx*pz))+(((2.0)*gclwh13_0*npx*(pz*pz)))+((gclwh5_0*pp*pz*r22))+((gclwh2_0*pp*pz*r20))+(((0.0011)*gclwh5_0*pp*r22))+(((-0.000118)*gclwh15_1*npy*pz))+(((-0.201)*gclwh11_11*rxp2_2))+(((-0.000118)*gclwh13_1*npx*pz))+(((-1.0)*gclwh0_0*pp*pz*r21))+(((1.1110275e-5)*gclwh5_0*r22))+(((-0.0002211)*gclwh7_0*rxp0_2))+(((2.0)*gclwh5_1*npz*pp*pz))+(((-5.9591475e-7)*gclwh0_1*r21))+(((2.0)*gclwh0_0*npy*(pz*pz)))+(((-0.01010025)*gclwh15_0*pz*r21))+(((-0.0011)*gclwh13_0*pp*r20))+(((-0.0002211)*gclwh11_0*rxp2_2))+(((-0.201)*gclwh9_0*pz*rxp1_2))+(((2.0)*gclwh13_11*npx*pz))+(((0.000118)*gclwh5_1*npz*pz))+(((-2.0)*gclwh15_1*npy*pp*pz))+(((-5.9591475e-7)*gclwh5_1*r22))+(((-1.1110275e-5)*gclwh13_0*r20))+(((0.0011)*gclwh2_0*pp*r20))+(((-0.0011)*gclwh0_0*pp*r21))+(((2.0)*gclwh15_0*npy*(pz*pz)))+(((5.9591475e-7)*gclwh15_1*r21))+(((5.9591475e-7)*gclwh13_1*r20))+(((-0.01004125)*gclwh0_1*pp*r21))+(((-0.201)*pz))+(((2.0)*gclwh2_1*npx*pp*pz))+(((-0.201)*gclwh7_11*rxp0_2))+(((0.1016)*gclwh5_9*pp*r22))+(((-1.1110275e-5)*gclwh15_0*r21))+(((-2.0)*gclwh0_1*npy*pp*pz))+(((-0.201)*gclwh9_11*rxp1_2))+(((-0.000118)*gclwh0_1*npy*pz))+(((-2.0)*gclwh2_0*npx*(pz*pz)))+(((-2.0)*gclwh5_11*npz*pz))+(((0.01015925)*gclwh13_1*pp*r20))+(((-0.0010261854)*gclwh15_9*r21))+(((-2.0)*gclwh5_0*npz*(pz*pz)))+(((0.01010025)*gclwh0_0*pz*r21))+(((0.0022)*gclwh13_0*npx*pz))+(((-0.1016)*gclwh13_9*pp*r20))+(((0.201)*gclwh11_1*pp*rxp2_2))+((gclwh5_11*pp*r22))+(((-0.01010025)*gclwh13_11*r20))+(((-1.0)*gclwh13_0*pp*pz*r20))+(((-0.0010261854)*gclwh13_9*r20))+(((0.01015925)*gclwh15_1*pp*r21))+(((0.201)*gclwh7_1*pp*rxp0_2))+((gclwh0_1*r21*(pp*pp)))+(((-1.0)*gclwh5_1*r22*(pp*pp)))+(((-0.01010025)*gclwh13_0*pz*r20))+(((-0.1016)*gclwh15_9*pp*r21))+(((1.1110275e-5)*gclwh0_0*r21))+(((1.1859e-5)*gclwh11_1*rxp2_2))+(((-0.01010025)*gclwh15_11*r21))+(((2.0)*gclwh15_11*npy*pz))+(((0.01010025)*gclwh5_0*pz*r22))+(((-0.0011)*gclwh15_0*pp*r21))+(((0.0022)*gclwh0_0*npy*pz))+(((-0.0002211)*gclwh9_0*rxp1_2))+(((-1.0)*gclwh15_11*pp*r21))+(((0.201)*gclwh9_1*pp*rxp1_2))+(((-0.2032)*gclwh5_9*npz*pz))+(((-1.0)*gclwh15_0*pp*pz*r21))+(((-0.01010025)*gclwh2_0*pz*r20))+(((1.1859e-5)*gclwh9_1*rxp1_2))+(((-0.201)*gclwh7_0*pz*rxp0_2))+(((-2.0)*gclwh13_1*npx*pp*pz))+(((0.0022)*gclwh15_0*npy*pz))+((gclwh15_1*r21*(pp*pp)))+(((-0.201)*gclwh11_0*pz*rxp2_2))+(((-1.1110275e-5)*gclwh2_0*r20))+(((0.01004125)*gclwh2_1*pp*r20)));
IkReal x616=((0.1002)*pp);
IkReal x617=(gclwh5_15*r22);
IkReal x618=((0.2004)*pz);
IkReal x619=(gclwh13_15*r20);
IkReal x620=((0.0201402)*rxp2_2);
IkReal x621=(gclwh15_15*r21);
op[71]=(((gclwh11_15*x620))+(((-0.00101204505)*x617))+((x616*x621))+(((0.00101204505)*x621))+(((-1.0)*gclwh11_7*x620))+((x616*x619))+(((-1.0)*gclwh13_15*npx*x618))+(((-0.0201402)*gclwh9_7*rxp1_2))+(((0.00101204505)*x619))+(((-0.0201402)*gclwh7_7*rxp0_2))+(((-1.0)*x616*x617))+(((-1.0)*gclwh15_15*npy*x618))+((gclwh5_15*npz*x618)));
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j1array[16], cj1array[16], sj1array[16], j2array[16], cj2array[16], sj2array[16], j3array[16], cj3array[16], sj3array[16];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ij1 += 3)
{
IkReal htj1 = zeror[ij1+0], htj2 = zeror[ij1+1], htj3 = zeror[ij1+2];
if(isnan(htj1)||isnan(htj2)||isnan(htj3)){
continue;
}
j1array[numsolutions]=((2.0)*(atan(htj1)));
j2array[numsolutions]=((2.0)*(atan(htj2)));
j3array[numsolutions]=((2.0)*(atan(htj3)));
if(isinf(htj1)){
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
}
else{
IkReal x622=htj1*htj1;
CheckValue<IkReal> x623=IKPowWithIntegerCheck(((1.0)+x622),-1);
if(!x623.valid){
continue;
}
cj1array[numsolutions]=((x623.value)*(((1.0)+(((-1.0)*x622)))));
CheckValue<IkReal> x624=IKPowWithIntegerCheck(((1.0)+(htj1*htj1)),-1);
if(!x624.valid){
continue;
}
sj1array[numsolutions]=((2.0)*htj1*(x624.value));
}
if(isinf(htj2)){
cj2array[numsolutions] = IKcos(j2array[numsolutions]);
sj2array[numsolutions] = IKsin(j2array[numsolutions]);
}
else{
IkReal x625=htj2*htj2;
CheckValue<IkReal> x626=IKPowWithIntegerCheck(((1.0)+x625),-1);
if(!x626.valid){
continue;
}
cj2array[numsolutions]=((x626.value)*(((1.0)+(((-1.0)*x625)))));
CheckValue<IkReal> x627=IKPowWithIntegerCheck(((1.0)+(htj2*htj2)),-1);
if(!x627.valid){
continue;
}
sj2array[numsolutions]=((2.0)*htj2*(x627.value));
}
if(isinf(htj3)){
cj3array[numsolutions] = IKcos(j3array[numsolutions]);
sj3array[numsolutions] = IKsin(j3array[numsolutions]);
}
else{
IkReal x628=htj3*htj3;
CheckValue<IkReal> x629=IKPowWithIntegerCheck(((1.0)+x628),-1);
if(!x629.valid){
continue;
}
cj3array[numsolutions]=((x629.value)*(((1.0)+(((-1.0)*x628)))));
CheckValue<IkReal> x630=IKPowWithIntegerCheck(((1.0)+(htj3*htj3)),-1);
if(!x630.valid){
continue;
}
sj3array[numsolutions]=((2.0)*htj3*(x630.value));
}
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
if( j2array[numsolutions] > IKPI )
{
    j2array[numsolutions]-=IK2PI;
}
else if( j2array[numsolutions] < -IKPI )
{
    j2array[numsolutions]+=IK2PI;
}
if( j3array[numsolutions] > IKPI )
{
    j3array[numsolutions]-=IK2PI;
}
else if( j3array[numsolutions] < -IKPI )
{
    j3array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j1valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj1 = 16;
_nj2 = 1;
_nj3 = 1;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
_ij2[0] = 0; _ij2[1] = -1;
_ij3[0] = 0; _ij3[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( !j1valid[iij1] ) { continue; }
if( IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj2array[ij1]-cj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij1]-sj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj3array[ij1]-cj3array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij1]-sj3array[iij1]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j1valid[iij1]=false; _ij1[1] = iij1; _ij2[1] = 0; _ij3[1] = 0;  break; 
}
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

    j2 = j2array[ij1]; cj2 = cj2array[ij1]; sj2 = sj2array[ij1];

    j3 = j3array[ij1]; cj3 = cj3array[ij1]; sj3 = sj3array[ij1];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j5eval[2];
j5eval[0]=((1.0)+(((-1.0)*(r22*r22))));
j5eval[1]=((r20*r20)+(r21*r21));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((r20*r20)+(r21*r21));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x631=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x631);
rxp1_0=(pz*r11);
rxp1_1=(r01*x631);
j4eval[0]=cj3;
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x632=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x632);
rxp1_0=(pz*r11);
rxp1_1=(r01*x632);
j4eval[0]=r22;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x633=IKPowWithIntegerCheck(r22,-1);
if(!x633.valid){
continue;
}
CheckValue<IkReal> x634=IKPowWithIntegerCheck(sj3,-1);
if(!x634.valid){
continue;
}
sj4array[0]=((x633.value)*(x634.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((cj3*r22*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x635=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x635);
rxp1_0=(pz*r11);
rxp1_1=(r01*x635);
IkReal x636=((8.0)*sj3);
IkReal x637=(cj1*cj2);
IkReal x638=((8.0)*sj4);
IkReal x639=((16.0)*sj3);
IkReal x640=(sj1*sj2);
IkReal x641=((4.0)*sj4);
IkReal x642=((16.0)*r10);
IkReal x643=(cj3*r02);
IkReal x644=((12.0)*r12);
IkReal x645=((4.0)*cj4);
IkReal x646=(cj3*cj4);
IkReal x647=((16.0)*r00);
IkReal x648=((4.0)*sj3);
IkReal x649=(r10*x648);
IkReal x650=(r00*x648);
IkReal x651=((12.0)*cj4*r02);
IkReal x652=(r12*x645);
IkReal x653=((8.0)*x646);
IkReal x654=(cj3*r11*x645);
IkReal x655=(cj3*sj4*x644);
IkReal x656=(cj3*r01*x645);
IkReal x657=((12.0)*sj4*x643);
IkReal x658=(r01*x637*x641);
IkReal x659=(x640*x651);
IkReal x660=(r01*x640*x641);
IkReal x661=(x637*x651);
IkReal x662=(r11*x640*x641);
IkReal x663=(r11*x637*x641);
IkReal x664=(cj4*x637*x644);
IkReal x665=(cj4*x640*x644);
IkReal x666=(x657+x664);
IkReal x667=(x655+x659);
IkReal x668=(x650+x656+x662);
IkReal x669=(x649+x654+x658);
j5eval[0]=((((0.5)*(IKabs(((((-1.0)*x642*x646))+(((-1.0)*sj4*x637*x647))+((sj4*x640*x647))+((r11*x639)))))))+(((0.5)*(IKabs(((((-1.0)*x661))+(((-1.0)*x669))+x660+x667)))))+(((0.5)*(IKabs(((((-1.0)*x665))+(((-1.0)*x668))+x663+x666)))))+(((0.5)*(IKabs(((((-1.0)*x660))+(((-1.0)*x661))+x669+x667)))))+(((0.5)*(IKabs(((((-1.0)*x665))+(((-1.0)*x663))+x668+x666)))))+(((0.5)*(IKabs(((((-1.0)*x660))+x669+(((-1.0)*r02*x637*x645))+((r02*x640*x645))+((cj3*r12*x641)))))))+(((0.5)*(IKabs(((((-1.0)*x640*x652))+((x637*x652))+((x641*x643))+(((-1.0)*x663))+x668)))))+(IKabs(((((-1.0)*r00*x653))+((r01*x636))+(((-1.0)*r10*x638*x640))+((r10*x637*x638)))))+(IKabs((((r00*x638*x640))+(((-1.0)*r00*x637*x638))+(((-1.0)*r10*x653))+((r11*x636)))))+(((0.5)*(IKabs((((sj4*x637*x642))+(((-1.0)*x646*x647))+(((-1.0)*sj4*x640*x642))+((r01*x639))))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x670=(cj1*cj2);
IkReal x671=((4.0)*cj4);
IkReal x672=((12.0)*cj4);
IkReal x673=(sj1*sj2);
IkReal x674=(r01*sj3);
IkReal x675=((4.0)*r00*sj3);
IkReal x676=((8.0)*r10*sj4);
IkReal x677=(r12*x673);
IkReal x678=(cj3*r02*sj4);
IkReal x679=((4.0)*r11*sj4);
IkReal x680=((16.0)*r10*sj4);
IkReal x681=(cj3*cj4*r00);
IkReal x682=(cj3*r01*x671);
IkReal x683=((12.0)*x678);
IkReal x684=((4.0)*x678);
IkReal x685=(x673*x679);
IkReal x686=(x670*x679);
IkReal x687=(r12*x670*x672);
IkReal x688=(x672*x677);
IkReal x689=(r12*x670*x671);
IkReal x690=(x671*x677);
IkReal x691=(x683+x687);
IkReal x692=(x689+x684);
IkReal x693=(x675+x682+x685);
IkReal x694=(((x670*x676))+(((-8.0)*x681))+(((8.0)*x674))+(((-1.0)*x673*x676)));
op[0]=((((-1.0)*x686))+x692+x693+(((-1.0)*x690)));
op[1]=x694;
op[2]=((((-1.0)*x688))+(((-1.0)*x686))+x691+x693);
op[3]=((((-16.0)*x681))+(((16.0)*x674))+(((-1.0)*x673*x680))+((x670*x680)));
op[4]=((((-1.0)*x688))+x686+x691+(((-1.0)*x693)));
op[5]=x694;
op[6]=(x686+x692+(((-1.0)*x690))+(((-1.0)*x693)));
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x695=(cj1*cj2);
IkReal x696=(r00*sj4);
IkReal x697=(sj1*sj2);
IkReal x698=((4.0)*cj4);
IkReal x699=(r11*sj3);
IkReal x700=((4.0)*r10*sj3);
IkReal x701=((12.0)*cj4*r02);
IkReal x702=(cj3*cj4*r10);
IkReal x703=(cj3*r12*sj4);
IkReal x704=((4.0)*r01*sj4);
IkReal x705=(cj3*r11*x698);
IkReal x706=((12.0)*x703);
IkReal x707=((4.0)*x703);
IkReal x708=(x697*x704);
IkReal x709=(x695*x704);
IkReal x710=(x697*x701);
IkReal x711=(x695*x701);
IkReal x712=(r02*x697*x698);
IkReal x713=(r02*x695*x698);
IkReal x714=(x712+x707);
IkReal x715=(x710+x706);
IkReal x716=(x709+x700+x705);
IkReal x717=((((8.0)*x699))+(((-8.0)*x702))+(((-8.0)*x695*x696))+(((8.0)*x696*x697)));
j5evalpoly[0]=((((htj5*htj5*htj5)*(((((-16.0)*x702))+(((16.0)*x699))+(((-16.0)*x695*x696))+(((16.0)*x696*x697))))))+((x717*(htj5*htj5*htj5*htj5*htj5)))+(((-1.0)*x716))+(((-1.0)*x713))+(((htj5*htj5*htj5*htj5)*(((((-1.0)*x711))+(((-1.0)*x708))+x715+x716))))+(((htj5*htj5)*(((((-1.0)*x711))+(((-1.0)*x716))+x715+x708))))+x714+x708+(((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-1.0)*x713))+(((-1.0)*x708))+x714+x716))))+((htj5*x717)));
if( IKabs(j5evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x718=((1.0)*cj4);
IkReal x719=((1.0)*sj4*sj5);
IkReal x720=((1.0)*cj5*sj4);
if( IKabs(((((-1.0)*r12*x718))+(((-1.0)*r10*x719))+(((-1.0)*r11*x720)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r02*x718))+(((-1.0)*r00*x719))+(((-1.0)*r01*x720)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r12*x718))+(((-1.0)*r10*x719))+(((-1.0)*r11*x720))))+IKsqr(((((-1.0)*r02*x718))+(((-1.0)*r00*x719))+(((-1.0)*r01*x720))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r12*x718))+(((-1.0)*r10*x719))+(((-1.0)*r11*x720))), ((((-1.0)*r02*x718))+(((-1.0)*r00*x719))+(((-1.0)*r01*x720))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x721=IKcos(j0);
IkReal x722=IKsin(j0);
IkReal x723=(r02*sj4);
IkReal x724=((0.3495)*sj1);
IkReal x725=(cj5*r00);
IkReal x726=((0.3484)*sj1);
IkReal x727=(sj3*sj5);
IkReal x728=(cj4*r01);
IkReal x729=(cj4*r00);
IkReal x730=((1.0)*sj3);
IkReal x731=(cj5*r10);
IkReal x732=(r12*sj4);
IkReal x733=((1.0)*sj1);
IkReal x734=(cj5*sj3);
IkReal x735=(cj4*r11);
IkReal x736=((1.0)*cj4);
IkReal x737=(cj3*sj5);
IkReal x738=((0.1005)*sj5);
IkReal x739=(cj2*x721);
IkReal x740=((1.0)*cj3*cj5);
IkReal x741=((1.0)*sj4*sj5);
IkReal x742=(cj2*x722);
IkReal x743=((1.0)*cj5*sj4);
IkReal x744=(cj1*sj2*x721);
IkReal x745=(cj1*sj2*x722);
evalcond[0]=((((-1.0)*r02*x736))+(((-1.0)*x721))+(((-1.0)*r00*x741))+(((-1.0)*r01*x743)));
evalcond[1]=((((-1.0)*r11*x743))+(((-1.0)*x722))+(((-1.0)*r10*x741))+(((-1.0)*r12*x736)));
evalcond[2]=((((-0.3495)*x745))+(((-1.0)*x722*x726))+(((-0.1005)*x725))+((r01*x738))+(((-1.0)*px))+(((0.1002)*x721))+(((-1.0)*x724*x742)));
evalcond[3]=(((x721*x726))+(((0.3495)*x744))+(((-0.1005)*x731))+(((-1.0)*py))+((x724*x739))+((r11*x738))+(((0.1002)*x722)));
evalcond[4]=(((x728*x734))+((x727*x729))+(((-1.0)*x723*x730))+((r01*x737))+((sj1*x742))+(((-1.0)*cj3*x725))+x745);
evalcond[5]=((((-1.0)*x728*x740))+((r01*x727))+(((-1.0)*x725*x730))+(((-1.0)*cj1*x742))+((sj1*sj2*x722))+((cj3*x723))+(((-1.0)*x729*x737)));
evalcond[6]=(((cj4*r10*x727))+((x734*x735))+(((-1.0)*x733*x739))+(((-1.0)*cj3*x731))+(((-1.0)*x730*x732))+(((-1.0)*x744))+((r11*x737)));
evalcond[7]=((((-1.0)*r10*x736*x737))+(((-1.0)*x730*x731))+((cj3*x732))+(((-1.0)*sj2*x721*x733))+((r11*x727))+(((-1.0)*x735*x740))+((cj1*x739)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x746=IKPowWithIntegerCheck(cj3,-1);
if(!x746.valid){
continue;
}
CheckValue<IkReal> x747=IKPowWithIntegerCheck(r22,-1);
if(!x747.valid){
continue;
}
sj4array[0]=((-1.0)*(x746.value)*(x747.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=((((-1.0)*sj1*sj2))+(((-1.0)*r22*sj3*(IKsin(j4))))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x748=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x748);
rxp1_0=(pz*r11);
rxp1_1=(r01*x748);
IkReal x749=((8.0)*sj3);
IkReal x750=(cj1*cj2);
IkReal x751=((8.0)*sj4);
IkReal x752=((16.0)*sj3);
IkReal x753=(sj1*sj2);
IkReal x754=((4.0)*sj4);
IkReal x755=((16.0)*r10);
IkReal x756=(cj3*r02);
IkReal x757=((12.0)*r12);
IkReal x758=((4.0)*cj4);
IkReal x759=(cj3*cj4);
IkReal x760=((16.0)*r00);
IkReal x761=((4.0)*sj3);
IkReal x762=(r10*x761);
IkReal x763=(r00*x761);
IkReal x764=((12.0)*cj4*r02);
IkReal x765=(r12*x758);
IkReal x766=((8.0)*x759);
IkReal x767=(cj3*r11*x758);
IkReal x768=(cj3*sj4*x757);
IkReal x769=(cj3*r01*x758);
IkReal x770=((12.0)*sj4*x756);
IkReal x771=(r01*x750*x754);
IkReal x772=(x753*x764);
IkReal x773=(r01*x753*x754);
IkReal x774=(x750*x764);
IkReal x775=(r11*x753*x754);
IkReal x776=(r11*x750*x754);
IkReal x777=(cj4*x750*x757);
IkReal x778=(cj4*x753*x757);
IkReal x779=(x770+x777);
IkReal x780=(x772+x768);
IkReal x781=(x775+x769+x763);
IkReal x782=(x771+x767+x762);
j5eval[0]=((((0.5)*(IKabs((((sj4*x753*x760))+(((-1.0)*sj4*x750*x760))+(((-1.0)*x755*x759))+((r11*x752)))))))+(((0.5)*(IKabs((x782+x780+(((-1.0)*x774))+(((-1.0)*x773)))))))+(((0.5)*(IKabs(((((-1.0)*x782))+x773+x780+(((-1.0)*x774)))))))+(((0.5)*(IKabs(((((-1.0)*x781))+x776+x779+(((-1.0)*x778)))))))+(IKabs(((((-1.0)*r10*x766))+((r11*x749))+((r00*x751*x753))+(((-1.0)*r00*x750*x751)))))+(((0.5)*(IKabs((((sj4*x750*x755))+(((-1.0)*sj4*x753*x755))+((r01*x752))+(((-1.0)*x759*x760)))))))+(((0.5)*(IKabs((((cj3*r12*x754))+((r02*x753*x758))+x782+(((-1.0)*x773))+(((-1.0)*r02*x750*x758)))))))+(((0.5)*(IKabs((x779+x781+(((-1.0)*x776))+(((-1.0)*x778)))))))+(((0.5)*(IKabs(((((-1.0)*x753*x765))+x781+(((-1.0)*x776))+((x750*x765))+((x754*x756)))))))+(IKabs(((((-1.0)*r00*x766))+(((-1.0)*r10*x751*x753))+((r10*x750*x751))+((r01*x749))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x783=(cj1*cj2);
IkReal x784=((4.0)*cj4);
IkReal x785=((12.0)*cj4);
IkReal x786=(sj1*sj2);
IkReal x787=(r01*sj3);
IkReal x788=((4.0)*r00*sj3);
IkReal x789=((8.0)*r10*sj4);
IkReal x790=(r12*x786);
IkReal x791=(cj3*r02*sj4);
IkReal x792=((4.0)*r11*sj4);
IkReal x793=((16.0)*r10*sj4);
IkReal x794=(cj3*cj4*r00);
IkReal x795=(cj3*r01*x784);
IkReal x796=((12.0)*x791);
IkReal x797=((4.0)*x791);
IkReal x798=(x786*x792);
IkReal x799=(x783*x792);
IkReal x800=(r12*x783*x785);
IkReal x801=(x785*x790);
IkReal x802=(r12*x783*x784);
IkReal x803=(x784*x790);
IkReal x804=(x796+x800);
IkReal x805=(x797+x802);
IkReal x806=(x795+x798+x788);
IkReal x807=((((8.0)*x787))+((x783*x789))+(((-8.0)*x794))+(((-1.0)*x786*x789)));
op[0]=((((-1.0)*x799))+x805+x806+(((-1.0)*x803)));
op[1]=x807;
op[2]=((((-1.0)*x799))+x804+x806+(((-1.0)*x801)));
op[3]=(((x783*x793))+(((16.0)*x787))+(((-16.0)*x794))+(((-1.0)*x786*x793)));
op[4]=(x799+x804+(((-1.0)*x801))+(((-1.0)*x806)));
op[5]=x807;
op[6]=(x799+x805+(((-1.0)*x803))+(((-1.0)*x806)));
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x808=(cj1*cj2);
IkReal x809=(r00*sj4);
IkReal x810=(sj1*sj2);
IkReal x811=((4.0)*cj4);
IkReal x812=(r11*sj3);
IkReal x813=((4.0)*r10*sj3);
IkReal x814=((12.0)*cj4*r02);
IkReal x815=(cj3*cj4*r10);
IkReal x816=(cj3*r12*sj4);
IkReal x817=((4.0)*r01*sj4);
IkReal x818=(cj3*r11*x811);
IkReal x819=((12.0)*x816);
IkReal x820=((4.0)*x816);
IkReal x821=(x810*x817);
IkReal x822=(x808*x817);
IkReal x823=(x810*x814);
IkReal x824=(x808*x814);
IkReal x825=(r02*x810*x811);
IkReal x826=(r02*x808*x811);
IkReal x827=(x820+x825);
IkReal x828=(x819+x823);
IkReal x829=(x818+x813+x822);
IkReal x830=((((8.0)*x812))+(((-8.0)*x815))+(((8.0)*x809*x810))+(((-8.0)*x808*x809)));
j5evalpoly[0]=(((htj5*x830))+((x830*(htj5*htj5*htj5*htj5*htj5)))+(((-1.0)*x829))+(((-1.0)*x826))+(((htj5*htj5)*(((((-1.0)*x829))+(((-1.0)*x824))+x828+x821))))+(((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-1.0)*x826))+(((-1.0)*x821))+x829+x827))))+(((htj5*htj5*htj5)*(((((-16.0)*x808*x809))+(((-16.0)*x815))+(((16.0)*x809*x810))+(((16.0)*x812))))))+x821+x827+(((htj5*htj5*htj5*htj5)*(((((-1.0)*x821))+(((-1.0)*x824))+x829+x828)))));
if( IKabs(j5evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x831=((1.0)*cj4);
IkReal x832=((1.0)*sj4*sj5);
IkReal x833=((1.0)*cj5*sj4);
if( IKabs(((((-1.0)*r10*x832))+(((-1.0)*r12*x831))+(((-1.0)*r11*x833)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r02*x831))+(((-1.0)*r00*x832))+(((-1.0)*r01*x833)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x832))+(((-1.0)*r12*x831))+(((-1.0)*r11*x833))))+IKsqr(((((-1.0)*r02*x831))+(((-1.0)*r00*x832))+(((-1.0)*r01*x833))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r10*x832))+(((-1.0)*r12*x831))+(((-1.0)*r11*x833))), ((((-1.0)*r02*x831))+(((-1.0)*r00*x832))+(((-1.0)*r01*x833))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x834=IKcos(j0);
IkReal x835=IKsin(j0);
IkReal x836=(r02*sj4);
IkReal x837=((0.3495)*sj1);
IkReal x838=(cj5*r00);
IkReal x839=((0.3484)*sj1);
IkReal x840=(sj3*sj5);
IkReal x841=(cj4*r01);
IkReal x842=(cj4*r00);
IkReal x843=((1.0)*sj3);
IkReal x844=(cj5*r10);
IkReal x845=(r12*sj4);
IkReal x846=((1.0)*sj1);
IkReal x847=(cj5*sj3);
IkReal x848=(cj4*r11);
IkReal x849=((1.0)*cj4);
IkReal x850=(cj3*sj5);
IkReal x851=((0.1005)*sj5);
IkReal x852=(cj2*x834);
IkReal x853=((1.0)*cj3*cj5);
IkReal x854=((1.0)*sj4*sj5);
IkReal x855=(cj2*x835);
IkReal x856=((1.0)*cj5*sj4);
IkReal x857=(cj1*sj2*x834);
IkReal x858=(cj1*sj2*x835);
evalcond[0]=((((-1.0)*r02*x849))+(((-1.0)*r01*x856))+(((-1.0)*r00*x854))+(((-1.0)*x834)));
evalcond[1]=((((-1.0)*r11*x856))+(((-1.0)*x835))+(((-1.0)*r12*x849))+(((-1.0)*r10*x854)));
evalcond[2]=((((-1.0)*x835*x839))+(((0.1002)*x834))+(((-1.0)*px))+(((-0.3495)*x858))+(((-0.1005)*x838))+(((-1.0)*x837*x855))+((r01*x851)));
evalcond[3]=(((r11*x851))+(((0.1002)*x835))+(((-1.0)*py))+((x834*x839))+(((0.3495)*x857))+(((-0.1005)*x844))+((x837*x852)));
evalcond[4]=(((x840*x842))+(((-1.0)*x836*x843))+((sj1*x855))+x858+(((-1.0)*cj3*x838))+((x841*x847))+((r01*x850)));
evalcond[5]=(((sj1*sj2*x835))+(((-1.0)*x842*x850))+((r01*x840))+(((-1.0)*x841*x853))+((cj3*x836))+(((-1.0)*x838*x843))+(((-1.0)*cj1*x855)));
evalcond[6]=((((-1.0)*x846*x852))+((cj4*r10*x840))+(((-1.0)*x857))+((r11*x850))+(((-1.0)*x843*x845))+((x847*x848))+(((-1.0)*cj3*x844)));
evalcond[7]=(((cj1*x852))+(((-1.0)*x848*x853))+(((-1.0)*x843*x844))+((cj3*x845))+(((-1.0)*r10*x849*x850))+(((-1.0)*sj2*x834*x846))+((r11*x840)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x859=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x859);
rxp1_0=(pz*r11);
rxp1_1=(r01*x859);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=cj3;
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x860=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x860);
rxp1_0=(pz*r11);
rxp1_1=(r01*x860);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x861=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x861);
rxp1_0=(pz*r11);
rxp1_1=(r01*x861);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x862=IKPowWithIntegerCheck(r22,-1);
if(!x862.valid){
continue;
}
sj4array[0]=((-1.0)*(x862.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x863=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x863);
rxp1_0=(pz*r11);
rxp1_1=(r01*x863);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
IkReal x864=((-1.0)*cj4);
CheckValue<IkReal> x866 = IKatan2WithCheck(IkReal((r01*x864)),IkReal((r00*x864)),IKFAST_ATAN2_MAGTHRESH);
if(!x866.valid){
continue;
}
IkReal x865=x866.value;
j5array[0]=((-1.0)*x865);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x865)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
IkReal x867=((1.0)*cj4);
evalcond[0]=((((-1.0)*r10*x867*(IKsin(j5))))+(((-1.0)*r11*x867*(IKcos(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x868=((1.0)*sj4*sj5);
IkReal x869=((1.0)*cj5*sj4);
if( IKabs(((((-1.0)*r10*x868))+(((-1.0)*r11*x869)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x868))+(((-1.0)*r01*x869)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x868))+(((-1.0)*r11*x869))))+IKsqr(((((-1.0)*r00*x868))+(((-1.0)*r01*x869))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r10*x868))+(((-1.0)*r11*x869))), ((((-1.0)*r00*x868))+(((-1.0)*r01*x869))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x870=IKsin(j0);
IkReal x871=IKcos(j0);
IkReal x872=((0.3484)*sj1);
IkReal x873=(cj5*r00);
IkReal x874=(cj2*sj1);
IkReal x875=(cj1*sj2);
IkReal x876=(cj5*r10);
IkReal x877=(r11*sj5);
IkReal x878=(r01*sj5);
IkReal x879=((0.3495)*x871);
IkReal x880=((1.0)*x871);
IkReal x881=((1.0)*sj4*sj5);
IkReal x882=((0.3495)*x870);
IkReal x883=((1.0)*cj5*sj4);
evalcond[0]=((((-1.0)*x880))+(((-1.0)*r00*x881))+(((-1.0)*r01*x883)));
evalcond[1]=((((-1.0)*x870))+(((-1.0)*r11*x883))+(((-1.0)*r10*x881)));
evalcond[2]=(((x870*x875))+((x870*x874))+(((-1.0)*x873))+x878);
evalcond[3]=((((-1.0)*x876))+x877+(((-1.0)*x874*x880))+(((-1.0)*x875*x880)));
evalcond[4]=((((-0.1005)*x873))+(((-1.0)*px))+(((0.1002)*x871))+(((-1.0)*x870*x872))+(((0.1005)*x878))+(((-1.0)*x874*x882))+(((-1.0)*x875*x882)));
evalcond[5]=(((x871*x872))+(((-0.1005)*x876))+((x874*x879))+(((-1.0)*py))+(((0.1002)*x870))+((x875*x879))+(((0.1005)*x877)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x884=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x884);
rxp1_0=(pz*r11);
rxp1_1=(r01*x884);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x885=IKPowWithIntegerCheck(r22,-1);
if(!x885.valid){
continue;
}
sj4array[0]=((x885.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x886=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x886);
rxp1_0=(pz*r11);
rxp1_1=(r01*x886);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x888 = IKatan2WithCheck(IkReal((cj4*r01)),IkReal((cj4*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x888.valid){
continue;
}
IkReal x887=x888.value;
j5array[0]=((-1.0)*x887);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x887)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r10*(IKsin(j5))))+((cj4*r11*(IKcos(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x889=((1.0)*sj4*sj5);
IkReal x890=((1.0)*cj5*sj4);
if( IKabs(((((-1.0)*r11*x890))+(((-1.0)*r10*x889)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x889))+(((-1.0)*r01*x890)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x890))+(((-1.0)*r10*x889))))+IKsqr(((((-1.0)*r00*x889))+(((-1.0)*r01*x890))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r11*x890))+(((-1.0)*r10*x889))), ((((-1.0)*r00*x889))+(((-1.0)*r01*x890))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x891=IKsin(j0);
IkReal x892=IKcos(j0);
IkReal x893=((0.3484)*sj1);
IkReal x894=(cj5*r00);
IkReal x895=(cj2*sj1);
IkReal x896=(cj1*sj2);
IkReal x897=(cj5*r10);
IkReal x898=((1.0)*sj5);
IkReal x899=((0.1005)*sj5);
IkReal x900=((0.3495)*x892);
IkReal x901=((1.0)*x892);
IkReal x902=(sj4*x898);
IkReal x903=((0.3495)*x891);
IkReal x904=((1.0)*cj5*sj4);
evalcond[0]=((((-1.0)*x901))+(((-1.0)*r00*x902))+(((-1.0)*r01*x904)));
evalcond[1]=((((-1.0)*x891))+(((-1.0)*r11*x904))+(((-1.0)*r10*x902)));
evalcond[2]=(((x891*x895))+((x891*x896))+x894+(((-1.0)*r01*x898)));
evalcond[3]=((((-1.0)*x896*x901))+(((-1.0)*x895*x901))+(((-1.0)*r11*x898))+x897);
evalcond[4]=((((-1.0)*x896*x903))+(((0.1002)*x892))+(((-1.0)*x895*x903))+((r01*x899))+(((-1.0)*px))+(((-0.1005)*x894))+(((-1.0)*x891*x893)));
evalcond[5]=((((0.1002)*x891))+((x895*x900))+((r11*x899))+(((-1.0)*py))+(((-0.1005)*x897))+((x892*x893))+((x896*x900)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x905=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x905);
rxp1_0=(pz*r11);
rxp1_1=(r01*x905);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x906=IKPowWithIntegerCheck(r22,-1);
if(!x906.valid){
continue;
}
sj4array[0]=((x906.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x907=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x907);
rxp1_0=(pz*r11);
rxp1_1=(r01*x907);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x909 = IKatan2WithCheck(IkReal((cj4*r01)),IkReal((cj4*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x909.valid){
continue;
}
IkReal x908=x909.value;
j5array[0]=((-1.0)*x908);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x908)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r10*(IKsin(j5))))+((cj4*r11*(IKcos(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x910=((1.0)*sj4*sj5);
IkReal x911=((1.0)*cj5*sj4);
if( IKabs(((((-1.0)*r11*x911))+(((-1.0)*r10*x910)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x911))+(((-1.0)*r00*x910)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x911))+(((-1.0)*r10*x910))))+IKsqr(((((-1.0)*r01*x911))+(((-1.0)*r00*x910))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r11*x911))+(((-1.0)*r10*x910))), ((((-1.0)*r01*x911))+(((-1.0)*r00*x910))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x912=IKsin(j0);
IkReal x913=IKcos(j0);
IkReal x914=((0.3484)*sj1);
IkReal x915=(cj5*r00);
IkReal x916=(cj1*cj2);
IkReal x917=(cj5*r10);
IkReal x918=(r11*sj5);
IkReal x919=(sj1*sj2);
IkReal x920=(r01*sj5);
IkReal x921=((1.0)*sj4*sj5);
IkReal x922=((1.0)*x912);
IkReal x923=((1.0)*x913);
IkReal x924=((1.0)*cj5*sj4);
evalcond[0]=((((-1.0)*x923))+(((-1.0)*r01*x924))+(((-1.0)*r00*x921)));
evalcond[1]=((((-1.0)*x922))+(((-1.0)*r11*x924))+(((-1.0)*r10*x921)));
evalcond[2]=((((-1.0)*x915))+((x912*x919))+(((-1.0)*x916*x922))+x920);
evalcond[3]=((((-1.0)*x917))+(((-1.0)*x919*x923))+((x913*x916))+x918);
evalcond[4]=((((0.1005)*x920))+(((-0.1005)*x915))+(((0.1002)*x913))+(((-1.0)*px))+(((-1.0)*x912*x914)));
evalcond[5]=((((-0.1005)*x917))+(((0.1002)*x912))+(((-1.0)*py))+((x913*x914))+(((0.1005)*x918)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x925=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x925);
rxp1_0=(pz*r11);
rxp1_1=(r01*x925);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x926=IKPowWithIntegerCheck(r22,-1);
if(!x926.valid){
continue;
}
sj4array[0]=((-1.0)*(x926.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x927=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x927);
rxp1_0=(pz*r11);
rxp1_1=(r01*x927);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
IkReal x928=((-1.0)*cj4);
CheckValue<IkReal> x930 = IKatan2WithCheck(IkReal((r01*x928)),IkReal((r00*x928)),IKFAST_ATAN2_MAGTHRESH);
if(!x930.valid){
continue;
}
IkReal x929=x930.value;
j5array[0]=((-1.0)*x929);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x929)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
IkReal x931=((1.0)*cj4);
evalcond[0]=((((-1.0)*r10*x931*(IKsin(j5))))+(((-1.0)*r11*x931*(IKcos(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x932=((1.0)*sj4*sj5);
IkReal x933=((1.0)*cj5*sj4);
if( IKabs(((((-1.0)*r11*x933))+(((-1.0)*r10*x932)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x933))+(((-1.0)*r00*x932)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x933))+(((-1.0)*r10*x932))))+IKsqr(((((-1.0)*r01*x933))+(((-1.0)*r00*x932))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r11*x933))+(((-1.0)*r10*x932))), ((((-1.0)*r01*x933))+(((-1.0)*r00*x932))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x934=IKsin(j0);
IkReal x935=IKcos(j0);
IkReal x936=((0.3484)*sj1);
IkReal x937=((0.1005)*cj5);
IkReal x938=(cj1*cj2);
IkReal x939=((1.0)*sj5);
IkReal x940=(sj1*sj2);
IkReal x941=((0.1005)*sj5);
IkReal x942=(sj4*x939);
IkReal x943=((1.0)*x934);
IkReal x944=((1.0)*x935);
IkReal x945=((1.0)*cj5*sj4);
evalcond[0]=((((-1.0)*r01*x945))+(((-1.0)*r00*x942))+(((-1.0)*x944)));
evalcond[1]=((((-1.0)*x943))+(((-1.0)*r11*x945))+(((-1.0)*r10*x942)));
evalcond[2]=((((-1.0)*x938*x943))+((x934*x940))+(((-1.0)*r01*x939))+((cj5*r00)));
evalcond[3]=(((cj5*r10))+(((-1.0)*r11*x939))+((x935*x938))+(((-1.0)*x940*x944)));
evalcond[4]=((((0.1002)*x935))+(((-1.0)*x934*x936))+(((-1.0)*px))+((r01*x941))+(((-1.0)*r00*x937)));
evalcond[5]=((((0.1002)*x934))+(((-1.0)*r10*x937))+((x935*x936))+(((-1.0)*py))+((r11*x941)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x946=IKPowWithIntegerCheck(r22,-1);
if(!x946.valid){
continue;
}
CheckValue<IkReal> x947=IKPowWithIntegerCheck(sj3,-1);
if(!x947.valid){
continue;
}
sj4array[0]=((x946.value)*(x947.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((cj3*r22*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x948=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x948);
rxp1_0=(pz*r11);
rxp1_1=(r01*x948);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5eval[0]=((((0.5)*(IKabs(((((4.0)*cj1*cj3*cj4*r01*sj2))+(((4.0)*cj1*r00*sj2*sj3))+(((4.0)*cj4*r01*sj1*sj2*sj3))+(((4.0)*cj1*cj2*cj3*r00))+(((-4.0)*cj3*r00*sj1*sj2))+(((4.0)*cj2*cj3*cj4*r01*sj1))+(((4.0)*cj2*r00*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r01*sj3)))))))+(((0.5)*(IKabs(((((-16.0)*cj1*cj2*cj4*r10*sj3))+(((16.0)*cj1*cj3*cj4*r10*sj2))+(((16.0)*cj4*r10*sj1*sj2*sj3))+(((16.0)*cj2*cj3*cj4*r10*sj1))+(((-16.0)*cj1*cj2*cj3*r11))+(((-16.0)*cj1*r11*sj2*sj3))+(((-16.0)*cj2*r11*sj1*sj3))+(((16.0)*cj3*r11*sj1*sj2)))))))+(((0.5)*(IKabs(((((-16.0)*cj1*cj2*cj4*r00*sj3))+(((16.0)*cj4*r00*sj1*sj2*sj3))+(((16.0)*cj3*r01*sj1*sj2))+(((-16.0)*cj1*r01*sj2*sj3))+(((16.0)*cj2*cj3*cj4*r00*sj1))+(((-16.0)*cj1*cj2*cj3*r01))+(((16.0)*cj1*cj3*cj4*r00*sj2))+(((-16.0)*cj2*r01*sj1*sj3)))))))+(IKabs(((((-8.0)*cj2*r11*sj1*sj3))+(((-8.0)*cj1*cj2*cj3*r11))+(((8.0)*cj2*cj3*cj4*r10*sj1))+(((8.0)*cj4*r10*sj1*sj2*sj3))+(((8.0)*cj3*r11*sj1*sj2))+(((-8.0)*cj1*cj2*cj4*r10*sj3))+(((8.0)*cj1*cj3*cj4*r10*sj2))+(((-8.0)*cj1*r11*sj2*sj3)))))+(IKabs(((((8.0)*cj2*cj3*cj4*r00*sj1))+(((8.0)*cj1*cj3*cj4*r00*sj2))+(((8.0)*cj3*r01*sj1*sj2))+(((-8.0)*cj2*r01*sj1*sj3))+(((-8.0)*cj1*r01*sj2*sj3))+(((8.0)*cj4*r00*sj1*sj2*sj3))+(((-8.0)*cj1*cj2*cj4*r00*sj3))+(((-8.0)*cj1*cj2*cj3*r01)))))+(IKabs(((((-4.0)*cj2*cj3*cj4*r01*sj1))+(((4.0)*cj3*r00*sj1*sj2))+(((-4.0)*cj2*r00*sj1*sj3))+(((-4.0)*cj1*cj2*cj3*r00))+(((4.0)*cj1*cj2*cj4*r01*sj3))+(((-4.0)*cj4*r01*sj1*sj2*sj3))+(((-4.0)*cj1*cj3*cj4*r01*sj2))+(((-4.0)*cj1*r00*sj2*sj3)))))+(IKabs(((((-4.0)*cj1*cj3*cj4*r11*sj2))+(((4.0)*cj1*cj2*cj4*r11*sj3))+(((-4.0)*cj1*cj2*cj3*r10))+(((-4.0)*cj2*cj3*cj4*r11*sj1))+(((-4.0)*cj4*r11*sj1*sj2*sj3))+(((-4.0)*cj1*r10*sj2*sj3))+(((4.0)*cj3*r10*sj1*sj2))+(((-4.0)*cj2*r10*sj1*sj3)))))+(((0.5)*(IKabs(((((4.0)*cj1*cj3*cj4*r11*sj2))+(((4.0)*cj1*r10*sj2*sj3))+(((4.0)*cj2*r10*sj1*sj3))+(((4.0)*cj1*cj2*cj3*r10))+(((-4.0)*cj3*r10*sj1*sj2))+(((4.0)*cj2*cj3*cj4*r11*sj1))+(((-4.0)*cj1*cj2*cj4*r11*sj3))+(((4.0)*cj4*r11*sj1*sj2*sj3))))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j0, j5]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x949=(r10*sj2);
IkReal x950=(cj2*cj4);
IkReal x951=(r11*sj2);
IkReal x952=(cj1*cj3);
IkReal x953=((16.0)*cj4);
IkReal x954=(cj2*r11);
IkReal x955=(sj1*sj3);
IkReal x956=(cj1*sj3);
IkReal x957=((8.0)*cj4);
IkReal x958=((4.0)*cj4);
IkReal x959=((4.0)*cj3*sj1);
IkReal x960=((8.0)*x956);
IkReal x961=((16.0)*cj3*sj1);
IkReal x962=((4.0)*cj2*r10);
IkReal x963=((8.0)*cj3*sj1);
IkReal x964=(((x949*x959))+(((4.0)*r11*x950*x956)));
IkReal x965=(((x952*x962))+((r11*x950*x959))+(((4.0)*x949*x956))+((x951*x955*x958))+((x951*x952*x958))+((x955*x962)));
IkReal x966=(x964+(((-1.0)*x965)));
IkReal x967=(((x951*x963))+(((-1.0)*r10*x950*x960))+((x949*x955*x957))+(((-8.0)*x954*x955))+(((-8.0)*x952*x954))+((r10*x950*x963))+((x949*x952*x957))+(((-1.0)*x951*x960)));
IkReal x968=(x965+(((-1.0)*x964)));
op[0]=x966;
op[1]=x967;
op[2]=x966;
op[3]=(((x951*x961))+((x949*x953*x955))+((r10*x950*x961))+(((-16.0)*x952*x954))+((x949*x952*x953))+(((-16.0)*x951*x956))+(((-16.0)*r10*x950*x956))+(((-16.0)*x954*x955)));
op[4]=x968;
op[5]=x967;
op[6]=x968;
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

j5evalpoly[0]=((((4.0)*cj1*cj3*cj4*r01*sj2))+(((4.0)*cj1*r00*sj2*sj3))+((htj5*(((((8.0)*cj2*cj3*cj4*r00*sj1))+(((8.0)*cj1*cj3*cj4*r00*sj2))+(((8.0)*cj3*r01*sj1*sj2))+(((-8.0)*cj2*r01*sj1*sj3))+(((-8.0)*cj1*r01*sj2*sj3))+(((8.0)*cj4*r00*sj1*sj2*sj3))+(((-8.0)*cj1*cj2*cj4*r00*sj3))+(((-8.0)*cj1*cj2*cj3*r01))))))+(((4.0)*cj4*r01*sj1*sj2*sj3))+(((htj5*htj5*htj5*htj5*htj5)*(((((8.0)*cj2*cj3*cj4*r00*sj1))+(((8.0)*cj1*cj3*cj4*r00*sj2))+(((8.0)*cj3*r01*sj1*sj2))+(((-8.0)*cj2*r01*sj1*sj3))+(((-8.0)*cj1*r01*sj2*sj3))+(((8.0)*cj4*r00*sj1*sj2*sj3))+(((-8.0)*cj1*cj2*cj4*r00*sj3))+(((-8.0)*cj1*cj2*cj3*r01))))))+(((htj5*htj5)*(((((4.0)*cj1*cj3*cj4*r01*sj2))+(((4.0)*cj1*r00*sj2*sj3))+(((4.0)*cj4*r01*sj1*sj2*sj3))+(((4.0)*cj1*cj2*cj3*r00))+(((-4.0)*cj3*r00*sj1*sj2))+(((4.0)*cj2*cj3*cj4*r01*sj1))+(((4.0)*cj2*r00*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r01*sj3))))))+(((htj5*htj5*htj5)*(((((-16.0)*cj1*cj2*cj4*r00*sj3))+(((16.0)*cj4*r00*sj1*sj2*sj3))+(((16.0)*cj3*r01*sj1*sj2))+(((-16.0)*cj1*r01*sj2*sj3))+(((16.0)*cj2*cj3*cj4*r00*sj1))+(((-16.0)*cj1*cj2*cj3*r01))+(((16.0)*cj1*cj3*cj4*r00*sj2))+(((-16.0)*cj2*r01*sj1*sj3))))))+(((4.0)*cj1*cj2*cj3*r00))+(((-4.0)*cj3*r00*sj1*sj2))+(((4.0)*cj2*cj3*cj4*r01*sj1))+(((4.0)*cj2*r00*sj1*sj3))+(((htj5*htj5*htj5*htj5)*(((((-4.0)*cj2*cj3*cj4*r01*sj1))+(((4.0)*cj3*r00*sj1*sj2))+(((-4.0)*cj2*r00*sj1*sj3))+(((-4.0)*cj1*cj2*cj3*r00))+(((4.0)*cj1*cj2*cj4*r01*sj3))+(((-4.0)*cj4*r01*sj1*sj2*sj3))+(((-4.0)*cj1*cj3*cj4*r01*sj2))+(((-4.0)*cj1*r00*sj2*sj3))))))+(((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-4.0)*cj2*cj3*cj4*r01*sj1))+(((4.0)*cj3*r00*sj1*sj2))+(((-4.0)*cj2*r00*sj1*sj3))+(((-4.0)*cj1*cj2*cj3*r00))+(((4.0)*cj1*cj2*cj4*r01*sj3))+(((-4.0)*cj4*r01*sj1*sj2*sj3))+(((-4.0)*cj1*cj3*cj4*r01*sj2))+(((-4.0)*cj1*r00*sj2*sj3))))))+(((-4.0)*cj1*cj2*cj4*r01*sj3)));
if( IKabs(j5evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x969=((1.0)*sj4*sj5);
IkReal x970=((1.0)*cj5*sj4);
if( IKabs(((((-1.0)*r10*x969))+(((-1.0)*r11*x970)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x970))+(((-1.0)*r00*x969)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x969))+(((-1.0)*r11*x970))))+IKsqr(((((-1.0)*r01*x970))+(((-1.0)*r00*x969))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r10*x969))+(((-1.0)*r11*x970))), ((((-1.0)*r01*x970))+(((-1.0)*r00*x969))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x971=IKsin(j0);
IkReal x972=IKcos(j0);
IkReal x973=(cj5*r00);
IkReal x974=(cj1*sj2);
IkReal x975=(r11*sj3);
IkReal x976=(cj4*r01);
IkReal x977=(cj5*sj3);
IkReal x978=(cj1*cj2);
IkReal x979=(cj2*sj1);
IkReal x980=(r01*sj5);
IkReal x981=(r11*sj5);
IkReal x982=(sj1*x972);
IkReal x983=((1.0)*cj3*cj5);
IkReal x984=((0.3495)*x971);
IkReal x985=((1.0)*x972);
IkReal x986=((1.0)*sj4*sj5);
IkReal x987=((1.0)*x971);
IkReal x988=(sj1*x971);
IkReal x989=((1.0)*cj5*sj4);
IkReal x990=(cj4*sj3*sj5);
IkReal x991=((1.0)*cj3*cj4*sj5);
evalcond[0]=((((-1.0)*x985))+(((-1.0)*r00*x986))+(((-1.0)*r01*x989)));
evalcond[1]=((((-1.0)*r10*x986))+(((-1.0)*x987))+(((-1.0)*r11*x989)));
evalcond[2]=((((-1.0)*cj3*x973))+((r00*x990))+((x976*x977))+((x971*x979))+((x971*x974))+((cj3*x980)));
evalcond[3]=((((-1.0)*r10*x983))+((cj4*cj5*x975))+(((-1.0)*x974*x985))+((r10*x990))+((cj3*x981))+(((-1.0)*x979*x985)));
evalcond[4]=((((-1.0)*x978*x987))+(((-1.0)*r00*x991))+(((-1.0)*sj3*x973))+((sj3*x980))+(((-1.0)*x976*x983))+((sj2*x988)));
evalcond[5]=((((-1.0)*cj4*r11*x983))+(((-1.0)*r10*x991))+((sj5*x975))+(((-1.0)*r10*x977))+(((-1.0)*sj2*x982))+((x972*x978)));
evalcond[6]=((((0.1002)*x972))+(((0.1005)*x980))+(((-1.0)*x974*x984))+(((-1.0)*px))+(((-0.3484)*x988))+(((-0.1005)*x973))+(((-1.0)*x979*x984)));
evalcond[7]=((((0.1002)*x971))+(((0.1005)*x981))+(((0.3495)*x972*x974))+(((0.3495)*x972*x979))+(((-1.0)*py))+(((0.3484)*x982))+(((-0.1005)*cj5*r10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x992=IKPowWithIntegerCheck(cj3,-1);
if(!x992.valid){
continue;
}
CheckValue<IkReal> x993=IKPowWithIntegerCheck(r22,-1);
if(!x993.valid){
continue;
}
sj4array[0]=((-1.0)*(x992.value)*(x993.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=((((-1.0)*sj1*sj2))+(((-1.0)*r22*sj3*(IKsin(j4))))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x994=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x994);
rxp1_0=(pz*r11);
rxp1_1=(r01*x994);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5eval[0]=((((0.5)*(IKabs(((((4.0)*cj1*cj3*cj4*r01*sj2))+(((4.0)*cj1*r00*sj2*sj3))+(((4.0)*cj4*r01*sj1*sj2*sj3))+(((4.0)*cj1*cj2*cj3*r00))+(((-4.0)*cj3*r00*sj1*sj2))+(((4.0)*cj2*cj3*cj4*r01*sj1))+(((4.0)*cj2*r00*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r01*sj3)))))))+(((0.5)*(IKabs(((((-16.0)*cj1*cj2*cj4*r10*sj3))+(((16.0)*cj1*cj3*cj4*r10*sj2))+(((16.0)*cj4*r10*sj1*sj2*sj3))+(((16.0)*cj2*cj3*cj4*r10*sj1))+(((-16.0)*cj1*cj2*cj3*r11))+(((-16.0)*cj1*r11*sj2*sj3))+(((-16.0)*cj2*r11*sj1*sj3))+(((16.0)*cj3*r11*sj1*sj2)))))))+(((0.5)*(IKabs(((((-16.0)*cj1*cj2*cj4*r00*sj3))+(((16.0)*cj4*r00*sj1*sj2*sj3))+(((16.0)*cj3*r01*sj1*sj2))+(((-16.0)*cj1*r01*sj2*sj3))+(((16.0)*cj2*cj3*cj4*r00*sj1))+(((-16.0)*cj1*cj2*cj3*r01))+(((16.0)*cj1*cj3*cj4*r00*sj2))+(((-16.0)*cj2*r01*sj1*sj3)))))))+(IKabs(((((-8.0)*cj2*r11*sj1*sj3))+(((-8.0)*cj1*cj2*cj3*r11))+(((8.0)*cj2*cj3*cj4*r10*sj1))+(((8.0)*cj4*r10*sj1*sj2*sj3))+(((8.0)*cj3*r11*sj1*sj2))+(((-8.0)*cj1*cj2*cj4*r10*sj3))+(((8.0)*cj1*cj3*cj4*r10*sj2))+(((-8.0)*cj1*r11*sj2*sj3)))))+(IKabs(((((8.0)*cj2*cj3*cj4*r00*sj1))+(((8.0)*cj1*cj3*cj4*r00*sj2))+(((8.0)*cj3*r01*sj1*sj2))+(((-8.0)*cj2*r01*sj1*sj3))+(((-8.0)*cj1*r01*sj2*sj3))+(((8.0)*cj4*r00*sj1*sj2*sj3))+(((-8.0)*cj1*cj2*cj4*r00*sj3))+(((-8.0)*cj1*cj2*cj3*r01)))))+(IKabs(((((-4.0)*cj2*cj3*cj4*r01*sj1))+(((4.0)*cj3*r00*sj1*sj2))+(((-4.0)*cj2*r00*sj1*sj3))+(((-4.0)*cj1*cj2*cj3*r00))+(((4.0)*cj1*cj2*cj4*r01*sj3))+(((-4.0)*cj4*r01*sj1*sj2*sj3))+(((-4.0)*cj1*cj3*cj4*r01*sj2))+(((-4.0)*cj1*r00*sj2*sj3)))))+(IKabs(((((-4.0)*cj1*cj3*cj4*r11*sj2))+(((4.0)*cj1*cj2*cj4*r11*sj3))+(((-4.0)*cj1*cj2*cj3*r10))+(((-4.0)*cj2*cj3*cj4*r11*sj1))+(((-4.0)*cj4*r11*sj1*sj2*sj3))+(((-4.0)*cj1*r10*sj2*sj3))+(((4.0)*cj3*r10*sj1*sj2))+(((-4.0)*cj2*r10*sj1*sj3)))))+(((0.5)*(IKabs(((((4.0)*cj1*cj3*cj4*r11*sj2))+(((4.0)*cj1*r10*sj2*sj3))+(((4.0)*cj2*r10*sj1*sj3))+(((4.0)*cj1*cj2*cj3*r10))+(((-4.0)*cj3*r10*sj1*sj2))+(((4.0)*cj2*cj3*cj4*r11*sj1))+(((-4.0)*cj1*cj2*cj4*r11*sj3))+(((4.0)*cj4*r11*sj1*sj2*sj3))))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j0, j5]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x995=(r10*sj2);
IkReal x996=(cj2*cj4);
IkReal x997=(r11*sj2);
IkReal x998=(cj1*cj3);
IkReal x999=((16.0)*cj4);
IkReal x1000=(cj2*r11);
IkReal x1001=(sj1*sj3);
IkReal x1002=(cj1*sj3);
IkReal x1003=((8.0)*cj4);
IkReal x1004=((4.0)*cj4);
IkReal x1005=((4.0)*cj3*sj1);
IkReal x1006=((8.0)*x1002);
IkReal x1007=((16.0)*cj3*sj1);
IkReal x1008=((4.0)*cj2*r10);
IkReal x1009=((8.0)*cj3*sj1);
IkReal x1010=((((4.0)*r11*x1002*x996))+((x1005*x995)));
IkReal x1011=(((x1001*x1004*x997))+((r11*x1005*x996))+(((4.0)*x1002*x995))+((x1008*x998))+((x1004*x997*x998))+((x1001*x1008)));
IkReal x1012=(x1010+(((-1.0)*x1011)));
IkReal x1013=(((x1009*x997))+(((-8.0)*x1000*x998))+((x1003*x995*x998))+(((-8.0)*x1000*x1001))+((x1001*x1003*x995))+((r10*x1009*x996))+(((-1.0)*x1006*x997))+(((-1.0)*r10*x1006*x996)));
IkReal x1014=(x1011+(((-1.0)*x1010)));
op[0]=x1012;
op[1]=x1013;
op[2]=x1012;
op[3]=(((x995*x998*x999))+((x1001*x995*x999))+(((-16.0)*r10*x1002*x996))+((x1007*x997))+(((-16.0)*x1002*x997))+(((-16.0)*x1000*x998))+(((-16.0)*x1000*x1001))+((r10*x1007*x996)));
op[4]=x1014;
op[5]=x1013;
op[6]=x1014;
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

j5evalpoly[0]=((((4.0)*cj1*cj3*cj4*r01*sj2))+(((4.0)*cj1*r00*sj2*sj3))+((htj5*(((((8.0)*cj2*cj3*cj4*r00*sj1))+(((8.0)*cj1*cj3*cj4*r00*sj2))+(((8.0)*cj3*r01*sj1*sj2))+(((-8.0)*cj2*r01*sj1*sj3))+(((-8.0)*cj1*r01*sj2*sj3))+(((8.0)*cj4*r00*sj1*sj2*sj3))+(((-8.0)*cj1*cj2*cj4*r00*sj3))+(((-8.0)*cj1*cj2*cj3*r01))))))+(((4.0)*cj4*r01*sj1*sj2*sj3))+(((htj5*htj5*htj5*htj5*htj5)*(((((8.0)*cj2*cj3*cj4*r00*sj1))+(((8.0)*cj1*cj3*cj4*r00*sj2))+(((8.0)*cj3*r01*sj1*sj2))+(((-8.0)*cj2*r01*sj1*sj3))+(((-8.0)*cj1*r01*sj2*sj3))+(((8.0)*cj4*r00*sj1*sj2*sj3))+(((-8.0)*cj1*cj2*cj4*r00*sj3))+(((-8.0)*cj1*cj2*cj3*r01))))))+(((htj5*htj5)*(((((4.0)*cj1*cj3*cj4*r01*sj2))+(((4.0)*cj1*r00*sj2*sj3))+(((4.0)*cj4*r01*sj1*sj2*sj3))+(((4.0)*cj1*cj2*cj3*r00))+(((-4.0)*cj3*r00*sj1*sj2))+(((4.0)*cj2*cj3*cj4*r01*sj1))+(((4.0)*cj2*r00*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r01*sj3))))))+(((htj5*htj5*htj5)*(((((-16.0)*cj1*cj2*cj4*r00*sj3))+(((16.0)*cj4*r00*sj1*sj2*sj3))+(((16.0)*cj3*r01*sj1*sj2))+(((-16.0)*cj1*r01*sj2*sj3))+(((16.0)*cj2*cj3*cj4*r00*sj1))+(((-16.0)*cj1*cj2*cj3*r01))+(((16.0)*cj1*cj3*cj4*r00*sj2))+(((-16.0)*cj2*r01*sj1*sj3))))))+(((4.0)*cj1*cj2*cj3*r00))+(((-4.0)*cj3*r00*sj1*sj2))+(((4.0)*cj2*cj3*cj4*r01*sj1))+(((4.0)*cj2*r00*sj1*sj3))+(((htj5*htj5*htj5*htj5)*(((((-4.0)*cj2*cj3*cj4*r01*sj1))+(((4.0)*cj3*r00*sj1*sj2))+(((-4.0)*cj2*r00*sj1*sj3))+(((-4.0)*cj1*cj2*cj3*r00))+(((4.0)*cj1*cj2*cj4*r01*sj3))+(((-4.0)*cj4*r01*sj1*sj2*sj3))+(((-4.0)*cj1*cj3*cj4*r01*sj2))+(((-4.0)*cj1*r00*sj2*sj3))))))+(((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-4.0)*cj2*cj3*cj4*r01*sj1))+(((4.0)*cj3*r00*sj1*sj2))+(((-4.0)*cj2*r00*sj1*sj3))+(((-4.0)*cj1*cj2*cj3*r00))+(((4.0)*cj1*cj2*cj4*r01*sj3))+(((-4.0)*cj4*r01*sj1*sj2*sj3))+(((-4.0)*cj1*cj3*cj4*r01*sj2))+(((-4.0)*cj1*r00*sj2*sj3))))))+(((-4.0)*cj1*cj2*cj4*r01*sj3)));
if( IKabs(j5evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1015=((1.0)*sj4*sj5);
IkReal x1016=((1.0)*cj5*sj4);
if( IKabs(((((-1.0)*r11*x1016))+(((-1.0)*r10*x1015)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x1016))+(((-1.0)*r00*x1015)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x1016))+(((-1.0)*r10*x1015))))+IKsqr(((((-1.0)*r01*x1016))+(((-1.0)*r00*x1015))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r11*x1016))+(((-1.0)*r10*x1015))), ((((-1.0)*r01*x1016))+(((-1.0)*r00*x1015))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1017=IKsin(j0);
IkReal x1018=IKcos(j0);
IkReal x1019=(cj5*r00);
IkReal x1020=(cj1*sj2);
IkReal x1021=(r11*sj3);
IkReal x1022=(cj4*r01);
IkReal x1023=(cj5*sj3);
IkReal x1024=(cj1*cj2);
IkReal x1025=(cj2*sj1);
IkReal x1026=(r01*sj5);
IkReal x1027=(r11*sj5);
IkReal x1028=(sj1*x1018);
IkReal x1029=((1.0)*cj3*cj5);
IkReal x1030=((0.3495)*x1017);
IkReal x1031=((1.0)*x1018);
IkReal x1032=((1.0)*sj4*sj5);
IkReal x1033=((1.0)*x1017);
IkReal x1034=(sj1*x1017);
IkReal x1035=((1.0)*cj5*sj4);
IkReal x1036=(cj4*sj3*sj5);
IkReal x1037=((1.0)*cj3*cj4*sj5);
evalcond[0]=((((-1.0)*x1031))+(((-1.0)*r01*x1035))+(((-1.0)*r00*x1032)));
evalcond[1]=((((-1.0)*r10*x1032))+(((-1.0)*x1033))+(((-1.0)*r11*x1035)));
evalcond[2]=(((x1017*x1020))+((x1017*x1025))+((r00*x1036))+(((-1.0)*cj3*x1019))+((x1022*x1023))+((cj3*x1026)));
evalcond[3]=(((r10*x1036))+(((-1.0)*x1020*x1031))+((cj4*cj5*x1021))+(((-1.0)*x1025*x1031))+(((-1.0)*r10*x1029))+((cj3*x1027)));
evalcond[4]=((((-1.0)*x1024*x1033))+(((-1.0)*x1022*x1029))+((sj2*x1034))+(((-1.0)*r00*x1037))+(((-1.0)*sj3*x1019))+((sj3*x1026)));
evalcond[5]=((((-1.0)*r10*x1037))+((x1018*x1024))+(((-1.0)*cj4*r11*x1029))+(((-1.0)*r10*x1023))+((sj5*x1021))+(((-1.0)*sj2*x1028)));
evalcond[6]=((((-1.0)*x1020*x1030))+(((-1.0)*x1025*x1030))+(((0.1002)*x1018))+(((-0.3484)*x1034))+(((-1.0)*px))+(((0.1005)*x1026))+(((-0.1005)*x1019)));
evalcond[7]=((((0.1002)*x1017))+(((-1.0)*py))+(((0.3495)*x1018*x1020))+(((0.3495)*x1018*x1025))+(((0.1005)*x1027))+(((-0.1005)*cj5*r10))+(((0.3484)*x1028)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1040 = IKatan2WithCheck(IkReal(((-0.1005)*r20)),IkReal(((0.1005)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x1040.valid){
continue;
}
IkReal x1038=((1.0)*(x1040.value));
if((((((0.01010025)*(r21*r21)))+(((0.01010025)*(r20*r20))))) < -0.00001)
continue;
CheckValue<IkReal> x1041=IKPowWithIntegerCheck(IKabs(IKsqrt(((((0.01010025)*(r21*r21)))+(((0.01010025)*(r20*r20)))))),-1);
if(!x1041.valid){
continue;
}
if( (((x1041.value)*(((((-0.3495)*cj1*cj2))+(((-1.0)*pz))+(((0.3495)*sj1*sj2))+(((-0.3484)*cj1)))))) < -1-IKFAST_SINCOS_THRESH || (((x1041.value)*(((((-0.3495)*cj1*cj2))+(((-1.0)*pz))+(((0.3495)*sj1*sj2))+(((-0.3484)*cj1)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1039=IKasin(((x1041.value)*(((((-0.3495)*cj1*cj2))+(((-1.0)*pz))+(((0.3495)*sj1*sj2))+(((-0.3484)*cj1))))));
j5array[0]=((((-1.0)*x1038))+(((-1.0)*x1039)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1038))+x1039);
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IkReal j4eval[2];
IkReal x1042=cj5*cj5;
IkReal x1043=r20*r20;
IkReal x1044=(sj3*x1042);
IkReal x1045=(((sj3*(r22*r22)))+((sj3*x1043))+(((-1.0)*x1043*x1044))+(((2.0)*cj5*r20*r21*sj3*sj5))+((x1044*(r21*r21))));
j4eval[0]=x1045;
j4eval[1]=IKsign(x1045);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1046=cj5*cj5;
IkReal x1047=r20*r20;
IkReal x1048=((1.0)*cj3);
IkReal x1049=((((-2.0)*cj3*cj5*r20*r21*sj5))+((cj3*x1046*x1047))+(((-1.0)*x1048*(r22*r22)))+(((-1.0)*x1046*x1048*(r21*r21)))+(((-1.0)*x1047*x1048)));
j4eval[0]=x1049;
j4eval[1]=IKsign(x1049);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x1050=cj1*cj1;
IkReal x1051=cj2*cj2;
IkReal x1052=((317.226484648751)*cj2);
IkReal x1053=((6088290.0)*cj2);
IkReal x1054=(cj1*sj1*sj2);
IkReal x1055=(cj2*x1054);
IkReal x1056=(x1050*x1051);
j0eval[0]=((-171.192278133101)+(((-1.0)*x1052))+(((-318.228060805794)*x1055))+(((-317.226484648751)*x1054))+((x1050*x1052))+(((-1.0)*x1050))+(((318.228060805794)*x1056))+(((-159.114030402897)*x1051)));
j0eval[1]=IKsign(((-3285565.0)+(((-1.0)*x1053))+(((-19192.25)*x1050))+((x1050*x1053))+(((-3053756.25)*x1051))+(((-6107512.5)*x1055))+(((6107512.5)*x1056))+(((-6088290.0)*x1054))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1057=((((-1.0)*cj1*cj2))+((sj1*sj2)));
j0eval[0]=x1057;
j0eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j0eval[2]=IKsign(x1057);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1058=cj5*cj5;
IkReal x1059=r20*r20;
IkReal x1060=(cj1*cj2);
IkReal x1061=(cj5*r21);
IkReal x1062=(r20*sj5);
IkReal x1063=(sj1*sj2);
IkReal x1064=(x1059+(r22*r22)+(((-1.0)*x1058*x1059))+((x1058*(r21*r21)))+(((2.0)*x1061*x1062)));
j4eval[0]=x1064;
j4eval[1]=((IKabs(((((-1.0)*r22*x1063))+((r22*x1060)))))+(IKabs((((x1061*x1063))+(((-1.0)*x1060*x1062))+(((-1.0)*x1060*x1061))+((x1062*x1063))))));
j4eval[2]=IKsign(x1064);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j0eval[0]=((((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((0.757998185797156)*py))+(((-2.64391582770565)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.64391582770565)*py))+(((0.757998185797156)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.757998185797156)*py))+(((-2.64391582770565)*px))))+IKsqr(((((2.64391582770565)*py))+(((0.757998185797156)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((0.757998185797156)*py))+(((-2.64391582770565)*px))), ((((2.64391582770565)*py))+(((0.757998185797156)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1065=IKsin(j0);
IkReal x1066=IKcos(j0);
evalcond[0]=((((-0.3495)*x1065))+(((-1.0)*px))+(((0.1002)*x1066)));
evalcond[1]=((((0.3495)*x1066))+(((-1.0)*py))+(((0.1002)*x1065)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1067=(((cj5*r10))+(((-1.0)*r11*sj5)));
j4eval[0]=x1067;
j4eval[1]=IKsign(x1067);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r21*sj0))+((r20*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1068=((((-1.0)*r01*sj5))+((cj5*r00)));
j4eval[0]=x1068;
j4eval[1]=IKsign(x1068);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs((((cj0*cj5*r21))+((cj0*r20*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1069=(((r21*sj5))+(((-1.0)*cj5*r20)));
j4eval[0]=x1069;
j4eval[1]=((IKabs((((r12*sj0))+((cj0*r02)))))+(IKabs((((cj0*cj5*r01))+((cj5*r11*sj0))+((cj0*r00*sj5))+((r10*sj0*sj5))))));
j4eval[2]=IKsign(x1069);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1070 = IKatan2WithCheck(IkReal((((cj0*cj5*r01))+((cj5*r11*sj0))+((cj0*r00*sj5))+((r10*sj0*sj5)))),IkReal((((r12*sj0))+((cj0*r02)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1070.valid){
continue;
}
CheckValue<IkReal> x1071=IKPowWithIntegerCheck(IKsign((((r21*sj5))+(((-1.0)*cj5*r20)))),-1);
if(!x1071.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1070.value)+(((1.5707963267949)*(x1071.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1072=IKcos(j4);
IkReal x1073=IKsin(j4);
IkReal x1074=((1.0)*cj0);
IkReal x1075=(cj5*r21);
IkReal x1076=(cj5*r11);
IkReal x1077=(cj5*r01);
IkReal x1078=((1.0)*x1072);
IkReal x1079=(sj5*x1072);
IkReal x1080=((1.0)*x1073);
evalcond[0]=(((r20*x1079))+((x1072*x1075))+(((-1.0)*r22*x1080)));
evalcond[1]=(sj0+(((-1.0)*r02*x1080))+((r00*x1079))+((x1072*x1077)));
evalcond[2]=((((-1.0)*r22*x1078))+(((-1.0)*x1075*x1080))+(((-1.0)*r20*sj5*x1080)));
evalcond[3]=(((r10*x1079))+((x1072*x1076))+(((-1.0)*x1074))+(((-1.0)*r12*x1080)));
evalcond[4]=((((-1.0)*r00*sj5*x1080))+(((-1.0)*r02*x1078))+(((-1.0)*x1077*x1080))+(((-1.0)*x1074)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r12*x1078))+(((-1.0)*r10*sj5*x1080))+(((-1.0)*x1076*x1080)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1081=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj5))+((cj5*r00)))),-1);
if(!x1081.valid){
continue;
}
CheckValue<IkReal> x1082 = IKatan2WithCheck(IkReal((((cj0*cj5*r21))+((cj0*r20*sj5)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1082.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1081.value)))+(x1082.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1083=IKcos(j4);
IkReal x1084=IKsin(j4);
IkReal x1085=((1.0)*cj0);
IkReal x1086=(cj5*r21);
IkReal x1087=(cj5*r11);
IkReal x1088=(cj5*r01);
IkReal x1089=((1.0)*x1083);
IkReal x1090=(sj5*x1083);
IkReal x1091=((1.0)*x1084);
evalcond[0]=(((r20*x1090))+(((-1.0)*r22*x1091))+((x1083*x1086)));
evalcond[1]=(sj0+((r00*x1090))+(((-1.0)*r02*x1091))+((x1083*x1088)));
evalcond[2]=((((-1.0)*x1086*x1091))+(((-1.0)*r20*sj5*x1091))+(((-1.0)*r22*x1089)));
evalcond[3]=(((r10*x1090))+(((-1.0)*r12*x1091))+(((-1.0)*x1085))+((x1083*x1087)));
evalcond[4]=((((-1.0)*x1088*x1091))+(((-1.0)*r02*x1089))+(((-1.0)*r00*sj5*x1091))+(((-1.0)*x1085)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1087*x1091))+(((-1.0)*r10*sj5*x1091))+(((-1.0)*r12*x1089)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1092=IKPowWithIntegerCheck(IKsign((((cj5*r10))+(((-1.0)*r11*sj5)))),-1);
if(!x1092.valid){
continue;
}
CheckValue<IkReal> x1093 = IKatan2WithCheck(IkReal((((cj5*r21*sj0))+((r20*sj0*sj5)))),IkReal((r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x1093.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1092.value)))+(x1093.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1094=IKcos(j4);
IkReal x1095=IKsin(j4);
IkReal x1096=((1.0)*cj0);
IkReal x1097=(cj5*r21);
IkReal x1098=(cj5*r11);
IkReal x1099=(cj5*r01);
IkReal x1100=((1.0)*x1094);
IkReal x1101=(sj5*x1094);
IkReal x1102=((1.0)*x1095);
evalcond[0]=(((r20*x1101))+(((-1.0)*r22*x1102))+((x1094*x1097)));
evalcond[1]=(sj0+((x1094*x1099))+((r00*x1101))+(((-1.0)*r02*x1102)));
evalcond[2]=((((-1.0)*r22*x1100))+(((-1.0)*r20*sj5*x1102))+(((-1.0)*x1097*x1102)));
evalcond[3]=((((-1.0)*r12*x1102))+(((-1.0)*x1096))+((x1094*x1098))+((r10*x1101)));
evalcond[4]=((((-1.0)*x1096))+(((-1.0)*x1099*x1102))+(((-1.0)*r02*x1100))+(((-1.0)*r00*sj5*x1102)));
evalcond[5]=((((-1.0)*r12*x1100))+(((-1.0)*x1098*x1102))+(((-1.0)*sj0))+(((-1.0)*r10*sj5*x1102)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.64391582770565)*px))+(((0.757998185797156)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.757998185797156)*px))+(((-2.64391582770565)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.64391582770565)*px))+(((0.757998185797156)*py))))+IKsqr(((((0.757998185797156)*px))+(((-2.64391582770565)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.64391582770565)*px))+(((0.757998185797156)*py))), ((((0.757998185797156)*px))+(((-2.64391582770565)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1103=IKsin(j0);
IkReal x1104=IKcos(j0);
evalcond[0]=((((-1.0)*px))+(((0.3495)*x1103))+(((0.1002)*x1104)));
evalcond[1]=((((-1.0)*py))+(((0.1002)*x1103))+(((-0.3495)*x1104)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1105=(((r01*sj5))+(((-1.0)*cj5*r00)));
j4eval[0]=x1105;
j4eval[1]=IKsign(x1105);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs((((cj0*cj5*r21))+((cj0*r20*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1106=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[0]=x1106;
j4eval[1]=IKsign(x1106);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r21*sj0))+((r20*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1107=((1.0)*sj0);
IkReal x1108=((1.0)*cj5);
IkReal x1109=((1.0)*cj0);
IkReal x1110=(((r21*sj5))+(((-1.0)*r20*x1108)));
j4eval[0]=x1110;
j4eval[1]=((IKabs(((((-1.0)*r12*x1107))+(((-1.0)*r02*x1109)))))+(IKabs(((((-1.0)*r10*sj5*x1107))+(((-1.0)*cj5*r11*x1107))+(((-1.0)*cj0*r01*x1108))+(((-1.0)*r00*sj5*x1109))))));
j4eval[2]=IKsign(x1110);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1111=((1.0)*sj0);
IkReal x1112=((1.0)*cj5);
IkReal x1113=((1.0)*cj0);
CheckValue<IkReal> x1114 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r11*x1111))+(((-1.0)*r10*sj5*x1111))+(((-1.0)*cj0*r01*x1112))+(((-1.0)*r00*sj5*x1113)))),IkReal(((((-1.0)*r12*x1111))+(((-1.0)*r02*x1113)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1114.valid){
continue;
}
CheckValue<IkReal> x1115=IKPowWithIntegerCheck(IKsign((((r21*sj5))+(((-1.0)*r20*x1112)))),-1);
if(!x1115.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1114.value)+(((1.5707963267949)*(x1115.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1116=IKcos(j4);
IkReal x1117=IKsin(j4);
IkReal x1118=((1.0)*sj0);
IkReal x1119=(cj5*r21);
IkReal x1120=(cj5*r11);
IkReal x1121=(cj5*r01);
IkReal x1122=((1.0)*x1116);
IkReal x1123=(sj5*x1116);
IkReal x1124=((1.0)*x1117);
evalcond[0]=(((x1116*x1119))+(((-1.0)*r22*x1124))+((r20*x1123)));
evalcond[1]=(((r10*x1123))+(((-1.0)*r12*x1124))+cj0+((x1116*x1120)));
evalcond[2]=((((-1.0)*r20*sj5*x1124))+(((-1.0)*r22*x1122))+(((-1.0)*x1119*x1124)));
evalcond[3]=(((r00*x1123))+((x1116*x1121))+(((-1.0)*r02*x1124))+(((-1.0)*x1118)));
evalcond[4]=((((-1.0)*x1121*x1124))+(((-1.0)*r00*sj5*x1124))+(((-1.0)*r02*x1122))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x1122))+(((-1.0)*r10*sj5*x1124))+(((-1.0)*x1120*x1124))+(((-1.0)*x1118)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1125=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10))+((r11*sj5)))),-1);
if(!x1125.valid){
continue;
}
CheckValue<IkReal> x1126 = IKatan2WithCheck(IkReal((((cj5*r21*sj0))+((r20*sj0*sj5)))),IkReal((r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x1126.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1125.value)))+(x1126.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1127=IKcos(j4);
IkReal x1128=IKsin(j4);
IkReal x1129=((1.0)*sj0);
IkReal x1130=(cj5*r21);
IkReal x1131=(cj5*r11);
IkReal x1132=(cj5*r01);
IkReal x1133=((1.0)*x1127);
IkReal x1134=(sj5*x1127);
IkReal x1135=((1.0)*x1128);
evalcond[0]=((((-1.0)*r22*x1135))+((r20*x1134))+((x1127*x1130)));
evalcond[1]=((((-1.0)*r12*x1135))+((r10*x1134))+cj0+((x1127*x1131)));
evalcond[2]=((((-1.0)*r20*sj5*x1135))+(((-1.0)*x1130*x1135))+(((-1.0)*r22*x1133)));
evalcond[3]=(((r00*x1134))+(((-1.0)*x1129))+(((-1.0)*r02*x1135))+((x1127*x1132)));
evalcond[4]=((((-1.0)*r00*sj5*x1135))+(((-1.0)*x1132*x1135))+(((-1.0)*r02*x1133))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x1133))+(((-1.0)*r10*sj5*x1135))+(((-1.0)*x1131*x1135))+(((-1.0)*x1129)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1136 = IKatan2WithCheck(IkReal((((cj0*cj5*r21))+((cj0*r20*sj5)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1136.valid){
continue;
}
CheckValue<IkReal> x1137=IKPowWithIntegerCheck(IKsign((((r01*sj5))+(((-1.0)*cj5*r00)))),-1);
if(!x1137.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1136.value)+(((1.5707963267949)*(x1137.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1138=IKcos(j4);
IkReal x1139=IKsin(j4);
IkReal x1140=((1.0)*sj0);
IkReal x1141=(cj5*r21);
IkReal x1142=(cj5*r11);
IkReal x1143=(cj5*r01);
IkReal x1144=((1.0)*x1138);
IkReal x1145=(sj5*x1138);
IkReal x1146=((1.0)*x1139);
evalcond[0]=(((r20*x1145))+(((-1.0)*r22*x1146))+((x1138*x1141)));
evalcond[1]=(cj0+(((-1.0)*r12*x1146))+((r10*x1145))+((x1138*x1142)));
evalcond[2]=((((-1.0)*x1141*x1146))+(((-1.0)*r20*sj5*x1146))+(((-1.0)*r22*x1144)));
evalcond[3]=((((-1.0)*x1140))+(((-1.0)*r02*x1146))+((r00*x1145))+((x1138*x1143)));
evalcond[4]=((((-1.0)*x1143*x1146))+(((-1.0)*r00*sj5*x1146))+(((-1.0)*r02*x1144))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1140))+(((-1.0)*r10*sj5*x1146))+(((-1.0)*r12*x1144))+(((-1.0)*x1142*x1146)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((0.201567296370008)*py))+(((-1.40393030076476)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.201567296370008)*px))+(((1.40393030076476)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.201567296370008)*py))+(((-1.40393030076476)*px))))+IKsqr(((((0.201567296370008)*px))+(((1.40393030076476)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((0.201567296370008)*py))+(((-1.40393030076476)*px))), ((((0.201567296370008)*px))+(((1.40393030076476)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1147=IKsin(j0);
IkReal x1148=IKcos(j0);
evalcond[0]=((((-1.0)*px))+(((0.1002)*x1148))+(((-0.6979)*x1147)));
evalcond[1]=((((-1.0)*py))+(((0.6979)*x1148))+(((0.1002)*x1147)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1149=(((cj5*r10))+(((-1.0)*r11*sj5)));
j4eval[0]=x1149;
j4eval[1]=IKsign(x1149);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r21*sj0))+((r20*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1150=((((-1.0)*r01*sj5))+((cj5*r00)));
j4eval[0]=x1150;
j4eval[1]=IKsign(x1150);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs((((cj0*cj5*r21))+((cj0*r20*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1151=(((r21*sj5))+(((-1.0)*cj5*r20)));
j4eval[0]=x1151;
j4eval[1]=((IKabs((((r12*sj0))+((cj0*r02)))))+(IKabs((((cj0*cj5*r01))+((cj5*r11*sj0))+((cj0*r00*sj5))+((r10*sj0*sj5))))));
j4eval[2]=IKsign(x1151);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1152 = IKatan2WithCheck(IkReal((((cj0*cj5*r01))+((cj5*r11*sj0))+((cj0*r00*sj5))+((r10*sj0*sj5)))),IkReal((((r12*sj0))+((cj0*r02)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1152.valid){
continue;
}
CheckValue<IkReal> x1153=IKPowWithIntegerCheck(IKsign((((r21*sj5))+(((-1.0)*cj5*r20)))),-1);
if(!x1153.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1152.value)+(((1.5707963267949)*(x1153.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1154=IKcos(j4);
IkReal x1155=IKsin(j4);
IkReal x1156=((1.0)*cj0);
IkReal x1157=(cj5*r21);
IkReal x1158=(cj5*r11);
IkReal x1159=(cj5*r01);
IkReal x1160=((1.0)*x1154);
IkReal x1161=(sj5*x1154);
IkReal x1162=((1.0)*x1155);
evalcond[0]=(((r20*x1161))+(((-1.0)*r22*x1162))+((x1154*x1157)));
evalcond[1]=(sj0+(((-1.0)*r02*x1162))+((r00*x1161))+((x1154*x1159)));
evalcond[2]=((((-1.0)*r20*sj5*x1162))+(((-1.0)*r22*x1160))+(((-1.0)*x1157*x1162)));
evalcond[3]=((((-1.0)*x1156))+((r10*x1161))+(((-1.0)*r12*x1162))+((x1154*x1158)));
evalcond[4]=((((-1.0)*r02*x1160))+(((-1.0)*x1159*x1162))+(((-1.0)*x1156))+(((-1.0)*r00*sj5*x1162)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r10*sj5*x1162))+(((-1.0)*x1158*x1162))+(((-1.0)*r12*x1160)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1163=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj5))+((cj5*r00)))),-1);
if(!x1163.valid){
continue;
}
CheckValue<IkReal> x1164 = IKatan2WithCheck(IkReal((((cj0*cj5*r21))+((cj0*r20*sj5)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1164.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1163.value)))+(x1164.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1165=IKcos(j4);
IkReal x1166=IKsin(j4);
IkReal x1167=((1.0)*cj0);
IkReal x1168=(cj5*r21);
IkReal x1169=(cj5*r11);
IkReal x1170=(cj5*r01);
IkReal x1171=((1.0)*x1165);
IkReal x1172=(sj5*x1165);
IkReal x1173=((1.0)*x1166);
evalcond[0]=(((r20*x1172))+((x1165*x1168))+(((-1.0)*r22*x1173)));
evalcond[1]=((((-1.0)*r02*x1173))+sj0+((x1165*x1170))+((r00*x1172)));
evalcond[2]=((((-1.0)*x1168*x1173))+(((-1.0)*r20*sj5*x1173))+(((-1.0)*r22*x1171)));
evalcond[3]=(((x1165*x1169))+((r10*x1172))+(((-1.0)*r12*x1173))+(((-1.0)*x1167)));
evalcond[4]=((((-1.0)*r02*x1171))+(((-1.0)*x1170*x1173))+(((-1.0)*x1167))+(((-1.0)*r00*sj5*x1173)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r10*sj5*x1173))+(((-1.0)*r12*x1171))+(((-1.0)*x1169*x1173)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1174=IKPowWithIntegerCheck(IKsign((((cj5*r10))+(((-1.0)*r11*sj5)))),-1);
if(!x1174.valid){
continue;
}
CheckValue<IkReal> x1175 = IKatan2WithCheck(IkReal((((cj5*r21*sj0))+((r20*sj0*sj5)))),IkReal((r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x1175.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1174.value)))+(x1175.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1176=IKcos(j4);
IkReal x1177=IKsin(j4);
IkReal x1178=((1.0)*cj0);
IkReal x1179=(cj5*r21);
IkReal x1180=(cj5*r11);
IkReal x1181=(cj5*r01);
IkReal x1182=((1.0)*x1176);
IkReal x1183=(sj5*x1176);
IkReal x1184=((1.0)*x1177);
evalcond[0]=(((x1176*x1179))+(((-1.0)*r22*x1184))+((r20*x1183)));
evalcond[1]=(sj0+((r00*x1183))+((x1176*x1181))+(((-1.0)*r02*x1184)));
evalcond[2]=((((-1.0)*x1179*x1184))+(((-1.0)*r22*x1182))+(((-1.0)*r20*sj5*x1184)));
evalcond[3]=(((r10*x1183))+((x1176*x1180))+(((-1.0)*x1178))+(((-1.0)*r12*x1184)));
evalcond[4]=((((-1.0)*x1181*x1184))+(((-1.0)*r00*sj5*x1184))+(((-1.0)*x1178))+(((-1.0)*r02*x1182)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r10*sj5*x1184))+(((-1.0)*x1180*x1184))+(((-1.0)*r12*x1182)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((0.109548114029628)*px))+(((9.97883729615337)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.109548114029628)*py))+(((9.97883729615337)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.109548114029628)*px))+(((9.97883729615337)*py))))+IKsqr(((((-0.109548114029628)*py))+(((9.97883729615337)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((0.109548114029628)*px))+(((9.97883729615337)*py))), ((((-0.109548114029628)*py))+(((9.97883729615337)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1185=IKsin(j0);
IkReal x1186=IKcos(j0);
evalcond[0]=((((0.1002)*x1186))+(((-1.0)*px))+(((0.0011)*x1185)));
evalcond[1]=((((0.1002)*x1185))+(((-1.0)*py))+(((-0.0011)*x1186)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1187=(((r01*sj5))+(((-1.0)*cj5*r00)));
j4eval[0]=x1187;
j4eval[1]=IKsign(x1187);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs((((cj0*cj5*r21))+((cj0*r20*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1188=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[0]=x1188;
j4eval[1]=IKsign(x1188);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r21*sj0))+((r20*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1189=((1.0)*sj0);
IkReal x1190=((1.0)*cj5);
IkReal x1191=((1.0)*cj0);
IkReal x1192=(((r21*sj5))+(((-1.0)*r20*x1190)));
j4eval[0]=x1192;
j4eval[1]=((IKabs(((((-1.0)*r10*sj5*x1189))+(((-1.0)*r00*sj5*x1191))+(((-1.0)*cj5*r11*x1189))+(((-1.0)*cj0*r01*x1190)))))+(IKabs(((((-1.0)*r02*x1191))+(((-1.0)*r12*x1189))))));
j4eval[2]=IKsign(x1192);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1193=((1.0)*sj0);
IkReal x1194=((1.0)*cj5);
IkReal x1195=((1.0)*cj0);
CheckValue<IkReal> x1196=IKPowWithIntegerCheck(IKsign((((r21*sj5))+(((-1.0)*r20*x1194)))),-1);
if(!x1196.valid){
continue;
}
CheckValue<IkReal> x1197 = IKatan2WithCheck(IkReal(((((-1.0)*r10*sj5*x1193))+(((-1.0)*r00*sj5*x1195))+(((-1.0)*cj5*r11*x1193))+(((-1.0)*cj0*r01*x1194)))),IkReal(((((-1.0)*r02*x1195))+(((-1.0)*r12*x1193)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1197.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1196.value)))+(x1197.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1198=IKcos(j4);
IkReal x1199=IKsin(j4);
IkReal x1200=((1.0)*sj0);
IkReal x1201=(cj5*r21);
IkReal x1202=(cj5*r11);
IkReal x1203=(cj5*r01);
IkReal x1204=((1.0)*x1198);
IkReal x1205=(sj5*x1198);
IkReal x1206=((1.0)*x1199);
evalcond[0]=((((-1.0)*r22*x1206))+((r20*x1205))+((x1198*x1201)));
evalcond[1]=(cj0+((r10*x1205))+(((-1.0)*r12*x1206))+((x1198*x1202)));
evalcond[2]=((((-1.0)*r22*x1204))+(((-1.0)*r20*sj5*x1206))+(((-1.0)*x1201*x1206)));
evalcond[3]=((((-1.0)*r02*x1206))+((r00*x1205))+(((-1.0)*x1200))+((x1198*x1203)));
evalcond[4]=((((-1.0)*r00*sj5*x1206))+(((-1.0)*r02*x1204))+(((-1.0)*x1203*x1206))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r10*sj5*x1206))+(((-1.0)*x1202*x1206))+(((-1.0)*x1200))+(((-1.0)*r12*x1204)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1207=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10))+((r11*sj5)))),-1);
if(!x1207.valid){
continue;
}
CheckValue<IkReal> x1208 = IKatan2WithCheck(IkReal((((cj5*r21*sj0))+((r20*sj0*sj5)))),IkReal((r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x1208.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1207.value)))+(x1208.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1209=IKcos(j4);
IkReal x1210=IKsin(j4);
IkReal x1211=((1.0)*sj0);
IkReal x1212=(cj5*r21);
IkReal x1213=(cj5*r11);
IkReal x1214=(cj5*r01);
IkReal x1215=((1.0)*x1209);
IkReal x1216=(sj5*x1209);
IkReal x1217=((1.0)*x1210);
evalcond[0]=((((-1.0)*r22*x1217))+((r20*x1216))+((x1209*x1212)));
evalcond[1]=(cj0+((r10*x1216))+(((-1.0)*r12*x1217))+((x1209*x1213)));
evalcond[2]=((((-1.0)*r22*x1215))+(((-1.0)*x1212*x1217))+(((-1.0)*r20*sj5*x1217)));
evalcond[3]=((((-1.0)*r02*x1217))+((r00*x1216))+(((-1.0)*x1211))+((x1209*x1214)));
evalcond[4]=((((-1.0)*r02*x1215))+(((-1.0)*r00*sj5*x1217))+(((-1.0)*x1214*x1217))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1213*x1217))+(((-1.0)*r10*sj5*x1217))+(((-1.0)*r12*x1215))+(((-1.0)*x1211)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1218 = IKatan2WithCheck(IkReal((((cj0*cj5*r21))+((cj0*r20*sj5)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1218.valid){
continue;
}
CheckValue<IkReal> x1219=IKPowWithIntegerCheck(IKsign((((r01*sj5))+(((-1.0)*cj5*r00)))),-1);
if(!x1219.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1218.value)+(((1.5707963267949)*(x1219.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1220=IKcos(j4);
IkReal x1221=IKsin(j4);
IkReal x1222=((1.0)*sj0);
IkReal x1223=(cj5*r21);
IkReal x1224=(cj5*r11);
IkReal x1225=(cj5*r01);
IkReal x1226=((1.0)*x1220);
IkReal x1227=(sj5*x1220);
IkReal x1228=((1.0)*x1221);
evalcond[0]=(((r20*x1227))+((x1220*x1223))+(((-1.0)*r22*x1228)));
evalcond[1]=(cj0+(((-1.0)*r12*x1228))+((x1220*x1224))+((r10*x1227)));
evalcond[2]=((((-1.0)*r20*sj5*x1228))+(((-1.0)*r22*x1226))+(((-1.0)*x1223*x1228)));
evalcond[3]=((((-1.0)*x1222))+((r00*x1227))+((x1220*x1225))+(((-1.0)*r02*x1228)));
evalcond[4]=((((-1.0)*x1225*x1228))+(((-1.0)*r00*sj5*x1228))+(((-1.0)*r02*x1226))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1224*x1228))+(((-1.0)*x1222))+(((-1.0)*r12*x1226))+(((-1.0)*r10*sj5*x1228)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.64391582770565)*px))+(((0.757998185797156)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.757998185797156)*px))+(((-2.64391582770565)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.64391582770565)*px))+(((0.757998185797156)*py))))+IKsqr(((((0.757998185797156)*px))+(((-2.64391582770565)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.64391582770565)*px))+(((0.757998185797156)*py))), ((((0.757998185797156)*px))+(((-2.64391582770565)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1229=IKsin(j0);
IkReal x1230=IKcos(j0);
evalcond[0]=((((0.1002)*x1230))+(((-1.0)*px))+(((0.3495)*x1229)));
evalcond[1]=((((0.1002)*x1229))+(((-1.0)*py))+(((-0.3495)*x1230)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1231=(((r01*sj5))+(((-1.0)*cj5*r00)));
j4eval[0]=x1231;
j4eval[1]=IKsign(x1231);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs((((cj0*cj5*r21))+((cj0*r20*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1232=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[0]=x1232;
j4eval[1]=IKsign(x1232);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r21*sj0))+((r20*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1233=((1.0)*sj0);
IkReal x1234=((1.0)*cj5);
IkReal x1235=((1.0)*cj0);
IkReal x1236=(((r21*sj5))+(((-1.0)*r20*x1234)));
j4eval[0]=x1236;
j4eval[1]=((IKabs(((((-1.0)*r12*x1233))+(((-1.0)*r02*x1235)))))+(IKabs(((((-1.0)*cj0*r01*x1234))+(((-1.0)*r00*sj5*x1235))+(((-1.0)*cj5*r11*x1233))+(((-1.0)*r10*sj5*x1233))))));
j4eval[2]=IKsign(x1236);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1237=((1.0)*sj0);
IkReal x1238=((1.0)*cj5);
IkReal x1239=((1.0)*cj0);
CheckValue<IkReal> x1240 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r01*x1238))+(((-1.0)*r00*sj5*x1239))+(((-1.0)*cj5*r11*x1237))+(((-1.0)*r10*sj5*x1237)))),IkReal(((((-1.0)*r12*x1237))+(((-1.0)*r02*x1239)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1240.valid){
continue;
}
CheckValue<IkReal> x1241=IKPowWithIntegerCheck(IKsign((((r21*sj5))+(((-1.0)*r20*x1238)))),-1);
if(!x1241.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1240.value)+(((1.5707963267949)*(x1241.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1242=IKcos(j4);
IkReal x1243=IKsin(j4);
IkReal x1244=((1.0)*sj0);
IkReal x1245=(cj5*r21);
IkReal x1246=(cj5*r11);
IkReal x1247=(cj5*r01);
IkReal x1248=((1.0)*x1242);
IkReal x1249=(sj5*x1242);
IkReal x1250=((1.0)*x1243);
evalcond[0]=((((-1.0)*r22*x1250))+((r20*x1249))+((x1242*x1245)));
evalcond[1]=((((-1.0)*r12*x1250))+cj0+((x1242*x1246))+((r10*x1249)));
evalcond[2]=((((-1.0)*x1245*x1250))+(((-1.0)*r22*x1248))+(((-1.0)*r20*sj5*x1250)));
evalcond[3]=(((r00*x1249))+(((-1.0)*x1244))+((x1242*x1247))+(((-1.0)*r02*x1250)));
evalcond[4]=((((-1.0)*r02*x1248))+(((-1.0)*x1247*x1250))+(((-1.0)*cj0))+(((-1.0)*r00*sj5*x1250)));
evalcond[5]=((((-1.0)*r10*sj5*x1250))+(((-1.0)*x1246*x1250))+(((-1.0)*x1244))+(((-1.0)*r12*x1248)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1251=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10))+((r11*sj5)))),-1);
if(!x1251.valid){
continue;
}
CheckValue<IkReal> x1252 = IKatan2WithCheck(IkReal((((cj5*r21*sj0))+((r20*sj0*sj5)))),IkReal((r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x1252.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1251.value)))+(x1252.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1253=IKcos(j4);
IkReal x1254=IKsin(j4);
IkReal x1255=((1.0)*sj0);
IkReal x1256=(cj5*r21);
IkReal x1257=(cj5*r11);
IkReal x1258=(cj5*r01);
IkReal x1259=((1.0)*x1253);
IkReal x1260=(sj5*x1253);
IkReal x1261=((1.0)*x1254);
evalcond[0]=((((-1.0)*r22*x1261))+((x1253*x1256))+((r20*x1260)));
evalcond[1]=((((-1.0)*r12*x1261))+cj0+((r10*x1260))+((x1253*x1257)));
evalcond[2]=((((-1.0)*r22*x1259))+(((-1.0)*x1256*x1261))+(((-1.0)*r20*sj5*x1261)));
evalcond[3]=((((-1.0)*x1255))+((x1253*x1258))+(((-1.0)*r02*x1261))+((r00*x1260)));
evalcond[4]=((((-1.0)*x1258*x1261))+(((-1.0)*r00*sj5*x1261))+(((-1.0)*r02*x1259))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1255))+(((-1.0)*r12*x1259))+(((-1.0)*r10*sj5*x1261))+(((-1.0)*x1257*x1261)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1262 = IKatan2WithCheck(IkReal((((cj0*cj5*r21))+((cj0*r20*sj5)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1262.valid){
continue;
}
CheckValue<IkReal> x1263=IKPowWithIntegerCheck(IKsign((((r01*sj5))+(((-1.0)*cj5*r00)))),-1);
if(!x1263.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1262.value)+(((1.5707963267949)*(x1263.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1264=IKcos(j4);
IkReal x1265=IKsin(j4);
IkReal x1266=((1.0)*sj0);
IkReal x1267=(cj5*r21);
IkReal x1268=(cj5*r11);
IkReal x1269=(cj5*r01);
IkReal x1270=((1.0)*x1264);
IkReal x1271=(sj5*x1264);
IkReal x1272=((1.0)*x1265);
evalcond[0]=(((x1264*x1267))+(((-1.0)*r22*x1272))+((r20*x1271)));
evalcond[1]=(((r10*x1271))+cj0+(((-1.0)*r12*x1272))+((x1264*x1268)));
evalcond[2]=((((-1.0)*x1267*x1272))+(((-1.0)*r22*x1270))+(((-1.0)*r20*sj5*x1272)));
evalcond[3]=(((x1264*x1269))+(((-1.0)*r02*x1272))+((r00*x1271))+(((-1.0)*x1266)));
evalcond[4]=((((-1.0)*x1269*x1272))+(((-1.0)*r02*x1270))+(((-1.0)*r00*sj5*x1272))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1268*x1272))+(((-1.0)*r10*sj5*x1272))+(((-1.0)*r12*x1270))+(((-1.0)*x1266)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((0.757998185797156)*py))+(((-2.64391582770565)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.64391582770565)*py))+(((0.757998185797156)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.757998185797156)*py))+(((-2.64391582770565)*px))))+IKsqr(((((2.64391582770565)*py))+(((0.757998185797156)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((0.757998185797156)*py))+(((-2.64391582770565)*px))), ((((2.64391582770565)*py))+(((0.757998185797156)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1273=IKsin(j0);
IkReal x1274=IKcos(j0);
evalcond[0]=((((-0.3495)*x1273))+(((0.1002)*x1274))+(((-1.0)*px)));
evalcond[1]=((((0.3495)*x1274))+(((0.1002)*x1273))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1275=(((cj5*r10))+(((-1.0)*r11*sj5)));
j4eval[0]=x1275;
j4eval[1]=IKsign(x1275);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r21*sj0))+((r20*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1276=((((-1.0)*r01*sj5))+((cj5*r00)));
j4eval[0]=x1276;
j4eval[1]=IKsign(x1276);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs((((cj0*cj5*r21))+((cj0*r20*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1277=(((r21*sj5))+(((-1.0)*cj5*r20)));
j4eval[0]=x1277;
j4eval[1]=((IKabs((((r12*sj0))+((cj0*r02)))))+(IKabs((((cj0*cj5*r01))+((cj5*r11*sj0))+((cj0*r00*sj5))+((r10*sj0*sj5))))));
j4eval[2]=IKsign(x1277);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1278 = IKatan2WithCheck(IkReal((((cj0*cj5*r01))+((cj5*r11*sj0))+((cj0*r00*sj5))+((r10*sj0*sj5)))),IkReal((((r12*sj0))+((cj0*r02)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1278.valid){
continue;
}
CheckValue<IkReal> x1279=IKPowWithIntegerCheck(IKsign((((r21*sj5))+(((-1.0)*cj5*r20)))),-1);
if(!x1279.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1278.value)+(((1.5707963267949)*(x1279.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1280=IKcos(j4);
IkReal x1281=IKsin(j4);
IkReal x1282=((1.0)*cj0);
IkReal x1283=(cj5*r21);
IkReal x1284=(cj5*r11);
IkReal x1285=(cj5*r01);
IkReal x1286=((1.0)*x1280);
IkReal x1287=(sj5*x1280);
IkReal x1288=((1.0)*x1281);
evalcond[0]=((((-1.0)*r22*x1288))+((r20*x1287))+((x1280*x1283)));
evalcond[1]=((((-1.0)*r02*x1288))+sj0+((r00*x1287))+((x1280*x1285)));
evalcond[2]=((((-1.0)*r22*x1286))+(((-1.0)*r20*sj5*x1288))+(((-1.0)*x1283*x1288)));
evalcond[3]=(((r10*x1287))+(((-1.0)*x1282))+((x1280*x1284))+(((-1.0)*r12*x1288)));
evalcond[4]=((((-1.0)*r02*x1286))+(((-1.0)*r00*sj5*x1288))+(((-1.0)*x1285*x1288))+(((-1.0)*x1282)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1284*x1288))+(((-1.0)*r10*sj5*x1288))+(((-1.0)*r12*x1286)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1289=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj5))+((cj5*r00)))),-1);
if(!x1289.valid){
continue;
}
CheckValue<IkReal> x1290 = IKatan2WithCheck(IkReal((((cj0*cj5*r21))+((cj0*r20*sj5)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1290.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1289.value)))+(x1290.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1291=IKcos(j4);
IkReal x1292=IKsin(j4);
IkReal x1293=((1.0)*cj0);
IkReal x1294=(cj5*r21);
IkReal x1295=(cj5*r11);
IkReal x1296=(cj5*r01);
IkReal x1297=((1.0)*x1291);
IkReal x1298=(sj5*x1291);
IkReal x1299=((1.0)*x1292);
evalcond[0]=(((r20*x1298))+((x1291*x1294))+(((-1.0)*r22*x1299)));
evalcond[1]=(sj0+((x1291*x1296))+(((-1.0)*r02*x1299))+((r00*x1298)));
evalcond[2]=((((-1.0)*r20*sj5*x1299))+(((-1.0)*r22*x1297))+(((-1.0)*x1294*x1299)));
evalcond[3]=((((-1.0)*x1293))+((x1291*x1295))+(((-1.0)*r12*x1299))+((r10*x1298)));
evalcond[4]=((((-1.0)*x1293))+(((-1.0)*r00*sj5*x1299))+(((-1.0)*r02*x1297))+(((-1.0)*x1296*x1299)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r10*sj5*x1299))+(((-1.0)*r12*x1297))+(((-1.0)*x1295*x1299)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1300=IKPowWithIntegerCheck(IKsign((((cj5*r10))+(((-1.0)*r11*sj5)))),-1);
if(!x1300.valid){
continue;
}
CheckValue<IkReal> x1301 = IKatan2WithCheck(IkReal((((cj5*r21*sj0))+((r20*sj0*sj5)))),IkReal((r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x1301.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1300.value)))+(x1301.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1302=IKcos(j4);
IkReal x1303=IKsin(j4);
IkReal x1304=((1.0)*cj0);
IkReal x1305=(cj5*r21);
IkReal x1306=(cj5*r11);
IkReal x1307=(cj5*r01);
IkReal x1308=((1.0)*x1302);
IkReal x1309=(sj5*x1302);
IkReal x1310=((1.0)*x1303);
evalcond[0]=((((-1.0)*r22*x1310))+((x1302*x1305))+((r20*x1309)));
evalcond[1]=(sj0+((x1302*x1307))+(((-1.0)*r02*x1310))+((r00*x1309)));
evalcond[2]=((((-1.0)*r22*x1308))+(((-1.0)*x1305*x1310))+(((-1.0)*r20*sj5*x1310)));
evalcond[3]=(((r10*x1309))+(((-1.0)*r12*x1310))+(((-1.0)*x1304))+((x1302*x1306)));
evalcond[4]=((((-1.0)*x1307*x1310))+(((-1.0)*r02*x1308))+(((-1.0)*x1304))+(((-1.0)*r00*sj5*x1310)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1306*x1310))+(((-1.0)*r12*x1308))+(((-1.0)*r10*sj5*x1310)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((0.201567296370008)*py))+(((1.40393030076476)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.201567296370008)*px))+(((-1.40393030076476)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.201567296370008)*py))+(((1.40393030076476)*px))))+IKsqr(((((0.201567296370008)*px))+(((-1.40393030076476)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((0.201567296370008)*py))+(((1.40393030076476)*px))), ((((0.201567296370008)*px))+(((-1.40393030076476)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1311=IKsin(j0);
IkReal x1312=IKcos(j0);
evalcond[0]=((((0.6979)*x1311))+(((-1.0)*px))+(((0.1002)*x1312)));
evalcond[1]=((((-1.0)*py))+(((0.1002)*x1311))+(((-0.6979)*x1312)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1313=(((r01*sj5))+(((-1.0)*cj5*r00)));
j4eval[0]=x1313;
j4eval[1]=IKsign(x1313);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs((((cj0*cj5*r21))+((cj0*r20*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1314=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[0]=x1314;
j4eval[1]=IKsign(x1314);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r21*sj0))+((r20*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1315=((1.0)*sj0);
IkReal x1316=((1.0)*cj5);
IkReal x1317=((1.0)*cj0);
IkReal x1318=(((r21*sj5))+(((-1.0)*r20*x1316)));
j4eval[0]=x1318;
j4eval[1]=((IKabs(((((-1.0)*r12*x1315))+(((-1.0)*r02*x1317)))))+(IKabs(((((-1.0)*cj5*r11*x1315))+(((-1.0)*cj0*r01*x1316))+(((-1.0)*r00*sj5*x1317))+(((-1.0)*r10*sj5*x1315))))));
j4eval[2]=IKsign(x1318);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1319=((1.0)*sj0);
IkReal x1320=((1.0)*cj5);
IkReal x1321=((1.0)*cj0);
CheckValue<IkReal> x1322 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r11*x1319))+(((-1.0)*cj0*r01*x1320))+(((-1.0)*r00*sj5*x1321))+(((-1.0)*r10*sj5*x1319)))),IkReal(((((-1.0)*r12*x1319))+(((-1.0)*r02*x1321)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1322.valid){
continue;
}
CheckValue<IkReal> x1323=IKPowWithIntegerCheck(IKsign((((r21*sj5))+(((-1.0)*r20*x1320)))),-1);
if(!x1323.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1322.value)+(((1.5707963267949)*(x1323.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1324=IKcos(j4);
IkReal x1325=IKsin(j4);
IkReal x1326=((1.0)*sj0);
IkReal x1327=(cj5*r21);
IkReal x1328=(cj5*r11);
IkReal x1329=(cj5*r01);
IkReal x1330=((1.0)*x1324);
IkReal x1331=(sj5*x1324);
IkReal x1332=((1.0)*x1325);
evalcond[0]=((((-1.0)*r22*x1332))+((r20*x1331))+((x1324*x1327)));
evalcond[1]=(cj0+((x1324*x1328))+((r10*x1331))+(((-1.0)*r12*x1332)));
evalcond[2]=((((-1.0)*x1327*x1332))+(((-1.0)*r22*x1330))+(((-1.0)*r20*sj5*x1332)));
evalcond[3]=((((-1.0)*x1326))+((r00*x1331))+((x1324*x1329))+(((-1.0)*r02*x1332)));
evalcond[4]=((((-1.0)*r00*sj5*x1332))+(((-1.0)*x1329*x1332))+(((-1.0)*r02*x1330))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1328*x1332))+(((-1.0)*x1326))+(((-1.0)*r10*sj5*x1332))+(((-1.0)*r12*x1330)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1333=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10))+((r11*sj5)))),-1);
if(!x1333.valid){
continue;
}
CheckValue<IkReal> x1334 = IKatan2WithCheck(IkReal((((cj5*r21*sj0))+((r20*sj0*sj5)))),IkReal((r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x1334.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1333.value)))+(x1334.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1335=IKcos(j4);
IkReal x1336=IKsin(j4);
IkReal x1337=((1.0)*sj0);
IkReal x1338=(cj5*r21);
IkReal x1339=(cj5*r11);
IkReal x1340=(cj5*r01);
IkReal x1341=((1.0)*x1335);
IkReal x1342=(sj5*x1335);
IkReal x1343=((1.0)*x1336);
evalcond[0]=(((x1335*x1338))+(((-1.0)*r22*x1343))+((r20*x1342)));
evalcond[1]=(cj0+(((-1.0)*r12*x1343))+((x1335*x1339))+((r10*x1342)));
evalcond[2]=((((-1.0)*x1338*x1343))+(((-1.0)*r22*x1341))+(((-1.0)*r20*sj5*x1343)));
evalcond[3]=((((-1.0)*r02*x1343))+((r00*x1342))+((x1335*x1340))+(((-1.0)*x1337)));
evalcond[4]=((((-1.0)*x1340*x1343))+(((-1.0)*r02*x1341))+(((-1.0)*r00*sj5*x1343))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x1341))+(((-1.0)*x1339*x1343))+(((-1.0)*x1337))+(((-1.0)*r10*sj5*x1343)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1344 = IKatan2WithCheck(IkReal((((cj0*cj5*r21))+((cj0*r20*sj5)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1344.valid){
continue;
}
CheckValue<IkReal> x1345=IKPowWithIntegerCheck(IKsign((((r01*sj5))+(((-1.0)*cj5*r00)))),-1);
if(!x1345.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1344.value)+(((1.5707963267949)*(x1345.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1346=IKcos(j4);
IkReal x1347=IKsin(j4);
IkReal x1348=((1.0)*sj0);
IkReal x1349=(cj5*r21);
IkReal x1350=(cj5*r11);
IkReal x1351=(cj5*r01);
IkReal x1352=((1.0)*x1346);
IkReal x1353=(sj5*x1346);
IkReal x1354=((1.0)*x1347);
evalcond[0]=(((x1346*x1349))+(((-1.0)*r22*x1354))+((r20*x1353)));
evalcond[1]=((((-1.0)*r12*x1354))+((r10*x1353))+cj0+((x1346*x1350)));
evalcond[2]=((((-1.0)*r22*x1352))+(((-1.0)*x1349*x1354))+(((-1.0)*r20*sj5*x1354)));
evalcond[3]=((((-1.0)*x1348))+(((-1.0)*r02*x1354))+((x1346*x1351))+((r00*x1353)));
evalcond[4]=((((-1.0)*r00*sj5*x1354))+(((-1.0)*r02*x1352))+(((-1.0)*x1351*x1354))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x1352))+(((-1.0)*r10*sj5*x1354))+(((-1.0)*x1348))+(((-1.0)*x1350*x1354)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.109548114029628)*px))+(((9.97883729615337)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.109548114029628)*py))+(((9.97883729615337)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.109548114029628)*px))+(((9.97883729615337)*py))))+IKsqr(((((0.109548114029628)*py))+(((9.97883729615337)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.109548114029628)*px))+(((9.97883729615337)*py))), ((((0.109548114029628)*py))+(((9.97883729615337)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1355=IKcos(j0);
IkReal x1356=IKsin(j0);
evalcond[0]=((((-0.0011)*x1356))+(((0.1002)*x1355))+(((-1.0)*px)));
evalcond[1]=((((0.1002)*x1356))+(((-1.0)*py))+(((0.0011)*x1355)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1357=(((cj5*r10))+(((-1.0)*r11*sj5)));
j4eval[0]=x1357;
j4eval[1]=IKsign(x1357);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r21*sj0))+((r20*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1358=((((-1.0)*r01*sj5))+((cj5*r00)));
j4eval[0]=x1358;
j4eval[1]=IKsign(x1358);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs((((cj0*cj5*r21))+((cj0*r20*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1359=(((r21*sj5))+(((-1.0)*cj5*r20)));
j4eval[0]=x1359;
j4eval[1]=((IKabs((((r12*sj0))+((cj0*r02)))))+(IKabs((((cj0*cj5*r01))+((cj5*r11*sj0))+((cj0*r00*sj5))+((r10*sj0*sj5))))));
j4eval[2]=IKsign(x1359);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1360 = IKatan2WithCheck(IkReal((((cj0*cj5*r01))+((cj5*r11*sj0))+((cj0*r00*sj5))+((r10*sj0*sj5)))),IkReal((((r12*sj0))+((cj0*r02)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1360.valid){
continue;
}
CheckValue<IkReal> x1361=IKPowWithIntegerCheck(IKsign((((r21*sj5))+(((-1.0)*cj5*r20)))),-1);
if(!x1361.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1360.value)+(((1.5707963267949)*(x1361.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1362=IKcos(j4);
IkReal x1363=IKsin(j4);
IkReal x1364=((1.0)*cj0);
IkReal x1365=(cj5*r21);
IkReal x1366=(cj5*r11);
IkReal x1367=(cj5*r01);
IkReal x1368=((1.0)*x1362);
IkReal x1369=(sj5*x1362);
IkReal x1370=((1.0)*x1363);
evalcond[0]=((((-1.0)*r22*x1370))+((r20*x1369))+((x1362*x1365)));
evalcond[1]=(sj0+(((-1.0)*r02*x1370))+((r00*x1369))+((x1362*x1367)));
evalcond[2]=((((-1.0)*x1365*x1370))+(((-1.0)*r20*sj5*x1370))+(((-1.0)*r22*x1368)));
evalcond[3]=(((r10*x1369))+(((-1.0)*r12*x1370))+((x1362*x1366))+(((-1.0)*x1364)));
evalcond[4]=((((-1.0)*r02*x1368))+(((-1.0)*r00*sj5*x1370))+(((-1.0)*x1367*x1370))+(((-1.0)*x1364)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r12*x1368))+(((-1.0)*r10*sj5*x1370))+(((-1.0)*x1366*x1370)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1371=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj5))+((cj5*r00)))),-1);
if(!x1371.valid){
continue;
}
CheckValue<IkReal> x1372 = IKatan2WithCheck(IkReal((((cj0*cj5*r21))+((cj0*r20*sj5)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1372.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1371.value)))+(x1372.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1373=IKcos(j4);
IkReal x1374=IKsin(j4);
IkReal x1375=((1.0)*cj0);
IkReal x1376=(cj5*r21);
IkReal x1377=(cj5*r11);
IkReal x1378=(cj5*r01);
IkReal x1379=((1.0)*x1373);
IkReal x1380=(sj5*x1373);
IkReal x1381=((1.0)*x1374);
evalcond[0]=(((r20*x1380))+(((-1.0)*r22*x1381))+((x1373*x1376)));
evalcond[1]=(sj0+(((-1.0)*r02*x1381))+((r00*x1380))+((x1373*x1378)));
evalcond[2]=((((-1.0)*r22*x1379))+(((-1.0)*x1376*x1381))+(((-1.0)*r20*sj5*x1381)));
evalcond[3]=((((-1.0)*r12*x1381))+((r10*x1380))+(((-1.0)*x1375))+((x1373*x1377)));
evalcond[4]=((((-1.0)*r00*sj5*x1381))+(((-1.0)*r02*x1379))+(((-1.0)*x1375))+(((-1.0)*x1378*x1381)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1377*x1381))+(((-1.0)*r10*sj5*x1381))+(((-1.0)*r12*x1379)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1382=IKPowWithIntegerCheck(IKsign((((cj5*r10))+(((-1.0)*r11*sj5)))),-1);
if(!x1382.valid){
continue;
}
CheckValue<IkReal> x1383 = IKatan2WithCheck(IkReal((((cj5*r21*sj0))+((r20*sj0*sj5)))),IkReal((r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x1383.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1382.value)))+(x1383.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1384=IKcos(j4);
IkReal x1385=IKsin(j4);
IkReal x1386=((1.0)*cj0);
IkReal x1387=(cj5*r21);
IkReal x1388=(cj5*r11);
IkReal x1389=(cj5*r01);
IkReal x1390=((1.0)*x1384);
IkReal x1391=(sj5*x1384);
IkReal x1392=((1.0)*x1385);
evalcond[0]=(((r20*x1391))+(((-1.0)*r22*x1392))+((x1384*x1387)));
evalcond[1]=(sj0+(((-1.0)*r02*x1392))+((x1384*x1389))+((r00*x1391)));
evalcond[2]=((((-1.0)*r20*sj5*x1392))+(((-1.0)*r22*x1390))+(((-1.0)*x1387*x1392)));
evalcond[3]=((((-1.0)*x1386))+(((-1.0)*r12*x1392))+((r10*x1391))+((x1384*x1388)));
evalcond[4]=((((-1.0)*x1386))+(((-1.0)*r02*x1390))+(((-1.0)*x1389*x1392))+(((-1.0)*r00*sj5*x1392)));
evalcond[5]=((((-1.0)*r12*x1390))+(((-1.0)*sj0))+(((-1.0)*r10*sj5*x1392))+(((-1.0)*x1388*x1392)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1393=(cj1*cj2);
IkReal x1394=((5000.0)*px);
IkReal x1395=(cj5*r00);
IkReal x1396=(sj1*sj2);
IkReal x1397=(r01*sj5);
IkReal x1398=((1742.0)*sj1);
IkReal x1399=((1747.5)*cj2*sj1);
IkReal x1400=((1747.5)*cj1*sj2);
CheckValue<IkReal> x1401=IKPowWithIntegerCheck((x1396+(((-1.0)*x1393))),-1);
if(!x1401.valid){
continue;
}
CheckValue<IkReal> x1402=IKPowWithIntegerCheck(((((501.0)*x1396))+(((-501.0)*x1393))),-1);
if(!x1402.valid){
continue;
}
if( IKabs(((x1401.value)*((x1395+(((-1.0)*x1397)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1402.value)*(((((502.5)*x1393*x1397))+(((502.5)*x1395*x1396))+(((-1.0)*x1393*x1394))+(((-1.0)*x1397*x1398))+(((-1.0)*x1397*x1399))+((x1394*x1396))+((x1395*x1400))+((x1395*x1399))+((x1395*x1398))+(((-502.5)*x1396*x1397))+(((-502.5)*x1393*x1395))+(((-1.0)*x1397*x1400)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1401.value)*((x1395+(((-1.0)*x1397))))))+IKsqr(((x1402.value)*(((((502.5)*x1393*x1397))+(((502.5)*x1395*x1396))+(((-1.0)*x1393*x1394))+(((-1.0)*x1397*x1398))+(((-1.0)*x1397*x1399))+((x1394*x1396))+((x1395*x1400))+((x1395*x1399))+((x1395*x1398))+(((-502.5)*x1396*x1397))+(((-502.5)*x1393*x1395))+(((-1.0)*x1397*x1400))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1401.value)*((x1395+(((-1.0)*x1397))))), ((x1402.value)*(((((502.5)*x1393*x1397))+(((502.5)*x1395*x1396))+(((-1.0)*x1393*x1394))+(((-1.0)*x1397*x1398))+(((-1.0)*x1397*x1399))+((x1394*x1396))+((x1395*x1400))+((x1395*x1399))+((x1395*x1398))+(((-502.5)*x1396*x1397))+(((-502.5)*x1393*x1395))+(((-1.0)*x1397*x1400))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1403=IKsin(j0);
IkReal x1404=IKcos(j0);
IkReal x1405=((0.3495)*sj1);
IkReal x1406=(cj5*r00);
IkReal x1407=(cj5*r10);
IkReal x1408=(r11*sj5);
IkReal x1409=(r01*sj5);
IkReal x1410=(cj2*x1404);
IkReal x1411=((0.3495)*cj1*sj2);
IkReal x1412=(cj2*x1403);
IkReal x1413=(sj1*x1404);
IkReal x1414=(sj1*x1403);
evalcond[0]=(((sj2*x1414))+(((-1.0)*x1406))+x1409+(((-1.0)*cj1*x1412)));
evalcond[1]=((((-1.0)*x1407))+(((-1.0)*sj2*x1413))+x1408+((cj1*x1410)));
evalcond[2]=((((0.1005)*x1409))+(((-0.3484)*x1414))+(((-1.0)*px))+(((0.1002)*x1404))+(((-0.1005)*x1406))+(((-1.0)*x1403*x1411))+(((-1.0)*x1405*x1412)));
evalcond[3]=((((0.1005)*x1408))+((x1405*x1410))+(((-1.0)*py))+(((0.1002)*x1403))+((x1404*x1411))+(((-0.1005)*x1407))+(((0.3484)*x1413)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1415=((1.0)*sj5);
IkReal x1416=(((cj5*r10))+(((-1.0)*r11*x1415)));
j4eval[0]=x1416;
j4eval[1]=IKsign(x1416);
j4eval[2]=((IKabs(((((-1.0)*cj0*cj5*r21))+(((-1.0)*cj0*r20*x1415)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1417=((1.0)*cj5);
IkReal x1418=(((r01*sj5))+(((-1.0)*r00*x1417)));
j4eval[0]=x1418;
j4eval[1]=IKsign(x1418);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r21*sj0*x1417))+(((-1.0)*r20*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1419=((1.0)*sj0);
IkReal x1420=(((cj5*r20))+(((-1.0)*r21*sj5)));
j4eval[0]=x1420;
j4eval[1]=((IKabs(((((-1.0)*cj5*r01*x1419))+((cj0*cj5*r11))+((cj0*r10*sj5))+(((-1.0)*r00*sj5*x1419)))))+(IKabs(((((-1.0)*cj0*r12))+((r02*sj0))))));
j4eval[2]=IKsign(x1420);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x1421=((-1.0)*r21);
IkReal x1423 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x1423)==0){
continue;
}
IkReal x1422=pow(x1423,-0.5);
CheckValue<IkReal> x1424 = IKatan2WithCheck(IkReal(r20),IkReal(x1421),IKFAST_ATAN2_MAGTHRESH);
if(!x1424.valid){
continue;
}
IkReal gconst72=((-1.0)*(x1424.value));
IkReal gconst73=((-1.0)*r20*x1422);
IkReal gconst74=(x1421*x1422);
CheckValue<IkReal> x1425 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x1425.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1425.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1426=((-1.0)*r21);
CheckValue<IkReal> x1429 = IKatan2WithCheck(IkReal(r20),IkReal(x1426),IKFAST_ATAN2_MAGTHRESH);
if(!x1429.valid){
continue;
}
IkReal x1427=((-1.0)*(x1429.value));
IkReal x1428=x1422;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst73;
cj5=gconst74;
j5=x1427;
IkReal gconst72=x1427;
IkReal gconst73=((-1.0)*r20*x1428);
IkReal gconst74=(x1426*x1428);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x1430=((-1.0)*r21);
CheckValue<IkReal> x1433 = IKatan2WithCheck(IkReal(r20),IkReal(x1430),IKFAST_ATAN2_MAGTHRESH);
if(!x1433.valid){
continue;
}
IkReal x1431=((-1.0)*(x1433.value));
IkReal x1432=x1422;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst73;
cj5=gconst74;
j5=x1431;
IkReal gconst72=x1431;
IkReal gconst73=((-1.0)*r20*x1432);
IkReal gconst74=(x1430*x1432);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1434=((-1.0)*r21);
CheckValue<IkReal> x1437 = IKatan2WithCheck(IkReal(r20),IkReal(x1434),IKFAST_ATAN2_MAGTHRESH);
if(!x1437.valid){
continue;
}
IkReal x1435=((-1.0)*(x1437.value));
IkReal x1436=x1422;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst73;
cj5=gconst74;
j5=x1435;
IkReal gconst72=x1435;
IkReal gconst73=((-1.0)*r20*x1436);
IkReal gconst74=(x1434*x1436);
IkReal x1438=r22*r22;
CheckValue<IkReal> x1441=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x1438))),-1);
if(!x1441.valid){
continue;
}
IkReal x1439=x1441.value;
IkReal x1440=((((2.0)*x1439*(r20*r20)*(r21*r21)))+x1438+((x1439*(r21*r21*r21*r21)))+((x1439*(r20*r20*r20*r20))));
j4eval[0]=x1440;
j4eval[1]=IKsign(x1440);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1442=(gconst74*r21);
IkReal x1443=(sj1*sj2);
IkReal x1444=(gconst73*r20);
IkReal x1445=((1.0)*cj1*cj2);
CheckValue<IkReal> x1446=IKPowWithIntegerCheck(IKsign(((x1442*x1442)+(r22*r22)+(x1444*x1444)+(((2.0)*x1442*x1444)))),-1);
if(!x1446.valid){
continue;
}
CheckValue<IkReal> x1447 = IKatan2WithCheck(IkReal((((cj1*cj2*r22))+(((-1.0)*r22*x1443)))),IkReal((((x1442*x1443))+((x1443*x1444))+(((-1.0)*x1444*x1445))+(((-1.0)*x1442*x1445)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1447.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1446.value)))+(x1447.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1448=IKsin(j4);
IkReal x1449=IKcos(j4);
IkReal x1450=(cj2*sj1);
IkReal x1451=((1.0)*sj2);
IkReal x1452=(gconst74*r01);
IkReal x1453=(gconst74*r11);
IkReal x1454=(gconst74*r21);
IkReal x1455=((1.0)*cj0);
IkReal x1456=((1.0)*x1449);
IkReal x1457=(gconst73*x1449);
IkReal x1458=((1.0)*x1448);
IkReal x1459=(gconst73*x1458);
evalcond[0]=((((-1.0)*r20*x1459))+(((-1.0)*r22*x1456))+(((-1.0)*x1454*x1458)));
evalcond[1]=((((-1.0)*x1455))+(((-1.0)*r02*x1456))+(((-1.0)*r00*x1459))+(((-1.0)*x1452*x1458)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x1453*x1458))+(((-1.0)*r10*x1459))+(((-1.0)*r12*x1456)));
evalcond[3]=((((-1.0)*r22*x1458))+((r20*x1457))+((cj1*cj2))+(((-1.0)*sj1*x1451))+((x1449*x1454)));
evalcond[4]=(((cj1*sj0*sj2))+(((-1.0)*r02*x1458))+((sj0*x1450))+((r00*x1457))+((x1449*x1452)));
evalcond[5]=((((-1.0)*cj0*cj1*x1451))+((r10*x1457))+((x1449*x1453))+(((-1.0)*r12*x1458))+(((-1.0)*x1450*x1455)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1460=((1.0)*sj0);
CheckValue<IkReal> x1461 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst73*r20*x1460))+(((-1.0)*gconst74*r21*x1460)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1461.valid){
continue;
}
CheckValue<IkReal> x1462=IKPowWithIntegerCheck(IKsign((((gconst73*r01))+(((-1.0)*gconst74*r00)))),-1);
if(!x1462.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1461.value)+(((1.5707963267949)*(x1462.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1463=IKsin(j4);
IkReal x1464=IKcos(j4);
IkReal x1465=(cj2*sj1);
IkReal x1466=((1.0)*sj2);
IkReal x1467=(gconst74*r01);
IkReal x1468=(gconst74*r11);
IkReal x1469=(gconst74*r21);
IkReal x1470=((1.0)*cj0);
IkReal x1471=((1.0)*x1464);
IkReal x1472=(gconst73*x1464);
IkReal x1473=((1.0)*x1463);
IkReal x1474=(gconst73*x1473);
evalcond[0]=((((-1.0)*r22*x1471))+(((-1.0)*r20*x1474))+(((-1.0)*x1469*x1473)));
evalcond[1]=((((-1.0)*r00*x1474))+(((-1.0)*x1467*x1473))+(((-1.0)*x1470))+(((-1.0)*r02*x1471)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r10*x1474))+(((-1.0)*r12*x1471))+(((-1.0)*x1468*x1473)));
evalcond[3]=((((-1.0)*r22*x1473))+((x1464*x1469))+((r20*x1472))+((cj1*cj2))+(((-1.0)*sj1*x1466)));
evalcond[4]=(((x1464*x1467))+((cj1*sj0*sj2))+((sj0*x1465))+(((-1.0)*r02*x1473))+((r00*x1472)));
evalcond[5]=(((r10*x1472))+(((-1.0)*r12*x1473))+((x1464*x1468))+(((-1.0)*x1465*x1470))+(((-1.0)*cj0*cj1*x1466)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1475=((1.0)*cj0);
CheckValue<IkReal> x1476=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst73*r11))+((gconst74*r10)))),-1);
if(!x1476.valid){
continue;
}
CheckValue<IkReal> x1477 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*gconst73*r20*x1475))+(((-1.0)*gconst74*r21*x1475)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1477.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1476.value)))+(x1477.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1478=IKsin(j4);
IkReal x1479=IKcos(j4);
IkReal x1480=(cj2*sj1);
IkReal x1481=((1.0)*sj2);
IkReal x1482=(gconst74*r01);
IkReal x1483=(gconst74*r11);
IkReal x1484=(gconst74*r21);
IkReal x1485=((1.0)*cj0);
IkReal x1486=((1.0)*x1479);
IkReal x1487=(gconst73*x1479);
IkReal x1488=((1.0)*x1478);
IkReal x1489=(gconst73*x1488);
evalcond[0]=((((-1.0)*r20*x1489))+(((-1.0)*x1484*x1488))+(((-1.0)*r22*x1486)));
evalcond[1]=((((-1.0)*x1482*x1488))+(((-1.0)*x1485))+(((-1.0)*r00*x1489))+(((-1.0)*r02*x1486)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r12*x1486))+(((-1.0)*x1483*x1488))+(((-1.0)*r10*x1489)));
evalcond[3]=(((r20*x1487))+(((-1.0)*sj1*x1481))+(((-1.0)*r22*x1488))+((cj1*cj2))+((x1479*x1484)));
evalcond[4]=(((sj0*x1480))+((r00*x1487))+((cj1*sj0*sj2))+(((-1.0)*r02*x1488))+((x1479*x1482)));
evalcond[5]=(((r10*x1487))+(((-1.0)*r12*x1488))+(((-1.0)*x1480*x1485))+(((-1.0)*cj0*cj1*x1481))+((x1479*x1483)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1492 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x1492)==0){
continue;
}
IkReal x1490=pow(x1492,-0.5);
IkReal x1491=((1.0)*x1490);
CheckValue<IkReal> x1493 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x1493.valid){
continue;
}
IkReal gconst75=((3.14159265358979)+(((-1.0)*(x1493.value))));
IkReal gconst76=(r20*x1491);
IkReal gconst77=(r21*x1491);
CheckValue<IkReal> x1494 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x1494.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x1494.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x1498 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x1498.valid){
continue;
}
IkReal x1495=((1.0)*(x1498.value));
IkReal x1496=x1490;
IkReal x1497=((1.0)*x1496);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst76;
cj5=gconst77;
j5=((3.14159265)+(((-1.0)*x1495)));
IkReal gconst75=((3.14159265358979)+(((-1.0)*x1495)));
IkReal gconst76=(r20*x1497);
IkReal gconst77=(r21*x1497);
IkReal x1499=r22*r22;
IkReal x1500=((1.0)*x1499);
CheckValue<IkReal> x1504=IKPowWithIntegerCheck(((-1.0)+x1499),-1);
if(!x1504.valid){
continue;
}
IkReal x1501=x1504.value;
if((((1.0)+(((-1.0)*x1500)))) < -0.00001)
continue;
IkReal x1502=IKsqrt(((1.0)+(((-1.0)*x1500))));
IkReal x1503=(cj0*x1501*x1502);
j4eval[0]=((IKabs((x1503+(((-1.0)*x1500*x1503)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x1508 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x1508.valid){
continue;
}
IkReal x1505=((1.0)*(x1508.value));
IkReal x1506=x1490;
IkReal x1507=((1.0)*x1506);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst76;
cj5=gconst77;
j5=((3.14159265)+(((-1.0)*x1505)));
IkReal gconst75=((3.14159265358979)+(((-1.0)*x1505)));
IkReal gconst76=(r20*x1507);
IkReal gconst77=(r21*x1507);
IkReal x1509=r22*r22;
IkReal x1510=((1.0)*x1509);
CheckValue<IkReal> x1514=IKPowWithIntegerCheck(((-1.0)+x1509),-1);
if(!x1514.valid){
continue;
}
IkReal x1511=x1514.value;
if((((1.0)+(((-1.0)*x1510)))) < -0.00001)
continue;
IkReal x1512=IKsqrt(((1.0)+(((-1.0)*x1510))));
IkReal x1513=(sj0*x1511*x1512);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x1510*x1513))+x1513))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x1518 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x1518.valid){
continue;
}
IkReal x1515=((1.0)*(x1518.value));
IkReal x1516=x1490;
IkReal x1517=((1.0)*x1516);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst76;
cj5=gconst77;
j5=((3.14159265)+(((-1.0)*x1515)));
IkReal gconst75=((3.14159265358979)+(((-1.0)*x1515)));
IkReal gconst76=(r20*x1517);
IkReal gconst77=(r21*x1517);
IkReal x1519=r22*r22;
IkReal x1520=(cj0*r12);
IkReal x1521=(r02*sj0);
CheckValue<IkReal> x1525=IKPowWithIntegerCheck(((-1.0)+x1519),-1);
if(!x1525.valid){
continue;
}
IkReal x1522=x1525.value;
if((((1.0)+(((-1.0)*x1519)))) < -0.00001)
continue;
IkReal x1523=IKsqrt(((1.0)+(((-1.0)*x1519))));
IkReal x1524=(r22*x1522*x1523);
j4eval[0]=0;
j4eval[1]=((IKabs((((x1520*x1524))+(((-1.0)*x1521*x1524)))))+(IKabs((x1521+(((-1.0)*x1520))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1526=((1.0)*gconst76);
CheckValue<IkReal> x1527=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x1526))+((gconst77*r20)))),-1);
if(!x1527.valid){
continue;
}
CheckValue<IkReal> x1528 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r12))+((r02*sj0)))),IkReal(((((-1.0)*gconst77*r01*sj0))+(((-1.0)*r00*sj0*x1526))+((cj0*gconst76*r10))+((cj0*gconst77*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1528.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1527.value)))+(x1528.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1529=IKsin(j4);
IkReal x1530=IKcos(j4);
IkReal x1531=(gconst77*r21);
IkReal x1532=(cj2*sj1);
IkReal x1533=((1.0)*sj2);
IkReal x1534=((1.0)*cj0);
IkReal x1535=((1.0)*x1530);
IkReal x1536=((1.0)*x1529);
IkReal x1537=(gconst77*x1530);
IkReal x1538=(gconst76*x1530);
evalcond[0]=((((-1.0)*x1531*x1536))+(((-1.0)*r22*x1535))+(((-1.0)*gconst76*r20*x1536)));
evalcond[1]=((((-1.0)*x1534))+(((-1.0)*r02*x1535))+(((-1.0)*gconst76*r00*x1536))+(((-1.0)*gconst77*r01*x1536)));
evalcond[2]=((((-1.0)*gconst76*r10*x1536))+(((-1.0)*sj0))+(((-1.0)*r12*x1535))+(((-1.0)*gconst77*r11*x1536)));
evalcond[3]=((((-1.0)*sj1*x1533))+(((-1.0)*r22*x1536))+((x1530*x1531))+((r20*x1538))+((cj1*cj2)));
evalcond[4]=(((r01*x1537))+((sj0*x1532))+((r00*x1538))+(((-1.0)*r02*x1536))+((cj1*sj0*sj2)));
evalcond[5]=((((-1.0)*r12*x1536))+(((-1.0)*cj0*cj1*x1533))+((r10*x1538))+((r11*x1537))+(((-1.0)*x1532*x1534)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1539=((1.0)*sj0);
CheckValue<IkReal> x1540=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst77*r00))+((gconst76*r01)))),-1);
if(!x1540.valid){
continue;
}
CheckValue<IkReal> x1541 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst77*r21*x1539))+(((-1.0)*gconst76*r20*x1539)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1541.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1540.value)))+(x1541.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1542=IKsin(j4);
IkReal x1543=IKcos(j4);
IkReal x1544=(gconst77*r21);
IkReal x1545=(cj2*sj1);
IkReal x1546=((1.0)*sj2);
IkReal x1547=((1.0)*cj0);
IkReal x1548=((1.0)*x1543);
IkReal x1549=((1.0)*x1542);
IkReal x1550=(gconst77*x1543);
IkReal x1551=(gconst76*x1543);
evalcond[0]=((((-1.0)*gconst76*r20*x1549))+(((-1.0)*r22*x1548))+(((-1.0)*x1544*x1549)));
evalcond[1]=((((-1.0)*r02*x1548))+(((-1.0)*x1547))+(((-1.0)*gconst76*r00*x1549))+(((-1.0)*gconst77*r01*x1549)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*gconst77*r11*x1549))+(((-1.0)*gconst76*r10*x1549))+(((-1.0)*r12*x1548)));
evalcond[3]=((((-1.0)*r22*x1549))+((x1543*x1544))+((cj1*cj2))+((r20*x1551))+(((-1.0)*sj1*x1546)));
evalcond[4]=(((r00*x1551))+((r01*x1550))+(((-1.0)*r02*x1549))+((cj1*sj0*sj2))+((sj0*x1545)));
evalcond[5]=(((r11*x1550))+(((-1.0)*cj0*cj1*x1546))+(((-1.0)*x1545*x1547))+(((-1.0)*r12*x1549))+((r10*x1551)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1552=((1.0)*gconst76);
CheckValue<IkReal> x1553 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x1552))+(((-1.0)*cj0*gconst77*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1553.valid){
continue;
}
CheckValue<IkReal> x1554=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x1552))+((gconst77*r10)))),-1);
if(!x1554.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1553.value)+(((1.5707963267949)*(x1554.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1555=IKsin(j4);
IkReal x1556=IKcos(j4);
IkReal x1557=(gconst77*r21);
IkReal x1558=(cj2*sj1);
IkReal x1559=((1.0)*sj2);
IkReal x1560=((1.0)*cj0);
IkReal x1561=((1.0)*x1556);
IkReal x1562=((1.0)*x1555);
IkReal x1563=(gconst77*x1556);
IkReal x1564=(gconst76*x1556);
evalcond[0]=((((-1.0)*gconst76*r20*x1562))+(((-1.0)*x1557*x1562))+(((-1.0)*r22*x1561)));
evalcond[1]=((((-1.0)*gconst77*r01*x1562))+(((-1.0)*r02*x1561))+(((-1.0)*x1560))+(((-1.0)*gconst76*r00*x1562)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*gconst76*r10*x1562))+(((-1.0)*r12*x1561))+(((-1.0)*gconst77*r11*x1562)));
evalcond[3]=(((r20*x1564))+((x1556*x1557))+(((-1.0)*r22*x1562))+((cj1*cj2))+(((-1.0)*sj1*x1559)));
evalcond[4]=((((-1.0)*r02*x1562))+((cj1*sj0*sj2))+((sj0*x1558))+((r00*x1564))+((r01*x1563)));
evalcond[5]=(((r11*x1563))+((r10*x1564))+(((-1.0)*r12*x1562))+(((-1.0)*cj0*cj1*x1559))+(((-1.0)*x1558*x1560)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1566 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x1566)==0){
continue;
}
IkReal x1565=pow(x1566,-0.5);
CheckValue<IkReal> x1567 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x1567.valid){
continue;
}
IkReal gconst78=((-1.0)*(x1567.value));
IkReal gconst79=(r00*x1565);
IkReal gconst80=(r01*x1565);
CheckValue<IkReal> x1568 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x1568.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1568.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x1571 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x1571.valid){
continue;
}
IkReal x1569=((-1.0)*(x1571.value));
IkReal x1570=x1565;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x1569;
IkReal gconst78=x1569;
IkReal gconst79=(r00*x1570);
IkReal gconst80=(r01*x1570);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x1574 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x1574.valid){
continue;
}
IkReal x1572=((-1.0)*(x1574.value));
IkReal x1573=x1565;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x1572;
IkReal gconst78=x1572;
IkReal gconst79=(r00*x1573);
IkReal gconst80=(r01*x1573);
IkReal x1575=r02*r02;
IkReal x1576=(cj0*r12);
IkReal x1577=((1.0)*x1575);
CheckValue<IkReal> x1581=IKPowWithIntegerCheck(((-1.0)+x1575),-1);
if(!x1581.valid){
continue;
}
IkReal x1578=x1581.value;
if((((1.0)+(((-1.0)*x1577)))) < -0.00001)
continue;
IkReal x1579=IKsqrt(((1.0)+(((-1.0)*x1577))));
IkReal x1580=(x1578*x1579);
j4eval[0]=((IKabs((((r02*sj0))+(((-1.0)*x1576)))))+(IKabs((((r02*x1576*x1580))+(((-1.0)*sj0*x1577*x1580))+((sj0*x1580))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x1584 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x1584.valid){
continue;
}
IkReal x1582=((-1.0)*(x1584.value));
IkReal x1583=x1565;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x1582;
IkReal gconst78=x1582;
IkReal gconst79=(r00*x1583);
IkReal gconst80=(r01*x1583);
IkReal x1585=r02*r02;
IkReal x1586=(cj1*cj2);
IkReal x1587=(sj1*sj2);
CheckValue<IkReal> x1591=IKPowWithIntegerCheck(((-1.0)+x1585),-1);
if(!x1591.valid){
continue;
}
IkReal x1588=x1591.value;
if((((1.0)+(((-1.0)*x1585)))) < -0.00001)
continue;
IkReal x1589=IKsqrt(((1.0)+(((-1.0)*x1585))));
IkReal x1590=(r02*r22*x1588*x1589);
j4eval[0]=((IKabs((((r22*x1586))+(((-1.0)*r22*x1587)))))+(IKabs((((x1587*x1590))+(((-1.0)*x1586*x1590))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1592=(gconst79*r20);
IkReal x1593=(sj1*sj2);
IkReal x1594=(gconst80*r21);
IkReal x1595=((1.0)*cj1*cj2);
CheckValue<IkReal> x1596=IKPowWithIntegerCheck(IKsign(((x1594*x1594)+(r22*r22)+(((2.0)*x1592*x1594))+(x1592*x1592))),-1);
if(!x1596.valid){
continue;
}
CheckValue<IkReal> x1597 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x1593))+((cj1*cj2*r22)))),IkReal(((((-1.0)*x1592*x1595))+((x1593*x1594))+((x1592*x1593))+(((-1.0)*x1594*x1595)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1597.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1596.value)))+(x1597.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1598=IKsin(j4);
IkReal x1599=IKcos(j4);
IkReal x1600=(gconst80*r11);
IkReal x1601=(cj2*sj1);
IkReal x1602=((1.0)*sj2);
IkReal x1603=(gconst79*r20);
IkReal x1604=(gconst79*r10);
IkReal x1605=(gconst80*r01);
IkReal x1606=(gconst79*r00);
IkReal x1607=((1.0)*cj0);
IkReal x1608=(gconst80*r21);
IkReal x1609=((1.0)*x1599);
IkReal x1610=((1.0)*x1598);
evalcond[0]=((((-1.0)*r22*x1609))+(((-1.0)*x1603*x1610))+(((-1.0)*x1608*x1610)));
evalcond[1]=((((-1.0)*x1606*x1610))+(((-1.0)*x1607))+(((-1.0)*r02*x1609))+(((-1.0)*x1605*x1610)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x1600*x1610))+(((-1.0)*r12*x1609))+(((-1.0)*x1604*x1610)));
evalcond[3]=(((x1599*x1603))+((x1599*x1608))+(((-1.0)*r22*x1610))+((cj1*cj2))+(((-1.0)*sj1*x1602)));
evalcond[4]=(((x1599*x1605))+((x1599*x1606))+(((-1.0)*r02*x1610))+((sj0*x1601))+((cj1*sj0*sj2)));
evalcond[5]=((((-1.0)*cj0*cj1*x1602))+(((-1.0)*r12*x1610))+((x1599*x1604))+((x1599*x1600))+(((-1.0)*x1601*x1607)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1611=((1.0)*sj0);
CheckValue<IkReal> x1612 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r12))+((r02*sj0)))),IkReal(((((-1.0)*gconst80*r01*x1611))+((cj0*gconst79*r10))+((cj0*gconst80*r11))+(((-1.0)*gconst79*r00*x1611)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1612.valid){
continue;
}
CheckValue<IkReal> x1613=IKPowWithIntegerCheck(IKsign((((gconst80*r20))+(((-1.0)*gconst79*r21)))),-1);
if(!x1613.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1612.value)+(((1.5707963267949)*(x1613.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1614=IKsin(j4);
IkReal x1615=IKcos(j4);
IkReal x1616=(gconst80*r11);
IkReal x1617=(cj2*sj1);
IkReal x1618=((1.0)*sj2);
IkReal x1619=(gconst79*r20);
IkReal x1620=(gconst79*r10);
IkReal x1621=(gconst80*r01);
IkReal x1622=(gconst79*r00);
IkReal x1623=((1.0)*cj0);
IkReal x1624=(gconst80*r21);
IkReal x1625=((1.0)*x1615);
IkReal x1626=((1.0)*x1614);
evalcond[0]=((((-1.0)*x1619*x1626))+(((-1.0)*r22*x1625))+(((-1.0)*x1624*x1626)));
evalcond[1]=((((-1.0)*x1623))+(((-1.0)*r02*x1625))+(((-1.0)*x1621*x1626))+(((-1.0)*x1622*x1626)));
evalcond[2]=((((-1.0)*r12*x1625))+(((-1.0)*sj0))+(((-1.0)*x1616*x1626))+(((-1.0)*x1620*x1626)));
evalcond[3]=(((x1615*x1619))+((x1615*x1624))+(((-1.0)*r22*x1626))+((cj1*cj2))+(((-1.0)*sj1*x1618)));
evalcond[4]=(((sj0*x1617))+((cj1*sj0*sj2))+(((-1.0)*r02*x1626))+((x1615*x1621))+((x1615*x1622)));
evalcond[5]=((((-1.0)*r12*x1626))+(((-1.0)*x1617*x1623))+((x1615*x1616))+((x1615*x1620))+(((-1.0)*cj0*cj1*x1618)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1627=((1.0)*cj0);
CheckValue<IkReal> x1628=IKPowWithIntegerCheck(IKsign((((gconst80*r10))+(((-1.0)*gconst79*r11)))),-1);
if(!x1628.valid){
continue;
}
CheckValue<IkReal> x1629 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*gconst79*r20*x1627))+(((-1.0)*gconst80*r21*x1627)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1629.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1628.value)))+(x1629.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1630=IKsin(j4);
IkReal x1631=IKcos(j4);
IkReal x1632=(gconst80*r11);
IkReal x1633=(cj2*sj1);
IkReal x1634=((1.0)*sj2);
IkReal x1635=(gconst79*r20);
IkReal x1636=(gconst79*r10);
IkReal x1637=(gconst80*r01);
IkReal x1638=(gconst79*r00);
IkReal x1639=((1.0)*cj0);
IkReal x1640=(gconst80*r21);
IkReal x1641=((1.0)*x1631);
IkReal x1642=((1.0)*x1630);
evalcond[0]=((((-1.0)*x1635*x1642))+(((-1.0)*r22*x1641))+(((-1.0)*x1640*x1642)));
evalcond[1]=((((-1.0)*x1638*x1642))+(((-1.0)*x1639))+(((-1.0)*x1637*x1642))+(((-1.0)*r02*x1641)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r12*x1641))+(((-1.0)*x1636*x1642))+(((-1.0)*x1632*x1642)));
evalcond[3]=((((-1.0)*sj1*x1634))+(((-1.0)*r22*x1642))+((cj1*cj2))+((x1631*x1635))+((x1631*x1640)));
evalcond[4]=(((sj0*x1633))+((cj1*sj0*sj2))+((x1631*x1637))+((x1631*x1638))+(((-1.0)*r02*x1642)));
evalcond[5]=((((-1.0)*r12*x1642))+(((-1.0)*cj0*cj1*x1634))+(((-1.0)*x1633*x1639))+((x1631*x1632))+((x1631*x1636)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1643=((-1.0)*r00);
IkReal x1645 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x1645)==0){
continue;
}
IkReal x1644=pow(x1645,-0.5);
CheckValue<IkReal> x1646 = IKatan2WithCheck(IkReal(x1643),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x1646.valid){
continue;
}
IkReal gconst81=((3.14159265358979)+(((-1.0)*(x1646.value))));
IkReal gconst82=(x1643*x1644);
IkReal gconst83=((-1.0)*r01*x1644);
CheckValue<IkReal> x1647 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x1647.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x1647.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x1648=((-1.0)*r00);
CheckValue<IkReal> x1651 = IKatan2WithCheck(IkReal(x1648),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x1651.valid){
continue;
}
IkReal x1649=((1.0)*(x1651.value));
IkReal x1650=x1644;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x1649)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1649)));
IkReal gconst82=(x1648*x1650);
IkReal gconst83=((-1.0)*r01*x1650);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
IkReal x1652=((-1.0)*r00);
CheckValue<IkReal> x1655 = IKatan2WithCheck(IkReal(x1652),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x1655.valid){
continue;
}
IkReal x1653=((1.0)*(x1655.value));
IkReal x1654=x1644;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x1653)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1653)));
IkReal gconst82=(x1652*x1654);
IkReal gconst83=((-1.0)*r01*x1654);
j4eval[0]=0;
j4eval[1]=r22;
j4eval[2]=sj0;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1656=((1.0)*sj0);
CheckValue<IkReal> x1657=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r21))+((gconst83*r20)))),-1);
if(!x1657.valid){
continue;
}
CheckValue<IkReal> x1658 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r12))+((r02*sj0)))),IkReal(((((-1.0)*gconst83*r01*x1656))+((cj0*gconst83*r11))+((cj0*gconst82*r10))+(((-1.0)*gconst82*r00*x1656)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1658.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1657.value)))+(x1658.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1659=IKsin(j4);
IkReal x1660=IKcos(j4);
IkReal x1661=(gconst83*r01);
IkReal x1662=(cj2*sj1);
IkReal x1663=(gconst83*r21);
IkReal x1664=(gconst83*r11);
IkReal x1665=((1.0)*sj2);
IkReal x1666=((1.0)*cj0);
IkReal x1667=((1.0)*x1660);
IkReal x1668=((1.0)*x1659);
IkReal x1669=(gconst82*x1660);
evalcond[0]=((((-1.0)*r22*x1667))+(((-1.0)*x1663*x1668))+(((-1.0)*gconst82*r20*x1668)));
evalcond[1]=((((-1.0)*x1661*x1668))+(((-1.0)*x1666))+(((-1.0)*r02*x1667))+(((-1.0)*gconst82*r00*x1668)));
evalcond[2]=((((-1.0)*gconst82*r10*x1668))+(((-1.0)*sj0))+(((-1.0)*r12*x1667))+(((-1.0)*x1664*x1668)));
evalcond[3]=(((x1660*x1663))+(((-1.0)*sj1*x1665))+(((-1.0)*r22*x1668))+((r20*x1669))+((cj1*cj2)));
evalcond[4]=(((x1660*x1661))+((sj0*x1662))+((r00*x1669))+((cj1*sj0*sj2))+(((-1.0)*r02*x1668)));
evalcond[5]=(((r10*x1669))+((x1660*x1664))+(((-1.0)*x1662*x1666))+(((-1.0)*cj0*cj1*x1665))+(((-1.0)*r12*x1668)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1670=((1.0)*gconst83);
CheckValue<IkReal> x1671 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst82*r20*sj0))+(((-1.0)*r21*sj0*x1670)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1671.valid){
continue;
}
CheckValue<IkReal> x1672=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x1670))+((gconst82*r01)))),-1);
if(!x1672.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1671.value)+(((1.5707963267949)*(x1672.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1673=IKsin(j4);
IkReal x1674=IKcos(j4);
IkReal x1675=(gconst83*r01);
IkReal x1676=(cj2*sj1);
IkReal x1677=(gconst83*r21);
IkReal x1678=(gconst83*r11);
IkReal x1679=((1.0)*sj2);
IkReal x1680=((1.0)*cj0);
IkReal x1681=((1.0)*x1674);
IkReal x1682=((1.0)*x1673);
IkReal x1683=(gconst82*x1674);
evalcond[0]=((((-1.0)*x1677*x1682))+(((-1.0)*gconst82*r20*x1682))+(((-1.0)*r22*x1681)));
evalcond[1]=((((-1.0)*x1680))+(((-1.0)*x1675*x1682))+(((-1.0)*gconst82*r00*x1682))+(((-1.0)*r02*x1681)));
evalcond[2]=((((-1.0)*r12*x1681))+(((-1.0)*sj0))+(((-1.0)*x1678*x1682))+(((-1.0)*gconst82*r10*x1682)));
evalcond[3]=((((-1.0)*sj1*x1679))+((x1674*x1677))+(((-1.0)*r22*x1682))+((cj1*cj2))+((r20*x1683)));
evalcond[4]=(((sj0*x1676))+((r00*x1683))+((x1674*x1675))+((cj1*sj0*sj2))+(((-1.0)*r02*x1682)));
evalcond[5]=((((-1.0)*r12*x1682))+((x1674*x1678))+((r10*x1683))+(((-1.0)*x1676*x1680))+(((-1.0)*cj0*cj1*x1679)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1684=((1.0)*cj0);
CheckValue<IkReal> x1685=IKPowWithIntegerCheck(IKsign((((gconst83*r10))+(((-1.0)*gconst82*r11)))),-1);
if(!x1685.valid){
continue;
}
CheckValue<IkReal> x1686 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*gconst82*r20*x1684))+(((-1.0)*gconst83*r21*x1684)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1686.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1685.value)))+(x1686.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1687=IKsin(j4);
IkReal x1688=IKcos(j4);
IkReal x1689=(gconst83*r01);
IkReal x1690=(cj2*sj1);
IkReal x1691=(gconst83*r21);
IkReal x1692=(gconst83*r11);
IkReal x1693=((1.0)*sj2);
IkReal x1694=((1.0)*cj0);
IkReal x1695=((1.0)*x1688);
IkReal x1696=((1.0)*x1687);
IkReal x1697=(gconst82*x1688);
evalcond[0]=((((-1.0)*gconst82*r20*x1696))+(((-1.0)*x1691*x1696))+(((-1.0)*r22*x1695)));
evalcond[1]=((((-1.0)*x1694))+(((-1.0)*r02*x1695))+(((-1.0)*x1689*x1696))+(((-1.0)*gconst82*r00*x1696)));
evalcond[2]=((((-1.0)*x1692*x1696))+(((-1.0)*sj0))+(((-1.0)*r12*x1695))+(((-1.0)*gconst82*r10*x1696)));
evalcond[3]=((((-1.0)*sj1*x1693))+((r20*x1697))+(((-1.0)*r22*x1696))+((x1688*x1691))+((cj1*cj2)));
evalcond[4]=(((r00*x1697))+((sj0*x1690))+((x1688*x1689))+((cj1*sj0*sj2))+(((-1.0)*r02*x1696)));
evalcond[5]=(((r10*x1697))+(((-1.0)*r12*x1696))+(((-1.0)*x1690*x1694))+((x1688*x1692))+(((-1.0)*cj0*cj1*x1693)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x1698=((1.0)*sj5);
IkReal x1699=(((cj5*r10))+(((-1.0)*r11*x1698)));
j4eval[0]=x1699;
j4eval[1]=IKsign(x1699);
j4eval[2]=((IKabs(((((-1.0)*r20*x1698))+(((-1.0)*cj5*r21)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x1700=((1.0)*cj5);
IkReal x1701=(((r21*sj5))+(((-1.0)*r20*x1700)));
j4eval[0]=x1701;
j4eval[1]=((IKabs(((((-1.0)*r10*sj5))+(((-1.0)*r11*x1700)))))+(IKabs(r12)));
j4eval[2]=IKsign(x1701);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x1702=cj5*cj5;
IkReal x1703=r00*r00;
IkReal x1704=(r00*sj5);
IkReal x1705=(cj5*r01);
IkReal x1706=((((-1.0)*x1703))+(((-1.0)*(r02*r02)))+(((-1.0)*x1702*(r01*r01)))+(((-2.0)*x1704*x1705))+((x1702*x1703)));
j4eval[0]=x1706;
j4eval[1]=((IKabs((x1704+x1705)))+(IKabs(r02)));
j4eval[2]=IKsign(x1706);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1707=cj5*cj5;
IkReal x1708=r00*r00;
IkReal x1709=(r00*sj5);
IkReal x1710=(cj5*r01);
CheckValue<IkReal> x1711=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1707*(r01*r01)))+(((-1.0)*x1708))+(((-1.0)*(r02*r02)))+(((-2.0)*x1709*x1710))+((x1707*x1708)))),-1);
if(!x1711.valid){
continue;
}
CheckValue<IkReal> x1712 = IKatan2WithCheck(IkReal((x1709+x1710)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x1712.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1711.value)))+(x1712.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1713=IKcos(j4);
IkReal x1714=IKsin(j4);
IkReal x1715=(r00*sj5);
IkReal x1716=(cj5*r01);
IkReal x1717=((1.0)*sj1);
IkReal x1718=(r20*sj5);
IkReal x1719=(cj5*r21);
IkReal x1720=(cj5*r11);
IkReal x1721=(r10*sj5);
IkReal x1722=((1.0)*x1713);
IkReal x1723=((1.0)*x1714);
evalcond[0]=(((x1713*x1715))+((x1713*x1716))+(((-1.0)*r02*x1723)));
evalcond[1]=((((-1.0)*r22*x1722))+(((-1.0)*x1718*x1723))+(((-1.0)*x1719*x1723)));
evalcond[2]=((((-1.0)*r12*x1722))+(((-1.0)*x1720*x1723))+(((-1.0)*x1721*x1723)));
evalcond[3]=((-1.0)+(((-1.0)*x1715*x1723))+(((-1.0)*x1716*x1723))+(((-1.0)*r02*x1722)));
evalcond[4]=((((-1.0)*r22*x1723))+((x1713*x1718))+((x1713*x1719))+(((-1.0)*sj2*x1717))+((cj1*cj2)));
evalcond[5]=((((-1.0)*r12*x1723))+(((-1.0)*cj1*sj2))+((x1713*x1721))+((x1713*x1720))+(((-1.0)*cj2*x1717)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1724=((1.0)*cj5);
CheckValue<IkReal> x1725 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r11*x1724))+(((-1.0)*r10*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1725.valid){
continue;
}
CheckValue<IkReal> x1726=IKPowWithIntegerCheck(IKsign((((r21*sj5))+(((-1.0)*r20*x1724)))),-1);
if(!x1726.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1725.value)+(((1.5707963267949)*(x1726.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1727=IKcos(j4);
IkReal x1728=IKsin(j4);
IkReal x1729=(r00*sj5);
IkReal x1730=(cj5*r01);
IkReal x1731=((1.0)*sj1);
IkReal x1732=(r20*sj5);
IkReal x1733=(cj5*r21);
IkReal x1734=(cj5*r11);
IkReal x1735=(r10*sj5);
IkReal x1736=((1.0)*x1727);
IkReal x1737=((1.0)*x1728);
evalcond[0]=(((x1727*x1730))+((x1727*x1729))+(((-1.0)*r02*x1737)));
evalcond[1]=((((-1.0)*x1733*x1737))+(((-1.0)*x1732*x1737))+(((-1.0)*r22*x1736)));
evalcond[2]=((((-1.0)*r12*x1736))+(((-1.0)*x1734*x1737))+(((-1.0)*x1735*x1737)));
evalcond[3]=((-1.0)+(((-1.0)*x1729*x1737))+(((-1.0)*x1730*x1737))+(((-1.0)*r02*x1736)));
evalcond[4]=(((x1727*x1732))+((x1727*x1733))+((cj1*cj2))+(((-1.0)*sj2*x1731))+(((-1.0)*r22*x1737)));
evalcond[5]=((((-1.0)*r12*x1737))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x1731))+((x1727*x1735))+((x1727*x1734)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1738=((1.0)*sj5);
CheckValue<IkReal> x1739 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*cj5*r21))+(((-1.0)*r20*x1738)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1739.valid){
continue;
}
CheckValue<IkReal> x1740=IKPowWithIntegerCheck(IKsign((((cj5*r10))+(((-1.0)*r11*x1738)))),-1);
if(!x1740.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1739.value)+(((1.5707963267949)*(x1740.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1741=IKcos(j4);
IkReal x1742=IKsin(j4);
IkReal x1743=(r00*sj5);
IkReal x1744=(cj5*r01);
IkReal x1745=((1.0)*sj1);
IkReal x1746=(r20*sj5);
IkReal x1747=(cj5*r21);
IkReal x1748=(cj5*r11);
IkReal x1749=(r10*sj5);
IkReal x1750=((1.0)*x1741);
IkReal x1751=((1.0)*x1742);
evalcond[0]=(((x1741*x1744))+((x1741*x1743))+(((-1.0)*r02*x1751)));
evalcond[1]=((((-1.0)*r22*x1750))+(((-1.0)*x1746*x1751))+(((-1.0)*x1747*x1751)));
evalcond[2]=((((-1.0)*x1748*x1751))+(((-1.0)*r12*x1750))+(((-1.0)*x1749*x1751)));
evalcond[3]=((-1.0)+(((-1.0)*x1744*x1751))+(((-1.0)*x1743*x1751))+(((-1.0)*r02*x1750)));
evalcond[4]=((((-1.0)*r22*x1751))+(((-1.0)*sj2*x1745))+((cj1*cj2))+((x1741*x1746))+((x1741*x1747)));
evalcond[5]=((((-1.0)*r12*x1751))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x1745))+((x1741*x1748))+((x1741*x1749)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x1752=((1.0)*cj5);
IkReal x1753=((((-1.0)*r10*x1752))+((r11*sj5)));
j4eval[0]=x1753;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r21*x1752))+(((-1.0)*r20*sj5))))));
j4eval[2]=IKsign(x1753);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x1754=((1.0)*sj5);
IkReal x1755=(((cj5*r20))+(((-1.0)*r21*x1754)));
j4eval[0]=x1755;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*cj5*r11))+(((-1.0)*r10*x1754))))));
j4eval[2]=IKsign(x1755);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x1756=cj5*cj5;
IkReal x1757=r00*r00;
IkReal x1758=(r00*sj5);
IkReal x1759=(cj5*r01);
IkReal x1760=(x1757+(((-1.0)*x1756*x1757))+((x1756*(r01*r01)))+(((2.0)*x1758*x1759))+(r02*r02));
j4eval[0]=x1760;
j4eval[1]=((IKabs((x1759+x1758)))+(IKabs(r02)));
j4eval[2]=IKsign(x1760);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1761=cj5*cj5;
IkReal x1762=r00*r00;
IkReal x1763=(r00*sj5);
IkReal x1764=(cj5*r01);
CheckValue<IkReal> x1765 = IKatan2WithCheck(IkReal((x1763+x1764)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x1765.valid){
continue;
}
CheckValue<IkReal> x1766=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1761*x1762))+x1762+((x1761*(r01*r01)))+(r02*r02)+(((2.0)*x1763*x1764)))),-1);
if(!x1766.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1765.value)+(((1.5707963267949)*(x1766.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1767=IKcos(j4);
IkReal x1768=IKsin(j4);
IkReal x1769=(r00*sj5);
IkReal x1770=(cj5*r01);
IkReal x1771=(r20*sj5);
IkReal x1772=(cj5*r21);
IkReal x1773=(cj5*r11);
IkReal x1774=(r10*sj5);
IkReal x1775=((1.0)*x1767);
IkReal x1776=((1.0)*x1768);
evalcond[0]=(((x1767*x1770))+(((-1.0)*r02*x1776))+((x1767*x1769)));
evalcond[1]=((((-1.0)*x1772*x1776))+(((-1.0)*x1771*x1776))+(((-1.0)*r22*x1775)));
evalcond[2]=((((-1.0)*x1773*x1776))+(((-1.0)*x1774*x1776))+(((-1.0)*r12*x1775)));
evalcond[3]=((1.0)+(((-1.0)*r02*x1775))+(((-1.0)*x1770*x1776))+(((-1.0)*x1769*x1776)));
evalcond[4]=(((cj2*sj1))+((x1767*x1773))+((x1767*x1774))+((cj1*sj2))+(((-1.0)*r12*x1776)));
evalcond[5]=(((x1767*x1771))+((x1767*x1772))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*r22*x1776)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1777=((1.0)*sj5);
CheckValue<IkReal> x1778=IKPowWithIntegerCheck(IKsign((((cj5*r20))+(((-1.0)*r21*x1777)))),-1);
if(!x1778.valid){
continue;
}
CheckValue<IkReal> x1779 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r11))+(((-1.0)*r10*x1777)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1779.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1778.value)))+(x1779.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1780=IKcos(j4);
IkReal x1781=IKsin(j4);
IkReal x1782=(r00*sj5);
IkReal x1783=(cj5*r01);
IkReal x1784=(r20*sj5);
IkReal x1785=(cj5*r21);
IkReal x1786=(cj5*r11);
IkReal x1787=(r10*sj5);
IkReal x1788=((1.0)*x1780);
IkReal x1789=((1.0)*x1781);
evalcond[0]=(((x1780*x1783))+((x1780*x1782))+(((-1.0)*r02*x1789)));
evalcond[1]=((((-1.0)*r22*x1788))+(((-1.0)*x1785*x1789))+(((-1.0)*x1784*x1789)));
evalcond[2]=((((-1.0)*x1787*x1789))+(((-1.0)*r12*x1788))+(((-1.0)*x1786*x1789)));
evalcond[3]=((1.0)+(((-1.0)*x1783*x1789))+(((-1.0)*x1782*x1789))+(((-1.0)*r02*x1788)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r12*x1789))+((x1780*x1787))+((x1780*x1786)));
evalcond[5]=((((-1.0)*r22*x1789))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((x1780*x1785))+((x1780*x1784)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1790=((1.0)*cj5);
CheckValue<IkReal> x1791 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x1790))+(((-1.0)*r20*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1791.valid){
continue;
}
CheckValue<IkReal> x1792=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x1790))+((r11*sj5)))),-1);
if(!x1792.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1791.value)+(((1.5707963267949)*(x1792.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1793=IKcos(j4);
IkReal x1794=IKsin(j4);
IkReal x1795=(r00*sj5);
IkReal x1796=(cj5*r01);
IkReal x1797=(r20*sj5);
IkReal x1798=(cj5*r21);
IkReal x1799=(cj5*r11);
IkReal x1800=(r10*sj5);
IkReal x1801=((1.0)*x1793);
IkReal x1802=((1.0)*x1794);
evalcond[0]=(((x1793*x1795))+((x1793*x1796))+(((-1.0)*r02*x1802)));
evalcond[1]=((((-1.0)*x1797*x1802))+(((-1.0)*x1798*x1802))+(((-1.0)*r22*x1801)));
evalcond[2]=((((-1.0)*x1799*x1802))+(((-1.0)*x1800*x1802))+(((-1.0)*r12*x1801)));
evalcond[3]=((1.0)+(((-1.0)*x1795*x1802))+(((-1.0)*x1796*x1802))+(((-1.0)*r02*x1801)));
evalcond[4]=(((cj2*sj1))+((x1793*x1799))+((cj1*sj2))+((x1793*x1800))+(((-1.0)*r12*x1802)));
evalcond[5]=(((x1793*x1798))+((x1793*x1797))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*r22*x1802)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1805 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x1805)==0){
continue;
}
IkReal x1803=pow(x1805,-0.5);
IkReal x1804=((-1.0)*x1803);
CheckValue<IkReal> x1806 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x1806.valid){
continue;
}
IkReal gconst84=((-1.0)*(x1806.value));
IkReal gconst85=(r10*x1804);
IkReal gconst86=(r11*x1804);
CheckValue<IkReal> x1807 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x1807.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j5+(x1807.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x1811 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x1811.valid){
continue;
}
IkReal x1808=((-1.0)*(x1811.value));
IkReal x1809=x1803;
IkReal x1810=((-1.0)*x1809);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst85;
cj5=gconst86;
j5=x1808;
IkReal gconst84=x1808;
IkReal gconst85=(r10*x1810);
IkReal gconst86=(r11*x1810);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x1815 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x1815.valid){
continue;
}
IkReal x1812=((-1.0)*(x1815.value));
IkReal x1813=x1803;
IkReal x1814=((-1.0)*x1813);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst85;
cj5=gconst86;
j5=x1812;
IkReal gconst84=x1812;
IkReal gconst85=(r10*x1814);
IkReal gconst86=(r11*x1814);
IkReal x1816=r12*r12;
IkReal x1817=((1.0)*cj0);
IkReal x1818=(r02*sj0);
CheckValue<IkReal> x1822=IKPowWithIntegerCheck(((-1.0)+x1816),-1);
if(!x1822.valid){
continue;
}
IkReal x1819=x1822.value;
if((((1.0)+(((-1.0)*x1816)))) < -0.00001)
continue;
IkReal x1820=IKsqrt(((1.0)+(((-1.0)*x1816))));
IkReal x1821=(x1819*x1820);
j4eval[0]=((IKabs(((((-1.0)*r12*x1817))+x1818)))+(IKabs((((cj0*x1821))+(((-1.0)*x1816*x1817*x1821))+((r12*x1818*x1821))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x1826 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x1826.valid){
continue;
}
IkReal x1823=((-1.0)*(x1826.value));
IkReal x1824=x1803;
IkReal x1825=((-1.0)*x1824);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst85;
cj5=gconst86;
j5=x1823;
IkReal gconst84=x1823;
IkReal gconst85=(r10*x1825);
IkReal gconst86=(r11*x1825);
IkReal x1827=r12*r12;
IkReal x1828=(cj1*cj2*r22);
CheckValue<IkReal> x1833=IKPowWithIntegerCheck(((-1.0)+x1827),-1);
if(!x1833.valid){
continue;
}
IkReal x1829=x1833.value;
IkReal x1830=((1.0)*r22*sj1*sj2);
if((((1.0)+(((-1.0)*x1827)))) < -0.00001)
continue;
IkReal x1831=IKsqrt(((1.0)+(((-1.0)*x1827))));
IkReal x1832=(r12*x1829*x1831);
j4eval[0]=((IKabs(((((-1.0)*x1830))+x1828)))+(IKabs((((x1828*x1832))+(((-1.0)*x1830*x1832))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1834=(gconst85*r20);
IkReal x1835=(sj1*sj2);
IkReal x1836=(gconst86*r21);
IkReal x1837=(cj1*cj2);
CheckValue<IkReal> x1838 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x1835))+((r22*x1837)))),IkReal(((((-1.0)*x1834*x1837))+((x1835*x1836))+((x1834*x1835))+(((-1.0)*x1836*x1837)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1838.valid){
continue;
}
CheckValue<IkReal> x1839=IKPowWithIntegerCheck(IKsign(((x1834*x1834)+(r22*r22)+(((2.0)*x1834*x1836))+(x1836*x1836))),-1);
if(!x1839.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1838.value)+(((1.5707963267949)*(x1839.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1840=IKsin(j4);
IkReal x1841=IKcos(j4);
IkReal x1842=(cj2*sj1);
IkReal x1843=(gconst86*r21);
IkReal x1844=((1.0)*sj2);
IkReal x1845=(gconst86*r01);
IkReal x1846=((1.0)*cj0);
IkReal x1847=(gconst86*r11);
IkReal x1848=((1.0)*x1841);
IkReal x1849=((1.0)*x1840);
IkReal x1850=(gconst85*x1841);
evalcond[0]=((((-1.0)*x1843*x1849))+(((-1.0)*r22*x1848))+(((-1.0)*gconst85*r20*x1849)));
evalcond[1]=((((-1.0)*x1846))+(((-1.0)*r02*x1848))+(((-1.0)*x1845*x1849))+(((-1.0)*gconst85*r00*x1849)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r12*x1848))+(((-1.0)*x1847*x1849))+(((-1.0)*gconst85*r10*x1849)));
evalcond[3]=((((-1.0)*r22*x1849))+(((-1.0)*sj1*x1844))+((cj1*cj2))+((x1841*x1843))+((r20*x1850)));
evalcond[4]=((((-1.0)*r02*x1849))+((r00*x1850))+((cj1*sj0*sj2))+((sj0*x1842))+((x1841*x1845)));
evalcond[5]=(((r10*x1850))+(((-1.0)*x1842*x1846))+(((-1.0)*cj0*cj1*x1844))+(((-1.0)*r12*x1849))+((x1841*x1847)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1851=((1.0)*sj0);
CheckValue<IkReal> x1852=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst85*r21))+((gconst86*r20)))),-1);
if(!x1852.valid){
continue;
}
CheckValue<IkReal> x1853 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r12))+((r02*sj0)))),IkReal((((cj0*gconst86*r11))+(((-1.0)*gconst86*r01*x1851))+(((-1.0)*gconst85*r00*x1851))+((cj0*gconst85*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1853.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1852.value)))+(x1853.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1854=IKsin(j4);
IkReal x1855=IKcos(j4);
IkReal x1856=(cj2*sj1);
IkReal x1857=(gconst86*r21);
IkReal x1858=((1.0)*sj2);
IkReal x1859=(gconst86*r01);
IkReal x1860=((1.0)*cj0);
IkReal x1861=(gconst86*r11);
IkReal x1862=((1.0)*x1855);
IkReal x1863=((1.0)*x1854);
IkReal x1864=(gconst85*x1855);
evalcond[0]=((((-1.0)*gconst85*r20*x1863))+(((-1.0)*r22*x1862))+(((-1.0)*x1857*x1863)));
evalcond[1]=((((-1.0)*r02*x1862))+(((-1.0)*x1859*x1863))+(((-1.0)*x1860))+(((-1.0)*gconst85*r00*x1863)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*gconst85*r10*x1863))+(((-1.0)*r12*x1862))+(((-1.0)*x1861*x1863)));
evalcond[3]=(((x1855*x1857))+((cj1*cj2))+((r20*x1864))+(((-1.0)*sj1*x1858))+(((-1.0)*r22*x1863)));
evalcond[4]=((((-1.0)*r02*x1863))+((x1855*x1859))+((cj1*sj0*sj2))+((sj0*x1856))+((r00*x1864)));
evalcond[5]=((((-1.0)*x1856*x1860))+(((-1.0)*cj0*cj1*x1858))+(((-1.0)*r12*x1863))+((r10*x1864))+((x1855*x1861)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1865=((1.0)*sj0);
CheckValue<IkReal> x1866 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst85*r20*x1865))+(((-1.0)*gconst86*r21*x1865)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1866.valid){
continue;
}
CheckValue<IkReal> x1867=IKPowWithIntegerCheck(IKsign((((gconst85*r01))+(((-1.0)*gconst86*r00)))),-1);
if(!x1867.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1866.value)+(((1.5707963267949)*(x1867.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1868=IKsin(j4);
IkReal x1869=IKcos(j4);
IkReal x1870=(cj2*sj1);
IkReal x1871=(gconst86*r21);
IkReal x1872=((1.0)*sj2);
IkReal x1873=(gconst86*r01);
IkReal x1874=((1.0)*cj0);
IkReal x1875=(gconst86*r11);
IkReal x1876=((1.0)*x1869);
IkReal x1877=((1.0)*x1868);
IkReal x1878=(gconst85*x1869);
evalcond[0]=((((-1.0)*r22*x1876))+(((-1.0)*gconst85*r20*x1877))+(((-1.0)*x1871*x1877)));
evalcond[1]=((((-1.0)*gconst85*r00*x1877))+(((-1.0)*x1873*x1877))+(((-1.0)*x1874))+(((-1.0)*r02*x1876)));
evalcond[2]=((((-1.0)*gconst85*r10*x1877))+(((-1.0)*sj0))+(((-1.0)*r12*x1876))+(((-1.0)*x1875*x1877)));
evalcond[3]=((((-1.0)*r22*x1877))+(((-1.0)*sj1*x1872))+((r20*x1878))+((cj1*cj2))+((x1869*x1871)));
evalcond[4]=((((-1.0)*r02*x1877))+((sj0*x1870))+((cj1*sj0*sj2))+((r00*x1878))+((x1869*x1873)));
evalcond[5]=((((-1.0)*cj0*cj1*x1872))+(((-1.0)*x1870*x1874))+(((-1.0)*r12*x1877))+((r10*x1878))+((x1869*x1875)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1881 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x1881)==0){
continue;
}
IkReal x1879=pow(x1881,-0.5);
IkReal x1880=((1.0)*x1879);
CheckValue<IkReal> x1882 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x1882.valid){
continue;
}
IkReal gconst87=((3.14159265358979)+(((-1.0)*(x1882.value))));
IkReal gconst88=(r10*x1880);
IkReal gconst89=(r11*x1880);
CheckValue<IkReal> x1883 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x1883.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5+(x1883.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
CheckValue<IkReal> x1887 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x1887.valid){
continue;
}
IkReal x1884=((1.0)*(x1887.value));
IkReal x1885=x1879;
IkReal x1886=((1.0)*x1885);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x1884)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x1884)));
IkReal gconst88=(r10*x1886);
IkReal gconst89=(r11*x1886);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x1891 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x1891.valid){
continue;
}
IkReal x1888=((1.0)*(x1891.value));
IkReal x1889=x1879;
IkReal x1890=((1.0)*x1889);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x1888)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x1888)));
IkReal gconst88=(r10*x1890);
IkReal gconst89=(r11*x1890);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1892=((1.0)*gconst88);
CheckValue<IkReal> x1893=IKPowWithIntegerCheck(IKsign((((gconst89*r20))+(((-1.0)*r21*x1892)))),-1);
if(!x1893.valid){
continue;
}
CheckValue<IkReal> x1894 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r12))+((r02*sj0)))),IkReal((((cj0*gconst88*r10))+(((-1.0)*gconst89*r01*sj0))+(((-1.0)*r00*sj0*x1892))+((cj0*gconst89*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1894.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1893.value)))+(x1894.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1895=IKsin(j4);
IkReal x1896=IKcos(j4);
IkReal x1897=(gconst89*r11);
IkReal x1898=(gconst88*r10);
IkReal x1899=((1.0)*sj1);
IkReal x1900=(gconst88*r20);
IkReal x1901=(gconst88*r00);
IkReal x1902=(cj1*sj2);
IkReal x1903=((1.0)*cj0);
IkReal x1904=((1.0)*x1896);
IkReal x1905=((1.0)*x1895);
IkReal x1906=(gconst89*x1896);
evalcond[0]=((((-1.0)*gconst89*r21*x1905))+(((-1.0)*x1900*x1905))+(((-1.0)*r22*x1904)));
evalcond[1]=((((-1.0)*gconst89*r01*x1905))+(((-1.0)*x1901*x1905))+(((-1.0)*r02*x1904))+(((-1.0)*x1903)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x1898*x1905))+(((-1.0)*r12*x1904))+(((-1.0)*x1897*x1905)));
evalcond[3]=((((-1.0)*sj2*x1899))+(((-1.0)*r22*x1905))+((r21*x1906))+((cj1*cj2))+((x1896*x1900)));
evalcond[4]=(((r01*x1906))+((sj0*x1902))+((cj2*sj0*sj1))+(((-1.0)*r02*x1905))+((x1896*x1901)));
evalcond[5]=((((-1.0)*x1902*x1903))+((x1896*x1898))+((x1896*x1897))+(((-1.0)*r12*x1905))+(((-1.0)*cj0*cj2*x1899)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1907=((1.0)*sj0);
CheckValue<IkReal> x1908=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst89*r00))+((gconst88*r01)))),-1);
if(!x1908.valid){
continue;
}
CheckValue<IkReal> x1909 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst89*r21*x1907))+(((-1.0)*gconst88*r20*x1907)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1909.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1908.value)))+(x1909.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1910=IKsin(j4);
IkReal x1911=IKcos(j4);
IkReal x1912=(gconst89*r11);
IkReal x1913=(gconst88*r10);
IkReal x1914=((1.0)*sj1);
IkReal x1915=(gconst88*r20);
IkReal x1916=(gconst88*r00);
IkReal x1917=(cj1*sj2);
IkReal x1918=((1.0)*cj0);
IkReal x1919=((1.0)*x1911);
IkReal x1920=((1.0)*x1910);
IkReal x1921=(gconst89*x1911);
evalcond[0]=((((-1.0)*r22*x1919))+(((-1.0)*x1915*x1920))+(((-1.0)*gconst89*r21*x1920)));
evalcond[1]=((((-1.0)*r02*x1919))+(((-1.0)*x1916*x1920))+(((-1.0)*gconst89*r01*x1920))+(((-1.0)*x1918)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r12*x1919))+(((-1.0)*x1912*x1920))+(((-1.0)*x1913*x1920)));
evalcond[3]=(((x1911*x1915))+(((-1.0)*r22*x1920))+((cj1*cj2))+((r21*x1921))+(((-1.0)*sj2*x1914)));
evalcond[4]=(((r01*x1921))+((x1911*x1916))+((cj2*sj0*sj1))+(((-1.0)*r02*x1920))+((sj0*x1917)));
evalcond[5]=((((-1.0)*x1917*x1918))+(((-1.0)*r12*x1920))+((x1911*x1912))+((x1911*x1913))+(((-1.0)*cj0*cj2*x1914)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1922=((1.0)*cj0);
CheckValue<IkReal> x1923=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst88*r11))+((gconst89*r10)))),-1);
if(!x1923.valid){
continue;
}
CheckValue<IkReal> x1924 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*gconst88*r20*x1922))+(((-1.0)*gconst89*r21*x1922)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1924.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1923.value)))+(x1924.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1925=IKsin(j4);
IkReal x1926=IKcos(j4);
IkReal x1927=(gconst89*r11);
IkReal x1928=(gconst88*r10);
IkReal x1929=((1.0)*sj1);
IkReal x1930=(gconst88*r20);
IkReal x1931=(gconst88*r00);
IkReal x1932=(cj1*sj2);
IkReal x1933=((1.0)*cj0);
IkReal x1934=((1.0)*x1926);
IkReal x1935=((1.0)*x1925);
IkReal x1936=(gconst89*x1926);
evalcond[0]=((((-1.0)*x1930*x1935))+(((-1.0)*gconst89*r21*x1935))+(((-1.0)*r22*x1934)));
evalcond[1]=((((-1.0)*gconst89*r01*x1935))+(((-1.0)*x1931*x1935))+(((-1.0)*r02*x1934))+(((-1.0)*x1933)));
evalcond[2]=((((-1.0)*x1928*x1935))+(((-1.0)*sj0))+(((-1.0)*r12*x1934))+(((-1.0)*x1927*x1935)));
evalcond[3]=((((-1.0)*r22*x1935))+((r21*x1936))+((x1926*x1930))+((cj1*cj2))+(((-1.0)*sj2*x1929)));
evalcond[4]=(((r01*x1936))+((x1926*x1931))+((cj2*sj0*sj1))+((sj0*x1932))+(((-1.0)*r02*x1935)));
evalcond[5]=((((-1.0)*cj0*cj2*x1929))+(((-1.0)*r12*x1935))+(((-1.0)*x1932*x1933))+((x1926*x1927))+((x1926*x1928)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x1937=((1.0)*cj5);
IkReal x1938=(((r01*sj5))+(((-1.0)*r00*x1937)));
j4eval[0]=x1938;
j4eval[1]=IKsign(x1938);
j4eval[2]=((IKabs(((((-1.0)*r21*x1937))+(((-1.0)*r20*sj5)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x1939=((1.0)*sj5);
IkReal x1940=(((cj5*r20))+(((-1.0)*r21*x1939)));
j4eval[0]=x1940;
j4eval[1]=IKsign(x1940);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*cj5*r01))+(((-1.0)*r00*x1939))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x1941=(cj2*sj1);
IkReal x1942=(cj5*r11);
IkReal x1943=(r10*sj5);
IkReal x1944=(cj1*sj2);
IkReal x1945=(((r21*sj5))+(((-1.0)*cj5*r20)));
j4eval[0]=x1945;
j4eval[1]=((IKabs((((r12*x1941))+((r12*x1944)))))+(IKabs((((x1943*x1944))+((x1941*x1943))+((x1941*x1942))+((x1942*x1944))))));
j4eval[2]=IKsign(x1945);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1946=(cj2*sj1);
IkReal x1947=(cj5*r11);
IkReal x1948=(r10*sj5);
IkReal x1949=(cj1*sj2);
CheckValue<IkReal> x1950 = IKatan2WithCheck(IkReal((((x1946*x1947))+((x1946*x1948))+((x1948*x1949))+((x1947*x1949)))),IkReal((((r12*x1946))+((r12*x1949)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1950.valid){
continue;
}
CheckValue<IkReal> x1951=IKPowWithIntegerCheck(IKsign((((r21*sj5))+(((-1.0)*cj5*r20)))),-1);
if(!x1951.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1950.value)+(((1.5707963267949)*(x1951.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1952=IKcos(j4);
IkReal x1953=IKsin(j4);
IkReal x1954=(r00*sj5);
IkReal x1955=(cj5*r01);
IkReal x1956=(r20*sj5);
IkReal x1957=(cj5*r21);
IkReal x1958=(cj5*r11);
IkReal x1959=(r10*sj5);
IkReal x1960=((1.0)*x1952);
IkReal x1961=((1.0)*x1953);
evalcond[0]=(((x1952*x1959))+((x1952*x1958))+(((-1.0)*r12*x1961)));
evalcond[1]=((((-1.0)*x1957*x1961))+(((-1.0)*x1956*x1961))+(((-1.0)*r22*x1960)));
evalcond[2]=((((-1.0)*r02*x1960))+(((-1.0)*x1955*x1961))+(((-1.0)*x1954*x1961)));
evalcond[3]=((-1.0)+(((-1.0)*x1959*x1961))+(((-1.0)*x1958*x1961))+(((-1.0)*r12*x1960)));
evalcond[4]=(((cj2*sj1))+((x1952*x1955))+((x1952*x1954))+(((-1.0)*r02*x1961))+((cj1*sj2)));
evalcond[5]=(((x1952*x1957))+((x1952*x1956))+(((-1.0)*sj1*sj2))+(((-1.0)*r22*x1961))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1962=((1.0)*sj5);
CheckValue<IkReal> x1963 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x1962))+(((-1.0)*cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1963.valid){
continue;
}
CheckValue<IkReal> x1964=IKPowWithIntegerCheck(IKsign((((cj5*r20))+(((-1.0)*r21*x1962)))),-1);
if(!x1964.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1963.value)+(((1.5707963267949)*(x1964.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1965=IKcos(j4);
IkReal x1966=IKsin(j4);
IkReal x1967=(r00*sj5);
IkReal x1968=(cj5*r01);
IkReal x1969=(r20*sj5);
IkReal x1970=(cj5*r21);
IkReal x1971=(cj5*r11);
IkReal x1972=(r10*sj5);
IkReal x1973=((1.0)*x1965);
IkReal x1974=((1.0)*x1966);
evalcond[0]=(((x1965*x1971))+((x1965*x1972))+(((-1.0)*r12*x1974)));
evalcond[1]=((((-1.0)*r22*x1973))+(((-1.0)*x1970*x1974))+(((-1.0)*x1969*x1974)));
evalcond[2]=((((-1.0)*r02*x1973))+(((-1.0)*x1968*x1974))+(((-1.0)*x1967*x1974)));
evalcond[3]=((-1.0)+(((-1.0)*x1971*x1974))+(((-1.0)*x1972*x1974))+(((-1.0)*r12*x1973)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r02*x1974))+((x1965*x1968))+((x1965*x1967)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r22*x1974))+((x1965*x1969))+((x1965*x1970))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1975=((1.0)*cj5);
CheckValue<IkReal> x1976 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x1975))+(((-1.0)*r20*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1976.valid){
continue;
}
CheckValue<IkReal> x1977=IKPowWithIntegerCheck(IKsign((((r01*sj5))+(((-1.0)*r00*x1975)))),-1);
if(!x1977.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1976.value)+(((1.5707963267949)*(x1977.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1978=IKcos(j4);
IkReal x1979=IKsin(j4);
IkReal x1980=(r00*sj5);
IkReal x1981=(cj5*r01);
IkReal x1982=(r20*sj5);
IkReal x1983=(cj5*r21);
IkReal x1984=(cj5*r11);
IkReal x1985=(r10*sj5);
IkReal x1986=((1.0)*x1978);
IkReal x1987=((1.0)*x1979);
evalcond[0]=(((x1978*x1985))+((x1978*x1984))+(((-1.0)*r12*x1987)));
evalcond[1]=((((-1.0)*x1983*x1987))+(((-1.0)*x1982*x1987))+(((-1.0)*r22*x1986)));
evalcond[2]=((((-1.0)*x1981*x1987))+(((-1.0)*x1980*x1987))+(((-1.0)*r02*x1986)));
evalcond[3]=((-1.0)+(((-1.0)*x1985*x1987))+(((-1.0)*x1984*x1987))+(((-1.0)*r12*x1986)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r02*x1987))+((cj1*sj2))+((x1978*x1981))+((x1978*x1980)));
evalcond[5]=((((-1.0)*sj1*sj2))+((x1978*x1982))+((x1978*x1983))+((cj1*cj2))+(((-1.0)*r22*x1987)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x1988=((1.0)*sj5);
IkReal x1989=((((-1.0)*r01*x1988))+((cj5*r00)));
j4eval[0]=x1989;
j4eval[1]=IKsign(x1989);
j4eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*cj5*r21))+(((-1.0)*r20*x1988))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x1990=((1.0)*cj5);
IkReal x1991=(((r21*sj5))+(((-1.0)*r20*x1990)));
j4eval[0]=x1991;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1990))))));
j4eval[2]=IKsign(x1991);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x1992=cj5*cj5;
IkReal x1993=r10*r10;
IkReal x1994=(cj5*r11);
IkReal x1995=(r10*sj5);
IkReal x1996=((r12*r12)+((x1992*(r11*r11)))+(((2.0)*x1994*x1995))+x1993+(((-1.0)*x1992*x1993)));
j4eval[0]=x1996;
j4eval[1]=((IKabs(r12))+(IKabs((x1995+x1994))));
j4eval[2]=IKsign(x1996);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1997=cj5*cj5;
IkReal x1998=r10*r10;
IkReal x1999=(r10*sj5);
IkReal x2000=(cj5*r11);
CheckValue<IkReal> x2001=IKPowWithIntegerCheck(IKsign(((r12*r12)+((x1997*(r11*r11)))+(((2.0)*x1999*x2000))+x1998+(((-1.0)*x1997*x1998)))),-1);
if(!x2001.valid){
continue;
}
CheckValue<IkReal> x2002 = IKatan2WithCheck(IkReal((x2000+x1999)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2002.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2001.value)))+(x2002.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2003=IKcos(j4);
IkReal x2004=IKsin(j4);
IkReal x2005=(r00*sj5);
IkReal x2006=(cj5*r01);
IkReal x2007=(r20*sj5);
IkReal x2008=(cj5*r21);
IkReal x2009=((1.0)*sj1);
IkReal x2010=(cj5*r11);
IkReal x2011=(r10*sj5);
IkReal x2012=((1.0)*x2003);
IkReal x2013=((1.0)*x2004);
evalcond[0]=((((-1.0)*r12*x2013))+((x2003*x2010))+((x2003*x2011)));
evalcond[1]=((((-1.0)*x2008*x2013))+(((-1.0)*x2007*x2013))+(((-1.0)*r22*x2012)));
evalcond[2]=((((-1.0)*x2005*x2013))+(((-1.0)*x2006*x2013))+(((-1.0)*r02*x2012)));
evalcond[3]=((1.0)+(((-1.0)*x2010*x2013))+(((-1.0)*x2011*x2013))+(((-1.0)*r12*x2012)));
evalcond[4]=((((-1.0)*sj2*x2009))+((cj1*cj2))+((x2003*x2007))+((x2003*x2008))+(((-1.0)*r22*x2013)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*r02*x2013))+(((-1.0)*cj2*x2009))+((x2003*x2006))+((x2003*x2005)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2014=((1.0)*cj5);
CheckValue<IkReal> x2015=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x2014))+((r21*sj5)))),-1);
if(!x2015.valid){
continue;
}
CheckValue<IkReal> x2016 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*sj5))+(((-1.0)*r01*x2014)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2016.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2015.value)))+(x2016.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2017=IKcos(j4);
IkReal x2018=IKsin(j4);
IkReal x2019=(r00*sj5);
IkReal x2020=(cj5*r01);
IkReal x2021=(r20*sj5);
IkReal x2022=(cj5*r21);
IkReal x2023=((1.0)*sj1);
IkReal x2024=(cj5*r11);
IkReal x2025=(r10*sj5);
IkReal x2026=((1.0)*x2017);
IkReal x2027=((1.0)*x2018);
evalcond[0]=(((x2017*x2024))+((x2017*x2025))+(((-1.0)*r12*x2027)));
evalcond[1]=((((-1.0)*x2021*x2027))+(((-1.0)*x2022*x2027))+(((-1.0)*r22*x2026)));
evalcond[2]=((((-1.0)*r02*x2026))+(((-1.0)*x2019*x2027))+(((-1.0)*x2020*x2027)));
evalcond[3]=((1.0)+(((-1.0)*r12*x2026))+(((-1.0)*x2025*x2027))+(((-1.0)*x2024*x2027)));
evalcond[4]=(((x2017*x2021))+((x2017*x2022))+(((-1.0)*r22*x2027))+(((-1.0)*sj2*x2023))+((cj1*cj2)));
evalcond[5]=((((-1.0)*cj2*x2023))+((x2017*x2020))+(((-1.0)*r02*x2027))+(((-1.0)*cj1*sj2))+((x2017*x2019)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2028=((1.0)*sj5);
CheckValue<IkReal> x2029=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2028))+((cj5*r00)))),-1);
if(!x2029.valid){
continue;
}
CheckValue<IkReal> x2030 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*cj5*r21))+(((-1.0)*r20*x2028)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2030.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2029.value)))+(x2030.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2031=IKcos(j4);
IkReal x2032=IKsin(j4);
IkReal x2033=(r00*sj5);
IkReal x2034=(cj5*r01);
IkReal x2035=(r20*sj5);
IkReal x2036=(cj5*r21);
IkReal x2037=((1.0)*sj1);
IkReal x2038=(cj5*r11);
IkReal x2039=(r10*sj5);
IkReal x2040=((1.0)*x2031);
IkReal x2041=((1.0)*x2032);
evalcond[0]=(((x2031*x2038))+((x2031*x2039))+(((-1.0)*r12*x2041)));
evalcond[1]=((((-1.0)*r22*x2040))+(((-1.0)*x2036*x2041))+(((-1.0)*x2035*x2041)));
evalcond[2]=((((-1.0)*r02*x2040))+(((-1.0)*x2034*x2041))+(((-1.0)*x2033*x2041)));
evalcond[3]=((1.0)+(((-1.0)*x2039*x2041))+(((-1.0)*x2038*x2041))+(((-1.0)*r12*x2040)));
evalcond[4]=(((x2031*x2035))+((x2031*x2036))+(((-1.0)*r22*x2041))+(((-1.0)*sj2*x2037))+((cj1*cj2)));
evalcond[5]=(((x2031*x2033))+((x2031*x2034))+(((-1.0)*r02*x2041))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x2037)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2042=((-1.0)*py);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x2042);
rxp0_2=(py*r00);
rxp1_0=(r21*x2042);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2043=((-1.0)*py);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x2043);
rxp0_2=(py*r00);
rxp1_0=(r21*x2043);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((cj5*r21))+((r20*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2044=((-1.0)*py);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x2044);
rxp0_2=(py*r00);
rxp1_0=(r21*x2044);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((r00*sj5))+((cj5*r01)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2047=IKPowWithIntegerCheck((((r00*sj5))+((cj5*r01))),-1);
if(!x2047.valid){
continue;
}
IkReal x2045=x2047.value;
IkReal x2046=((1.0)*sj0*x2045);
cj4array[0]=((((-1.0)*cj2*sj1*x2046))+(((-1.0)*cj1*sj2*x2046)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2048=IKsin(j4);
IkReal x2049=IKcos(j4);
IkReal x2050=(cj5*r21);
IkReal x2051=(r20*sj5);
IkReal x2052=((1.0)*x2048);
evalcond[0]=((-1.0)*r12*x2048);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r12*x2049)));
evalcond[2]=((((-1.0)*x2051*x2052))+(((-1.0)*x2050*x2052)));
evalcond[3]=((((-1.0)*r00*sj5*x2052))+(((-1.0)*cj5*r01*x2052)));
evalcond[4]=(((x2049*x2051))+((x2049*x2050))+(((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2054=IKPowWithIntegerCheck((((cj5*r21))+((r20*sj5))),-1);
if(!x2054.valid){
continue;
}
IkReal x2053=x2054.value;
cj4array[0]=((((-1.0)*cj1*cj2*x2053))+((sj1*sj2*x2053)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2055=IKsin(j4);
IkReal x2056=IKcos(j4);
IkReal x2057=(r00*sj5);
IkReal x2058=(cj5*r01);
IkReal x2059=((1.0)*x2055);
evalcond[0]=((-1.0)*r12*x2055);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r12*x2056)));
evalcond[2]=((((-1.0)*r20*sj5*x2059))+(((-1.0)*cj5*r21*x2059)));
evalcond[3]=((((-1.0)*x2058*x2059))+(((-1.0)*x2057*x2059)));
evalcond[4]=(((cj1*sj0*sj2))+((cj2*sj0*sj1))+((x2056*x2057))+((x2056*x2058)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2060=IKPowWithIntegerCheck(r12,-1);
if(!x2060.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x2060.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2061=IKsin(j4);
IkReal x2062=IKcos(j4);
IkReal x2063=(cj5*r21);
IkReal x2064=(cj5*r01);
IkReal x2065=((1.0)*x2061);
IkReal x2066=(sj5*x2062);
evalcond[0]=((-1.0)*r12*x2061);
evalcond[1]=((((-1.0)*x2063*x2065))+(((-1.0)*r20*sj5*x2065)));
evalcond[2]=((((-1.0)*x2064*x2065))+(((-1.0)*r00*sj5*x2065)));
evalcond[3]=((((-1.0)*sj1*sj2))+((r20*x2066))+((x2062*x2063))+((cj1*cj2)));
evalcond[4]=(((cj1*sj0*sj2))+((cj2*sj0*sj1))+((r00*x2066))+((x2062*x2064)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2067=((1.0)*sj0);
CheckValue<IkReal> x2068 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r12))+((r02*sj0)))),IkReal(((((-1.0)*cj5*r01*x2067))+((cj0*cj5*r11))+((cj0*r10*sj5))+(((-1.0)*r00*sj5*x2067)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2068.valid){
continue;
}
CheckValue<IkReal> x2069=IKPowWithIntegerCheck(IKsign((((cj5*r20))+(((-1.0)*r21*sj5)))),-1);
if(!x2069.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2068.value)+(((1.5707963267949)*(x2069.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2070=IKsin(j4);
IkReal x2071=IKcos(j4);
IkReal x2072=(cj2*sj1);
IkReal x2073=(r00*sj5);
IkReal x2074=(cj5*r01);
IkReal x2075=(r20*sj5);
IkReal x2076=(cj5*r21);
IkReal x2077=((1.0)*sj2);
IkReal x2078=(cj5*r11);
IkReal x2079=((1.0)*cj0);
IkReal x2080=(r10*sj5);
IkReal x2081=((1.0)*x2071);
IkReal x2082=((1.0)*x2070);
evalcond[0]=((((-1.0)*r22*x2081))+(((-1.0)*x2076*x2082))+(((-1.0)*x2075*x2082)));
evalcond[1]=((((-1.0)*r02*x2081))+(((-1.0)*x2074*x2082))+(((-1.0)*x2079))+(((-1.0)*x2073*x2082)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x2078*x2082))+(((-1.0)*r12*x2081))+(((-1.0)*x2080*x2082)));
evalcond[3]=((((-1.0)*r22*x2082))+(((-1.0)*sj1*x2077))+((x2071*x2075))+((x2071*x2076))+((cj1*cj2)));
evalcond[4]=((((-1.0)*r02*x2082))+((x2071*x2073))+((x2071*x2074))+((cj1*sj0*sj2))+((sj0*x2072)));
evalcond[5]=((((-1.0)*cj0*cj1*x2077))+((x2071*x2078))+((x2071*x2080))+(((-1.0)*r12*x2082))+(((-1.0)*x2072*x2079)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2083=((1.0)*sj0);
CheckValue<IkReal> x2084 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj5*x2083))+(((-1.0)*cj5*r21*x2083)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2084.valid){
continue;
}
CheckValue<IkReal> x2085=IKPowWithIntegerCheck(IKsign((((r01*sj5))+(((-1.0)*cj5*r00)))),-1);
if(!x2085.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2084.value)+(((1.5707963267949)*(x2085.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2086=IKsin(j4);
IkReal x2087=IKcos(j4);
IkReal x2088=(cj2*sj1);
IkReal x2089=(r00*sj5);
IkReal x2090=(cj5*r01);
IkReal x2091=(r20*sj5);
IkReal x2092=(cj5*r21);
IkReal x2093=((1.0)*sj2);
IkReal x2094=(cj5*r11);
IkReal x2095=((1.0)*cj0);
IkReal x2096=(r10*sj5);
IkReal x2097=((1.0)*x2087);
IkReal x2098=((1.0)*x2086);
evalcond[0]=((((-1.0)*x2091*x2098))+(((-1.0)*x2092*x2098))+(((-1.0)*r22*x2097)));
evalcond[1]=((((-1.0)*x2095))+(((-1.0)*x2090*x2098))+(((-1.0)*x2089*x2098))+(((-1.0)*r02*x2097)));
evalcond[2]=((((-1.0)*x2096*x2098))+(((-1.0)*sj0))+(((-1.0)*x2094*x2098))+(((-1.0)*r12*x2097)));
evalcond[3]=(((x2087*x2092))+((x2087*x2091))+((cj1*cj2))+(((-1.0)*sj1*x2093))+(((-1.0)*r22*x2098)));
evalcond[4]=(((sj0*x2088))+((x2087*x2090))+((cj1*sj0*sj2))+(((-1.0)*r02*x2098))+((x2087*x2089)));
evalcond[5]=((((-1.0)*cj0*cj1*x2093))+((x2087*x2096))+((x2087*x2094))+(((-1.0)*x2088*x2095))+(((-1.0)*r12*x2098)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2099=((1.0)*cj0);
CheckValue<IkReal> x2100 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj5*r21*x2099))+(((-1.0)*r20*sj5*x2099)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2100.valid){
continue;
}
CheckValue<IkReal> x2101=IKPowWithIntegerCheck(IKsign((((cj5*r10))+(((-1.0)*r11*sj5)))),-1);
if(!x2101.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2100.value)+(((1.5707963267949)*(x2101.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2102=IKsin(j4);
IkReal x2103=IKcos(j4);
IkReal x2104=(cj2*sj1);
IkReal x2105=(r00*sj5);
IkReal x2106=(cj5*r01);
IkReal x2107=(r20*sj5);
IkReal x2108=(cj5*r21);
IkReal x2109=((1.0)*sj2);
IkReal x2110=(cj5*r11);
IkReal x2111=((1.0)*cj0);
IkReal x2112=(r10*sj5);
IkReal x2113=((1.0)*x2103);
IkReal x2114=((1.0)*x2102);
evalcond[0]=((((-1.0)*x2107*x2114))+(((-1.0)*x2108*x2114))+(((-1.0)*r22*x2113)));
evalcond[1]=((((-1.0)*x2111))+(((-1.0)*r02*x2113))+(((-1.0)*x2105*x2114))+(((-1.0)*x2106*x2114)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x2112*x2114))+(((-1.0)*x2110*x2114))+(((-1.0)*r12*x2113)));
evalcond[3]=((((-1.0)*sj1*x2109))+((x2103*x2108))+((x2103*x2107))+(((-1.0)*r22*x2114))+((cj1*cj2)));
evalcond[4]=(((x2103*x2105))+((x2103*x2106))+((cj1*sj0*sj2))+(((-1.0)*r02*x2114))+((sj0*x2104)));
evalcond[5]=((((-1.0)*x2104*x2111))+((x2103*x2110))+((x2103*x2112))+(((-1.0)*r12*x2114))+(((-1.0)*cj0*cj1*x2109)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2115=cj5*cj5;
IkReal x2116=r20*r20;
IkReal x2117=(cj5*r21);
IkReal x2118=(cj1*cj2);
IkReal x2119=(r20*sj5);
IkReal x2120=(sj1*sj2);
CheckValue<IkReal> x2121=IKPowWithIntegerCheck(IKsign(((r22*r22)+x2116+((x2115*(r21*r21)))+(((2.0)*x2117*x2119))+(((-1.0)*x2115*x2116)))),-1);
if(!x2121.valid){
continue;
}
CheckValue<IkReal> x2122 = IKatan2WithCheck(IkReal((((r22*x2118))+(((-1.0)*r22*x2120)))),IkReal(((((-1.0)*x2117*x2118))+((x2119*x2120))+(((-1.0)*x2118*x2119))+((x2117*x2120)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2122.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2121.value)))+(x2122.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x2123=IKsin(j4);
IkReal x2124=IKcos(j4);
IkReal x2125=((1.0)*r22);
IkReal x2126=(cj5*r21);
IkReal x2127=(r20*sj5);
IkReal x2128=((1.0)*x2123);
evalcond[0]=((((-1.0)*x2127*x2128))+(((-1.0)*x2124*x2125))+(((-1.0)*x2126*x2128)));
evalcond[1]=((((-1.0)*sj1*sj2))+((cj1*cj2))+((x2124*x2126))+((x2124*x2127))+(((-1.0)*x2123*x2125)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2129=((1.0)*cj4);
IkReal x2130=((1.0)*sj4*sj5);
IkReal x2131=((1.0)*cj5*sj4);
if( IKabs(((((-1.0)*r11*x2131))+(((-1.0)*r12*x2129))+(((-1.0)*r10*x2130)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x2131))+(((-1.0)*r02*x2129))+(((-1.0)*r00*x2130)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x2131))+(((-1.0)*r12*x2129))+(((-1.0)*r10*x2130))))+IKsqr(((((-1.0)*r01*x2131))+(((-1.0)*r02*x2129))+(((-1.0)*r00*x2130))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r11*x2131))+(((-1.0)*r12*x2129))+(((-1.0)*r10*x2130))), ((((-1.0)*r01*x2131))+(((-1.0)*r02*x2129))+(((-1.0)*r00*x2130))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x2132=IKsin(j0);
IkReal x2133=IKcos(j0);
IkReal x2134=(cj4*sj5);
IkReal x2135=(cj5*r00);
IkReal x2136=(cj1*sj2);
IkReal x2137=(cj5*r01);
IkReal x2138=(cj1*cj2);
IkReal x2139=(cj5*r10);
IkReal x2140=(cj2*sj1);
IkReal x2141=(r11*sj5);
IkReal x2142=((1.0)*sj4);
IkReal x2143=((1.0)*cj4);
IkReal x2144=(r01*sj5);
IkReal x2145=(cj5*r11);
IkReal x2146=(sj1*x2133);
IkReal x2147=((0.3495)*x2132);
IkReal x2148=((1.0)*x2133);
IkReal x2149=(sj5*x2142);
IkReal x2150=((1.0)*x2132);
IkReal x2151=(sj1*x2132);
evalcond[0]=((((-1.0)*r00*x2149))+(((-1.0)*r02*x2143))+(((-1.0)*x2148))+(((-1.0)*x2137*x2142)));
evalcond[1]=((((-1.0)*x2142*x2145))+(((-1.0)*r12*x2143))+(((-1.0)*x2150))+(((-1.0)*r10*x2149)));
evalcond[2]=(((sj2*x2151))+x2144+(((-1.0)*x2135))+(((-1.0)*x2138*x2150)));
evalcond[3]=((((-1.0)*sj2*x2146))+x2141+(((-1.0)*x2139))+((x2133*x2138)));
evalcond[4]=(((x2132*x2140))+((cj4*x2137))+(((-1.0)*r02*x2142))+((r00*x2134))+((x2132*x2136)));
evalcond[5]=((((-1.0)*x2136*x2148))+((r10*x2134))+(((-1.0)*r12*x2142))+(((-1.0)*x2140*x2148))+((cj4*x2145)));
evalcond[6]=((((-1.0)*x2136*x2147))+(((-0.1005)*x2135))+(((-0.3484)*x2151))+(((-1.0)*px))+(((-1.0)*x2140*x2147))+(((0.1005)*x2144))+(((0.1002)*x2133)));
evalcond[7]=((((-0.1005)*x2139))+(((0.3484)*x2146))+(((0.3495)*x2133*x2136))+(((-1.0)*py))+(((0.3495)*x2133*x2140))+(((0.1005)*x2141))+(((0.1002)*x2132)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x2152 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2152.valid){
continue;
}
CheckValue<IkReal> x2153=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj1*cj2))+((sj1*sj2)))),-1);
if(!x2153.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x2152.value)+(((1.5707963267949)*(x2153.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x2154=IKsin(j0);
IkReal x2155=IKcos(j0);
IkReal x2156=((0.3495)*sj1);
IkReal x2157=(cj5*r00);
IkReal x2158=(cj5*r10);
IkReal x2159=(r11*sj5);
IkReal x2160=(r01*sj5);
IkReal x2161=(cj2*x2155);
IkReal x2162=((0.3495)*cj1*sj2);
IkReal x2163=(cj2*x2154);
IkReal x2164=(sj1*x2155);
IkReal x2165=(sj1*x2154);
evalcond[0]=(x2160+(((-1.0)*cj1*x2163))+((sj2*x2165))+(((-1.0)*x2157)));
evalcond[1]=(x2159+((cj1*x2161))+(((-1.0)*sj2*x2164))+(((-1.0)*x2158)));
evalcond[2]=((((-1.0)*x2154*x2162))+(((0.1002)*x2155))+(((0.1005)*x2160))+(((-0.1005)*x2157))+(((-1.0)*px))+(((-0.3484)*x2165))+(((-1.0)*x2156*x2163)));
evalcond[3]=((((0.1002)*x2154))+(((-0.1005)*x2158))+((x2156*x2161))+(((0.1005)*x2159))+(((-1.0)*py))+(((0.3484)*x2164))+((x2155*x2162)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x2166=((1.0)*sj5);
IkReal x2167=(((cj5*r10))+(((-1.0)*r11*x2166)));
j4eval[0]=x2167;
j4eval[1]=IKsign(x2167);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*cj5*r21))+(((-1.0)*cj0*r20*x2166))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x2168=((1.0)*cj5);
IkReal x2169=(((r01*sj5))+(((-1.0)*r00*x2168)));
j4eval[0]=x2169;
j4eval[1]=IKsign(x2169);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r21*sj0*x2168))+(((-1.0)*r20*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x2170=((1.0)*sj0);
IkReal x2171=(((cj5*r20))+(((-1.0)*r21*sj5)));
j4eval[0]=x2171;
j4eval[1]=((IKabs(((((-1.0)*cj0*r12))+((r02*sj0)))))+(IKabs((((cj0*cj5*r11))+(((-1.0)*cj5*r01*x2170))+(((-1.0)*r00*sj5*x2170))+((cj0*r10*sj5))))));
j4eval[2]=IKsign(x2171);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x2172=((-1.0)*r21);
IkReal x2174 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2174)==0){
continue;
}
IkReal x2173=pow(x2174,-0.5);
CheckValue<IkReal> x2175 = IKatan2WithCheck(IkReal(r20),IkReal(x2172),IKFAST_ATAN2_MAGTHRESH);
if(!x2175.valid){
continue;
}
IkReal gconst72=((-1.0)*(x2175.value));
IkReal gconst73=((-1.0)*r20*x2173);
IkReal gconst74=(x2172*x2173);
CheckValue<IkReal> x2176 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x2176.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2176.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2177=((-1.0)*r21);
CheckValue<IkReal> x2180 = IKatan2WithCheck(IkReal(r20),IkReal(x2177),IKFAST_ATAN2_MAGTHRESH);
if(!x2180.valid){
continue;
}
IkReal x2178=((-1.0)*(x2180.value));
IkReal x2179=x2173;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst73;
cj5=gconst74;
j5=x2178;
IkReal gconst72=x2178;
IkReal gconst73=((-1.0)*r20*x2179);
IkReal gconst74=(x2177*x2179);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2181=((-1.0)*r21);
CheckValue<IkReal> x2184 = IKatan2WithCheck(IkReal(r20),IkReal(x2181),IKFAST_ATAN2_MAGTHRESH);
if(!x2184.valid){
continue;
}
IkReal x2182=((-1.0)*(x2184.value));
IkReal x2183=x2173;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst73;
cj5=gconst74;
j5=x2182;
IkReal gconst72=x2182;
IkReal gconst73=((-1.0)*r20*x2183);
IkReal gconst74=(x2181*x2183);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x2185=((-1.0)*r21);
CheckValue<IkReal> x2188 = IKatan2WithCheck(IkReal(r20),IkReal(x2185),IKFAST_ATAN2_MAGTHRESH);
if(!x2188.valid){
continue;
}
IkReal x2186=((-1.0)*(x2188.value));
IkReal x2187=x2173;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst73;
cj5=gconst74;
j5=x2186;
IkReal gconst72=x2186;
IkReal gconst73=((-1.0)*r20*x2187);
IkReal gconst74=(x2185*x2187);
IkReal x2189=r22*r22;
CheckValue<IkReal> x2192=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x2189))),-1);
if(!x2192.valid){
continue;
}
IkReal x2190=x2192.value;
IkReal x2191=(x2189+(((2.0)*x2190*(r20*r20)*(r21*r21)))+((x2190*(r20*r20*r20*r20)))+((x2190*(r21*r21*r21*r21))));
j4eval[0]=x2191;
j4eval[1]=IKsign(x2191);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2193=(gconst74*r21);
IkReal x2194=(sj1*sj2);
IkReal x2195=(gconst73*r20);
IkReal x2196=((1.0)*cj1*cj2);
CheckValue<IkReal> x2197 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x2194))+((cj1*cj2*r22)))),IkReal(((((-1.0)*x2195*x2196))+((x2193*x2194))+((x2194*x2195))+(((-1.0)*x2193*x2196)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2197.valid){
continue;
}
CheckValue<IkReal> x2198=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x2193*x2193)+(x2195*x2195)+(((2.0)*x2193*x2195)))),-1);
if(!x2198.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2197.value)+(((1.5707963267949)*(x2198.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2199=IKsin(j4);
IkReal x2200=IKcos(j4);
IkReal x2201=(cj2*sj1);
IkReal x2202=((1.0)*sj2);
IkReal x2203=(gconst74*r01);
IkReal x2204=(gconst74*r11);
IkReal x2205=(gconst74*r21);
IkReal x2206=((1.0)*cj0);
IkReal x2207=((1.0)*x2200);
IkReal x2208=(gconst73*x2200);
IkReal x2209=((1.0)*x2199);
IkReal x2210=(gconst73*x2209);
evalcond[0]=((((-1.0)*x2205*x2209))+(((-1.0)*r22*x2207))+(((-1.0)*r20*x2210)));
evalcond[1]=((((-1.0)*x2203*x2209))+(((-1.0)*x2206))+(((-1.0)*r00*x2210))+(((-1.0)*r02*x2207)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x2204*x2209))+(((-1.0)*r10*x2210))+(((-1.0)*r12*x2207)));
evalcond[3]=((((-1.0)*sj1*x2202))+((r20*x2208))+((x2200*x2205))+(((-1.0)*r22*x2209))+((cj1*cj2)));
evalcond[4]=(((r00*x2208))+((x2200*x2203))+((cj1*sj0*sj2))+((sj0*x2201))+(((-1.0)*r02*x2209)));
evalcond[5]=((((-1.0)*cj0*cj1*x2202))+(((-1.0)*r12*x2209))+((x2200*x2204))+((r10*x2208))+(((-1.0)*x2201*x2206)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2211=((1.0)*sj0);
CheckValue<IkReal> x2212 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst74*r21*x2211))+(((-1.0)*gconst73*r20*x2211)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2212.valid){
continue;
}
CheckValue<IkReal> x2213=IKPowWithIntegerCheck(IKsign((((gconst73*r01))+(((-1.0)*gconst74*r00)))),-1);
if(!x2213.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2212.value)+(((1.5707963267949)*(x2213.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2214=IKsin(j4);
IkReal x2215=IKcos(j4);
IkReal x2216=(cj2*sj1);
IkReal x2217=((1.0)*sj2);
IkReal x2218=(gconst74*r01);
IkReal x2219=(gconst74*r11);
IkReal x2220=(gconst74*r21);
IkReal x2221=((1.0)*cj0);
IkReal x2222=((1.0)*x2215);
IkReal x2223=(gconst73*x2215);
IkReal x2224=((1.0)*x2214);
IkReal x2225=(gconst73*x2224);
evalcond[0]=((((-1.0)*r20*x2225))+(((-1.0)*x2220*x2224))+(((-1.0)*r22*x2222)));
evalcond[1]=((((-1.0)*r00*x2225))+(((-1.0)*r02*x2222))+(((-1.0)*x2221))+(((-1.0)*x2218*x2224)));
evalcond[2]=((((-1.0)*x2219*x2224))+(((-1.0)*r10*x2225))+(((-1.0)*sj0))+(((-1.0)*r12*x2222)));
evalcond[3]=((((-1.0)*sj1*x2217))+((x2215*x2220))+((r20*x2223))+(((-1.0)*r22*x2224))+((cj1*cj2)));
evalcond[4]=((((-1.0)*r02*x2224))+((cj1*sj0*sj2))+((sj0*x2216))+((r00*x2223))+((x2215*x2218)));
evalcond[5]=((((-1.0)*cj0*cj1*x2217))+((r10*x2223))+(((-1.0)*r12*x2224))+((x2215*x2219))+(((-1.0)*x2216*x2221)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2226=((1.0)*cj0);
CheckValue<IkReal> x2227 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*gconst74*r21*x2226))+(((-1.0)*gconst73*r20*x2226)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2227.valid){
continue;
}
CheckValue<IkReal> x2228=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst73*r11))+((gconst74*r10)))),-1);
if(!x2228.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2227.value)+(((1.5707963267949)*(x2228.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2229=IKsin(j4);
IkReal x2230=IKcos(j4);
IkReal x2231=(cj2*sj1);
IkReal x2232=((1.0)*sj2);
IkReal x2233=(gconst74*r01);
IkReal x2234=(gconst74*r11);
IkReal x2235=(gconst74*r21);
IkReal x2236=((1.0)*cj0);
IkReal x2237=((1.0)*x2230);
IkReal x2238=(gconst73*x2230);
IkReal x2239=((1.0)*x2229);
IkReal x2240=(gconst73*x2239);
evalcond[0]=((((-1.0)*x2235*x2239))+(((-1.0)*r22*x2237))+(((-1.0)*r20*x2240)));
evalcond[1]=((((-1.0)*r02*x2237))+(((-1.0)*r00*x2240))+(((-1.0)*x2236))+(((-1.0)*x2233*x2239)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x2234*x2239))+(((-1.0)*r10*x2240))+(((-1.0)*r12*x2237)));
evalcond[3]=((((-1.0)*sj1*x2232))+((r20*x2238))+((x2230*x2235))+(((-1.0)*r22*x2239))+((cj1*cj2)));
evalcond[4]=(((sj0*x2231))+(((-1.0)*r02*x2239))+((cj1*sj0*sj2))+((x2230*x2233))+((r00*x2238)));
evalcond[5]=(((r10*x2238))+(((-1.0)*r12*x2239))+((x2230*x2234))+(((-1.0)*x2231*x2236))+(((-1.0)*cj0*cj1*x2232)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2243 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2243)==0){
continue;
}
IkReal x2241=pow(x2243,-0.5);
IkReal x2242=((1.0)*x2241);
CheckValue<IkReal> x2244 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x2244.valid){
continue;
}
IkReal gconst75=((3.14159265358979)+(((-1.0)*(x2244.value))));
IkReal gconst76=(r20*x2242);
IkReal gconst77=(r21*x2242);
CheckValue<IkReal> x2245 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x2245.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2245.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x2249 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x2249.valid){
continue;
}
IkReal x2246=((1.0)*(x2249.value));
IkReal x2247=x2241;
IkReal x2248=((1.0)*x2247);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst76;
cj5=gconst77;
j5=((3.14159265)+(((-1.0)*x2246)));
IkReal gconst75=((3.14159265358979)+(((-1.0)*x2246)));
IkReal gconst76=(r20*x2248);
IkReal gconst77=(r21*x2248);
IkReal x2250=r22*r22;
IkReal x2251=((1.0)*x2250);
CheckValue<IkReal> x2255=IKPowWithIntegerCheck(((-1.0)+x2250),-1);
if(!x2255.valid){
continue;
}
IkReal x2252=x2255.value;
if((((1.0)+(((-1.0)*x2251)))) < -0.00001)
continue;
IkReal x2253=IKsqrt(((1.0)+(((-1.0)*x2251))));
IkReal x2254=(cj0*x2252*x2253);
j4eval[0]=((IKabs((x2254+(((-1.0)*x2251*x2254)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x2259 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x2259.valid){
continue;
}
IkReal x2256=((1.0)*(x2259.value));
IkReal x2257=x2241;
IkReal x2258=((1.0)*x2257);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst76;
cj5=gconst77;
j5=((3.14159265)+(((-1.0)*x2256)));
IkReal gconst75=((3.14159265358979)+(((-1.0)*x2256)));
IkReal gconst76=(r20*x2258);
IkReal gconst77=(r21*x2258);
IkReal x2260=r22*r22;
IkReal x2261=((1.0)*x2260);
CheckValue<IkReal> x2265=IKPowWithIntegerCheck(((-1.0)+x2260),-1);
if(!x2265.valid){
continue;
}
IkReal x2262=x2265.value;
if((((1.0)+(((-1.0)*x2261)))) < -0.00001)
continue;
IkReal x2263=IKsqrt(((1.0)+(((-1.0)*x2261))));
IkReal x2264=(sj0*x2262*x2263);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x2264+(((-1.0)*x2261*x2264))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x2269 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x2269.valid){
continue;
}
IkReal x2266=((1.0)*(x2269.value));
IkReal x2267=x2241;
IkReal x2268=((1.0)*x2267);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst76;
cj5=gconst77;
j5=((3.14159265)+(((-1.0)*x2266)));
IkReal gconst75=((3.14159265358979)+(((-1.0)*x2266)));
IkReal gconst76=(r20*x2268);
IkReal gconst77=(r21*x2268);
IkReal x2270=r22*r22;
IkReal x2271=(cj0*r12);
IkReal x2272=(r02*sj0);
CheckValue<IkReal> x2276=IKPowWithIntegerCheck(((-1.0)+x2270),-1);
if(!x2276.valid){
continue;
}
IkReal x2273=x2276.value;
if((((1.0)+(((-1.0)*x2270)))) < -0.00001)
continue;
IkReal x2274=IKsqrt(((1.0)+(((-1.0)*x2270))));
IkReal x2275=(r22*x2273*x2274);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x2272*x2275))+((x2271*x2275)))))+(IKabs((x2272+(((-1.0)*x2271))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2277=((1.0)*gconst76);
CheckValue<IkReal> x2278=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2277))+((gconst77*r20)))),-1);
if(!x2278.valid){
continue;
}
CheckValue<IkReal> x2279 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r12))+((r02*sj0)))),IkReal(((((-1.0)*r00*sj0*x2277))+(((-1.0)*gconst77*r01*sj0))+((cj0*gconst76*r10))+((cj0*gconst77*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2279.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2278.value)))+(x2279.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2280=IKsin(j4);
IkReal x2281=IKcos(j4);
IkReal x2282=(gconst77*r21);
IkReal x2283=(cj2*sj1);
IkReal x2284=((1.0)*sj2);
IkReal x2285=((1.0)*cj0);
IkReal x2286=((1.0)*x2281);
IkReal x2287=((1.0)*x2280);
IkReal x2288=(gconst77*x2281);
IkReal x2289=(gconst76*x2281);
evalcond[0]=((((-1.0)*x2282*x2287))+(((-1.0)*gconst76*r20*x2287))+(((-1.0)*r22*x2286)));
evalcond[1]=((((-1.0)*r02*x2286))+(((-1.0)*x2285))+(((-1.0)*gconst76*r00*x2287))+(((-1.0)*gconst77*r01*x2287)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r12*x2286))+(((-1.0)*gconst76*r10*x2287))+(((-1.0)*gconst77*r11*x2287)));
evalcond[3]=((((-1.0)*sj1*x2284))+((x2281*x2282))+((r20*x2289))+((cj1*cj2))+(((-1.0)*r22*x2287)));
evalcond[4]=((((-1.0)*r02*x2287))+((cj1*sj0*sj2))+((sj0*x2283))+((r01*x2288))+((r00*x2289)));
evalcond[5]=(((r10*x2289))+((r11*x2288))+(((-1.0)*r12*x2287))+(((-1.0)*cj0*cj1*x2284))+(((-1.0)*x2283*x2285)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2290=((1.0)*sj0);
CheckValue<IkReal> x2291 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst77*r21*x2290))+(((-1.0)*gconst76*r20*x2290)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2291.valid){
continue;
}
CheckValue<IkReal> x2292=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst77*r00))+((gconst76*r01)))),-1);
if(!x2292.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2291.value)+(((1.5707963267949)*(x2292.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2293=IKsin(j4);
IkReal x2294=IKcos(j4);
IkReal x2295=(gconst77*r21);
IkReal x2296=(cj2*sj1);
IkReal x2297=((1.0)*sj2);
IkReal x2298=((1.0)*cj0);
IkReal x2299=((1.0)*x2294);
IkReal x2300=((1.0)*x2293);
IkReal x2301=(gconst77*x2294);
IkReal x2302=(gconst76*x2294);
evalcond[0]=((((-1.0)*gconst76*r20*x2300))+(((-1.0)*x2295*x2300))+(((-1.0)*r22*x2299)));
evalcond[1]=((((-1.0)*r02*x2299))+(((-1.0)*gconst77*r01*x2300))+(((-1.0)*gconst76*r00*x2300))+(((-1.0)*x2298)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*gconst76*r10*x2300))+(((-1.0)*gconst77*r11*x2300))+(((-1.0)*r12*x2299)));
evalcond[3]=((((-1.0)*r22*x2300))+((r20*x2302))+((cj1*cj2))+(((-1.0)*sj1*x2297))+((x2294*x2295)));
evalcond[4]=(((sj0*x2296))+((cj1*sj0*sj2))+((r00*x2302))+((r01*x2301))+(((-1.0)*r02*x2300)));
evalcond[5]=(((r11*x2301))+((r10*x2302))+(((-1.0)*x2296*x2298))+(((-1.0)*cj0*cj1*x2297))+(((-1.0)*r12*x2300)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2303=((1.0)*gconst76);
CheckValue<IkReal> x2304=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x2303))+((gconst77*r10)))),-1);
if(!x2304.valid){
continue;
}
CheckValue<IkReal> x2305 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2303))+(((-1.0)*cj0*gconst77*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2305.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2304.value)))+(x2305.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2306=IKsin(j4);
IkReal x2307=IKcos(j4);
IkReal x2308=(gconst77*r21);
IkReal x2309=(cj2*sj1);
IkReal x2310=((1.0)*sj2);
IkReal x2311=((1.0)*cj0);
IkReal x2312=((1.0)*x2307);
IkReal x2313=((1.0)*x2306);
IkReal x2314=(gconst77*x2307);
IkReal x2315=(gconst76*x2307);
evalcond[0]=((((-1.0)*r22*x2312))+(((-1.0)*x2308*x2313))+(((-1.0)*gconst76*r20*x2313)));
evalcond[1]=((((-1.0)*gconst76*r00*x2313))+(((-1.0)*r02*x2312))+(((-1.0)*gconst77*r01*x2313))+(((-1.0)*x2311)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*gconst76*r10*x2313))+(((-1.0)*gconst77*r11*x2313))+(((-1.0)*r12*x2312)));
evalcond[3]=((((-1.0)*r22*x2313))+(((-1.0)*sj1*x2310))+((cj1*cj2))+((x2307*x2308))+((r20*x2315)));
evalcond[4]=(((sj0*x2309))+((cj1*sj0*sj2))+((r01*x2314))+((r00*x2315))+(((-1.0)*r02*x2313)));
evalcond[5]=(((r10*x2315))+(((-1.0)*x2309*x2311))+((r11*x2314))+(((-1.0)*cj0*cj1*x2310))+(((-1.0)*r12*x2313)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2317 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2317)==0){
continue;
}
IkReal x2316=pow(x2317,-0.5);
CheckValue<IkReal> x2318 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x2318.valid){
continue;
}
IkReal gconst78=((-1.0)*(x2318.value));
IkReal gconst79=(r00*x2316);
IkReal gconst80=(r01*x2316);
CheckValue<IkReal> x2319 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x2319.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2319.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x2322 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x2322.valid){
continue;
}
IkReal x2320=((-1.0)*(x2322.value));
IkReal x2321=x2316;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x2320;
IkReal gconst78=x2320;
IkReal gconst79=(r00*x2321);
IkReal gconst80=(r01*x2321);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x2325 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x2325.valid){
continue;
}
IkReal x2323=((-1.0)*(x2325.value));
IkReal x2324=x2316;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x2323;
IkReal gconst78=x2323;
IkReal gconst79=(r00*x2324);
IkReal gconst80=(r01*x2324);
IkReal x2326=r02*r02;
IkReal x2327=(cj0*r12);
IkReal x2328=((1.0)*x2326);
CheckValue<IkReal> x2332=IKPowWithIntegerCheck(((-1.0)+x2326),-1);
if(!x2332.valid){
continue;
}
IkReal x2329=x2332.value;
if((((1.0)+(((-1.0)*x2328)))) < -0.00001)
continue;
IkReal x2330=IKsqrt(((1.0)+(((-1.0)*x2328))));
IkReal x2331=(x2329*x2330);
j4eval[0]=((IKabs((((sj0*x2331))+((r02*x2327*x2331))+(((-1.0)*sj0*x2328*x2331)))))+(IKabs((((r02*sj0))+(((-1.0)*x2327))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x2335 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x2335.valid){
continue;
}
IkReal x2333=((-1.0)*(x2335.value));
IkReal x2334=x2316;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x2333;
IkReal gconst78=x2333;
IkReal gconst79=(r00*x2334);
IkReal gconst80=(r01*x2334);
IkReal x2336=r02*r02;
IkReal x2337=(cj1*cj2);
IkReal x2338=(sj1*sj2);
CheckValue<IkReal> x2342=IKPowWithIntegerCheck(((-1.0)+x2336),-1);
if(!x2342.valid){
continue;
}
IkReal x2339=x2342.value;
if((((1.0)+(((-1.0)*x2336)))) < -0.00001)
continue;
IkReal x2340=IKsqrt(((1.0)+(((-1.0)*x2336))));
IkReal x2341=(r02*r22*x2339*x2340);
j4eval[0]=((IKabs((((r22*x2337))+(((-1.0)*r22*x2338)))))+(IKabs((((x2338*x2341))+(((-1.0)*x2337*x2341))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2343=(gconst79*r20);
IkReal x2344=(sj1*sj2);
IkReal x2345=(gconst80*r21);
IkReal x2346=((1.0)*cj1*cj2);
CheckValue<IkReal> x2347=IKPowWithIntegerCheck(IKsign(((x2343*x2343)+(r22*r22)+(((2.0)*x2343*x2345))+(x2345*x2345))),-1);
if(!x2347.valid){
continue;
}
CheckValue<IkReal> x2348 = IKatan2WithCheck(IkReal((((cj1*cj2*r22))+(((-1.0)*r22*x2344)))),IkReal(((((-1.0)*x2345*x2346))+((x2344*x2345))+((x2343*x2344))+(((-1.0)*x2343*x2346)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2348.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2347.value)))+(x2348.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2349=IKsin(j4);
IkReal x2350=IKcos(j4);
IkReal x2351=(gconst80*r11);
IkReal x2352=(cj2*sj1);
IkReal x2353=((1.0)*sj2);
IkReal x2354=(gconst79*r20);
IkReal x2355=(gconst79*r10);
IkReal x2356=(gconst80*r01);
IkReal x2357=(gconst79*r00);
IkReal x2358=((1.0)*cj0);
IkReal x2359=(gconst80*r21);
IkReal x2360=((1.0)*x2350);
IkReal x2361=((1.0)*x2349);
evalcond[0]=((((-1.0)*x2354*x2361))+(((-1.0)*x2359*x2361))+(((-1.0)*r22*x2360)));
evalcond[1]=((((-1.0)*x2357*x2361))+(((-1.0)*x2356*x2361))+(((-1.0)*x2358))+(((-1.0)*r02*x2360)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x2355*x2361))+(((-1.0)*x2351*x2361))+(((-1.0)*r12*x2360)));
evalcond[3]=((((-1.0)*sj1*x2353))+((x2350*x2359))+((x2350*x2354))+((cj1*cj2))+(((-1.0)*r22*x2361)));
evalcond[4]=(((sj0*x2352))+((cj1*sj0*sj2))+((x2350*x2357))+((x2350*x2356))+(((-1.0)*r02*x2361)));
evalcond[5]=((((-1.0)*cj0*cj1*x2353))+((x2350*x2351))+((x2350*x2355))+(((-1.0)*x2352*x2358))+(((-1.0)*r12*x2361)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2362=((1.0)*sj0);
CheckValue<IkReal> x2363 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r12))+((r02*sj0)))),IkReal((((cj0*gconst79*r10))+(((-1.0)*gconst79*r00*x2362))+((cj0*gconst80*r11))+(((-1.0)*gconst80*r01*x2362)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2363.valid){
continue;
}
CheckValue<IkReal> x2364=IKPowWithIntegerCheck(IKsign((((gconst80*r20))+(((-1.0)*gconst79*r21)))),-1);
if(!x2364.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2363.value)+(((1.5707963267949)*(x2364.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2365=IKsin(j4);
IkReal x2366=IKcos(j4);
IkReal x2367=(gconst80*r11);
IkReal x2368=(cj2*sj1);
IkReal x2369=((1.0)*sj2);
IkReal x2370=(gconst79*r20);
IkReal x2371=(gconst79*r10);
IkReal x2372=(gconst80*r01);
IkReal x2373=(gconst79*r00);
IkReal x2374=((1.0)*cj0);
IkReal x2375=(gconst80*r21);
IkReal x2376=((1.0)*x2366);
IkReal x2377=((1.0)*x2365);
evalcond[0]=((((-1.0)*x2375*x2377))+(((-1.0)*x2370*x2377))+(((-1.0)*r22*x2376)));
evalcond[1]=((((-1.0)*r02*x2376))+(((-1.0)*x2374))+(((-1.0)*x2373*x2377))+(((-1.0)*x2372*x2377)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x2367*x2377))+(((-1.0)*x2371*x2377))+(((-1.0)*r12*x2376)));
evalcond[3]=(((x2366*x2370))+((x2366*x2375))+((cj1*cj2))+(((-1.0)*r22*x2377))+(((-1.0)*sj1*x2369)));
evalcond[4]=((((-1.0)*r02*x2377))+((sj0*x2368))+((x2366*x2372))+((x2366*x2373))+((cj1*sj0*sj2)));
evalcond[5]=(((x2366*x2367))+(((-1.0)*x2368*x2374))+((x2366*x2371))+(((-1.0)*cj0*cj1*x2369))+(((-1.0)*r12*x2377)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2378=((1.0)*cj0);
CheckValue<IkReal> x2379=IKPowWithIntegerCheck(IKsign((((gconst80*r10))+(((-1.0)*gconst79*r11)))),-1);
if(!x2379.valid){
continue;
}
CheckValue<IkReal> x2380 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*gconst80*r21*x2378))+(((-1.0)*gconst79*r20*x2378)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2380.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2379.value)))+(x2380.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2381=IKsin(j4);
IkReal x2382=IKcos(j4);
IkReal x2383=(gconst80*r11);
IkReal x2384=(cj2*sj1);
IkReal x2385=((1.0)*sj2);
IkReal x2386=(gconst79*r20);
IkReal x2387=(gconst79*r10);
IkReal x2388=(gconst80*r01);
IkReal x2389=(gconst79*r00);
IkReal x2390=((1.0)*cj0);
IkReal x2391=(gconst80*r21);
IkReal x2392=((1.0)*x2382);
IkReal x2393=((1.0)*x2381);
evalcond[0]=((((-1.0)*x2386*x2393))+(((-1.0)*r22*x2392))+(((-1.0)*x2391*x2393)));
evalcond[1]=((((-1.0)*r02*x2392))+(((-1.0)*x2389*x2393))+(((-1.0)*x2390))+(((-1.0)*x2388*x2393)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x2383*x2393))+(((-1.0)*x2387*x2393))+(((-1.0)*r12*x2392)));
evalcond[3]=((((-1.0)*sj1*x2385))+((x2382*x2386))+((x2382*x2391))+(((-1.0)*r22*x2393))+((cj1*cj2)));
evalcond[4]=((((-1.0)*r02*x2393))+((x2382*x2388))+((x2382*x2389))+((cj1*sj0*sj2))+((sj0*x2384)));
evalcond[5]=((((-1.0)*cj0*cj1*x2385))+((x2382*x2387))+((x2382*x2383))+(((-1.0)*x2384*x2390))+(((-1.0)*r12*x2393)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2394=((-1.0)*r00);
IkReal x2396 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2396)==0){
continue;
}
IkReal x2395=pow(x2396,-0.5);
CheckValue<IkReal> x2397 = IKatan2WithCheck(IkReal(x2394),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x2397.valid){
continue;
}
IkReal gconst81=((3.14159265358979)+(((-1.0)*(x2397.value))));
IkReal gconst82=(x2394*x2395);
IkReal gconst83=((-1.0)*r01*x2395);
CheckValue<IkReal> x2398 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x2398.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2398.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2399=((-1.0)*r00);
CheckValue<IkReal> x2402 = IKatan2WithCheck(IkReal(x2399),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x2402.valid){
continue;
}
IkReal x2400=((1.0)*(x2402.value));
IkReal x2401=x2395;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2400)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2400)));
IkReal gconst82=(x2399*x2401);
IkReal gconst83=((-1.0)*r01*x2401);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
IkReal x2403=((-1.0)*r00);
CheckValue<IkReal> x2406 = IKatan2WithCheck(IkReal(x2403),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x2406.valid){
continue;
}
IkReal x2404=((1.0)*(x2406.value));
IkReal x2405=x2395;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2404)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2404)));
IkReal gconst82=(x2403*x2405);
IkReal gconst83=((-1.0)*r01*x2405);
j4eval[0]=0;
j4eval[1]=r22;
j4eval[2]=sj0;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2407=((1.0)*sj0);
CheckValue<IkReal> x2408=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r21))+((gconst83*r20)))),-1);
if(!x2408.valid){
continue;
}
CheckValue<IkReal> x2409 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r12))+((r02*sj0)))),IkReal(((((-1.0)*gconst82*r00*x2407))+(((-1.0)*gconst83*r01*x2407))+((cj0*gconst83*r11))+((cj0*gconst82*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2409.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2408.value)))+(x2409.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2410=IKsin(j4);
IkReal x2411=IKcos(j4);
IkReal x2412=(gconst83*r01);
IkReal x2413=(cj2*sj1);
IkReal x2414=(gconst83*r21);
IkReal x2415=(gconst83*r11);
IkReal x2416=((1.0)*sj2);
IkReal x2417=((1.0)*cj0);
IkReal x2418=((1.0)*x2411);
IkReal x2419=((1.0)*x2410);
IkReal x2420=(gconst82*x2411);
evalcond[0]=((((-1.0)*x2414*x2419))+(((-1.0)*r22*x2418))+(((-1.0)*gconst82*r20*x2419)));
evalcond[1]=((((-1.0)*r02*x2418))+(((-1.0)*x2417))+(((-1.0)*x2412*x2419))+(((-1.0)*gconst82*r00*x2419)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r12*x2418))+(((-1.0)*x2415*x2419))+(((-1.0)*gconst82*r10*x2419)));
evalcond[3]=(((x2411*x2414))+((r20*x2420))+((cj1*cj2))+(((-1.0)*r22*x2419))+(((-1.0)*sj1*x2416)));
evalcond[4]=(((sj0*x2413))+((cj1*sj0*sj2))+(((-1.0)*r02*x2419))+((r00*x2420))+((x2411*x2412)));
evalcond[5]=((((-1.0)*cj0*cj1*x2416))+(((-1.0)*r12*x2419))+((r10*x2420))+((x2411*x2415))+(((-1.0)*x2413*x2417)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2421=((1.0)*gconst83);
CheckValue<IkReal> x2422=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x2421))+((gconst82*r01)))),-1);
if(!x2422.valid){
continue;
}
CheckValue<IkReal> x2423 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x2421))+(((-1.0)*gconst82*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2423.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2422.value)))+(x2423.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2424=IKsin(j4);
IkReal x2425=IKcos(j4);
IkReal x2426=(gconst83*r01);
IkReal x2427=(cj2*sj1);
IkReal x2428=(gconst83*r21);
IkReal x2429=(gconst83*r11);
IkReal x2430=((1.0)*sj2);
IkReal x2431=((1.0)*cj0);
IkReal x2432=((1.0)*x2425);
IkReal x2433=((1.0)*x2424);
IkReal x2434=(gconst82*x2425);
evalcond[0]=((((-1.0)*r22*x2432))+(((-1.0)*gconst82*r20*x2433))+(((-1.0)*x2428*x2433)));
evalcond[1]=((((-1.0)*x2431))+(((-1.0)*gconst82*r00*x2433))+(((-1.0)*x2426*x2433))+(((-1.0)*r02*x2432)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x2429*x2433))+(((-1.0)*gconst82*r10*x2433))+(((-1.0)*r12*x2432)));
evalcond[3]=((((-1.0)*r22*x2433))+((r20*x2434))+(((-1.0)*sj1*x2430))+((x2425*x2428))+((cj1*cj2)));
evalcond[4]=(((r00*x2434))+((sj0*x2427))+((cj1*sj0*sj2))+(((-1.0)*r02*x2433))+((x2425*x2426)));
evalcond[5]=((((-1.0)*cj0*cj1*x2430))+(((-1.0)*x2427*x2431))+((x2425*x2429))+(((-1.0)*r12*x2433))+((r10*x2434)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2435=((1.0)*cj0);
CheckValue<IkReal> x2436 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*gconst82*r20*x2435))+(((-1.0)*gconst83*r21*x2435)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2436.valid){
continue;
}
CheckValue<IkReal> x2437=IKPowWithIntegerCheck(IKsign((((gconst83*r10))+(((-1.0)*gconst82*r11)))),-1);
if(!x2437.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2436.value)+(((1.5707963267949)*(x2437.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2438=IKsin(j4);
IkReal x2439=IKcos(j4);
IkReal x2440=(gconst83*r01);
IkReal x2441=(cj2*sj1);
IkReal x2442=(gconst83*r21);
IkReal x2443=(gconst83*r11);
IkReal x2444=((1.0)*sj2);
IkReal x2445=((1.0)*cj0);
IkReal x2446=((1.0)*x2439);
IkReal x2447=((1.0)*x2438);
IkReal x2448=(gconst82*x2439);
evalcond[0]=((((-1.0)*r22*x2446))+(((-1.0)*x2442*x2447))+(((-1.0)*gconst82*r20*x2447)));
evalcond[1]=((((-1.0)*gconst82*r00*x2447))+(((-1.0)*x2445))+(((-1.0)*x2440*x2447))+(((-1.0)*r02*x2446)));
evalcond[2]=((((-1.0)*x2443*x2447))+(((-1.0)*sj0))+(((-1.0)*gconst82*r10*x2447))+(((-1.0)*r12*x2446)));
evalcond[3]=((((-1.0)*sj1*x2444))+((x2439*x2442))+((cj1*cj2))+(((-1.0)*r22*x2447))+((r20*x2448)));
evalcond[4]=(((sj0*x2441))+((r00*x2448))+((cj1*sj0*sj2))+((x2439*x2440))+(((-1.0)*r02*x2447)));
evalcond[5]=(((r10*x2448))+(((-1.0)*cj0*cj1*x2444))+(((-1.0)*x2441*x2445))+(((-1.0)*r12*x2447))+((x2439*x2443)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2449=((1.0)*sj5);
IkReal x2450=(((cj5*r10))+(((-1.0)*r11*x2449)));
j4eval[0]=x2450;
j4eval[1]=IKsign(x2450);
j4eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x2449))+(((-1.0)*cj5*r21))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2451=((1.0)*cj5);
IkReal x2452=(((r21*sj5))+(((-1.0)*r20*x2451)));
j4eval[0]=x2452;
j4eval[1]=((IKabs(((((-1.0)*r10*sj5))+(((-1.0)*r11*x2451)))))+(IKabs(r12)));
j4eval[2]=IKsign(x2452);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2453=cj5*cj5;
IkReal x2454=r00*r00;
IkReal x2455=(r00*sj5);
IkReal x2456=(cj5*r01);
IkReal x2457=(((x2453*x2454))+(((-1.0)*(r02*r02)))+(((-2.0)*x2455*x2456))+(((-1.0)*x2454))+(((-1.0)*x2453*(r01*r01))));
j4eval[0]=x2457;
j4eval[1]=((IKabs(r02))+(IKabs((x2455+x2456))));
j4eval[2]=IKsign(x2457);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2458=cj5*cj5;
IkReal x2459=r00*r00;
IkReal x2460=(r00*sj5);
IkReal x2461=(cj5*r01);
CheckValue<IkReal> x2462=IKPowWithIntegerCheck(IKsign((((x2458*x2459))+(((-2.0)*x2460*x2461))+(((-1.0)*(r02*r02)))+(((-1.0)*x2459))+(((-1.0)*x2458*(r01*r01))))),-1);
if(!x2462.valid){
continue;
}
CheckValue<IkReal> x2463 = IKatan2WithCheck(IkReal((x2460+x2461)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2463.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2462.value)))+(x2463.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2464=IKcos(j4);
IkReal x2465=IKsin(j4);
IkReal x2466=(r00*sj5);
IkReal x2467=(cj5*r01);
IkReal x2468=((1.0)*sj1);
IkReal x2469=(r20*sj5);
IkReal x2470=(cj5*r21);
IkReal x2471=(cj5*r11);
IkReal x2472=(r10*sj5);
IkReal x2473=((1.0)*x2464);
IkReal x2474=((1.0)*x2465);
evalcond[0]=(((x2464*x2466))+((x2464*x2467))+(((-1.0)*r02*x2474)));
evalcond[1]=((((-1.0)*x2470*x2474))+(((-1.0)*x2469*x2474))+(((-1.0)*r22*x2473)));
evalcond[2]=((((-1.0)*r12*x2473))+(((-1.0)*x2472*x2474))+(((-1.0)*x2471*x2474)));
evalcond[3]=((-1.0)+(((-1.0)*x2467*x2474))+(((-1.0)*r02*x2473))+(((-1.0)*x2466*x2474)));
evalcond[4]=(((x2464*x2469))+(((-1.0)*r22*x2474))+(((-1.0)*sj2*x2468))+((cj1*cj2))+((x2464*x2470)));
evalcond[5]=((((-1.0)*r12*x2474))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x2468))+((x2464*x2471))+((x2464*x2472)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2475=((1.0)*cj5);
CheckValue<IkReal> x2476 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r11*x2475))+(((-1.0)*r10*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2476.valid){
continue;
}
CheckValue<IkReal> x2477=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x2475))+((r21*sj5)))),-1);
if(!x2477.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2476.value)+(((1.5707963267949)*(x2477.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2478=IKcos(j4);
IkReal x2479=IKsin(j4);
IkReal x2480=(r00*sj5);
IkReal x2481=(cj5*r01);
IkReal x2482=((1.0)*sj1);
IkReal x2483=(r20*sj5);
IkReal x2484=(cj5*r21);
IkReal x2485=(cj5*r11);
IkReal x2486=(r10*sj5);
IkReal x2487=((1.0)*x2478);
IkReal x2488=((1.0)*x2479);
evalcond[0]=((((-1.0)*r02*x2488))+((x2478*x2480))+((x2478*x2481)));
evalcond[1]=((((-1.0)*r22*x2487))+(((-1.0)*x2484*x2488))+(((-1.0)*x2483*x2488)));
evalcond[2]=((((-1.0)*x2486*x2488))+(((-1.0)*x2485*x2488))+(((-1.0)*r12*x2487)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x2487))+(((-1.0)*x2480*x2488))+(((-1.0)*x2481*x2488)));
evalcond[4]=((((-1.0)*r22*x2488))+(((-1.0)*sj2*x2482))+((x2478*x2483))+((x2478*x2484))+((cj1*cj2)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x2482))+((x2478*x2485))+((x2478*x2486))+(((-1.0)*r12*x2488)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2489=((1.0)*sj5);
CheckValue<IkReal> x2490=IKPowWithIntegerCheck(IKsign((((cj5*r10))+(((-1.0)*r11*x2489)))),-1);
if(!x2490.valid){
continue;
}
CheckValue<IkReal> x2491 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x2489))+(((-1.0)*cj5*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2491.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2490.value)))+(x2491.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2492=IKcos(j4);
IkReal x2493=IKsin(j4);
IkReal x2494=(r00*sj5);
IkReal x2495=(cj5*r01);
IkReal x2496=((1.0)*sj1);
IkReal x2497=(r20*sj5);
IkReal x2498=(cj5*r21);
IkReal x2499=(cj5*r11);
IkReal x2500=(r10*sj5);
IkReal x2501=((1.0)*x2492);
IkReal x2502=((1.0)*x2493);
evalcond[0]=(((x2492*x2494))+((x2492*x2495))+(((-1.0)*r02*x2502)));
evalcond[1]=((((-1.0)*x2498*x2502))+(((-1.0)*x2497*x2502))+(((-1.0)*r22*x2501)));
evalcond[2]=((((-1.0)*r12*x2501))+(((-1.0)*x2500*x2502))+(((-1.0)*x2499*x2502)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x2501))+(((-1.0)*x2494*x2502))+(((-1.0)*x2495*x2502)));
evalcond[4]=(((x2492*x2497))+((x2492*x2498))+(((-1.0)*r22*x2502))+(((-1.0)*sj2*x2496))+((cj1*cj2)));
evalcond[5]=(((x2492*x2499))+((x2492*x2500))+(((-1.0)*r12*x2502))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x2496)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2503=((1.0)*cj5);
IkReal x2504=(((r11*sj5))+(((-1.0)*r10*x2503)));
j4eval[0]=x2504;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*sj5))+(((-1.0)*r21*x2503))))));
j4eval[2]=IKsign(x2504);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2505=((1.0)*sj5);
IkReal x2506=(((cj5*r20))+(((-1.0)*r21*x2505)));
j4eval[0]=x2506;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*cj5*r11))+(((-1.0)*r10*x2505))))));
j4eval[2]=IKsign(x2506);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2507=cj5*cj5;
IkReal x2508=r00*r00;
IkReal x2509=(r00*sj5);
IkReal x2510=(cj5*r01);
IkReal x2511=((((2.0)*x2509*x2510))+x2508+((x2507*(r01*r01)))+(r02*r02)+(((-1.0)*x2507*x2508)));
j4eval[0]=x2511;
j4eval[1]=((IKabs((x2510+x2509)))+(IKabs(r02)));
j4eval[2]=IKsign(x2511);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2512=cj5*cj5;
IkReal x2513=r00*r00;
IkReal x2514=(r00*sj5);
IkReal x2515=(cj5*r01);
CheckValue<IkReal> x2516=IKPowWithIntegerCheck(IKsign((x2513+((x2512*(r01*r01)))+(((2.0)*x2514*x2515))+(r02*r02)+(((-1.0)*x2512*x2513)))),-1);
if(!x2516.valid){
continue;
}
CheckValue<IkReal> x2517 = IKatan2WithCheck(IkReal((x2514+x2515)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2517.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2516.value)))+(x2517.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2518=IKcos(j4);
IkReal x2519=IKsin(j4);
IkReal x2520=(r00*sj5);
IkReal x2521=(cj5*r01);
IkReal x2522=(r20*sj5);
IkReal x2523=(cj5*r21);
IkReal x2524=(cj5*r11);
IkReal x2525=(r10*sj5);
IkReal x2526=((1.0)*x2518);
IkReal x2527=((1.0)*x2519);
evalcond[0]=((((-1.0)*r02*x2527))+((x2518*x2520))+((x2518*x2521)));
evalcond[1]=((((-1.0)*x2523*x2527))+(((-1.0)*x2522*x2527))+(((-1.0)*r22*x2526)));
evalcond[2]=((((-1.0)*x2524*x2527))+(((-1.0)*r12*x2526))+(((-1.0)*x2525*x2527)));
evalcond[3]=((1.0)+(((-1.0)*x2520*x2527))+(((-1.0)*r02*x2526))+(((-1.0)*x2521*x2527)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r12*x2527))+((cj1*sj2))+((x2518*x2524))+((x2518*x2525)));
evalcond[5]=((((-1.0)*sj1*sj2))+((x2518*x2523))+((x2518*x2522))+((cj1*cj2))+(((-1.0)*r22*x2527)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2528=((1.0)*sj5);
CheckValue<IkReal> x2529=IKPowWithIntegerCheck(IKsign((((cj5*r20))+(((-1.0)*r21*x2528)))),-1);
if(!x2529.valid){
continue;
}
CheckValue<IkReal> x2530 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r11))+(((-1.0)*r10*x2528)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2530.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2529.value)))+(x2530.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2531=IKcos(j4);
IkReal x2532=IKsin(j4);
IkReal x2533=(r00*sj5);
IkReal x2534=(cj5*r01);
IkReal x2535=(r20*sj5);
IkReal x2536=(cj5*r21);
IkReal x2537=(cj5*r11);
IkReal x2538=(r10*sj5);
IkReal x2539=((1.0)*x2531);
IkReal x2540=((1.0)*x2532);
evalcond[0]=(((x2531*x2534))+((x2531*x2533))+(((-1.0)*r02*x2540)));
evalcond[1]=((((-1.0)*x2536*x2540))+(((-1.0)*r22*x2539))+(((-1.0)*x2535*x2540)));
evalcond[2]=((((-1.0)*x2538*x2540))+(((-1.0)*r12*x2539))+(((-1.0)*x2537*x2540)));
evalcond[3]=((1.0)+(((-1.0)*r02*x2539))+(((-1.0)*x2533*x2540))+(((-1.0)*x2534*x2540)));
evalcond[4]=((((-1.0)*r12*x2540))+((cj2*sj1))+((x2531*x2537))+((x2531*x2538))+((cj1*sj2)));
evalcond[5]=(((x2531*x2535))+((x2531*x2536))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*r22*x2540)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2541=((1.0)*cj5);
CheckValue<IkReal> x2542 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x2541))+(((-1.0)*r20*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2542.valid){
continue;
}
CheckValue<IkReal> x2543=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x2541))+((r11*sj5)))),-1);
if(!x2543.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2542.value)+(((1.5707963267949)*(x2543.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2544=IKcos(j4);
IkReal x2545=IKsin(j4);
IkReal x2546=(r00*sj5);
IkReal x2547=(cj5*r01);
IkReal x2548=(r20*sj5);
IkReal x2549=(cj5*r21);
IkReal x2550=(cj5*r11);
IkReal x2551=(r10*sj5);
IkReal x2552=((1.0)*x2544);
IkReal x2553=((1.0)*x2545);
evalcond[0]=((((-1.0)*r02*x2553))+((x2544*x2547))+((x2544*x2546)));
evalcond[1]=((((-1.0)*x2549*x2553))+(((-1.0)*x2548*x2553))+(((-1.0)*r22*x2552)));
evalcond[2]=((((-1.0)*r12*x2552))+(((-1.0)*x2550*x2553))+(((-1.0)*x2551*x2553)));
evalcond[3]=((1.0)+(((-1.0)*x2546*x2553))+(((-1.0)*r02*x2552))+(((-1.0)*x2547*x2553)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r12*x2553))+((cj1*sj2))+((x2544*x2550))+((x2544*x2551)));
evalcond[5]=((((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*r22*x2553))+((x2544*x2549))+((x2544*x2548)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2556 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2556)==0){
continue;
}
IkReal x2554=pow(x2556,-0.5);
IkReal x2555=((-1.0)*x2554);
CheckValue<IkReal> x2557 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x2557.valid){
continue;
}
IkReal gconst84=((-1.0)*(x2557.value));
IkReal gconst85=(r10*x2555);
IkReal gconst86=(r11*x2555);
CheckValue<IkReal> x2558 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x2558.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j5+(x2558.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x2562 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x2562.valid){
continue;
}
IkReal x2559=((-1.0)*(x2562.value));
IkReal x2560=x2554;
IkReal x2561=((-1.0)*x2560);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst85;
cj5=gconst86;
j5=x2559;
IkReal gconst84=x2559;
IkReal gconst85=(r10*x2561);
IkReal gconst86=(r11*x2561);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x2566 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x2566.valid){
continue;
}
IkReal x2563=((-1.0)*(x2566.value));
IkReal x2564=x2554;
IkReal x2565=((-1.0)*x2564);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst85;
cj5=gconst86;
j5=x2563;
IkReal gconst84=x2563;
IkReal gconst85=(r10*x2565);
IkReal gconst86=(r11*x2565);
IkReal x2567=r12*r12;
IkReal x2568=((1.0)*cj0);
IkReal x2569=(r02*sj0);
CheckValue<IkReal> x2573=IKPowWithIntegerCheck(((-1.0)+x2567),-1);
if(!x2573.valid){
continue;
}
IkReal x2570=x2573.value;
if((((1.0)+(((-1.0)*x2567)))) < -0.00001)
continue;
IkReal x2571=IKsqrt(((1.0)+(((-1.0)*x2567))));
IkReal x2572=(x2570*x2571);
j4eval[0]=((IKabs((((r12*x2569*x2572))+(((-1.0)*x2567*x2568*x2572))+((cj0*x2572)))))+(IKabs((x2569+(((-1.0)*r12*x2568))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x2577 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x2577.valid){
continue;
}
IkReal x2574=((-1.0)*(x2577.value));
IkReal x2575=x2554;
IkReal x2576=((-1.0)*x2575);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst85;
cj5=gconst86;
j5=x2574;
IkReal gconst84=x2574;
IkReal gconst85=(r10*x2576);
IkReal gconst86=(r11*x2576);
IkReal x2578=r12*r12;
IkReal x2579=(cj1*cj2*r22);
CheckValue<IkReal> x2584=IKPowWithIntegerCheck(((-1.0)+x2578),-1);
if(!x2584.valid){
continue;
}
IkReal x2580=x2584.value;
IkReal x2581=((1.0)*r22*sj1*sj2);
if((((1.0)+(((-1.0)*x2578)))) < -0.00001)
continue;
IkReal x2582=IKsqrt(((1.0)+(((-1.0)*x2578))));
IkReal x2583=(r12*x2580*x2582);
j4eval[0]=((IKabs((((x2579*x2583))+(((-1.0)*x2581*x2583)))))+(IKabs((x2579+(((-1.0)*x2581))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2585=(gconst85*r20);
IkReal x2586=(sj1*sj2);
IkReal x2587=(gconst86*r21);
IkReal x2588=(cj1*cj2);
CheckValue<IkReal> x2589 = IKatan2WithCheck(IkReal((((r22*x2588))+(((-1.0)*r22*x2586)))),IkReal(((((-1.0)*x2587*x2588))+((x2586*x2587))+((x2585*x2586))+(((-1.0)*x2585*x2588)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2589.valid){
continue;
}
CheckValue<IkReal> x2590=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((2.0)*x2585*x2587))+(x2587*x2587)+(x2585*x2585))),-1);
if(!x2590.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2589.value)+(((1.5707963267949)*(x2590.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2591=IKsin(j4);
IkReal x2592=IKcos(j4);
IkReal x2593=(cj2*sj1);
IkReal x2594=(gconst86*r21);
IkReal x2595=((1.0)*sj2);
IkReal x2596=(gconst86*r01);
IkReal x2597=((1.0)*cj0);
IkReal x2598=(gconst86*r11);
IkReal x2599=((1.0)*x2592);
IkReal x2600=((1.0)*x2591);
IkReal x2601=(gconst85*x2592);
evalcond[0]=((((-1.0)*r22*x2599))+(((-1.0)*x2594*x2600))+(((-1.0)*gconst85*r20*x2600)));
evalcond[1]=((((-1.0)*x2596*x2600))+(((-1.0)*r02*x2599))+(((-1.0)*gconst85*r00*x2600))+(((-1.0)*x2597)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*gconst85*r10*x2600))+(((-1.0)*x2598*x2600))+(((-1.0)*r12*x2599)));
evalcond[3]=(((r20*x2601))+((x2592*x2594))+(((-1.0)*r22*x2600))+(((-1.0)*sj1*x2595))+((cj1*cj2)));
evalcond[4]=(((x2592*x2596))+((cj1*sj0*sj2))+(((-1.0)*r02*x2600))+((sj0*x2593))+((r00*x2601)));
evalcond[5]=(((x2592*x2598))+(((-1.0)*x2593*x2597))+(((-1.0)*r12*x2600))+(((-1.0)*cj0*cj1*x2595))+((r10*x2601)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2602=((1.0)*sj0);
CheckValue<IkReal> x2603=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst85*r21))+((gconst86*r20)))),-1);
if(!x2603.valid){
continue;
}
CheckValue<IkReal> x2604 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r12))+((r02*sj0)))),IkReal((((cj0*gconst86*r11))+(((-1.0)*gconst85*r00*x2602))+(((-1.0)*gconst86*r01*x2602))+((cj0*gconst85*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2604.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2603.value)))+(x2604.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2605=IKsin(j4);
IkReal x2606=IKcos(j4);
IkReal x2607=(cj2*sj1);
IkReal x2608=(gconst86*r21);
IkReal x2609=((1.0)*sj2);
IkReal x2610=(gconst86*r01);
IkReal x2611=((1.0)*cj0);
IkReal x2612=(gconst86*r11);
IkReal x2613=((1.0)*x2606);
IkReal x2614=((1.0)*x2605);
IkReal x2615=(gconst85*x2606);
evalcond[0]=((((-1.0)*x2608*x2614))+(((-1.0)*r22*x2613))+(((-1.0)*gconst85*r20*x2614)));
evalcond[1]=((((-1.0)*x2610*x2614))+(((-1.0)*gconst85*r00*x2614))+(((-1.0)*r02*x2613))+(((-1.0)*x2611)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*gconst85*r10*x2614))+(((-1.0)*r12*x2613))+(((-1.0)*x2612*x2614)));
evalcond[3]=((((-1.0)*sj1*x2609))+((r20*x2615))+((x2606*x2608))+(((-1.0)*r22*x2614))+((cj1*cj2)));
evalcond[4]=(((r00*x2615))+((cj1*sj0*sj2))+((sj0*x2607))+((x2606*x2610))+(((-1.0)*r02*x2614)));
evalcond[5]=((((-1.0)*x2607*x2611))+(((-1.0)*r12*x2614))+((x2606*x2612))+((r10*x2615))+(((-1.0)*cj0*cj1*x2609)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2616=((1.0)*sj0);
CheckValue<IkReal> x2617 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst86*r21*x2616))+(((-1.0)*gconst85*r20*x2616)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2617.valid){
continue;
}
CheckValue<IkReal> x2618=IKPowWithIntegerCheck(IKsign((((gconst85*r01))+(((-1.0)*gconst86*r00)))),-1);
if(!x2618.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2617.value)+(((1.5707963267949)*(x2618.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2619=IKsin(j4);
IkReal x2620=IKcos(j4);
IkReal x2621=(cj2*sj1);
IkReal x2622=(gconst86*r21);
IkReal x2623=((1.0)*sj2);
IkReal x2624=(gconst86*r01);
IkReal x2625=((1.0)*cj0);
IkReal x2626=(gconst86*r11);
IkReal x2627=((1.0)*x2620);
IkReal x2628=((1.0)*x2619);
IkReal x2629=(gconst85*x2620);
evalcond[0]=((((-1.0)*x2622*x2628))+(((-1.0)*r22*x2627))+(((-1.0)*gconst85*r20*x2628)));
evalcond[1]=((((-1.0)*x2624*x2628))+(((-1.0)*gconst85*r00*x2628))+(((-1.0)*r02*x2627))+(((-1.0)*x2625)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*gconst85*r10*x2628))+(((-1.0)*r12*x2627))+(((-1.0)*x2626*x2628)));
evalcond[3]=(((r20*x2629))+(((-1.0)*r22*x2628))+((x2620*x2622))+((cj1*cj2))+(((-1.0)*sj1*x2623)));
evalcond[4]=(((r00*x2629))+((cj1*sj0*sj2))+((x2620*x2624))+(((-1.0)*r02*x2628))+((sj0*x2621)));
evalcond[5]=((((-1.0)*cj0*cj1*x2623))+(((-1.0)*r12*x2628))+((x2620*x2626))+((r10*x2629))+(((-1.0)*x2621*x2625)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2632 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2632)==0){
continue;
}
IkReal x2630=pow(x2632,-0.5);
IkReal x2631=((1.0)*x2630);
CheckValue<IkReal> x2633 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x2633.valid){
continue;
}
IkReal gconst87=((3.14159265358979)+(((-1.0)*(x2633.value))));
IkReal gconst88=(r10*x2631);
IkReal gconst89=(r11*x2631);
CheckValue<IkReal> x2634 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x2634.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5+(x2634.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
CheckValue<IkReal> x2638 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x2638.valid){
continue;
}
IkReal x2635=((1.0)*(x2638.value));
IkReal x2636=x2630;
IkReal x2637=((1.0)*x2636);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2635)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2635)));
IkReal gconst88=(r10*x2637);
IkReal gconst89=(r11*x2637);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x2642 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x2642.valid){
continue;
}
IkReal x2639=((1.0)*(x2642.value));
IkReal x2640=x2630;
IkReal x2641=((1.0)*x2640);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2639)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2639)));
IkReal gconst88=(r10*x2641);
IkReal gconst89=(r11*x2641);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2643=((1.0)*gconst88);
CheckValue<IkReal> x2644 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r12))+((r02*sj0)))),IkReal((((cj0*gconst88*r10))+(((-1.0)*gconst89*r01*sj0))+(((-1.0)*r00*sj0*x2643))+((cj0*gconst89*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2644.valid){
continue;
}
CheckValue<IkReal> x2645=IKPowWithIntegerCheck(IKsign((((gconst89*r20))+(((-1.0)*r21*x2643)))),-1);
if(!x2645.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2644.value)+(((1.5707963267949)*(x2645.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2646=IKsin(j4);
IkReal x2647=IKcos(j4);
IkReal x2648=(gconst89*r11);
IkReal x2649=(gconst88*r10);
IkReal x2650=((1.0)*sj1);
IkReal x2651=(gconst88*r20);
IkReal x2652=(gconst88*r00);
IkReal x2653=(cj1*sj2);
IkReal x2654=((1.0)*cj0);
IkReal x2655=((1.0)*x2647);
IkReal x2656=((1.0)*x2646);
IkReal x2657=(gconst89*x2647);
evalcond[0]=((((-1.0)*r22*x2655))+(((-1.0)*x2651*x2656))+(((-1.0)*gconst89*r21*x2656)));
evalcond[1]=((((-1.0)*x2652*x2656))+(((-1.0)*r02*x2655))+(((-1.0)*x2654))+(((-1.0)*gconst89*r01*x2656)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r12*x2655))+(((-1.0)*x2649*x2656))+(((-1.0)*x2648*x2656)));
evalcond[3]=((((-1.0)*r22*x2656))+((r21*x2657))+((cj1*cj2))+(((-1.0)*sj2*x2650))+((x2647*x2651)));
evalcond[4]=(((sj0*x2653))+(((-1.0)*r02*x2656))+((cj2*sj0*sj1))+((r01*x2657))+((x2647*x2652)));
evalcond[5]=((((-1.0)*r12*x2656))+(((-1.0)*cj0*cj2*x2650))+((x2647*x2648))+((x2647*x2649))+(((-1.0)*x2653*x2654)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2658=((1.0)*sj0);
CheckValue<IkReal> x2659=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst89*r00))+((gconst88*r01)))),-1);
if(!x2659.valid){
continue;
}
CheckValue<IkReal> x2660 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst89*r21*x2658))+(((-1.0)*gconst88*r20*x2658)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2660.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2659.value)))+(x2660.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2661=IKsin(j4);
IkReal x2662=IKcos(j4);
IkReal x2663=(gconst89*r11);
IkReal x2664=(gconst88*r10);
IkReal x2665=((1.0)*sj1);
IkReal x2666=(gconst88*r20);
IkReal x2667=(gconst88*r00);
IkReal x2668=(cj1*sj2);
IkReal x2669=((1.0)*cj0);
IkReal x2670=((1.0)*x2662);
IkReal x2671=((1.0)*x2661);
IkReal x2672=(gconst89*x2662);
evalcond[0]=((((-1.0)*gconst89*r21*x2671))+(((-1.0)*x2666*x2671))+(((-1.0)*r22*x2670)));
evalcond[1]=((((-1.0)*r02*x2670))+(((-1.0)*x2669))+(((-1.0)*x2667*x2671))+(((-1.0)*gconst89*r01*x2671)));
evalcond[2]=((((-1.0)*r12*x2670))+(((-1.0)*sj0))+(((-1.0)*x2664*x2671))+(((-1.0)*x2663*x2671)));
evalcond[3]=(((x2662*x2666))+((r21*x2672))+(((-1.0)*sj2*x2665))+((cj1*cj2))+(((-1.0)*r22*x2671)));
evalcond[4]=(((sj0*x2668))+((x2662*x2667))+(((-1.0)*r02*x2671))+((cj2*sj0*sj1))+((r01*x2672)));
evalcond[5]=((((-1.0)*r12*x2671))+((x2662*x2664))+((x2662*x2663))+(((-1.0)*cj0*cj2*x2665))+(((-1.0)*x2668*x2669)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2673=((1.0)*cj0);
CheckValue<IkReal> x2674=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst88*r11))+((gconst89*r10)))),-1);
if(!x2674.valid){
continue;
}
CheckValue<IkReal> x2675 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*gconst89*r21*x2673))+(((-1.0)*gconst88*r20*x2673)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2675.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2674.value)))+(x2675.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2676=IKsin(j4);
IkReal x2677=IKcos(j4);
IkReal x2678=(gconst89*r11);
IkReal x2679=(gconst88*r10);
IkReal x2680=((1.0)*sj1);
IkReal x2681=(gconst88*r20);
IkReal x2682=(gconst88*r00);
IkReal x2683=(cj1*sj2);
IkReal x2684=((1.0)*cj0);
IkReal x2685=((1.0)*x2677);
IkReal x2686=((1.0)*x2676);
IkReal x2687=(gconst89*x2677);
evalcond[0]=((((-1.0)*gconst89*r21*x2686))+(((-1.0)*r22*x2685))+(((-1.0)*x2681*x2686)));
evalcond[1]=((((-1.0)*r02*x2685))+(((-1.0)*gconst89*r01*x2686))+(((-1.0)*x2684))+(((-1.0)*x2682*x2686)));
evalcond[2]=((((-1.0)*r12*x2685))+(((-1.0)*sj0))+(((-1.0)*x2679*x2686))+(((-1.0)*x2678*x2686)));
evalcond[3]=((((-1.0)*sj2*x2680))+((r21*x2687))+(((-1.0)*r22*x2686))+((cj1*cj2))+((x2677*x2681)));
evalcond[4]=((((-1.0)*r02*x2686))+((sj0*x2683))+((r01*x2687))+((cj2*sj0*sj1))+((x2677*x2682)));
evalcond[5]=((((-1.0)*r12*x2686))+(((-1.0)*x2683*x2684))+(((-1.0)*cj0*cj2*x2680))+((x2677*x2679))+((x2677*x2678)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2688=((1.0)*cj5);
IkReal x2689=(((r01*sj5))+(((-1.0)*r00*x2688)));
j4eval[0]=x2689;
j4eval[1]=IKsign(x2689);
j4eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*r21*x2688))+(((-1.0)*r20*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2690=((1.0)*sj5);
IkReal x2691=(((cj5*r20))+(((-1.0)*r21*x2690)));
j4eval[0]=x2691;
j4eval[1]=IKsign(x2691);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*r00*x2690))+(((-1.0)*cj5*r01))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2692=(cj2*sj1);
IkReal x2693=(cj5*r11);
IkReal x2694=(r10*sj5);
IkReal x2695=(cj1*sj2);
IkReal x2696=(((r21*sj5))+(((-1.0)*cj5*r20)));
j4eval[0]=x2696;
j4eval[1]=((IKabs((((x2693*x2695))+((x2694*x2695))+((x2692*x2693))+((x2692*x2694)))))+(IKabs((((r12*x2692))+((r12*x2695))))));
j4eval[2]=IKsign(x2696);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2697=(cj2*sj1);
IkReal x2698=(cj5*r11);
IkReal x2699=(r10*sj5);
IkReal x2700=(cj1*sj2);
CheckValue<IkReal> x2701=IKPowWithIntegerCheck(IKsign((((r21*sj5))+(((-1.0)*cj5*r20)))),-1);
if(!x2701.valid){
continue;
}
CheckValue<IkReal> x2702 = IKatan2WithCheck(IkReal((((x2699*x2700))+((x2698*x2700))+((x2697*x2698))+((x2697*x2699)))),IkReal((((r12*x2700))+((r12*x2697)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2702.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2701.value)))+(x2702.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2703=IKcos(j4);
IkReal x2704=IKsin(j4);
IkReal x2705=(r00*sj5);
IkReal x2706=(cj5*r01);
IkReal x2707=(r20*sj5);
IkReal x2708=(cj5*r21);
IkReal x2709=(cj5*r11);
IkReal x2710=(r10*sj5);
IkReal x2711=((1.0)*x2703);
IkReal x2712=((1.0)*x2704);
evalcond[0]=(((x2703*x2710))+((x2703*x2709))+(((-1.0)*r12*x2712)));
evalcond[1]=((((-1.0)*x2708*x2712))+(((-1.0)*r22*x2711))+(((-1.0)*x2707*x2712)));
evalcond[2]=((((-1.0)*r02*x2711))+(((-1.0)*x2706*x2712))+(((-1.0)*x2705*x2712)));
evalcond[3]=((-1.0)+(((-1.0)*x2709*x2712))+(((-1.0)*x2710*x2712))+(((-1.0)*r12*x2711)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r02*x2712))+((cj1*sj2))+((x2703*x2705))+((x2703*x2706)));
evalcond[5]=((((-1.0)*sj1*sj2))+((x2703*x2708))+((x2703*x2707))+((cj1*cj2))+(((-1.0)*r22*x2712)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2713=((1.0)*sj5);
CheckValue<IkReal> x2714 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x2713))+(((-1.0)*cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2714.valid){
continue;
}
CheckValue<IkReal> x2715=IKPowWithIntegerCheck(IKsign((((cj5*r20))+(((-1.0)*r21*x2713)))),-1);
if(!x2715.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2714.value)+(((1.5707963267949)*(x2715.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2716=IKcos(j4);
IkReal x2717=IKsin(j4);
IkReal x2718=(r00*sj5);
IkReal x2719=(cj5*r01);
IkReal x2720=(r20*sj5);
IkReal x2721=(cj5*r21);
IkReal x2722=(cj5*r11);
IkReal x2723=(r10*sj5);
IkReal x2724=((1.0)*x2716);
IkReal x2725=((1.0)*x2717);
evalcond[0]=((((-1.0)*r12*x2725))+((x2716*x2722))+((x2716*x2723)));
evalcond[1]=((((-1.0)*x2720*x2725))+(((-1.0)*x2721*x2725))+(((-1.0)*r22*x2724)));
evalcond[2]=((((-1.0)*x2718*x2725))+(((-1.0)*x2719*x2725))+(((-1.0)*r02*x2724)));
evalcond[3]=((-1.0)+(((-1.0)*x2722*x2725))+(((-1.0)*r12*x2724))+(((-1.0)*x2723*x2725)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x2716*x2719))+((x2716*x2718))+(((-1.0)*r02*x2725)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r22*x2725))+((cj1*cj2))+((x2716*x2720))+((x2716*x2721)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2726=((1.0)*cj5);
CheckValue<IkReal> x2727=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x2726))+((r01*sj5)))),-1);
if(!x2727.valid){
continue;
}
CheckValue<IkReal> x2728 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x2726))+(((-1.0)*r20*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2728.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2727.value)))+(x2728.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2729=IKcos(j4);
IkReal x2730=IKsin(j4);
IkReal x2731=(r00*sj5);
IkReal x2732=(cj5*r01);
IkReal x2733=(r20*sj5);
IkReal x2734=(cj5*r21);
IkReal x2735=(cj5*r11);
IkReal x2736=(r10*sj5);
IkReal x2737=((1.0)*x2729);
IkReal x2738=((1.0)*x2730);
evalcond[0]=((((-1.0)*r12*x2738))+((x2729*x2736))+((x2729*x2735)));
evalcond[1]=((((-1.0)*x2733*x2738))+(((-1.0)*x2734*x2738))+(((-1.0)*r22*x2737)));
evalcond[2]=((((-1.0)*x2731*x2738))+(((-1.0)*r02*x2737))+(((-1.0)*x2732*x2738)));
evalcond[3]=((-1.0)+(((-1.0)*x2736*x2738))+(((-1.0)*x2735*x2738))+(((-1.0)*r12*x2737)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r02*x2738))+((x2729*x2732))+((x2729*x2731)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r22*x2738))+((cj1*cj2))+((x2729*x2734))+((x2729*x2733)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2739=((1.0)*sj5);
IkReal x2740=((((-1.0)*r01*x2739))+((cj5*r00)));
j4eval[0]=x2740;
j4eval[1]=IKsign(x2740);
j4eval[2]=((IKabs(((((-1.0)*cj5*r21))+(((-1.0)*r20*x2739)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2741=((1.0)*cj5);
IkReal x2742=(((r21*sj5))+(((-1.0)*r20*x2741)));
j4eval[0]=x2742;
j4eval[1]=((IKabs(((((-1.0)*r01*x2741))+(((-1.0)*r00*sj5)))))+(IKabs(r02)));
j4eval[2]=IKsign(x2742);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2743=cj5*cj5;
IkReal x2744=r10*r10;
IkReal x2745=(cj5*r11);
IkReal x2746=(r10*sj5);
IkReal x2747=(x2744+(r12*r12)+(((2.0)*x2745*x2746))+(((-1.0)*x2743*x2744))+((x2743*(r11*r11))));
j4eval[0]=x2747;
j4eval[1]=((IKabs(r12))+(IKabs((x2745+x2746))));
j4eval[2]=IKsign(x2747);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2748=cj5*cj5;
IkReal x2749=r10*r10;
IkReal x2750=(r10*sj5);
IkReal x2751=(cj5*r11);
CheckValue<IkReal> x2752 = IKatan2WithCheck(IkReal((x2750+x2751)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2752.valid){
continue;
}
CheckValue<IkReal> x2753=IKPowWithIntegerCheck(IKsign((x2749+(r12*r12)+(((-1.0)*x2748*x2749))+((x2748*(r11*r11)))+(((2.0)*x2750*x2751)))),-1);
if(!x2753.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2752.value)+(((1.5707963267949)*(x2753.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2754=IKcos(j4);
IkReal x2755=IKsin(j4);
IkReal x2756=(r00*sj5);
IkReal x2757=(cj5*r01);
IkReal x2758=(r20*sj5);
IkReal x2759=(cj5*r21);
IkReal x2760=((1.0)*sj1);
IkReal x2761=(cj5*r11);
IkReal x2762=(r10*sj5);
IkReal x2763=((1.0)*x2754);
IkReal x2764=((1.0)*x2755);
evalcond[0]=(((x2754*x2762))+((x2754*x2761))+(((-1.0)*r12*x2764)));
evalcond[1]=((((-1.0)*x2758*x2764))+(((-1.0)*x2759*x2764))+(((-1.0)*r22*x2763)));
evalcond[2]=((((-1.0)*r02*x2763))+(((-1.0)*x2757*x2764))+(((-1.0)*x2756*x2764)));
evalcond[3]=((1.0)+(((-1.0)*r12*x2763))+(((-1.0)*x2761*x2764))+(((-1.0)*x2762*x2764)));
evalcond[4]=(((x2754*x2758))+((x2754*x2759))+(((-1.0)*sj2*x2760))+((cj1*cj2))+(((-1.0)*r22*x2764)));
evalcond[5]=(((x2754*x2756))+((x2754*x2757))+(((-1.0)*cj2*x2760))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x2764)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2765=((1.0)*cj5);
CheckValue<IkReal> x2766 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*sj5))+(((-1.0)*r01*x2765)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2766.valid){
continue;
}
CheckValue<IkReal> x2767=IKPowWithIntegerCheck(IKsign((((r21*sj5))+(((-1.0)*r20*x2765)))),-1);
if(!x2767.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2766.value)+(((1.5707963267949)*(x2767.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2768=IKcos(j4);
IkReal x2769=IKsin(j4);
IkReal x2770=(r00*sj5);
IkReal x2771=(cj5*r01);
IkReal x2772=(r20*sj5);
IkReal x2773=(cj5*r21);
IkReal x2774=((1.0)*sj1);
IkReal x2775=(cj5*r11);
IkReal x2776=(r10*sj5);
IkReal x2777=((1.0)*x2768);
IkReal x2778=((1.0)*x2769);
evalcond[0]=(((x2768*x2775))+((x2768*x2776))+(((-1.0)*r12*x2778)));
evalcond[1]=((((-1.0)*x2773*x2778))+(((-1.0)*x2772*x2778))+(((-1.0)*r22*x2777)));
evalcond[2]=((((-1.0)*r02*x2777))+(((-1.0)*x2770*x2778))+(((-1.0)*x2771*x2778)));
evalcond[3]=((1.0)+(((-1.0)*x2776*x2778))+(((-1.0)*r12*x2777))+(((-1.0)*x2775*x2778)));
evalcond[4]=(((x2768*x2773))+((x2768*x2772))+((cj1*cj2))+(((-1.0)*sj2*x2774))+(((-1.0)*r22*x2778)));
evalcond[5]=(((x2768*x2771))+((x2768*x2770))+(((-1.0)*r02*x2778))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x2774)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2779=((1.0)*sj5);
CheckValue<IkReal> x2780 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x2779))+(((-1.0)*cj5*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2780.valid){
continue;
}
CheckValue<IkReal> x2781=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2779))+((cj5*r00)))),-1);
if(!x2781.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2780.value)+(((1.5707963267949)*(x2781.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2782=IKcos(j4);
IkReal x2783=IKsin(j4);
IkReal x2784=(r00*sj5);
IkReal x2785=(cj5*r01);
IkReal x2786=(r20*sj5);
IkReal x2787=(cj5*r21);
IkReal x2788=((1.0)*sj1);
IkReal x2789=(cj5*r11);
IkReal x2790=(r10*sj5);
IkReal x2791=((1.0)*x2782);
IkReal x2792=((1.0)*x2783);
evalcond[0]=(((x2782*x2789))+((x2782*x2790))+(((-1.0)*r12*x2792)));
evalcond[1]=((((-1.0)*x2787*x2792))+(((-1.0)*x2786*x2792))+(((-1.0)*r22*x2791)));
evalcond[2]=((((-1.0)*x2784*x2792))+(((-1.0)*x2785*x2792))+(((-1.0)*r02*x2791)));
evalcond[3]=((1.0)+(((-1.0)*x2790*x2792))+(((-1.0)*x2789*x2792))+(((-1.0)*r12*x2791)));
evalcond[4]=((((-1.0)*sj2*x2788))+((x2782*x2786))+((x2782*x2787))+(((-1.0)*r22*x2792))+((cj1*cj2)));
evalcond[5]=((((-1.0)*cj2*x2788))+(((-1.0)*cj1*sj2))+((x2782*x2784))+((x2782*x2785))+(((-1.0)*r02*x2792)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2793=((-1.0)*py);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x2793);
rxp0_2=(py*r00);
rxp1_0=(r21*x2793);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2794=((-1.0)*py);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x2794);
rxp0_2=(py*r00);
rxp1_0=(r21*x2794);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((cj5*r21))+((r20*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2795=((-1.0)*py);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x2795);
rxp0_2=(py*r00);
rxp1_0=(r21*x2795);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((r00*sj5))+((cj5*r01)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2798=IKPowWithIntegerCheck((((r00*sj5))+((cj5*r01))),-1);
if(!x2798.valid){
continue;
}
IkReal x2796=x2798.value;
IkReal x2797=((1.0)*sj0*x2796);
cj4array[0]=((((-1.0)*cj1*sj2*x2797))+(((-1.0)*cj2*sj1*x2797)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2799=IKsin(j4);
IkReal x2800=IKcos(j4);
IkReal x2801=(cj5*r21);
IkReal x2802=(r20*sj5);
IkReal x2803=((1.0)*x2799);
evalcond[0]=((-1.0)*r12*x2799);
evalcond[1]=((((-1.0)*r12*x2800))+(((-1.0)*sj0)));
evalcond[2]=((((-1.0)*x2802*x2803))+(((-1.0)*x2801*x2803)));
evalcond[3]=((((-1.0)*r00*sj5*x2803))+(((-1.0)*cj5*r01*x2803)));
evalcond[4]=((((-1.0)*sj1*sj2))+((cj1*cj2))+((x2800*x2802))+((x2800*x2801)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2805=IKPowWithIntegerCheck((((cj5*r21))+((r20*sj5))),-1);
if(!x2805.valid){
continue;
}
IkReal x2804=x2805.value;
cj4array[0]=(((sj1*sj2*x2804))+(((-1.0)*cj1*cj2*x2804)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2806=IKsin(j4);
IkReal x2807=IKcos(j4);
IkReal x2808=(r00*sj5);
IkReal x2809=(cj5*r01);
IkReal x2810=((1.0)*x2806);
evalcond[0]=((-1.0)*r12*x2806);
evalcond[1]=((((-1.0)*r12*x2807))+(((-1.0)*sj0)));
evalcond[2]=((((-1.0)*cj5*r21*x2810))+(((-1.0)*r20*sj5*x2810)));
evalcond[3]=((((-1.0)*x2809*x2810))+(((-1.0)*x2808*x2810)));
evalcond[4]=(((cj1*sj0*sj2))+((cj2*sj0*sj1))+((x2807*x2809))+((x2807*x2808)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2811=IKPowWithIntegerCheck(r12,-1);
if(!x2811.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x2811.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2812=IKsin(j4);
IkReal x2813=IKcos(j4);
IkReal x2814=(cj5*r21);
IkReal x2815=(cj5*r01);
IkReal x2816=((1.0)*x2812);
IkReal x2817=(sj5*x2813);
evalcond[0]=((-1.0)*r12*x2812);
evalcond[1]=((((-1.0)*x2814*x2816))+(((-1.0)*r20*sj5*x2816)));
evalcond[2]=((((-1.0)*x2815*x2816))+(((-1.0)*r00*sj5*x2816)));
evalcond[3]=(((x2813*x2814))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((r20*x2817)));
evalcond[4]=(((r00*x2817))+((x2813*x2815))+((cj1*sj0*sj2))+((cj2*sj0*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2818=((1.0)*sj0);
CheckValue<IkReal> x2819 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r12))+((r02*sj0)))),IkReal((((cj0*cj5*r11))+(((-1.0)*cj5*r01*x2818))+((cj0*r10*sj5))+(((-1.0)*r00*sj5*x2818)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2819.valid){
continue;
}
CheckValue<IkReal> x2820=IKPowWithIntegerCheck(IKsign((((cj5*r20))+(((-1.0)*r21*sj5)))),-1);
if(!x2820.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2819.value)+(((1.5707963267949)*(x2820.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2821=IKsin(j4);
IkReal x2822=IKcos(j4);
IkReal x2823=(cj2*sj1);
IkReal x2824=(r00*sj5);
IkReal x2825=(cj5*r01);
IkReal x2826=(r20*sj5);
IkReal x2827=(cj5*r21);
IkReal x2828=((1.0)*sj2);
IkReal x2829=(cj5*r11);
IkReal x2830=((1.0)*cj0);
IkReal x2831=(r10*sj5);
IkReal x2832=((1.0)*x2822);
IkReal x2833=((1.0)*x2821);
evalcond[0]=((((-1.0)*x2826*x2833))+(((-1.0)*r22*x2832))+(((-1.0)*x2827*x2833)));
evalcond[1]=((((-1.0)*x2830))+(((-1.0)*x2825*x2833))+(((-1.0)*x2824*x2833))+(((-1.0)*r02*x2832)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r12*x2832))+(((-1.0)*x2831*x2833))+(((-1.0)*x2829*x2833)));
evalcond[3]=(((x2822*x2826))+((x2822*x2827))+(((-1.0)*sj1*x2828))+(((-1.0)*r22*x2833))+((cj1*cj2)));
evalcond[4]=(((x2822*x2824))+((x2822*x2825))+((cj1*sj0*sj2))+((sj0*x2823))+(((-1.0)*r02*x2833)));
evalcond[5]=(((x2822*x2829))+((x2822*x2831))+(((-1.0)*cj0*cj1*x2828))+(((-1.0)*r12*x2833))+(((-1.0)*x2823*x2830)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2834=((1.0)*sj0);
CheckValue<IkReal> x2835=IKPowWithIntegerCheck(IKsign((((r01*sj5))+(((-1.0)*cj5*r00)))),-1);
if(!x2835.valid){
continue;
}
CheckValue<IkReal> x2836 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj5*x2834))+(((-1.0)*cj5*r21*x2834)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2836.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2835.value)))+(x2836.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2837=IKsin(j4);
IkReal x2838=IKcos(j4);
IkReal x2839=(cj2*sj1);
IkReal x2840=(r00*sj5);
IkReal x2841=(cj5*r01);
IkReal x2842=(r20*sj5);
IkReal x2843=(cj5*r21);
IkReal x2844=((1.0)*sj2);
IkReal x2845=(cj5*r11);
IkReal x2846=((1.0)*cj0);
IkReal x2847=(r10*sj5);
IkReal x2848=((1.0)*x2838);
IkReal x2849=((1.0)*x2837);
evalcond[0]=((((-1.0)*x2842*x2849))+(((-1.0)*x2843*x2849))+(((-1.0)*r22*x2848)));
evalcond[1]=((((-1.0)*x2840*x2849))+(((-1.0)*r02*x2848))+(((-1.0)*x2841*x2849))+(((-1.0)*x2846)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r12*x2848))+(((-1.0)*x2845*x2849))+(((-1.0)*x2847*x2849)));
evalcond[3]=((((-1.0)*sj1*x2844))+((x2838*x2843))+((x2838*x2842))+((cj1*cj2))+(((-1.0)*r22*x2849)));
evalcond[4]=(((sj0*x2839))+((x2838*x2841))+((x2838*x2840))+((cj1*sj0*sj2))+(((-1.0)*r02*x2849)));
evalcond[5]=((((-1.0)*r12*x2849))+((x2838*x2845))+((x2838*x2847))+(((-1.0)*x2839*x2846))+(((-1.0)*cj0*cj1*x2844)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2850=((1.0)*cj0);
CheckValue<IkReal> x2851 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*r20*sj5*x2850))+(((-1.0)*cj5*r21*x2850)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2851.valid){
continue;
}
CheckValue<IkReal> x2852=IKPowWithIntegerCheck(IKsign((((cj5*r10))+(((-1.0)*r11*sj5)))),-1);
if(!x2852.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2851.value)+(((1.5707963267949)*(x2852.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2853=IKsin(j4);
IkReal x2854=IKcos(j4);
IkReal x2855=(cj2*sj1);
IkReal x2856=(r00*sj5);
IkReal x2857=(cj5*r01);
IkReal x2858=(r20*sj5);
IkReal x2859=(cj5*r21);
IkReal x2860=((1.0)*sj2);
IkReal x2861=(cj5*r11);
IkReal x2862=((1.0)*cj0);
IkReal x2863=(r10*sj5);
IkReal x2864=((1.0)*x2854);
IkReal x2865=((1.0)*x2853);
evalcond[0]=((((-1.0)*x2858*x2865))+(((-1.0)*r22*x2864))+(((-1.0)*x2859*x2865)));
evalcond[1]=((((-1.0)*r02*x2864))+(((-1.0)*x2857*x2865))+(((-1.0)*x2862))+(((-1.0)*x2856*x2865)));
evalcond[2]=((((-1.0)*r12*x2864))+(((-1.0)*sj0))+(((-1.0)*x2861*x2865))+(((-1.0)*x2863*x2865)));
evalcond[3]=((((-1.0)*r22*x2865))+(((-1.0)*sj1*x2860))+((cj1*cj2))+((x2854*x2859))+((x2854*x2858)));
evalcond[4]=((((-1.0)*r02*x2865))+((sj0*x2855))+((cj1*sj0*sj2))+((x2854*x2856))+((x2854*x2857)));
evalcond[5]=((((-1.0)*r12*x2865))+(((-1.0)*x2855*x2862))+((x2854*x2863))+((x2854*x2861))+(((-1.0)*cj0*cj1*x2860)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x2866=((((-1.0)*cj1*cj2))+((sj1*sj2)));
j0eval[0]=x2866;
j0eval[1]=IKsign(x2866);
j0eval[2]=((IKabs((((cj5*r10))+(((-1.0)*r11*sj5)))))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x2867=r20*r20;
IkReal x2868=cj5*cj5;
IkReal x2869=(cj5*r21);
IkReal x2870=(r20*sj5);
IkReal x2871=(sj1*sj2);
IkReal x2872=((1.0)*cj1*cj2);
IkReal x2873=((((-2.0)*x2869*x2870))+(((-1.0)*x2867))+((x2867*x2868))+(((-1.0)*(r22*r22)))+(((-1.0)*x2868*(r21*r21))));
j4eval[0]=x2873;
j4eval[1]=((IKabs((((x2870*x2871))+((x2869*x2871))+(((-1.0)*x2869*x2872))+(((-1.0)*x2870*x2872)))))+(IKabs(((((-1.0)*r22*x2871))+((cj1*cj2*r22))))));
j4eval[2]=IKsign(x2873);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j0eval[0]=((((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((0.757998185797156)*py))+(((-2.64391582770565)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.64391582770565)*py))+(((0.757998185797156)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.757998185797156)*py))+(((-2.64391582770565)*px))))+IKsqr(((((2.64391582770565)*py))+(((0.757998185797156)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((0.757998185797156)*py))+(((-2.64391582770565)*px))), ((((2.64391582770565)*py))+(((0.757998185797156)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x2874=IKsin(j0);
IkReal x2875=IKcos(j0);
evalcond[0]=((((-1.0)*px))+(((-0.3495)*x2874))+(((0.1002)*x2875)));
evalcond[1]=((((-1.0)*py))+(((0.1002)*x2874))+(((0.3495)*x2875)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x2876=((1.0)*sj5);
IkReal x2877=(((cj5*r10))+(((-1.0)*r11*x2876)));
j4eval[0]=x2877;
j4eval[1]=IKsign(x2877);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*cj5*r21*sj0))+(((-1.0)*r20*sj0*x2876))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x2878=((1.0)*sj5);
IkReal x2879=((((-1.0)*r01*x2878))+((cj5*r00)));
j4eval[0]=x2879;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x2878))+(((-1.0)*cj0*cj5*r21)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x2879);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x2880=cj5*cj5;
IkReal x2881=((1.0)*r20);
IkReal x2882=(cj5*r21);
IkReal x2883=(((cj5*r01*r20*sj5))+((r00*r20))+(((-1.0)*r00*x2880*x2881))+((r00*sj5*x2882))+((r01*r21*x2880))+((r02*r22)));
j4eval[0]=x2883;
j4eval[1]=((IKabs(((((-1.0)*cj0*sj5*x2881))+(((-1.0)*cj0*x2882)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x2883);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2884=cj5*cj5;
IkReal x2885=((1.0)*r20);
IkReal x2886=(cj5*r21);
CheckValue<IkReal> x2887 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*sj5*x2885))+(((-1.0)*cj0*x2886)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2887.valid){
continue;
}
CheckValue<IkReal> x2888=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+((r00*r20))+(((-1.0)*r00*x2884*x2885))+((r00*sj5*x2886))+((r01*r21*x2884))+((r02*r22)))),-1);
if(!x2888.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2887.value)+(((1.5707963267949)*(x2888.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2889=IKcos(j4);
IkReal x2890=IKsin(j4);
IkReal x2891=((1.0)*cj0);
IkReal x2892=(r00*sj5);
IkReal x2893=(r10*sj5);
IkReal x2894=(r20*sj5);
IkReal x2895=((1.0)*x2889);
IkReal x2896=((1.0)*x2890);
IkReal x2897=(cj5*x2896);
evalcond[0]=((((-1.0)*cj5*r21*x2895))+((r22*x2890))+(((-1.0)*x2894*x2895)));
evalcond[1]=((((-1.0)*r22*x2895))+(((-1.0)*x2894*x2896))+(((-1.0)*r21*x2897)));
evalcond[2]=(sj0+(((-1.0)*x2892*x2895))+((r02*x2890))+(((-1.0)*cj5*r01*x2895)));
evalcond[3]=((((-1.0)*x2893*x2895))+((r12*x2890))+(((-1.0)*x2891))+(((-1.0)*cj5*r11*x2895)));
evalcond[4]=((((-1.0)*r02*x2895))+(((-1.0)*x2892*x2896))+(((-1.0)*r01*x2897))+(((-1.0)*x2891)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x2893*x2896))+(((-1.0)*r11*x2897))+(((-1.0)*r12*x2895)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2898=((1.0)*cj0);
CheckValue<IkReal> x2899=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj5))+((cj5*r00)))),-1);
if(!x2899.valid){
continue;
}
CheckValue<IkReal> x2900 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r21*x2898))+(((-1.0)*r20*sj5*x2898)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2900.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2899.value)))+(x2900.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2901=IKcos(j4);
IkReal x2902=IKsin(j4);
IkReal x2903=((1.0)*cj0);
IkReal x2904=(r00*sj5);
IkReal x2905=(r10*sj5);
IkReal x2906=(r20*sj5);
IkReal x2907=((1.0)*x2901);
IkReal x2908=((1.0)*x2902);
IkReal x2909=(cj5*x2908);
evalcond[0]=((((-1.0)*x2906*x2907))+((r22*x2902))+(((-1.0)*cj5*r21*x2907)));
evalcond[1]=((((-1.0)*r21*x2909))+(((-1.0)*x2906*x2908))+(((-1.0)*r22*x2907)));
evalcond[2]=(((r02*x2902))+sj0+(((-1.0)*x2904*x2907))+(((-1.0)*cj5*r01*x2907)));
evalcond[3]=((((-1.0)*x2905*x2907))+(((-1.0)*cj5*r11*x2907))+(((-1.0)*x2903))+((r12*x2902)));
evalcond[4]=((((-1.0)*r02*x2907))+(((-1.0)*x2904*x2908))+(((-1.0)*x2903))+(((-1.0)*r01*x2909)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x2905*x2908))+(((-1.0)*r12*x2907))+(((-1.0)*r11*x2909)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2910=((1.0)*sj0);
CheckValue<IkReal> x2911 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r21*x2910))+(((-1.0)*r20*sj5*x2910)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x2911.valid){
continue;
}
CheckValue<IkReal> x2912=IKPowWithIntegerCheck(IKsign((((cj5*r10))+(((-1.0)*r11*sj5)))),-1);
if(!x2912.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2911.value)+(((1.5707963267949)*(x2912.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2913=IKcos(j4);
IkReal x2914=IKsin(j4);
IkReal x2915=((1.0)*cj0);
IkReal x2916=(r00*sj5);
IkReal x2917=(r10*sj5);
IkReal x2918=(r20*sj5);
IkReal x2919=((1.0)*x2913);
IkReal x2920=((1.0)*x2914);
IkReal x2921=(cj5*x2920);
evalcond[0]=((((-1.0)*cj5*r21*x2919))+(((-1.0)*x2918*x2919))+((r22*x2914)));
evalcond[1]=((((-1.0)*r21*x2921))+(((-1.0)*x2918*x2920))+(((-1.0)*r22*x2919)));
evalcond[2]=(sj0+(((-1.0)*cj5*r01*x2919))+((r02*x2914))+(((-1.0)*x2916*x2919)));
evalcond[3]=(((r12*x2914))+(((-1.0)*x2917*x2919))+(((-1.0)*cj5*r11*x2919))+(((-1.0)*x2915)));
evalcond[4]=((((-1.0)*x2916*x2920))+(((-1.0)*r01*x2921))+(((-1.0)*r02*x2919))+(((-1.0)*x2915)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r12*x2919))+(((-1.0)*x2917*x2920))+(((-1.0)*r11*x2921)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.64391582770565)*px))+(((0.757998185797156)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.757998185797156)*px))+(((-2.64391582770565)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.64391582770565)*px))+(((0.757998185797156)*py))))+IKsqr(((((0.757998185797156)*px))+(((-2.64391582770565)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.64391582770565)*px))+(((0.757998185797156)*py))), ((((0.757998185797156)*px))+(((-2.64391582770565)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x2922=IKsin(j0);
IkReal x2923=IKcos(j0);
evalcond[0]=((((-1.0)*px))+(((0.1002)*x2923))+(((0.3495)*x2922)));
evalcond[1]=((((-0.3495)*x2923))+(((-1.0)*py))+(((0.1002)*x2922)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x2924=((1.0)*cj5);
IkReal x2925=(((r01*sj5))+(((-1.0)*r00*x2924)));
j4eval[0]=x2925;
j4eval[1]=IKsign(x2925);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r20*sj5))+(((-1.0)*cj0*r21*x2924))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x2926=((1.0)*cj5);
IkReal x2927=((((-1.0)*r10*x2926))+((r11*sj5)));
j4eval[0]=x2927;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r21*sj0*x2926))+(((-1.0)*r20*sj0*sj5))))));
j4eval[2]=IKsign(x2927);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x2928=cj5*cj5;
IkReal x2929=((1.0)*r20);
IkReal x2930=(cj5*r21);
IkReal x2931=(((cj5*r01*r20*sj5))+((r00*r20))+((r01*r21*x2928))+((r00*sj5*x2930))+((r02*r22))+(((-1.0)*r00*x2928*x2929)));
j4eval[0]=x2931;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*x2930))+(((-1.0)*cj0*sj5*x2929))))));
j4eval[2]=IKsign(x2931);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2932=cj5*cj5;
IkReal x2933=((1.0)*r20);
IkReal x2934=(cj5*r21);
CheckValue<IkReal> x2935 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*x2934))+(((-1.0)*cj0*sj5*x2933)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2935.valid){
continue;
}
CheckValue<IkReal> x2936=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x2932*x2933))+((cj5*r01*r20*sj5))+((r01*r21*x2932))+((r00*r20))+((r00*sj5*x2934))+((r02*r22)))),-1);
if(!x2936.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2935.value)+(((1.5707963267949)*(x2936.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2937=IKcos(j4);
IkReal x2938=IKsin(j4);
IkReal x2939=((1.0)*sj0);
IkReal x2940=(r00*sj5);
IkReal x2941=(r10*sj5);
IkReal x2942=(r20*sj5);
IkReal x2943=((1.0)*x2937);
IkReal x2944=((1.0)*x2938);
IkReal x2945=(cj5*x2944);
evalcond[0]=(((r22*x2938))+(((-1.0)*cj5*r21*x2943))+(((-1.0)*x2942*x2943)));
evalcond[1]=((((-1.0)*r21*x2945))+(((-1.0)*x2942*x2944))+(((-1.0)*r22*x2943)));
evalcond[2]=(cj0+((r12*x2938))+(((-1.0)*cj5*r11*x2943))+(((-1.0)*x2941*x2943)));
evalcond[3]=(((r02*x2938))+(((-1.0)*x2940*x2943))+(((-1.0)*x2939))+(((-1.0)*cj5*r01*x2943)));
evalcond[4]=((((-1.0)*x2940*x2944))+(((-1.0)*r02*x2943))+(((-1.0)*r01*x2945))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x2943))+(((-1.0)*r11*x2945))+(((-1.0)*x2939))+(((-1.0)*x2941*x2944)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2946=((1.0)*cj5);
CheckValue<IkReal> x2947=IKPowWithIntegerCheck(IKsign((((r11*sj5))+(((-1.0)*r10*x2946)))),-1);
if(!x2947.valid){
continue;
}
CheckValue<IkReal> x2948 = IKatan2WithCheck(IkReal(((((-1.0)*r21*sj0*x2946))+(((-1.0)*r20*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x2948.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2947.value)))+(x2948.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2949=IKcos(j4);
IkReal x2950=IKsin(j4);
IkReal x2951=((1.0)*sj0);
IkReal x2952=(r00*sj5);
IkReal x2953=(r10*sj5);
IkReal x2954=(r20*sj5);
IkReal x2955=((1.0)*x2949);
IkReal x2956=((1.0)*x2950);
IkReal x2957=(cj5*x2956);
evalcond[0]=(((r22*x2950))+(((-1.0)*x2954*x2955))+(((-1.0)*cj5*r21*x2955)));
evalcond[1]=((((-1.0)*r21*x2957))+(((-1.0)*x2954*x2956))+(((-1.0)*r22*x2955)));
evalcond[2]=((((-1.0)*x2953*x2955))+cj0+(((-1.0)*cj5*r11*x2955))+((r12*x2950)));
evalcond[3]=((((-1.0)*x2952*x2955))+(((-1.0)*x2951))+(((-1.0)*cj5*r01*x2955))+((r02*x2950)));
evalcond[4]=((((-1.0)*r02*x2955))+(((-1.0)*x2952*x2956))+(((-1.0)*r01*x2957))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x2953*x2956))+(((-1.0)*x2951))+(((-1.0)*r11*x2957))+(((-1.0)*r12*x2955)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2958=((1.0)*cj0);
CheckValue<IkReal> x2959=IKPowWithIntegerCheck(IKsign((((r01*sj5))+(((-1.0)*cj5*r00)))),-1);
if(!x2959.valid){
continue;
}
CheckValue<IkReal> x2960 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj5*x2958))+(((-1.0)*cj5*r21*x2958)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2960.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2959.value)))+(x2960.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2961=IKcos(j4);
IkReal x2962=IKsin(j4);
IkReal x2963=((1.0)*sj0);
IkReal x2964=(r00*sj5);
IkReal x2965=(r10*sj5);
IkReal x2966=(r20*sj5);
IkReal x2967=((1.0)*x2961);
IkReal x2968=((1.0)*x2962);
IkReal x2969=(cj5*x2968);
evalcond[0]=(((r22*x2962))+(((-1.0)*cj5*r21*x2967))+(((-1.0)*x2966*x2967)));
evalcond[1]=((((-1.0)*r21*x2969))+(((-1.0)*r22*x2967))+(((-1.0)*x2966*x2968)));
evalcond[2]=(cj0+(((-1.0)*x2965*x2967))+((r12*x2962))+(((-1.0)*cj5*r11*x2967)));
evalcond[3]=(((r02*x2962))+(((-1.0)*x2963))+(((-1.0)*cj5*r01*x2967))+(((-1.0)*x2964*x2967)));
evalcond[4]=((((-1.0)*r02*x2967))+(((-1.0)*r01*x2969))+(((-1.0)*x2964*x2968))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r11*x2969))+(((-1.0)*x2965*x2968))+(((-1.0)*x2963))+(((-1.0)*r12*x2967)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((0.201567296370008)*py))+(((-1.40393030076476)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.201567296370008)*px))+(((1.40393030076476)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.201567296370008)*py))+(((-1.40393030076476)*px))))+IKsqr(((((0.201567296370008)*px))+(((1.40393030076476)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((0.201567296370008)*py))+(((-1.40393030076476)*px))), ((((0.201567296370008)*px))+(((1.40393030076476)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x2970=IKsin(j0);
IkReal x2971=IKcos(j0);
evalcond[0]=((((-0.6979)*x2970))+(((-1.0)*px))+(((0.1002)*x2971)));
evalcond[1]=((((-1.0)*py))+(((0.6979)*x2971))+(((0.1002)*x2970)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x2972=((1.0)*sj5);
IkReal x2973=(((cj5*r10))+(((-1.0)*r11*x2972)));
j4eval[0]=x2973;
j4eval[1]=IKsign(x2973);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*cj5*r21*sj0))+(((-1.0)*r20*sj0*x2972))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x2974=((1.0)*sj5);
IkReal x2975=((((-1.0)*r01*x2974))+((cj5*r00)));
j4eval[0]=x2975;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*cj5*r21))+(((-1.0)*cj0*r20*x2974))))));
j4eval[2]=IKsign(x2975);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x2976=cj5*cj5;
IkReal x2977=((1.0)*r20);
IkReal x2978=(cj5*r21);
IkReal x2979=(((cj5*r01*r20*sj5))+((r00*r20))+((r00*sj5*x2978))+(((-1.0)*r00*x2976*x2977))+((r01*r21*x2976))+((r02*r22)));
j4eval[0]=x2979;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*x2978))+(((-1.0)*cj0*sj5*x2977))))));
j4eval[2]=IKsign(x2979);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2980=cj5*cj5;
IkReal x2981=((1.0)*r20);
IkReal x2982=(cj5*r21);
CheckValue<IkReal> x2983=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r00*x2980*x2981))+((r00*r20))+((r00*sj5*x2982))+((r01*r21*x2980))+((r02*r22)))),-1);
if(!x2983.valid){
continue;
}
CheckValue<IkReal> x2984 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*sj5*x2981))+(((-1.0)*cj0*x2982)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2984.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2983.value)))+(x2984.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2985=IKcos(j4);
IkReal x2986=IKsin(j4);
IkReal x2987=((1.0)*cj0);
IkReal x2988=(r00*sj5);
IkReal x2989=(r10*sj5);
IkReal x2990=(r20*sj5);
IkReal x2991=((1.0)*x2985);
IkReal x2992=((1.0)*x2986);
IkReal x2993=(cj5*x2992);
evalcond[0]=((((-1.0)*cj5*r21*x2991))+(((-1.0)*x2990*x2991))+((r22*x2986)));
evalcond[1]=((((-1.0)*r22*x2991))+(((-1.0)*x2990*x2992))+(((-1.0)*r21*x2993)));
evalcond[2]=(sj0+(((-1.0)*cj5*r01*x2991))+(((-1.0)*x2988*x2991))+((r02*x2986)));
evalcond[3]=((((-1.0)*x2987))+((r12*x2986))+(((-1.0)*x2989*x2991))+(((-1.0)*cj5*r11*x2991)));
evalcond[4]=((((-1.0)*x2987))+(((-1.0)*x2988*x2992))+(((-1.0)*r02*x2991))+(((-1.0)*r01*x2993)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r12*x2991))+(((-1.0)*r11*x2993))+(((-1.0)*x2989*x2992)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2994=((1.0)*cj0);
CheckValue<IkReal> x2995=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj5))+((cj5*r00)))),-1);
if(!x2995.valid){
continue;
}
CheckValue<IkReal> x2996 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r21*x2994))+(((-1.0)*r20*sj5*x2994)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2996.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2995.value)))+(x2996.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2997=IKcos(j4);
IkReal x2998=IKsin(j4);
IkReal x2999=((1.0)*cj0);
IkReal x3000=(r00*sj5);
IkReal x3001=(r10*sj5);
IkReal x3002=(r20*sj5);
IkReal x3003=((1.0)*x2997);
IkReal x3004=((1.0)*x2998);
IkReal x3005=(cj5*x3004);
evalcond[0]=((((-1.0)*cj5*r21*x3003))+(((-1.0)*x3002*x3003))+((r22*x2998)));
evalcond[1]=((((-1.0)*r22*x3003))+(((-1.0)*x3002*x3004))+(((-1.0)*r21*x3005)));
evalcond[2]=(sj0+(((-1.0)*x3000*x3003))+(((-1.0)*cj5*r01*x3003))+((r02*x2998)));
evalcond[3]=((((-1.0)*x2999))+((r12*x2998))+(((-1.0)*cj5*r11*x3003))+(((-1.0)*x3001*x3003)));
evalcond[4]=((((-1.0)*x2999))+(((-1.0)*r02*x3003))+(((-1.0)*x3000*x3004))+(((-1.0)*r01*x3005)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r11*x3005))+(((-1.0)*r12*x3003))+(((-1.0)*x3001*x3004)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3006=((1.0)*sj0);
CheckValue<IkReal> x3007 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r21*x3006))+(((-1.0)*r20*sj5*x3006)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3007.valid){
continue;
}
CheckValue<IkReal> x3008=IKPowWithIntegerCheck(IKsign((((cj5*r10))+(((-1.0)*r11*sj5)))),-1);
if(!x3008.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3007.value)+(((1.5707963267949)*(x3008.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3009=IKcos(j4);
IkReal x3010=IKsin(j4);
IkReal x3011=((1.0)*cj0);
IkReal x3012=(r00*sj5);
IkReal x3013=(r10*sj5);
IkReal x3014=(r20*sj5);
IkReal x3015=((1.0)*x3009);
IkReal x3016=((1.0)*x3010);
IkReal x3017=(cj5*x3016);
evalcond[0]=(((r22*x3010))+(((-1.0)*x3014*x3015))+(((-1.0)*cj5*r21*x3015)));
evalcond[1]=((((-1.0)*r22*x3015))+(((-1.0)*x3014*x3016))+(((-1.0)*r21*x3017)));
evalcond[2]=(sj0+(((-1.0)*cj5*r01*x3015))+(((-1.0)*x3012*x3015))+((r02*x3010)));
evalcond[3]=((((-1.0)*cj5*r11*x3015))+(((-1.0)*x3011))+((r12*x3010))+(((-1.0)*x3013*x3015)));
evalcond[4]=((((-1.0)*r02*x3015))+(((-1.0)*r01*x3017))+(((-1.0)*x3011))+(((-1.0)*x3012*x3016)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r12*x3015))+(((-1.0)*r11*x3017))+(((-1.0)*x3013*x3016)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((0.109548114029628)*px))+(((9.97883729615337)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.109548114029628)*py))+(((9.97883729615337)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.109548114029628)*px))+(((9.97883729615337)*py))))+IKsqr(((((-0.109548114029628)*py))+(((9.97883729615337)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((0.109548114029628)*px))+(((9.97883729615337)*py))), ((((-0.109548114029628)*py))+(((9.97883729615337)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3018=IKsin(j0);
IkReal x3019=IKcos(j0);
evalcond[0]=((((-1.0)*px))+(((0.1002)*x3019))+(((0.0011)*x3018)));
evalcond[1]=((((-1.0)*py))+(((0.1002)*x3018))+(((-0.0011)*x3019)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3020=((1.0)*cj5);
IkReal x3021=(((r01*sj5))+(((-1.0)*r00*x3020)));
j4eval[0]=x3021;
j4eval[1]=IKsign(x3021);
j4eval[2]=((IKabs(((((-1.0)*cj0*r20*sj5))+(((-1.0)*cj0*r21*x3020)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3022=((1.0)*cj5);
IkReal x3023=(((r11*sj5))+(((-1.0)*r10*x3022)));
j4eval[0]=x3023;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r21*sj0*x3022))+(((-1.0)*r20*sj0*sj5))))));
j4eval[2]=IKsign(x3023);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3024=cj5*cj5;
IkReal x3025=((1.0)*r20);
IkReal x3026=(cj5*r21);
IkReal x3027=(((cj5*r01*r20*sj5))+((r01*r21*x3024))+((r00*r20))+((r00*sj5*x3026))+(((-1.0)*r00*x3024*x3025))+((r02*r22)));
j4eval[0]=x3027;
j4eval[1]=((IKabs(((((-1.0)*cj0*sj5*x3025))+(((-1.0)*cj0*x3026)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3027);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3028=cj5*cj5;
IkReal x3029=((1.0)*r20);
IkReal x3030=(cj5*r21);
CheckValue<IkReal> x3031 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*sj5*x3029))+(((-1.0)*cj0*x3030)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3031.valid){
continue;
}
CheckValue<IkReal> x3032=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r00*x3028*x3029))+((r01*r21*x3028))+((r00*r20))+((r00*sj5*x3030))+((r02*r22)))),-1);
if(!x3032.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3031.value)+(((1.5707963267949)*(x3032.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3033=IKcos(j4);
IkReal x3034=IKsin(j4);
IkReal x3035=((1.0)*sj0);
IkReal x3036=(r00*sj5);
IkReal x3037=(r10*sj5);
IkReal x3038=(r20*sj5);
IkReal x3039=((1.0)*x3033);
IkReal x3040=((1.0)*x3034);
IkReal x3041=(cj5*x3040);
evalcond[0]=((((-1.0)*cj5*r21*x3039))+((r22*x3034))+(((-1.0)*x3038*x3039)));
evalcond[1]=((((-1.0)*x3038*x3040))+(((-1.0)*r21*x3041))+(((-1.0)*r22*x3039)));
evalcond[2]=((((-1.0)*cj5*r11*x3039))+cj0+(((-1.0)*x3037*x3039))+((r12*x3034)));
evalcond[3]=(((r02*x3034))+(((-1.0)*x3036*x3039))+(((-1.0)*x3035))+(((-1.0)*cj5*r01*x3039)));
evalcond[4]=((((-1.0)*r01*x3041))+(((-1.0)*r02*x3039))+(((-1.0)*x3036*x3040))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r11*x3041))+(((-1.0)*x3035))+(((-1.0)*r12*x3039))+(((-1.0)*x3037*x3040)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3042=((1.0)*cj5);
CheckValue<IkReal> x3043=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x3042))+((r11*sj5)))),-1);
if(!x3043.valid){
continue;
}
CheckValue<IkReal> x3044 = IKatan2WithCheck(IkReal(((((-1.0)*r21*sj0*x3042))+(((-1.0)*r20*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3044.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3043.value)))+(x3044.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3045=IKcos(j4);
IkReal x3046=IKsin(j4);
IkReal x3047=((1.0)*sj0);
IkReal x3048=(r00*sj5);
IkReal x3049=(r10*sj5);
IkReal x3050=(r20*sj5);
IkReal x3051=((1.0)*x3045);
IkReal x3052=((1.0)*x3046);
IkReal x3053=(cj5*x3052);
evalcond[0]=(((r22*x3046))+(((-1.0)*cj5*r21*x3051))+(((-1.0)*x3050*x3051)));
evalcond[1]=((((-1.0)*r21*x3053))+(((-1.0)*x3050*x3052))+(((-1.0)*r22*x3051)));
evalcond[2]=((((-1.0)*cj5*r11*x3051))+cj0+((r12*x3046))+(((-1.0)*x3049*x3051)));
evalcond[3]=((((-1.0)*x3047))+(((-1.0)*x3048*x3051))+((r02*x3046))+(((-1.0)*cj5*r01*x3051)));
evalcond[4]=((((-1.0)*r01*x3053))+(((-1.0)*x3048*x3052))+(((-1.0)*r02*x3051))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x3047))+(((-1.0)*r12*x3051))+(((-1.0)*r11*x3053))+(((-1.0)*x3049*x3052)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3054=((1.0)*cj0);
CheckValue<IkReal> x3055 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r21*x3054))+(((-1.0)*r20*sj5*x3054)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3055.valid){
continue;
}
CheckValue<IkReal> x3056=IKPowWithIntegerCheck(IKsign((((r01*sj5))+(((-1.0)*cj5*r00)))),-1);
if(!x3056.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3055.value)+(((1.5707963267949)*(x3056.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3057=IKcos(j4);
IkReal x3058=IKsin(j4);
IkReal x3059=((1.0)*sj0);
IkReal x3060=(r00*sj5);
IkReal x3061=(r10*sj5);
IkReal x3062=(r20*sj5);
IkReal x3063=((1.0)*x3057);
IkReal x3064=((1.0)*x3058);
IkReal x3065=(cj5*x3064);
evalcond[0]=((((-1.0)*cj5*r21*x3063))+(((-1.0)*x3062*x3063))+((r22*x3058)));
evalcond[1]=((((-1.0)*r22*x3063))+(((-1.0)*x3062*x3064))+(((-1.0)*r21*x3065)));
evalcond[2]=(cj0+(((-1.0)*cj5*r11*x3063))+(((-1.0)*x3061*x3063))+((r12*x3058)));
evalcond[3]=((((-1.0)*x3060*x3063))+((r02*x3058))+(((-1.0)*cj5*r01*x3063))+(((-1.0)*x3059)));
evalcond[4]=((((-1.0)*x3060*x3064))+(((-1.0)*r02*x3063))+(((-1.0)*r01*x3065))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x3061*x3064))+(((-1.0)*r12*x3063))+(((-1.0)*r11*x3065))+(((-1.0)*x3059)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.64391582770565)*px))+(((0.757998185797156)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.757998185797156)*px))+(((-2.64391582770565)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.64391582770565)*px))+(((0.757998185797156)*py))))+IKsqr(((((0.757998185797156)*px))+(((-2.64391582770565)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.64391582770565)*px))+(((0.757998185797156)*py))), ((((0.757998185797156)*px))+(((-2.64391582770565)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3066=IKsin(j0);
IkReal x3067=IKcos(j0);
evalcond[0]=((((0.1002)*x3067))+(((-1.0)*px))+(((0.3495)*x3066)));
evalcond[1]=((((-0.3495)*x3067))+(((0.1002)*x3066))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3068=((1.0)*cj5);
IkReal x3069=(((r01*sj5))+(((-1.0)*r00*x3068)));
j4eval[0]=x3069;
j4eval[1]=IKsign(x3069);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r20*sj5))+(((-1.0)*cj0*r21*x3068))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3070=((1.0)*cj5);
IkReal x3071=((((-1.0)*r10*x3070))+((r11*sj5)));
j4eval[0]=x3071;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r21*sj0*x3070))+(((-1.0)*r20*sj0*sj5))))));
j4eval[2]=IKsign(x3071);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3072=cj5*cj5;
IkReal x3073=((1.0)*r20);
IkReal x3074=(cj5*r21);
IkReal x3075=(((cj5*r01*r20*sj5))+((r00*r20))+(((-1.0)*r00*x3072*x3073))+((r01*r21*x3072))+((r02*r22))+((r00*sj5*x3074)));
j4eval[0]=x3075;
j4eval[1]=((IKabs(((((-1.0)*cj0*sj5*x3073))+(((-1.0)*cj0*x3074)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3075);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3076=cj5*cj5;
IkReal x3077=((1.0)*r20);
IkReal x3078=(cj5*r21);
CheckValue<IkReal> x3079 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*sj5*x3077))+(((-1.0)*cj0*x3078)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3079.valid){
continue;
}
CheckValue<IkReal> x3080=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+((r00*r20))+((r01*r21*x3076))+((r02*r22))+(((-1.0)*r00*x3076*x3077))+((r00*sj5*x3078)))),-1);
if(!x3080.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3079.value)+(((1.5707963267949)*(x3080.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3081=IKcos(j4);
IkReal x3082=IKsin(j4);
IkReal x3083=((1.0)*sj0);
IkReal x3084=(r00*sj5);
IkReal x3085=(r10*sj5);
IkReal x3086=(r20*sj5);
IkReal x3087=((1.0)*x3081);
IkReal x3088=((1.0)*x3082);
IkReal x3089=(cj5*x3088);
evalcond[0]=((((-1.0)*cj5*r21*x3087))+((r22*x3082))+(((-1.0)*x3086*x3087)));
evalcond[1]=((((-1.0)*r21*x3089))+(((-1.0)*r22*x3087))+(((-1.0)*x3086*x3088)));
evalcond[2]=((((-1.0)*cj5*r11*x3087))+cj0+((r12*x3082))+(((-1.0)*x3085*x3087)));
evalcond[3]=((((-1.0)*cj5*r01*x3087))+(((-1.0)*x3083))+((r02*x3082))+(((-1.0)*x3084*x3087)));
evalcond[4]=((((-1.0)*r02*x3087))+(((-1.0)*x3084*x3088))+(((-1.0)*r01*x3089))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x3083))+(((-1.0)*x3085*x3088))+(((-1.0)*r12*x3087))+(((-1.0)*r11*x3089)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3090=((1.0)*cj5);
CheckValue<IkReal> x3091=IKPowWithIntegerCheck(IKsign((((r11*sj5))+(((-1.0)*r10*x3090)))),-1);
if(!x3091.valid){
continue;
}
CheckValue<IkReal> x3092 = IKatan2WithCheck(IkReal(((((-1.0)*r21*sj0*x3090))+(((-1.0)*r20*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3092.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3091.value)))+(x3092.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3093=IKcos(j4);
IkReal x3094=IKsin(j4);
IkReal x3095=((1.0)*sj0);
IkReal x3096=(r00*sj5);
IkReal x3097=(r10*sj5);
IkReal x3098=(r20*sj5);
IkReal x3099=((1.0)*x3093);
IkReal x3100=((1.0)*x3094);
IkReal x3101=(cj5*x3100);
evalcond[0]=((((-1.0)*x3098*x3099))+(((-1.0)*cj5*r21*x3099))+((r22*x3094)));
evalcond[1]=((((-1.0)*r22*x3099))+(((-1.0)*x3098*x3100))+(((-1.0)*r21*x3101)));
evalcond[2]=(cj0+(((-1.0)*cj5*r11*x3099))+((r12*x3094))+(((-1.0)*x3097*x3099)));
evalcond[3]=((((-1.0)*x3095))+((r02*x3094))+(((-1.0)*cj5*r01*x3099))+(((-1.0)*x3096*x3099)));
evalcond[4]=((((-1.0)*r02*x3099))+(((-1.0)*r01*x3101))+(((-1.0)*x3096*x3100))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x3099))+(((-1.0)*x3095))+(((-1.0)*r11*x3101))+(((-1.0)*x3097*x3100)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3102=((1.0)*cj0);
CheckValue<IkReal> x3103=IKPowWithIntegerCheck(IKsign((((r01*sj5))+(((-1.0)*cj5*r00)))),-1);
if(!x3103.valid){
continue;
}
CheckValue<IkReal> x3104 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj5*x3102))+(((-1.0)*cj5*r21*x3102)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3104.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3103.value)))+(x3104.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3105=IKcos(j4);
IkReal x3106=IKsin(j4);
IkReal x3107=((1.0)*sj0);
IkReal x3108=(r00*sj5);
IkReal x3109=(r10*sj5);
IkReal x3110=(r20*sj5);
IkReal x3111=((1.0)*x3105);
IkReal x3112=((1.0)*x3106);
IkReal x3113=(cj5*x3112);
evalcond[0]=((((-1.0)*x3110*x3111))+(((-1.0)*cj5*r21*x3111))+((r22*x3106)));
evalcond[1]=((((-1.0)*r21*x3113))+(((-1.0)*x3110*x3112))+(((-1.0)*r22*x3111)));
evalcond[2]=(cj0+(((-1.0)*x3109*x3111))+(((-1.0)*cj5*r11*x3111))+((r12*x3106)));
evalcond[3]=((((-1.0)*x3107))+((r02*x3106))+(((-1.0)*cj5*r01*x3111))+(((-1.0)*x3108*x3111)));
evalcond[4]=((((-1.0)*r02*x3111))+(((-1.0)*r01*x3113))+(((-1.0)*x3108*x3112))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x3111))+(((-1.0)*r11*x3113))+(((-1.0)*x3107))+(((-1.0)*x3109*x3112)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((0.757998185797156)*py))+(((-2.64391582770565)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.64391582770565)*py))+(((0.757998185797156)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.757998185797156)*py))+(((-2.64391582770565)*px))))+IKsqr(((((2.64391582770565)*py))+(((0.757998185797156)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((0.757998185797156)*py))+(((-2.64391582770565)*px))), ((((2.64391582770565)*py))+(((0.757998185797156)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3114=IKsin(j0);
IkReal x3115=IKcos(j0);
evalcond[0]=((((-1.0)*px))+(((0.1002)*x3115))+(((-0.3495)*x3114)));
evalcond[1]=((((-1.0)*py))+(((0.1002)*x3114))+(((0.3495)*x3115)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3116=((1.0)*sj5);
IkReal x3117=(((cj5*r10))+(((-1.0)*r11*x3116)));
j4eval[0]=x3117;
j4eval[1]=IKsign(x3117);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*cj5*r21*sj0))+(((-1.0)*r20*sj0*x3116))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3118=((1.0)*sj5);
IkReal x3119=((((-1.0)*r01*x3118))+((cj5*r00)));
j4eval[0]=x3119;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r20*x3118))+(((-1.0)*cj0*cj5*r21))))));
j4eval[2]=IKsign(x3119);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3120=cj5*cj5;
IkReal x3121=((1.0)*r20);
IkReal x3122=(cj5*r21);
IkReal x3123=(((cj5*r01*r20*sj5))+(((-1.0)*r00*x3120*x3121))+((r00*r20))+((r01*r21*x3120))+((r00*sj5*x3122))+((r02*r22)));
j4eval[0]=x3123;
j4eval[1]=((IKabs(((((-1.0)*cj0*x3122))+(((-1.0)*cj0*sj5*x3121)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3123);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3124=cj5*cj5;
IkReal x3125=((1.0)*r20);
IkReal x3126=(cj5*r21);
CheckValue<IkReal> x3127=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+((r00*r20))+((r01*r21*x3124))+((r00*sj5*x3126))+((r02*r22))+(((-1.0)*r00*x3124*x3125)))),-1);
if(!x3127.valid){
continue;
}
CheckValue<IkReal> x3128 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*x3126))+(((-1.0)*cj0*sj5*x3125)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3128.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3127.value)))+(x3128.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3129=IKcos(j4);
IkReal x3130=IKsin(j4);
IkReal x3131=((1.0)*cj0);
IkReal x3132=(r00*sj5);
IkReal x3133=(r10*sj5);
IkReal x3134=(r20*sj5);
IkReal x3135=((1.0)*x3129);
IkReal x3136=((1.0)*x3130);
IkReal x3137=(cj5*x3136);
evalcond[0]=((((-1.0)*cj5*r21*x3135))+((r22*x3130))+(((-1.0)*x3134*x3135)));
evalcond[1]=((((-1.0)*r21*x3137))+(((-1.0)*x3134*x3136))+(((-1.0)*r22*x3135)));
evalcond[2]=(sj0+(((-1.0)*x3132*x3135))+((r02*x3130))+(((-1.0)*cj5*r01*x3135)));
evalcond[3]=((((-1.0)*cj5*r11*x3135))+(((-1.0)*x3133*x3135))+((r12*x3130))+(((-1.0)*x3131)));
evalcond[4]=((((-1.0)*r02*x3135))+(((-1.0)*x3132*x3136))+(((-1.0)*x3131))+(((-1.0)*r01*x3137)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x3133*x3136))+(((-1.0)*r12*x3135))+(((-1.0)*r11*x3137)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3138=((1.0)*cj0);
CheckValue<IkReal> x3139=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj5))+((cj5*r00)))),-1);
if(!x3139.valid){
continue;
}
CheckValue<IkReal> x3140 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r21*x3138))+(((-1.0)*r20*sj5*x3138)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3140.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3139.value)))+(x3140.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3141=IKcos(j4);
IkReal x3142=IKsin(j4);
IkReal x3143=((1.0)*cj0);
IkReal x3144=(r00*sj5);
IkReal x3145=(r10*sj5);
IkReal x3146=(r20*sj5);
IkReal x3147=((1.0)*x3141);
IkReal x3148=((1.0)*x3142);
IkReal x3149=(cj5*x3148);
evalcond[0]=((((-1.0)*x3146*x3147))+(((-1.0)*cj5*r21*x3147))+((r22*x3142)));
evalcond[1]=((((-1.0)*x3146*x3148))+(((-1.0)*r22*x3147))+(((-1.0)*r21*x3149)));
evalcond[2]=(sj0+(((-1.0)*cj5*r01*x3147))+((r02*x3142))+(((-1.0)*x3144*x3147)));
evalcond[3]=((((-1.0)*cj5*r11*x3147))+(((-1.0)*x3143))+((r12*x3142))+(((-1.0)*x3145*x3147)));
evalcond[4]=((((-1.0)*x3143))+(((-1.0)*x3144*x3148))+(((-1.0)*r02*x3147))+(((-1.0)*r01*x3149)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r11*x3149))+(((-1.0)*r12*x3147))+(((-1.0)*x3145*x3148)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3150=((1.0)*sj0);
CheckValue<IkReal> x3151 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r21*x3150))+(((-1.0)*r20*sj5*x3150)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3151.valid){
continue;
}
CheckValue<IkReal> x3152=IKPowWithIntegerCheck(IKsign((((cj5*r10))+(((-1.0)*r11*sj5)))),-1);
if(!x3152.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3151.value)+(((1.5707963267949)*(x3152.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3153=IKcos(j4);
IkReal x3154=IKsin(j4);
IkReal x3155=((1.0)*cj0);
IkReal x3156=(r00*sj5);
IkReal x3157=(r10*sj5);
IkReal x3158=(r20*sj5);
IkReal x3159=((1.0)*x3153);
IkReal x3160=((1.0)*x3154);
IkReal x3161=(cj5*x3160);
evalcond[0]=(((r22*x3154))+(((-1.0)*cj5*r21*x3159))+(((-1.0)*x3158*x3159)));
evalcond[1]=((((-1.0)*r22*x3159))+(((-1.0)*x3158*x3160))+(((-1.0)*r21*x3161)));
evalcond[2]=(sj0+((r02*x3154))+(((-1.0)*cj5*r01*x3159))+(((-1.0)*x3156*x3159)));
evalcond[3]=((((-1.0)*x3155))+(((-1.0)*x3157*x3159))+((r12*x3154))+(((-1.0)*cj5*r11*x3159)));
evalcond[4]=((((-1.0)*x3155))+(((-1.0)*x3156*x3160))+(((-1.0)*r02*x3159))+(((-1.0)*r01*x3161)));
evalcond[5]=((((-1.0)*x3157*x3160))+(((-1.0)*sj0))+(((-1.0)*r12*x3159))+(((-1.0)*r11*x3161)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((0.201567296370008)*py))+(((1.40393030076476)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.201567296370008)*px))+(((-1.40393030076476)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.201567296370008)*py))+(((1.40393030076476)*px))))+IKsqr(((((0.201567296370008)*px))+(((-1.40393030076476)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((0.201567296370008)*py))+(((1.40393030076476)*px))), ((((0.201567296370008)*px))+(((-1.40393030076476)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3162=IKsin(j0);
IkReal x3163=IKcos(j0);
evalcond[0]=((((0.6979)*x3162))+(((0.1002)*x3163))+(((-1.0)*px)));
evalcond[1]=((((0.1002)*x3162))+(((-1.0)*py))+(((-0.6979)*x3163)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3164=((1.0)*cj5);
IkReal x3165=(((r01*sj5))+(((-1.0)*r00*x3164)));
j4eval[0]=x3165;
j4eval[1]=IKsign(x3165);
j4eval[2]=((IKabs(((((-1.0)*cj0*r20*sj5))+(((-1.0)*cj0*r21*x3164)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3166=((1.0)*cj5);
IkReal x3167=(((r11*sj5))+(((-1.0)*r10*x3166)));
j4eval[0]=x3167;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r21*sj0*x3166))+(((-1.0)*r20*sj0*sj5))))));
j4eval[2]=IKsign(x3167);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3168=cj5*cj5;
IkReal x3169=((1.0)*r20);
IkReal x3170=(cj5*r21);
IkReal x3171=(((cj5*r01*r20*sj5))+((r01*r21*x3168))+((r00*r20))+(((-1.0)*r00*x3168*x3169))+((r00*sj5*x3170))+((r02*r22)));
j4eval[0]=x3171;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*sj5*x3169))+(((-1.0)*cj0*x3170))))));
j4eval[2]=IKsign(x3171);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3172=cj5*cj5;
IkReal x3173=((1.0)*r20);
IkReal x3174=(cj5*r21);
CheckValue<IkReal> x3175=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r00*x3172*x3173))+((r00*r20))+((r01*r21*x3172))+((r00*sj5*x3174))+((r02*r22)))),-1);
if(!x3175.valid){
continue;
}
CheckValue<IkReal> x3176 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*sj5*x3173))+(((-1.0)*cj0*x3174)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3176.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3175.value)))+(x3176.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3177=IKcos(j4);
IkReal x3178=IKsin(j4);
IkReal x3179=((1.0)*sj0);
IkReal x3180=(r00*sj5);
IkReal x3181=(r10*sj5);
IkReal x3182=(r20*sj5);
IkReal x3183=((1.0)*x3177);
IkReal x3184=((1.0)*x3178);
IkReal x3185=(cj5*x3184);
evalcond[0]=((((-1.0)*cj5*r21*x3183))+((r22*x3178))+(((-1.0)*x3182*x3183)));
evalcond[1]=((((-1.0)*r22*x3183))+(((-1.0)*r21*x3185))+(((-1.0)*x3182*x3184)));
evalcond[2]=(cj0+(((-1.0)*x3181*x3183))+(((-1.0)*cj5*r11*x3183))+((r12*x3178)));
evalcond[3]=((((-1.0)*cj5*r01*x3183))+(((-1.0)*x3180*x3183))+(((-1.0)*x3179))+((r02*x3178)));
evalcond[4]=((((-1.0)*x3180*x3184))+(((-1.0)*r02*x3183))+(((-1.0)*r01*x3185))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x3181*x3184))+(((-1.0)*x3179))+(((-1.0)*r11*x3185))+(((-1.0)*r12*x3183)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3186=((1.0)*cj5);
CheckValue<IkReal> x3187=IKPowWithIntegerCheck(IKsign((((r11*sj5))+(((-1.0)*r10*x3186)))),-1);
if(!x3187.valid){
continue;
}
CheckValue<IkReal> x3188 = IKatan2WithCheck(IkReal(((((-1.0)*r21*sj0*x3186))+(((-1.0)*r20*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3188.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3187.value)))+(x3188.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3189=IKcos(j4);
IkReal x3190=IKsin(j4);
IkReal x3191=((1.0)*sj0);
IkReal x3192=(r00*sj5);
IkReal x3193=(r10*sj5);
IkReal x3194=(r20*sj5);
IkReal x3195=((1.0)*x3189);
IkReal x3196=((1.0)*x3190);
IkReal x3197=(cj5*x3196);
evalcond[0]=((((-1.0)*cj5*r21*x3195))+((r22*x3190))+(((-1.0)*x3194*x3195)));
evalcond[1]=((((-1.0)*r22*x3195))+(((-1.0)*r21*x3197))+(((-1.0)*x3194*x3196)));
evalcond[2]=((((-1.0)*cj5*r11*x3195))+cj0+(((-1.0)*x3193*x3195))+((r12*x3190)));
evalcond[3]=((((-1.0)*cj5*r01*x3195))+(((-1.0)*x3192*x3195))+(((-1.0)*x3191))+((r02*x3190)));
evalcond[4]=((((-1.0)*r01*x3197))+(((-1.0)*x3192*x3196))+(((-1.0)*r02*x3195))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x3193*x3196))+(((-1.0)*r12*x3195))+(((-1.0)*r11*x3197))+(((-1.0)*x3191)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3198=((1.0)*cj0);
CheckValue<IkReal> x3199=IKPowWithIntegerCheck(IKsign((((r01*sj5))+(((-1.0)*cj5*r00)))),-1);
if(!x3199.valid){
continue;
}
CheckValue<IkReal> x3200 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r21*x3198))+(((-1.0)*r20*sj5*x3198)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3200.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3199.value)))+(x3200.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3201=IKcos(j4);
IkReal x3202=IKsin(j4);
IkReal x3203=((1.0)*sj0);
IkReal x3204=(r00*sj5);
IkReal x3205=(r10*sj5);
IkReal x3206=(r20*sj5);
IkReal x3207=((1.0)*x3201);
IkReal x3208=((1.0)*x3202);
IkReal x3209=(cj5*x3208);
evalcond[0]=(((r22*x3202))+(((-1.0)*cj5*r21*x3207))+(((-1.0)*x3206*x3207)));
evalcond[1]=((((-1.0)*r21*x3209))+(((-1.0)*r22*x3207))+(((-1.0)*x3206*x3208)));
evalcond[2]=(cj0+((r12*x3202))+(((-1.0)*cj5*r11*x3207))+(((-1.0)*x3205*x3207)));
evalcond[3]=((((-1.0)*x3204*x3207))+(((-1.0)*cj5*r01*x3207))+(((-1.0)*x3203))+((r02*x3202)));
evalcond[4]=((((-1.0)*r02*x3207))+(((-1.0)*x3204*x3208))+(((-1.0)*r01*x3209))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x3207))+(((-1.0)*r11*x3209))+(((-1.0)*x3203))+(((-1.0)*x3205*x3208)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.109548114029628)*px))+(((9.97883729615337)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.109548114029628)*py))+(((9.97883729615337)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.109548114029628)*px))+(((9.97883729615337)*py))))+IKsqr(((((0.109548114029628)*py))+(((9.97883729615337)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.109548114029628)*px))+(((9.97883729615337)*py))), ((((0.109548114029628)*py))+(((9.97883729615337)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3210=IKcos(j0);
IkReal x3211=IKsin(j0);
evalcond[0]=((((0.1002)*x3210))+(((-0.0011)*x3211))+(((-1.0)*px)));
evalcond[1]=((((0.1002)*x3211))+(((-1.0)*py))+(((0.0011)*x3210)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3212=((1.0)*sj5);
IkReal x3213=(((cj5*r10))+(((-1.0)*r11*x3212)));
j4eval[0]=x3213;
j4eval[1]=IKsign(x3213);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*cj5*r21*sj0))+(((-1.0)*r20*sj0*x3212))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3214=((1.0)*sj5);
IkReal x3215=((((-1.0)*r01*x3214))+((cj5*r00)));
j4eval[0]=x3215;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r20*x3214))+(((-1.0)*cj0*cj5*r21))))));
j4eval[2]=IKsign(x3215);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3216=cj5*cj5;
IkReal x3217=((1.0)*r20);
IkReal x3218=(cj5*r21);
IkReal x3219=(((cj5*r01*r20*sj5))+(((-1.0)*r00*x3216*x3217))+((r00*sj5*x3218))+((r00*r20))+((r02*r22))+((r01*r21*x3216)));
j4eval[0]=x3219;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*sj5*x3217))+(((-1.0)*cj0*x3218))))));
j4eval[2]=IKsign(x3219);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3220=cj5*cj5;
IkReal x3221=((1.0)*r20);
IkReal x3222=(cj5*r21);
CheckValue<IkReal> x3223 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*sj5*x3221))+(((-1.0)*cj0*x3222)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3223.valid){
continue;
}
CheckValue<IkReal> x3224=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+((r00*r20))+(((-1.0)*r00*x3220*x3221))+((r01*r21*x3220))+((r02*r22))+((r00*sj5*x3222)))),-1);
if(!x3224.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3223.value)+(((1.5707963267949)*(x3224.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3225=IKcos(j4);
IkReal x3226=IKsin(j4);
IkReal x3227=((1.0)*cj0);
IkReal x3228=(r00*sj5);
IkReal x3229=(r10*sj5);
IkReal x3230=(r20*sj5);
IkReal x3231=((1.0)*x3225);
IkReal x3232=((1.0)*x3226);
IkReal x3233=(cj5*x3232);
evalcond[0]=((((-1.0)*cj5*r21*x3231))+(((-1.0)*x3230*x3231))+((r22*x3226)));
evalcond[1]=((((-1.0)*x3230*x3232))+(((-1.0)*r21*x3233))+(((-1.0)*r22*x3231)));
evalcond[2]=(sj0+((r02*x3226))+(((-1.0)*x3228*x3231))+(((-1.0)*cj5*r01*x3231)));
evalcond[3]=((((-1.0)*x3229*x3231))+((r12*x3226))+(((-1.0)*x3227))+(((-1.0)*cj5*r11*x3231)));
evalcond[4]=((((-1.0)*r02*x3231))+(((-1.0)*r01*x3233))+(((-1.0)*x3228*x3232))+(((-1.0)*x3227)));
evalcond[5]=((((-1.0)*x3229*x3232))+(((-1.0)*sj0))+(((-1.0)*r11*x3233))+(((-1.0)*r12*x3231)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3234=((1.0)*cj0);
CheckValue<IkReal> x3235=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj5))+((cj5*r00)))),-1);
if(!x3235.valid){
continue;
}
CheckValue<IkReal> x3236 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r21*x3234))+(((-1.0)*r20*sj5*x3234)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3236.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3235.value)))+(x3236.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3237=IKcos(j4);
IkReal x3238=IKsin(j4);
IkReal x3239=((1.0)*cj0);
IkReal x3240=(r00*sj5);
IkReal x3241=(r10*sj5);
IkReal x3242=(r20*sj5);
IkReal x3243=((1.0)*x3237);
IkReal x3244=((1.0)*x3238);
IkReal x3245=(cj5*x3244);
evalcond[0]=((((-1.0)*cj5*r21*x3243))+((r22*x3238))+(((-1.0)*x3242*x3243)));
evalcond[1]=((((-1.0)*r21*x3245))+(((-1.0)*x3242*x3244))+(((-1.0)*r22*x3243)));
evalcond[2]=(sj0+(((-1.0)*cj5*r01*x3243))+(((-1.0)*x3240*x3243))+((r02*x3238)));
evalcond[3]=(((r12*x3238))+(((-1.0)*cj5*r11*x3243))+(((-1.0)*x3239))+(((-1.0)*x3241*x3243)));
evalcond[4]=((((-1.0)*r01*x3245))+(((-1.0)*x3240*x3244))+(((-1.0)*x3239))+(((-1.0)*r02*x3243)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r11*x3245))+(((-1.0)*r12*x3243))+(((-1.0)*x3241*x3244)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3246=((1.0)*sj0);
CheckValue<IkReal> x3247 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r21*x3246))+(((-1.0)*r20*sj5*x3246)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3247.valid){
continue;
}
CheckValue<IkReal> x3248=IKPowWithIntegerCheck(IKsign((((cj5*r10))+(((-1.0)*r11*sj5)))),-1);
if(!x3248.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3247.value)+(((1.5707963267949)*(x3248.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3249=IKcos(j4);
IkReal x3250=IKsin(j4);
IkReal x3251=((1.0)*cj0);
IkReal x3252=(r00*sj5);
IkReal x3253=(r10*sj5);
IkReal x3254=(r20*sj5);
IkReal x3255=((1.0)*x3249);
IkReal x3256=((1.0)*x3250);
IkReal x3257=(cj5*x3256);
evalcond[0]=((((-1.0)*x3254*x3255))+(((-1.0)*cj5*r21*x3255))+((r22*x3250)));
evalcond[1]=((((-1.0)*x3254*x3256))+(((-1.0)*r22*x3255))+(((-1.0)*r21*x3257)));
evalcond[2]=(sj0+((r02*x3250))+(((-1.0)*cj5*r01*x3255))+(((-1.0)*x3252*x3255)));
evalcond[3]=(((r12*x3250))+(((-1.0)*x3253*x3255))+(((-1.0)*cj5*r11*x3255))+(((-1.0)*x3251)));
evalcond[4]=((((-1.0)*r02*x3255))+(((-1.0)*x3252*x3256))+(((-1.0)*r01*x3257))+(((-1.0)*x3251)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x3253*x3256))+(((-1.0)*r11*x3257))+(((-1.0)*r12*x3255)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3258=((5000.0)*px);
IkReal x3259=(cj1*cj2);
IkReal x3260=(sj1*sj2);
IkReal x3261=(cj5*r00);
IkReal x3262=(r01*sj5);
IkReal x3263=((1742.0)*sj1);
IkReal x3264=((1747.5)*cj2*sj1);
IkReal x3265=((1747.5)*cj1*sj2);
CheckValue<IkReal> x3266=IKPowWithIntegerCheck((x3260+(((-1.0)*x3259))),-1);
if(!x3266.valid){
continue;
}
CheckValue<IkReal> x3267=IKPowWithIntegerCheck(((((-501.0)*x3259))+(((501.0)*x3260))),-1);
if(!x3267.valid){
continue;
}
if( IKabs(((x3266.value)*(((((-1.0)*x3261))+x3262)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3267.value)*(((((-1.0)*x3261*x3263))+(((-1.0)*x3261*x3264))+(((-1.0)*x3261*x3265))+((x3262*x3263))+((x3262*x3264))+((x3262*x3265))+(((502.5)*x3259*x3262))+(((-502.5)*x3259*x3261))+(((-1.0)*x3258*x3259))+((x3258*x3260))+(((-502.5)*x3260*x3262))+(((502.5)*x3260*x3261)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3266.value)*(((((-1.0)*x3261))+x3262))))+IKsqr(((x3267.value)*(((((-1.0)*x3261*x3263))+(((-1.0)*x3261*x3264))+(((-1.0)*x3261*x3265))+((x3262*x3263))+((x3262*x3264))+((x3262*x3265))+(((502.5)*x3259*x3262))+(((-502.5)*x3259*x3261))+(((-1.0)*x3258*x3259))+((x3258*x3260))+(((-502.5)*x3260*x3262))+(((502.5)*x3260*x3261))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x3266.value)*(((((-1.0)*x3261))+x3262))), ((x3267.value)*(((((-1.0)*x3261*x3263))+(((-1.0)*x3261*x3264))+(((-1.0)*x3261*x3265))+((x3262*x3263))+((x3262*x3264))+((x3262*x3265))+(((502.5)*x3259*x3262))+(((-502.5)*x3259*x3261))+(((-1.0)*x3258*x3259))+((x3258*x3260))+(((-502.5)*x3260*x3262))+(((502.5)*x3260*x3261))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x3268=IKsin(j0);
IkReal x3269=IKcos(j0);
IkReal x3270=((0.3495)*sj1);
IkReal x3271=((0.1005)*cj5);
IkReal x3272=((1.0)*sj5);
IkReal x3273=((0.1005)*sj5);
IkReal x3274=(cj2*x3269);
IkReal x3275=((0.3495)*cj1*sj2);
IkReal x3276=(cj2*x3268);
IkReal x3277=(sj1*x3269);
IkReal x3278=(sj1*x3268);
evalcond[0]=(((sj2*x3278))+(((-1.0)*r01*x3272))+(((-1.0)*cj1*x3276))+((cj5*r00)));
evalcond[1]=(((cj5*r10))+(((-1.0)*r11*x3272))+(((-1.0)*sj2*x3277))+((cj1*x3274)));
evalcond[2]=((((-1.0)*x3268*x3275))+((r01*x3273))+(((-1.0)*r00*x3271))+(((-1.0)*px))+(((0.1002)*x3269))+(((-1.0)*x3270*x3276))+(((-0.3484)*x3278)));
evalcond[3]=((((-1.0)*py))+((r11*x3273))+(((0.1002)*x3268))+(((-1.0)*r10*x3271))+((x3269*x3275))+((x3270*x3274))+(((0.3484)*x3277)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3279=((1.0)*sj5);
IkReal x3280=(((cj5*r10))+(((-1.0)*r11*x3279)));
j4eval[0]=x3280;
j4eval[1]=IKsign(x3280);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*cj5*r21))+(((-1.0)*cj0*r20*x3279))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3281=((1.0)*cj5);
IkReal x3282=(((r01*sj5))+(((-1.0)*r00*x3281)));
j4eval[0]=x3282;
j4eval[1]=IKsign(x3282);
j4eval[2]=((IKabs(((((-1.0)*r21*sj0*x3281))+(((-1.0)*r20*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3283=((1.0)*sj0);
IkReal x3284=(((cj5*r20))+(((-1.0)*r21*sj5)));
j4eval[0]=x3284;
j4eval[1]=((IKabs((((cj0*cj5*r11))+(((-1.0)*cj5*r01*x3283))+(((-1.0)*r00*sj5*x3283))+((cj0*r10*sj5)))))+(IKabs(((((-1.0)*cj0*r12))+((r02*sj0))))));
j4eval[2]=IKsign(x3284);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x3285=((-1.0)*r21);
IkReal x3287 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3287)==0){
continue;
}
IkReal x3286=pow(x3287,-0.5);
CheckValue<IkReal> x3288 = IKatan2WithCheck(IkReal(r20),IkReal(x3285),IKFAST_ATAN2_MAGTHRESH);
if(!x3288.valid){
continue;
}
IkReal gconst90=((-1.0)*(x3288.value));
IkReal gconst91=((-1.0)*r20*x3286);
IkReal gconst92=(x3285*x3286);
CheckValue<IkReal> x3289 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x3289.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3289.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3290=((-1.0)*r21);
CheckValue<IkReal> x3293 = IKatan2WithCheck(IkReal(r20),IkReal(x3290),IKFAST_ATAN2_MAGTHRESH);
if(!x3293.valid){
continue;
}
IkReal x3291=((-1.0)*(x3293.value));
IkReal x3292=x3286;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst91;
cj5=gconst92;
j5=x3291;
IkReal gconst90=x3291;
IkReal gconst91=((-1.0)*r20*x3292);
IkReal gconst92=(x3290*x3292);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3294=((-1.0)*r21);
CheckValue<IkReal> x3297 = IKatan2WithCheck(IkReal(r20),IkReal(x3294),IKFAST_ATAN2_MAGTHRESH);
if(!x3297.valid){
continue;
}
IkReal x3295=((-1.0)*(x3297.value));
IkReal x3296=x3286;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst91;
cj5=gconst92;
j5=x3295;
IkReal gconst90=x3295;
IkReal gconst91=((-1.0)*r20*x3296);
IkReal gconst92=(x3294*x3296);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x3298=((-1.0)*r21);
CheckValue<IkReal> x3301 = IKatan2WithCheck(IkReal(r20),IkReal(x3298),IKFAST_ATAN2_MAGTHRESH);
if(!x3301.valid){
continue;
}
IkReal x3299=((-1.0)*(x3301.value));
IkReal x3300=x3286;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst91;
cj5=gconst92;
j5=x3299;
IkReal gconst90=x3299;
IkReal gconst91=((-1.0)*r20*x3300);
IkReal gconst92=(x3298*x3300);
IkReal x3302=((1.0)*(r22*r22));
CheckValue<IkReal> x3306=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x3302))),-1);
if(!x3306.valid){
continue;
}
IkReal x3303=x3306.value;
IkReal x3304=((1.0)*x3303);
IkReal x3305=((((-1.0)*x3302))+(((-1.0)*x3304*(r21*r21*r21*r21)))+(((-2.0)*x3303*(r20*r20)*(r21*r21)))+(((-1.0)*x3304*(r20*r20*r20*r20))));
j4eval[0]=x3305;
j4eval[1]=IKsign(x3305);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3307=(gconst92*r21);
IkReal x3308=(sj1*sj2);
IkReal x3309=(gconst91*r20);
IkReal x3310=((1.0)*cj1*cj2);
CheckValue<IkReal> x3311=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x3307*x3307)))+(((-1.0)*(x3309*x3309)))+(((-1.0)*(r22*r22)))+(((-2.0)*x3307*x3309)))),-1);
if(!x3311.valid){
continue;
}
CheckValue<IkReal> x3312 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x3308))+((cj1*cj2*r22)))),IkReal(((((-1.0)*x3309*x3310))+((x3307*x3308))+(((-1.0)*x3307*x3310))+((x3308*x3309)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3312.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3311.value)))+(x3312.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3313=IKsin(j4);
IkReal x3314=IKcos(j4);
IkReal x3315=(cj2*sj1);
IkReal x3316=(gconst92*r21);
IkReal x3317=(gconst92*r01);
IkReal x3318=((1.0)*sj2);
IkReal x3319=(gconst92*r11);
IkReal x3320=(gconst91*r20);
IkReal x3321=((1.0)*cj0);
IkReal x3322=(gconst91*r10);
IkReal x3323=(gconst91*r00);
IkReal x3324=((1.0)*x3314);
IkReal x3325=((1.0)*x3313);
evalcond[0]=((((-1.0)*x3320*x3325))+(((-1.0)*r22*x3324))+(((-1.0)*x3316*x3325)));
evalcond[1]=((((-1.0)*x3321))+(((-1.0)*r02*x3324))+(((-1.0)*x3317*x3325))+(((-1.0)*x3323*x3325)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x3319*x3325))+(((-1.0)*x3322*x3325))+(((-1.0)*r12*x3324)));
evalcond[3]=(((r22*x3313))+(((-1.0)*x3320*x3324))+(((-1.0)*sj1*x3318))+((cj1*cj2))+(((-1.0)*x3316*x3324)));
evalcond[4]=(((r02*x3313))+((cj1*sj0*sj2))+(((-1.0)*x3317*x3324))+(((-1.0)*x3323*x3324))+((sj0*x3315)));
evalcond[5]=((((-1.0)*x3319*x3324))+(((-1.0)*x3322*x3324))+(((-1.0)*cj0*cj1*x3318))+((r12*x3313))+(((-1.0)*x3315*x3321)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3326=((1.0)*gconst92);
CheckValue<IkReal> x3327=IKPowWithIntegerCheck(IKsign((((gconst91*r01))+(((-1.0)*r00*x3326)))),-1);
if(!x3327.valid){
continue;
}
CheckValue<IkReal> x3328 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x3326))+(((-1.0)*gconst91*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3328.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3327.value)))+(x3328.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3329=IKsin(j4);
IkReal x3330=IKcos(j4);
IkReal x3331=(cj2*sj1);
IkReal x3332=(gconst92*r21);
IkReal x3333=(gconst92*r01);
IkReal x3334=((1.0)*sj2);
IkReal x3335=(gconst92*r11);
IkReal x3336=(gconst91*r20);
IkReal x3337=((1.0)*cj0);
IkReal x3338=(gconst91*r10);
IkReal x3339=(gconst91*r00);
IkReal x3340=((1.0)*x3330);
IkReal x3341=((1.0)*x3329);
evalcond[0]=((((-1.0)*x3332*x3341))+(((-1.0)*r22*x3340))+(((-1.0)*x3336*x3341)));
evalcond[1]=((((-1.0)*r02*x3340))+(((-1.0)*x3337))+(((-1.0)*x3333*x3341))+(((-1.0)*x3339*x3341)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x3338*x3341))+(((-1.0)*r12*x3340))+(((-1.0)*x3335*x3341)));
evalcond[3]=(((r22*x3329))+(((-1.0)*x3332*x3340))+((cj1*cj2))+(((-1.0)*sj1*x3334))+(((-1.0)*x3336*x3340)));
evalcond[4]=(((cj1*sj0*sj2))+(((-1.0)*x3333*x3340))+((sj0*x3331))+(((-1.0)*x3339*x3340))+((r02*x3329)));
evalcond[5]=(((r12*x3329))+(((-1.0)*x3331*x3337))+(((-1.0)*cj0*cj1*x3334))+(((-1.0)*x3338*x3340))+(((-1.0)*x3335*x3340)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3342=((1.0)*cj0);
CheckValue<IkReal> x3343=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r11))+((gconst92*r10)))),-1);
if(!x3343.valid){
continue;
}
CheckValue<IkReal> x3344 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*gconst92*r21*x3342))+(((-1.0)*gconst91*r20*x3342)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3344.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3343.value)))+(x3344.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3345=IKsin(j4);
IkReal x3346=IKcos(j4);
IkReal x3347=(cj2*sj1);
IkReal x3348=(gconst92*r21);
IkReal x3349=(gconst92*r01);
IkReal x3350=((1.0)*sj2);
IkReal x3351=(gconst92*r11);
IkReal x3352=(gconst91*r20);
IkReal x3353=((1.0)*cj0);
IkReal x3354=(gconst91*r10);
IkReal x3355=(gconst91*r00);
IkReal x3356=((1.0)*x3346);
IkReal x3357=((1.0)*x3345);
evalcond[0]=((((-1.0)*x3352*x3357))+(((-1.0)*x3348*x3357))+(((-1.0)*r22*x3356)));
evalcond[1]=((((-1.0)*x3353))+(((-1.0)*x3349*x3357))+(((-1.0)*r02*x3356))+(((-1.0)*x3355*x3357)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x3354*x3357))+(((-1.0)*x3351*x3357))+(((-1.0)*r12*x3356)));
evalcond[3]=((((-1.0)*x3352*x3356))+(((-1.0)*x3348*x3356))+((r22*x3345))+(((-1.0)*sj1*x3350))+((cj1*cj2)));
evalcond[4]=((((-1.0)*x3349*x3356))+((r02*x3345))+((sj0*x3347))+(((-1.0)*x3355*x3356))+((cj1*sj0*sj2)));
evalcond[5]=((((-1.0)*cj0*cj1*x3350))+(((-1.0)*x3347*x3353))+(((-1.0)*x3354*x3356))+(((-1.0)*x3351*x3356))+((r12*x3345)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3360 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3360)==0){
continue;
}
IkReal x3358=pow(x3360,-0.5);
IkReal x3359=((1.0)*x3358);
CheckValue<IkReal> x3361 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x3361.valid){
continue;
}
IkReal gconst93=((3.14159265358979)+(((-1.0)*(x3361.value))));
IkReal gconst94=(r20*x3359);
IkReal gconst95=(r21*x3359);
CheckValue<IkReal> x3362 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x3362.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3362.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x3366 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x3366.valid){
continue;
}
IkReal x3363=((1.0)*(x3366.value));
IkReal x3364=x3358;
IkReal x3365=((1.0)*x3364);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x3363)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x3363)));
IkReal gconst94=(r20*x3365);
IkReal gconst95=(r21*x3365);
IkReal x3367=r22*r22;
IkReal x3368=((1.0)*x3367);
CheckValue<IkReal> x3372=IKPowWithIntegerCheck(((-1.0)+x3367),-1);
if(!x3372.valid){
continue;
}
IkReal x3369=x3372.value;
if((((1.0)+(((-1.0)*x3368)))) < -0.00001)
continue;
IkReal x3370=IKsqrt(((1.0)+(((-1.0)*x3368))));
IkReal x3371=(cj0*x3369*x3370);
j4eval[0]=((IKabs((cj0*r22)))+(IKabs((x3371+(((-1.0)*x3368*x3371))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x3376 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x3376.valid){
continue;
}
IkReal x3373=((1.0)*(x3376.value));
IkReal x3374=x3358;
IkReal x3375=((1.0)*x3374);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x3373)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x3373)));
IkReal gconst94=(r20*x3375);
IkReal gconst95=(r21*x3375);
IkReal x3377=r22*r22;
IkReal x3378=((1.0)*x3377);
CheckValue<IkReal> x3382=IKPowWithIntegerCheck(((-1.0)+x3377),-1);
if(!x3382.valid){
continue;
}
IkReal x3379=x3382.value;
if((((1.0)+(((-1.0)*x3378)))) < -0.00001)
continue;
IkReal x3380=IKsqrt(((1.0)+(((-1.0)*x3378))));
IkReal x3381=(sj0*x3379*x3380);
j4eval[0]=((IKabs(((((-1.0)*x3378*x3381))+x3381)))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x3386 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x3386.valid){
continue;
}
IkReal x3383=((1.0)*(x3386.value));
IkReal x3384=x3358;
IkReal x3385=((1.0)*x3384);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x3383)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x3383)));
IkReal gconst94=(r20*x3385);
IkReal gconst95=(r21*x3385);
IkReal x3387=r22*r22;
IkReal x3388=(cj0*r12);
IkReal x3389=(r02*sj0);
CheckValue<IkReal> x3393=IKPowWithIntegerCheck(((-1.0)+x3387),-1);
if(!x3393.valid){
continue;
}
IkReal x3390=x3393.value;
if((((1.0)+(((-1.0)*x3387)))) < -0.00001)
continue;
IkReal x3391=IKsqrt(((1.0)+(((-1.0)*x3387))));
IkReal x3392=(r22*x3390*x3391);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs((((x3388*x3392))+(((-1.0)*x3389*x3392)))))+(IKabs(((((-1.0)*x3388))+x3389))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3394=((1.0)*sj0);
CheckValue<IkReal> x3395 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r12))+((r02*sj0)))),IkReal(((((-1.0)*gconst94*r00*x3394))+(((-1.0)*gconst95*r01*x3394))+((cj0*gconst94*r10))+((cj0*gconst95*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3395.valid){
continue;
}
CheckValue<IkReal> x3396=IKPowWithIntegerCheck(IKsign((((gconst95*r20))+(((-1.0)*gconst94*r21)))),-1);
if(!x3396.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3395.value)+(((1.5707963267949)*(x3396.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3397=IKsin(j4);
IkReal x3398=IKcos(j4);
IkReal x3399=(gconst95*r21);
IkReal x3400=(cj2*sj1);
IkReal x3401=(gconst95*r11);
IkReal x3402=((1.0)*sj2);
IkReal x3403=(gconst94*r10);
IkReal x3404=((1.0)*cj0);
IkReal x3405=(gconst95*r01);
IkReal x3406=(gconst94*r20);
IkReal x3407=(gconst94*r00);
IkReal x3408=((1.0)*x3398);
IkReal x3409=((1.0)*x3397);
evalcond[0]=((((-1.0)*x3399*x3409))+(((-1.0)*x3406*x3409))+(((-1.0)*r22*x3408)));
evalcond[1]=((((-1.0)*x3405*x3409))+(((-1.0)*x3407*x3409))+(((-1.0)*r02*x3408))+(((-1.0)*x3404)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x3401*x3409))+(((-1.0)*r12*x3408))+(((-1.0)*x3403*x3409)));
evalcond[3]=((((-1.0)*sj1*x3402))+(((-1.0)*x3399*x3408))+((r22*x3397))+(((-1.0)*x3406*x3408))+((cj1*cj2)));
evalcond[4]=((((-1.0)*x3405*x3408))+(((-1.0)*x3407*x3408))+((sj0*x3400))+((cj1*sj0*sj2))+((r02*x3397)));
evalcond[5]=((((-1.0)*x3400*x3404))+(((-1.0)*x3401*x3408))+(((-1.0)*cj0*cj1*x3402))+((r12*x3397))+(((-1.0)*x3403*x3408)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3410=((1.0)*gconst95);
CheckValue<IkReal> x3411 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x3410))+(((-1.0)*gconst94*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3411.valid){
continue;
}
CheckValue<IkReal> x3412=IKPowWithIntegerCheck(IKsign((((gconst94*r01))+(((-1.0)*r00*x3410)))),-1);
if(!x3412.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3411.value)+(((1.5707963267949)*(x3412.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3413=IKsin(j4);
IkReal x3414=IKcos(j4);
IkReal x3415=(gconst95*r21);
IkReal x3416=(cj2*sj1);
IkReal x3417=(gconst95*r11);
IkReal x3418=((1.0)*sj2);
IkReal x3419=(gconst94*r10);
IkReal x3420=((1.0)*cj0);
IkReal x3421=(gconst95*r01);
IkReal x3422=(gconst94*r20);
IkReal x3423=(gconst94*r00);
IkReal x3424=((1.0)*x3414);
IkReal x3425=((1.0)*x3413);
evalcond[0]=((((-1.0)*x3415*x3425))+(((-1.0)*r22*x3424))+(((-1.0)*x3422*x3425)));
evalcond[1]=((((-1.0)*x3420))+(((-1.0)*x3423*x3425))+(((-1.0)*x3421*x3425))+(((-1.0)*r02*x3424)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r12*x3424))+(((-1.0)*x3417*x3425))+(((-1.0)*x3419*x3425)));
evalcond[3]=((((-1.0)*sj1*x3418))+((r22*x3413))+(((-1.0)*x3415*x3424))+(((-1.0)*x3422*x3424))+((cj1*cj2)));
evalcond[4]=(((sj0*x3416))+((r02*x3413))+((cj1*sj0*sj2))+(((-1.0)*x3423*x3424))+(((-1.0)*x3421*x3424)));
evalcond[5]=(((r12*x3413))+(((-1.0)*x3417*x3424))+(((-1.0)*cj0*cj1*x3418))+(((-1.0)*x3416*x3420))+(((-1.0)*x3419*x3424)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3426=((1.0)*gconst94);
CheckValue<IkReal> x3427 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x3426))+(((-1.0)*cj0*gconst95*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3427.valid){
continue;
}
CheckValue<IkReal> x3428=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x3426))+((gconst95*r10)))),-1);
if(!x3428.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3427.value)+(((1.5707963267949)*(x3428.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3429=IKsin(j4);
IkReal x3430=IKcos(j4);
IkReal x3431=(gconst95*r21);
IkReal x3432=(cj2*sj1);
IkReal x3433=(gconst95*r11);
IkReal x3434=((1.0)*sj2);
IkReal x3435=(gconst94*r10);
IkReal x3436=((1.0)*cj0);
IkReal x3437=(gconst95*r01);
IkReal x3438=(gconst94*r20);
IkReal x3439=(gconst94*r00);
IkReal x3440=((1.0)*x3430);
IkReal x3441=((1.0)*x3429);
evalcond[0]=((((-1.0)*x3438*x3441))+(((-1.0)*x3431*x3441))+(((-1.0)*r22*x3440)));
evalcond[1]=((((-1.0)*x3439*x3441))+(((-1.0)*x3436))+(((-1.0)*x3437*x3441))+(((-1.0)*r02*x3440)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x3433*x3441))+(((-1.0)*x3435*x3441))+(((-1.0)*r12*x3440)));
evalcond[3]=((((-1.0)*x3438*x3440))+(((-1.0)*x3431*x3440))+((cj1*cj2))+(((-1.0)*sj1*x3434))+((r22*x3429)));
evalcond[4]=((((-1.0)*x3439*x3440))+((cj1*sj0*sj2))+(((-1.0)*x3437*x3440))+((sj0*x3432))+((r02*x3429)));
evalcond[5]=((((-1.0)*x3433*x3440))+(((-1.0)*x3432*x3436))+(((-1.0)*x3435*x3440))+((r12*x3429))+(((-1.0)*cj0*cj1*x3434)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3443 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x3443)==0){
continue;
}
IkReal x3442=pow(x3443,-0.5);
CheckValue<IkReal> x3444 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x3444.valid){
continue;
}
IkReal gconst96=((-1.0)*(x3444.value));
IkReal gconst97=(r00*x3442);
IkReal gconst98=(r01*x3442);
CheckValue<IkReal> x3445 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x3445.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3445.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x3448 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x3448.valid){
continue;
}
IkReal x3446=((-1.0)*(x3448.value));
IkReal x3447=x3442;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x3446;
IkReal gconst96=x3446;
IkReal gconst97=(r00*x3447);
IkReal gconst98=(r01*x3447);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x3451 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x3451.valid){
continue;
}
IkReal x3449=((-1.0)*(x3451.value));
IkReal x3450=x3442;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x3449;
IkReal gconst96=x3449;
IkReal gconst97=(r00*x3450);
IkReal gconst98=(r01*x3450);
IkReal x3452=r02*r02;
IkReal x3453=(cj0*r12);
IkReal x3454=((1.0)*x3452);
CheckValue<IkReal> x3458=IKPowWithIntegerCheck(((-1.0)+x3452),-1);
if(!x3458.valid){
continue;
}
IkReal x3455=x3458.value;
if((((1.0)+(((-1.0)*x3454)))) < -0.00001)
continue;
IkReal x3456=IKsqrt(((1.0)+(((-1.0)*x3454))));
IkReal x3457=(x3455*x3456);
j4eval[0]=((IKabs(((((-1.0)*x3453))+((r02*sj0)))))+(IKabs(((((-1.0)*sj0*x3454*x3457))+((sj0*x3457))+((r02*x3453*x3457))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x3461 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x3461.valid){
continue;
}
IkReal x3459=((-1.0)*(x3461.value));
IkReal x3460=x3442;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x3459;
IkReal gconst96=x3459;
IkReal gconst97=(r00*x3460);
IkReal gconst98=(r01*x3460);
IkReal x3462=r02*r02;
IkReal x3463=(cj1*cj2);
IkReal x3464=(sj1*sj2);
IkReal x3465=((1.0)+(((-1.0)*x3462)));
CheckValue<IkReal> x3472=IKPowWithIntegerCheck(x3465,-1);
if(!x3472.valid){
continue;
}
IkReal x3466=x3472.value;
CheckValue<IkReal> x3473=IKPowWithIntegerCheck(((-1.0)+x3462),-1);
if(!x3473.valid){
continue;
}
IkReal x3467=x3473.value;
IkReal x3468=((1.0)*x3466);
if((x3465) < -0.00001)
continue;
IkReal x3469=IKsqrt(x3465);
IkReal x3470=(r02*r22*x3467*x3469);
IkReal x3471=((((-1.0)*x3468*(r01*r01)*(r21*r21)))+(((-1.0)*x3468*(r00*r00)*(r20*r20)))+(((-1.0)*(r22*r22)))+(((-2.0)*r00*r01*r20*r21*x3466)));
j4eval[0]=x3471;
j4eval[1]=((IKabs(((((-1.0)*r22*x3464))+((r22*x3463)))))+(IKabs((((x3464*x3470))+(((-1.0)*x3463*x3470))))));
j4eval[2]=IKsign(x3471);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3474=(gconst97*r20);
IkReal x3475=(sj1*sj2);
IkReal x3476=(gconst98*r21);
IkReal x3477=((1.0)*cj1*cj2);
CheckValue<IkReal> x3478=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x3474*x3474)))+(((-2.0)*x3474*x3476))+(((-1.0)*(r22*r22)))+(((-1.0)*(x3476*x3476))))),-1);
if(!x3478.valid){
continue;
}
CheckValue<IkReal> x3479 = IKatan2WithCheck(IkReal((((cj1*cj2*r22))+(((-1.0)*r22*x3475)))),IkReal((((x3475*x3476))+((x3474*x3475))+(((-1.0)*x3474*x3477))+(((-1.0)*x3476*x3477)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3479.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3478.value)))+(x3479.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3480=IKsin(j4);
IkReal x3481=IKcos(j4);
IkReal x3482=(cj2*sj1);
IkReal x3483=(gconst98*r11);
IkReal x3484=(gconst97*r00);
IkReal x3485=(gconst97*r10);
IkReal x3486=((1.0)*sj2);
IkReal x3487=(gconst97*r20);
IkReal x3488=((1.0)*cj0);
IkReal x3489=(gconst98*r21);
IkReal x3490=(gconst98*r01);
IkReal x3491=((1.0)*x3481);
IkReal x3492=((1.0)*x3480);
evalcond[0]=((((-1.0)*x3489*x3492))+(((-1.0)*x3487*x3492))+(((-1.0)*r22*x3491)));
evalcond[1]=((((-1.0)*r02*x3491))+(((-1.0)*x3484*x3492))+(((-1.0)*x3490*x3492))+(((-1.0)*x3488)));
evalcond[2]=((((-1.0)*r12*x3491))+(((-1.0)*sj0))+(((-1.0)*x3483*x3492))+(((-1.0)*x3485*x3492)));
evalcond[3]=((((-1.0)*x3489*x3491))+(((-1.0)*x3487*x3491))+((cj1*cj2))+((r22*x3480))+(((-1.0)*sj1*x3486)));
evalcond[4]=(((cj1*sj0*sj2))+(((-1.0)*x3484*x3491))+(((-1.0)*x3490*x3491))+((sj0*x3482))+((r02*x3480)));
evalcond[5]=((((-1.0)*x3482*x3488))+(((-1.0)*x3483*x3491))+(((-1.0)*cj0*cj1*x3486))+((r12*x3480))+(((-1.0)*x3485*x3491)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3493=((1.0)*gconst97);
CheckValue<IkReal> x3494 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r12))+((r02*sj0)))),IkReal((((cj0*gconst98*r11))+(((-1.0)*r00*sj0*x3493))+(((-1.0)*gconst98*r01*sj0))+((cj0*gconst97*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3494.valid){
continue;
}
CheckValue<IkReal> x3495=IKPowWithIntegerCheck(IKsign((((gconst98*r20))+(((-1.0)*r21*x3493)))),-1);
if(!x3495.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3494.value)+(((1.5707963267949)*(x3495.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3496=IKsin(j4);
IkReal x3497=IKcos(j4);
IkReal x3498=(cj2*sj1);
IkReal x3499=(gconst98*r11);
IkReal x3500=(gconst97*r00);
IkReal x3501=(gconst97*r10);
IkReal x3502=((1.0)*sj2);
IkReal x3503=(gconst97*r20);
IkReal x3504=((1.0)*cj0);
IkReal x3505=(gconst98*r21);
IkReal x3506=(gconst98*r01);
IkReal x3507=((1.0)*x3497);
IkReal x3508=((1.0)*x3496);
evalcond[0]=((((-1.0)*r22*x3507))+(((-1.0)*x3505*x3508))+(((-1.0)*x3503*x3508)));
evalcond[1]=((((-1.0)*x3506*x3508))+(((-1.0)*x3504))+(((-1.0)*r02*x3507))+(((-1.0)*x3500*x3508)));
evalcond[2]=((((-1.0)*r12*x3507))+(((-1.0)*sj0))+(((-1.0)*x3501*x3508))+(((-1.0)*x3499*x3508)));
evalcond[3]=((((-1.0)*sj1*x3502))+((cj1*cj2))+((r22*x3496))+(((-1.0)*x3505*x3507))+(((-1.0)*x3503*x3507)));
evalcond[4]=((((-1.0)*x3506*x3507))+((cj1*sj0*sj2))+((r02*x3496))+((sj0*x3498))+(((-1.0)*x3500*x3507)));
evalcond[5]=((((-1.0)*x3498*x3504))+(((-1.0)*x3501*x3507))+(((-1.0)*cj0*cj1*x3502))+(((-1.0)*x3499*x3507))+((r12*x3496)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3509=((1.0)*gconst97);
CheckValue<IkReal> x3510 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x3509))+(((-1.0)*cj0*gconst98*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3510.valid){
continue;
}
CheckValue<IkReal> x3511=IKPowWithIntegerCheck(IKsign((((gconst98*r10))+(((-1.0)*r11*x3509)))),-1);
if(!x3511.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3510.value)+(((1.5707963267949)*(x3511.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3512=IKsin(j4);
IkReal x3513=IKcos(j4);
IkReal x3514=(cj2*sj1);
IkReal x3515=(gconst98*r11);
IkReal x3516=(gconst97*r00);
IkReal x3517=(gconst97*r10);
IkReal x3518=((1.0)*sj2);
IkReal x3519=(gconst97*r20);
IkReal x3520=((1.0)*cj0);
IkReal x3521=(gconst98*r21);
IkReal x3522=(gconst98*r01);
IkReal x3523=((1.0)*x3513);
IkReal x3524=((1.0)*x3512);
evalcond[0]=((((-1.0)*x3519*x3524))+(((-1.0)*r22*x3523))+(((-1.0)*x3521*x3524)));
evalcond[1]=((((-1.0)*x3522*x3524))+(((-1.0)*r02*x3523))+(((-1.0)*x3520))+(((-1.0)*x3516*x3524)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x3517*x3524))+(((-1.0)*r12*x3523))+(((-1.0)*x3515*x3524)));
evalcond[3]=((((-1.0)*x3519*x3523))+(((-1.0)*sj1*x3518))+(((-1.0)*x3521*x3523))+((r22*x3512))+((cj1*cj2)));
evalcond[4]=((((-1.0)*x3522*x3523))+((r02*x3512))+((cj1*sj0*sj2))+((sj0*x3514))+(((-1.0)*x3516*x3523)));
evalcond[5]=((((-1.0)*cj0*cj1*x3518))+(((-1.0)*x3517*x3523))+((r12*x3512))+(((-1.0)*x3514*x3520))+(((-1.0)*x3515*x3523)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3525=((-1.0)*r00);
IkReal x3527 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x3527)==0){
continue;
}
IkReal x3526=pow(x3527,-0.5);
CheckValue<IkReal> x3528 = IKatan2WithCheck(IkReal(x3525),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x3528.valid){
continue;
}
IkReal gconst99=((3.14159265358979)+(((-1.0)*(x3528.value))));
IkReal gconst100=(x3525*x3526);
IkReal gconst101=((-1.0)*r01*x3526);
CheckValue<IkReal> x3529 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x3529.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3529.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x3530=((-1.0)*r00);
CheckValue<IkReal> x3533 = IKatan2WithCheck(IkReal(x3530),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x3533.valid){
continue;
}
IkReal x3531=((1.0)*(x3533.value));
IkReal x3532=x3526;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3531)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3531)));
IkReal gconst100=(x3530*x3532);
IkReal gconst101=((-1.0)*r01*x3532);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
IkReal x3534=((-1.0)*r00);
CheckValue<IkReal> x3537 = IKatan2WithCheck(IkReal(x3534),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x3537.valid){
continue;
}
IkReal x3535=((1.0)*(x3537.value));
IkReal x3536=x3526;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3535)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3535)));
IkReal gconst100=(x3534*x3536);
IkReal gconst101=((-1.0)*r01*x3536);
j4eval[0]=0;
j4eval[1]=r22;
j4eval[2]=sj0;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3538=((1.0)*gconst100);
CheckValue<IkReal> x3539 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r12))+((r02*sj0)))),IkReal(((((-1.0)*r00*sj0*x3538))+((cj0*gconst101*r11))+(((-1.0)*gconst101*r01*sj0))+((cj0*gconst100*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3539.valid){
continue;
}
CheckValue<IkReal> x3540=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3538))+((gconst101*r20)))),-1);
if(!x3540.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3539.value)+(((1.5707963267949)*(x3540.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3541=IKsin(j4);
IkReal x3542=IKcos(j4);
IkReal x3543=(gconst100*r10);
IkReal x3544=(gconst100*r00);
IkReal x3545=(cj2*sj1);
IkReal x3546=(gconst101*r11);
IkReal x3547=(gconst100*r20);
IkReal x3548=((1.0)*sj2);
IkReal x3549=(gconst101*r01);
IkReal x3550=((1.0)*cj0);
IkReal x3551=(gconst101*r21);
IkReal x3552=((1.0)*x3542);
IkReal x3553=((1.0)*x3541);
evalcond[0]=((((-1.0)*r22*x3552))+(((-1.0)*x3551*x3553))+(((-1.0)*x3547*x3553)));
evalcond[1]=((((-1.0)*x3550))+(((-1.0)*x3549*x3553))+(((-1.0)*x3544*x3553))+(((-1.0)*r02*x3552)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x3543*x3553))+(((-1.0)*x3546*x3553))+(((-1.0)*r12*x3552)));
evalcond[3]=((((-1.0)*sj1*x3548))+((r22*x3541))+(((-1.0)*x3551*x3552))+((cj1*cj2))+(((-1.0)*x3547*x3552)));
evalcond[4]=(((r02*x3541))+((sj0*x3545))+((cj1*sj0*sj2))+(((-1.0)*x3549*x3552))+(((-1.0)*x3544*x3552)));
evalcond[5]=((((-1.0)*x3545*x3550))+(((-1.0)*x3543*x3552))+((r12*x3541))+(((-1.0)*x3546*x3552))+(((-1.0)*cj0*cj1*x3548)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3554=((1.0)*gconst101);
CheckValue<IkReal> x3555=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x3554))+((gconst100*r01)))),-1);
if(!x3555.valid){
continue;
}
CheckValue<IkReal> x3556 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst100*r20*sj0))+(((-1.0)*r21*sj0*x3554)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3556.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3555.value)))+(x3556.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3557=IKsin(j4);
IkReal x3558=IKcos(j4);
IkReal x3559=(gconst100*r10);
IkReal x3560=(gconst100*r00);
IkReal x3561=(cj2*sj1);
IkReal x3562=(gconst101*r11);
IkReal x3563=(gconst100*r20);
IkReal x3564=((1.0)*sj2);
IkReal x3565=(gconst101*r01);
IkReal x3566=((1.0)*cj0);
IkReal x3567=(gconst101*r21);
IkReal x3568=((1.0)*x3558);
IkReal x3569=((1.0)*x3557);
evalcond[0]=((((-1.0)*x3563*x3569))+(((-1.0)*r22*x3568))+(((-1.0)*x3567*x3569)));
evalcond[1]=((((-1.0)*x3565*x3569))+(((-1.0)*r02*x3568))+(((-1.0)*x3560*x3569))+(((-1.0)*x3566)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r12*x3568))+(((-1.0)*x3559*x3569))+(((-1.0)*x3562*x3569)));
evalcond[3]=((((-1.0)*sj1*x3564))+(((-1.0)*x3563*x3568))+(((-1.0)*x3567*x3568))+((r22*x3557))+((cj1*cj2)));
evalcond[4]=((((-1.0)*x3565*x3568))+((sj0*x3561))+(((-1.0)*x3560*x3568))+((cj1*sj0*sj2))+((r02*x3557)));
evalcond[5]=((((-1.0)*cj0*cj1*x3564))+(((-1.0)*x3561*x3566))+((r12*x3557))+(((-1.0)*x3559*x3568))+(((-1.0)*x3562*x3568)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3570=((1.0)*gconst100);
CheckValue<IkReal> x3571=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x3570))+((gconst101*r10)))),-1);
if(!x3571.valid){
continue;
}
CheckValue<IkReal> x3572 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst101*r21))+(((-1.0)*cj0*r20*x3570)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3572.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3571.value)))+(x3572.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3573=IKsin(j4);
IkReal x3574=IKcos(j4);
IkReal x3575=(gconst100*r10);
IkReal x3576=(gconst100*r00);
IkReal x3577=(cj2*sj1);
IkReal x3578=(gconst101*r11);
IkReal x3579=(gconst100*r20);
IkReal x3580=((1.0)*sj2);
IkReal x3581=(gconst101*r01);
IkReal x3582=((1.0)*cj0);
IkReal x3583=(gconst101*r21);
IkReal x3584=((1.0)*x3574);
IkReal x3585=((1.0)*x3573);
evalcond[0]=((((-1.0)*r22*x3584))+(((-1.0)*x3579*x3585))+(((-1.0)*x3583*x3585)));
evalcond[1]=((((-1.0)*x3576*x3585))+(((-1.0)*r02*x3584))+(((-1.0)*x3581*x3585))+(((-1.0)*x3582)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x3575*x3585))+(((-1.0)*x3578*x3585))+(((-1.0)*r12*x3584)));
evalcond[3]=((((-1.0)*sj1*x3580))+(((-1.0)*x3579*x3584))+(((-1.0)*x3583*x3584))+((r22*x3573))+((cj1*cj2)));
evalcond[4]=((((-1.0)*x3576*x3584))+(((-1.0)*x3581*x3584))+((cj1*sj0*sj2))+((sj0*x3577))+((r02*x3573)));
evalcond[5]=((((-1.0)*cj0*cj1*x3580))+(((-1.0)*x3577*x3582))+(((-1.0)*x3575*x3584))+((r12*x3573))+(((-1.0)*x3578*x3584)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3586=((1.0)*sj5);
IkReal x3587=(((cj5*r10))+(((-1.0)*r11*x3586)));
j4eval[0]=x3587;
j4eval[1]=IKsign(x3587);
j4eval[2]=((IKabs(((((-1.0)*r20*x3586))+(((-1.0)*cj5*r21)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3588=((1.0)*cj5);
IkReal x3589=(((r21*sj5))+(((-1.0)*r20*x3588)));
j4eval[0]=x3589;
j4eval[1]=((IKabs(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3588)))))+(IKabs(r12)));
j4eval[2]=IKsign(x3589);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3590=cj5*cj5;
IkReal x3591=r00*r00;
IkReal x3592=(r00*sj5);
IkReal x3593=(cj5*r01);
IkReal x3594=(((x3590*(r01*r01)))+x3591+(((-1.0)*x3590*x3591))+(r02*r02)+(((2.0)*x3592*x3593)));
j4eval[0]=x3594;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*x3593))+(((-1.0)*x3592))))));
j4eval[2]=IKsign(x3594);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3595=cj5*cj5;
IkReal x3596=r00*r00;
IkReal x3597=(r00*sj5);
IkReal x3598=(cj5*r01);
CheckValue<IkReal> x3599 = IKatan2WithCheck(IkReal(((((-1.0)*x3598))+(((-1.0)*x3597)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x3599.valid){
continue;
}
CheckValue<IkReal> x3600=IKPowWithIntegerCheck(IKsign(((((-1.0)*x3595*x3596))+x3596+(((2.0)*x3597*x3598))+(r02*r02)+((x3595*(r01*r01))))),-1);
if(!x3600.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3599.value)+(((1.5707963267949)*(x3600.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3601=IKcos(j4);
IkReal x3602=IKsin(j4);
IkReal x3603=(r00*sj5);
IkReal x3604=(cj5*r01);
IkReal x3605=(r20*sj5);
IkReal x3606=((1.0)*sj1);
IkReal x3607=(cj5*r11);
IkReal x3608=(cj5*r21);
IkReal x3609=(r10*sj5);
IkReal x3610=((1.0)*x3601);
IkReal x3611=((1.0)*x3602);
evalcond[0]=(((r02*x3602))+(((-1.0)*x3603*x3610))+(((-1.0)*x3604*x3610)));
evalcond[1]=((((-1.0)*x3605*x3611))+(((-1.0)*r22*x3610))+(((-1.0)*x3608*x3611)));
evalcond[2]=((((-1.0)*r12*x3610))+(((-1.0)*x3607*x3611))+(((-1.0)*x3609*x3611)));
evalcond[3]=((-1.0)+(((-1.0)*x3603*x3611))+(((-1.0)*r02*x3610))+(((-1.0)*x3604*x3611)));
evalcond[4]=((((-1.0)*x3605*x3610))+((r22*x3602))+(((-1.0)*x3608*x3610))+((cj1*cj2))+(((-1.0)*sj2*x3606)));
evalcond[5]=((((-1.0)*cj2*x3606))+(((-1.0)*cj1*sj2))+(((-1.0)*x3607*x3610))+(((-1.0)*x3609*x3610))+((r12*x3602)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3612=((1.0)*cj5);
CheckValue<IkReal> x3613=IKPowWithIntegerCheck(IKsign((((r21*sj5))+(((-1.0)*r20*x3612)))),-1);
if(!x3613.valid){
continue;
}
CheckValue<IkReal> x3614 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3612)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3614.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3613.value)))+(x3614.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3615=IKcos(j4);
IkReal x3616=IKsin(j4);
IkReal x3617=(r00*sj5);
IkReal x3618=(cj5*r01);
IkReal x3619=(r20*sj5);
IkReal x3620=((1.0)*sj1);
IkReal x3621=(cj5*r11);
IkReal x3622=(cj5*r21);
IkReal x3623=(r10*sj5);
IkReal x3624=((1.0)*x3615);
IkReal x3625=((1.0)*x3616);
evalcond[0]=(((r02*x3616))+(((-1.0)*x3618*x3624))+(((-1.0)*x3617*x3624)));
evalcond[1]=((((-1.0)*x3622*x3625))+(((-1.0)*x3619*x3625))+(((-1.0)*r22*x3624)));
evalcond[2]=((((-1.0)*x3621*x3625))+(((-1.0)*x3623*x3625))+(((-1.0)*r12*x3624)));
evalcond[3]=((-1.0)+(((-1.0)*x3618*x3625))+(((-1.0)*x3617*x3625))+(((-1.0)*r02*x3624)));
evalcond[4]=(((r22*x3616))+(((-1.0)*x3622*x3624))+(((-1.0)*sj2*x3620))+(((-1.0)*x3619*x3624))+((cj1*cj2)));
evalcond[5]=((((-1.0)*x3621*x3624))+(((-1.0)*cj1*sj2))+(((-1.0)*x3623*x3624))+(((-1.0)*cj2*x3620))+((r12*x3616)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3626=((1.0)*sj5);
CheckValue<IkReal> x3627=IKPowWithIntegerCheck(IKsign((((cj5*r10))+(((-1.0)*r11*x3626)))),-1);
if(!x3627.valid){
continue;
}
CheckValue<IkReal> x3628 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x3626))+(((-1.0)*cj5*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3628.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3627.value)))+(x3628.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3629=IKcos(j4);
IkReal x3630=IKsin(j4);
IkReal x3631=(r00*sj5);
IkReal x3632=(cj5*r01);
IkReal x3633=(r20*sj5);
IkReal x3634=((1.0)*sj1);
IkReal x3635=(cj5*r11);
IkReal x3636=(cj5*r21);
IkReal x3637=(r10*sj5);
IkReal x3638=((1.0)*x3629);
IkReal x3639=((1.0)*x3630);
evalcond[0]=(((r02*x3630))+(((-1.0)*x3631*x3638))+(((-1.0)*x3632*x3638)));
evalcond[1]=((((-1.0)*x3633*x3639))+(((-1.0)*r22*x3638))+(((-1.0)*x3636*x3639)));
evalcond[2]=((((-1.0)*x3637*x3639))+(((-1.0)*r12*x3638))+(((-1.0)*x3635*x3639)));
evalcond[3]=((-1.0)+(((-1.0)*x3631*x3639))+(((-1.0)*r02*x3638))+(((-1.0)*x3632*x3639)));
evalcond[4]=(((r22*x3630))+(((-1.0)*x3633*x3638))+((cj1*cj2))+(((-1.0)*sj2*x3634))+(((-1.0)*x3636*x3638)));
evalcond[5]=(((r12*x3630))+(((-1.0)*cj2*x3634))+(((-1.0)*x3637*x3638))+(((-1.0)*cj1*sj2))+(((-1.0)*x3635*x3638)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3640=((1.0)*cj5);
IkReal x3641=(((r11*sj5))+(((-1.0)*r10*x3640)));
j4eval[0]=x3641;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r21*x3640))+(((-1.0)*r20*sj5))))));
j4eval[2]=IKsign(x3641);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3642=((1.0)*sj5);
IkReal x3643=(((cj5*r20))+(((-1.0)*r21*x3642)));
j4eval[0]=x3643;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*cj5*r11))+(((-1.0)*r10*x3642))))));
j4eval[2]=IKsign(x3643);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3644=cj5*cj5;
IkReal x3645=r00*r00;
IkReal x3646=(cj5*r01);
IkReal x3647=(r00*sj5);
IkReal x3648=((((-2.0)*x3646*x3647))+(((-1.0)*(r02*r02)))+(((-1.0)*x3644*(r01*r01)))+(((-1.0)*x3645))+((x3644*x3645)));
j4eval[0]=x3648;
j4eval[1]=IKsign(x3648);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x3646))+(((-1.0)*x3647))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3649=cj5*cj5;
IkReal x3650=r00*r00;
IkReal x3651=(cj5*r01);
IkReal x3652=(r00*sj5);
CheckValue<IkReal> x3653 = IKatan2WithCheck(IkReal(((((-1.0)*x3651))+(((-1.0)*x3652)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x3653.valid){
continue;
}
CheckValue<IkReal> x3654=IKPowWithIntegerCheck(IKsign((((x3649*x3650))+(((-2.0)*x3651*x3652))+(((-1.0)*(r02*r02)))+(((-1.0)*x3649*(r01*r01)))+(((-1.0)*x3650)))),-1);
if(!x3654.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3653.value)+(((1.5707963267949)*(x3654.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3655=IKcos(j4);
IkReal x3656=IKsin(j4);
IkReal x3657=(r00*sj5);
IkReal x3658=(cj5*r01);
IkReal x3659=(r20*sj5);
IkReal x3660=(cj5*r21);
IkReal x3661=(cj5*r11);
IkReal x3662=(r10*sj5);
IkReal x3663=((1.0)*x3655);
IkReal x3664=((1.0)*x3656);
evalcond[0]=((((-1.0)*x3658*x3663))+((r02*x3656))+(((-1.0)*x3657*x3663)));
evalcond[1]=((((-1.0)*x3660*x3664))+(((-1.0)*x3659*x3664))+(((-1.0)*r22*x3663)));
evalcond[2]=((((-1.0)*x3662*x3664))+(((-1.0)*x3661*x3664))+(((-1.0)*r12*x3663)));
evalcond[3]=((1.0)+(((-1.0)*r02*x3663))+(((-1.0)*x3658*x3664))+(((-1.0)*x3657*x3664)));
evalcond[4]=((((-1.0)*x3662*x3663))+((cj2*sj1))+((r12*x3656))+(((-1.0)*x3661*x3663))+((cj1*sj2)));
evalcond[5]=((((-1.0)*x3660*x3663))+(((-1.0)*sj1*sj2))+(((-1.0)*x3659*x3663))+((cj1*cj2))+((r22*x3656)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3665=((1.0)*sj5);
CheckValue<IkReal> x3666=IKPowWithIntegerCheck(IKsign((((cj5*r20))+(((-1.0)*r21*x3665)))),-1);
if(!x3666.valid){
continue;
}
CheckValue<IkReal> x3667 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r11))+(((-1.0)*r10*x3665)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3667.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3666.value)))+(x3667.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3668=IKcos(j4);
IkReal x3669=IKsin(j4);
IkReal x3670=(r00*sj5);
IkReal x3671=(cj5*r01);
IkReal x3672=(r20*sj5);
IkReal x3673=(cj5*r21);
IkReal x3674=(cj5*r11);
IkReal x3675=(r10*sj5);
IkReal x3676=((1.0)*x3668);
IkReal x3677=((1.0)*x3669);
evalcond[0]=((((-1.0)*x3671*x3676))+(((-1.0)*x3670*x3676))+((r02*x3669)));
evalcond[1]=((((-1.0)*x3673*x3677))+(((-1.0)*x3672*x3677))+(((-1.0)*r22*x3676)));
evalcond[2]=((((-1.0)*r12*x3676))+(((-1.0)*x3675*x3677))+(((-1.0)*x3674*x3677)));
evalcond[3]=((1.0)+(((-1.0)*x3671*x3677))+(((-1.0)*x3670*x3677))+(((-1.0)*r02*x3676)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r12*x3669))+(((-1.0)*x3675*x3676))+(((-1.0)*x3674*x3676)));
evalcond[5]=(((r22*x3669))+(((-1.0)*sj1*sj2))+(((-1.0)*x3673*x3676))+(((-1.0)*x3672*x3676))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3678=((1.0)*cj5);
CheckValue<IkReal> x3679=IKPowWithIntegerCheck(IKsign((((r11*sj5))+(((-1.0)*r10*x3678)))),-1);
if(!x3679.valid){
continue;
}
CheckValue<IkReal> x3680 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x3678))+(((-1.0)*r20*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3680.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3679.value)))+(x3680.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3681=IKcos(j4);
IkReal x3682=IKsin(j4);
IkReal x3683=(r00*sj5);
IkReal x3684=(cj5*r01);
IkReal x3685=(r20*sj5);
IkReal x3686=(cj5*r21);
IkReal x3687=(cj5*r11);
IkReal x3688=(r10*sj5);
IkReal x3689=((1.0)*x3681);
IkReal x3690=((1.0)*x3682);
evalcond[0]=((((-1.0)*x3683*x3689))+(((-1.0)*x3684*x3689))+((r02*x3682)));
evalcond[1]=((((-1.0)*x3685*x3690))+(((-1.0)*r22*x3689))+(((-1.0)*x3686*x3690)));
evalcond[2]=((((-1.0)*x3688*x3690))+(((-1.0)*x3687*x3690))+(((-1.0)*r12*x3689)));
evalcond[3]=((1.0)+(((-1.0)*x3683*x3690))+(((-1.0)*r02*x3689))+(((-1.0)*x3684*x3690)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r12*x3682))+(((-1.0)*x3687*x3689))+(((-1.0)*x3688*x3689)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*x3686*x3689))+(((-1.0)*x3685*x3689))+((cj1*cj2))+((r22*x3682)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3693 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x3693)==0){
continue;
}
IkReal x3691=pow(x3693,-0.5);
IkReal x3692=((-1.0)*x3691);
CheckValue<IkReal> x3694 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x3694.valid){
continue;
}
IkReal gconst102=((-1.0)*(x3694.value));
IkReal gconst103=(r10*x3692);
IkReal gconst104=(r11*x3692);
CheckValue<IkReal> x3695 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x3695.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j5+(x3695.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x3699 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x3699.valid){
continue;
}
IkReal x3696=((-1.0)*(x3699.value));
IkReal x3697=x3691;
IkReal x3698=((-1.0)*x3697);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst103;
cj5=gconst104;
j5=x3696;
IkReal gconst102=x3696;
IkReal gconst103=(r10*x3698);
IkReal gconst104=(r11*x3698);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x3703 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x3703.valid){
continue;
}
IkReal x3700=((-1.0)*(x3703.value));
IkReal x3701=x3691;
IkReal x3702=((-1.0)*x3701);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst103;
cj5=gconst104;
j5=x3700;
IkReal gconst102=x3700;
IkReal gconst103=(r10*x3702);
IkReal gconst104=(r11*x3702);
IkReal x3704=r12*r12;
IkReal x3705=((1.0)*cj0);
IkReal x3706=(r02*sj0);
CheckValue<IkReal> x3710=IKPowWithIntegerCheck(((-1.0)+x3704),-1);
if(!x3710.valid){
continue;
}
IkReal x3707=x3710.value;
if((((1.0)+(((-1.0)*x3704)))) < -0.00001)
continue;
IkReal x3708=IKsqrt(((1.0)+(((-1.0)*x3704))));
IkReal x3709=(x3707*x3708);
j4eval[0]=((IKabs(((((-1.0)*x3704*x3705*x3709))+((cj0*x3709))+((r12*x3706*x3709)))))+(IKabs((x3706+(((-1.0)*r12*x3705))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x3714 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x3714.valid){
continue;
}
IkReal x3711=((-1.0)*(x3714.value));
IkReal x3712=x3691;
IkReal x3713=((-1.0)*x3712);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst103;
cj5=gconst104;
j5=x3711;
IkReal gconst102=x3711;
IkReal gconst103=(r10*x3713);
IkReal gconst104=(r11*x3713);
IkReal x3715=r12*r12;
IkReal x3716=((1.0)+(((-1.0)*x3715)));
IkReal x3717=(cj1*cj2*r22);
CheckValue<IkReal> x3725=IKPowWithIntegerCheck(x3716,-1);
if(!x3725.valid){
continue;
}
IkReal x3718=x3725.value;
CheckValue<IkReal> x3726=IKPowWithIntegerCheck(((-1.0)+x3715),-1);
if(!x3726.valid){
continue;
}
IkReal x3719=x3726.value;
IkReal x3720=((1.0)*x3718);
IkReal x3721=((1.0)*r22*sj1*sj2);
if((x3716) < -0.00001)
continue;
IkReal x3722=IKsqrt(x3716);
IkReal x3723=(r12*x3719*x3722);
IkReal x3724=((((-1.0)*x3720*(r11*r11)*(r21*r21)))+(((-1.0)*(r22*r22)))+(((-1.0)*x3720*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x3718)));
j4eval[0]=x3724;
j4eval[1]=((IKabs(((((-1.0)*x3721))+x3717)))+(IKabs((((x3717*x3723))+(((-1.0)*x3721*x3723))))));
j4eval[2]=IKsign(x3724);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3727=(sj1*sj2);
IkReal x3728=(gconst104*r21);
IkReal x3729=(gconst103*r20);
IkReal x3730=(cj1*cj2);
CheckValue<IkReal> x3731=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x3728*x3728)))+(((-1.0)*(x3729*x3729)))+(((-2.0)*x3728*x3729))+(((-1.0)*(r22*r22))))),-1);
if(!x3731.valid){
continue;
}
CheckValue<IkReal> x3732 = IKatan2WithCheck(IkReal((((r22*x3730))+(((-1.0)*r22*x3727)))),IkReal((((x3727*x3729))+((x3727*x3728))+(((-1.0)*x3729*x3730))+(((-1.0)*x3728*x3730)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3732.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3731.value)))+(x3732.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3733=IKsin(j4);
IkReal x3734=IKcos(j4);
IkReal x3735=(gconst103*r20);
IkReal x3736=(gconst104*r11);
IkReal x3737=(cj2*sj1);
IkReal x3738=(gconst104*r21);
IkReal x3739=((1.0)*sj2);
IkReal x3740=(gconst103*r10);
IkReal x3741=((1.0)*cj0);
IkReal x3742=(gconst104*r01);
IkReal x3743=(gconst103*r00);
IkReal x3744=((1.0)*x3734);
IkReal x3745=((1.0)*x3733);
evalcond[0]=((((-1.0)*r22*x3744))+(((-1.0)*x3738*x3745))+(((-1.0)*x3735*x3745)));
evalcond[1]=((((-1.0)*x3743*x3745))+(((-1.0)*x3741))+(((-1.0)*x3742*x3745))+(((-1.0)*r02*x3744)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x3740*x3745))+(((-1.0)*r12*x3744))+(((-1.0)*x3736*x3745)));
evalcond[3]=(((r22*x3733))+(((-1.0)*sj1*x3739))+((cj1*cj2))+(((-1.0)*x3738*x3744))+(((-1.0)*x3735*x3744)));
evalcond[4]=((((-1.0)*x3743*x3744))+((sj0*x3737))+((r02*x3733))+((cj1*sj0*sj2))+(((-1.0)*x3742*x3744)));
evalcond[5]=((((-1.0)*cj0*cj1*x3739))+(((-1.0)*x3740*x3744))+(((-1.0)*x3737*x3741))+((r12*x3733))+(((-1.0)*x3736*x3744)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3746=((1.0)*gconst103);
CheckValue<IkReal> x3747=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3746))+((gconst104*r20)))),-1);
if(!x3747.valid){
continue;
}
CheckValue<IkReal> x3748 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r12))+((r02*sj0)))),IkReal(((((-1.0)*r00*sj0*x3746))+((cj0*gconst103*r10))+((cj0*gconst104*r11))+(((-1.0)*gconst104*r01*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3748.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3747.value)))+(x3748.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3749=IKsin(j4);
IkReal x3750=IKcos(j4);
IkReal x3751=(gconst103*r20);
IkReal x3752=(gconst104*r11);
IkReal x3753=(cj2*sj1);
IkReal x3754=(gconst104*r21);
IkReal x3755=((1.0)*sj2);
IkReal x3756=(gconst103*r10);
IkReal x3757=((1.0)*cj0);
IkReal x3758=(gconst104*r01);
IkReal x3759=(gconst103*r00);
IkReal x3760=((1.0)*x3750);
IkReal x3761=((1.0)*x3749);
evalcond[0]=((((-1.0)*x3751*x3761))+(((-1.0)*r22*x3760))+(((-1.0)*x3754*x3761)));
evalcond[1]=((((-1.0)*x3757))+(((-1.0)*x3759*x3761))+(((-1.0)*r02*x3760))+(((-1.0)*x3758*x3761)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x3752*x3761))+(((-1.0)*x3756*x3761))+(((-1.0)*r12*x3760)));
evalcond[3]=((((-1.0)*x3751*x3760))+(((-1.0)*x3754*x3760))+((r22*x3749))+(((-1.0)*sj1*x3755))+((cj1*cj2)));
evalcond[4]=(((sj0*x3753))+(((-1.0)*x3759*x3760))+((cj1*sj0*sj2))+((r02*x3749))+(((-1.0)*x3758*x3760)));
evalcond[5]=((((-1.0)*x3752*x3760))+(((-1.0)*x3753*x3757))+((r12*x3749))+(((-1.0)*x3756*x3760))+(((-1.0)*cj0*cj1*x3755)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3762=((1.0)*sj0);
CheckValue<IkReal> x3763=IKPowWithIntegerCheck(IKsign((((gconst103*r01))+(((-1.0)*gconst104*r00)))),-1);
if(!x3763.valid){
continue;
}
CheckValue<IkReal> x3764 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst103*r20*x3762))+(((-1.0)*gconst104*r21*x3762)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3764.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3763.value)))+(x3764.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3765=IKsin(j4);
IkReal x3766=IKcos(j4);
IkReal x3767=(gconst103*r20);
IkReal x3768=(gconst104*r11);
IkReal x3769=(cj2*sj1);
IkReal x3770=(gconst104*r21);
IkReal x3771=((1.0)*sj2);
IkReal x3772=(gconst103*r10);
IkReal x3773=((1.0)*cj0);
IkReal x3774=(gconst104*r01);
IkReal x3775=(gconst103*r00);
IkReal x3776=((1.0)*x3766);
IkReal x3777=((1.0)*x3765);
evalcond[0]=((((-1.0)*r22*x3776))+(((-1.0)*x3767*x3777))+(((-1.0)*x3770*x3777)));
evalcond[1]=((((-1.0)*r02*x3776))+(((-1.0)*x3774*x3777))+(((-1.0)*x3775*x3777))+(((-1.0)*x3773)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x3768*x3777))+(((-1.0)*x3772*x3777))+(((-1.0)*r12*x3776)));
evalcond[3]=(((r22*x3765))+(((-1.0)*sj1*x3771))+(((-1.0)*x3767*x3776))+(((-1.0)*x3770*x3776))+((cj1*cj2)));
evalcond[4]=(((r02*x3765))+((cj1*sj0*sj2))+((sj0*x3769))+(((-1.0)*x3774*x3776))+(((-1.0)*x3775*x3776)));
evalcond[5]=((((-1.0)*x3769*x3773))+(((-1.0)*cj0*cj1*x3771))+((r12*x3765))+(((-1.0)*x3768*x3776))+(((-1.0)*x3772*x3776)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3780 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x3780)==0){
continue;
}
IkReal x3778=pow(x3780,-0.5);
IkReal x3779=((1.0)*x3778);
CheckValue<IkReal> x3781 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x3781.valid){
continue;
}
IkReal gconst105=((3.14159265358979)+(((-1.0)*(x3781.value))));
IkReal gconst106=(r10*x3779);
IkReal gconst107=(r11*x3779);
CheckValue<IkReal> x3782 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x3782.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5+(x3782.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
CheckValue<IkReal> x3786 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x3786.valid){
continue;
}
IkReal x3783=((1.0)*(x3786.value));
IkReal x3784=x3778;
IkReal x3785=((1.0)*x3784);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3783)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3783)));
IkReal gconst106=(r10*x3785);
IkReal gconst107=(r11*x3785);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x3790 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x3790.valid){
continue;
}
IkReal x3787=((1.0)*(x3790.value));
IkReal x3788=x3778;
IkReal x3789=((1.0)*x3788);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3787)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3787)));
IkReal gconst106=(r10*x3789);
IkReal gconst107=(r11*x3789);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3791=((1.0)*gconst106);
CheckValue<IkReal> x3792 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r12))+((r02*sj0)))),IkReal(((((-1.0)*r00*sj0*x3791))+(((-1.0)*gconst107*r01*sj0))+((cj0*gconst106*r10))+((cj0*gconst107*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3792.valid){
continue;
}
CheckValue<IkReal> x3793=IKPowWithIntegerCheck(IKsign((((gconst107*r20))+(((-1.0)*r21*x3791)))),-1);
if(!x3793.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3792.value)+(((1.5707963267949)*(x3793.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3794=IKsin(j4);
IkReal x3795=IKcos(j4);
IkReal x3796=(gconst107*r11);
IkReal x3797=(cj2*sj1);
IkReal x3798=(gconst106*r20);
IkReal x3799=((1.0)*sj2);
IkReal x3800=(gconst106*r00);
IkReal x3801=(gconst107*r01);
IkReal x3802=(gconst107*r21);
IkReal x3803=((1.0)*cj0);
IkReal x3804=(gconst106*r10);
IkReal x3805=((1.0)*x3795);
IkReal x3806=((1.0)*x3794);
evalcond[0]=((((-1.0)*x3802*x3806))+(((-1.0)*x3798*x3806))+(((-1.0)*r22*x3805)));
evalcond[1]=((((-1.0)*x3801*x3806))+(((-1.0)*x3800*x3806))+(((-1.0)*x3803))+(((-1.0)*r02*x3805)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x3796*x3806))+(((-1.0)*r12*x3805))+(((-1.0)*x3804*x3806)));
evalcond[3]=(((r22*x3794))+(((-1.0)*sj1*x3799))+(((-1.0)*x3802*x3805))+((cj1*cj2))+(((-1.0)*x3798*x3805)));
evalcond[4]=((((-1.0)*x3801*x3805))+((r02*x3794))+(((-1.0)*x3800*x3805))+((cj1*sj0*sj2))+((sj0*x3797)));
evalcond[5]=((((-1.0)*x3796*x3805))+(((-1.0)*x3797*x3803))+((r12*x3794))+(((-1.0)*cj0*cj1*x3799))+(((-1.0)*x3804*x3805)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3807=((1.0)*gconst107);
CheckValue<IkReal> x3808=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x3807))+((gconst106*r01)))),-1);
if(!x3808.valid){
continue;
}
CheckValue<IkReal> x3809 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst106*r20*sj0))+(((-1.0)*r21*sj0*x3807)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3809.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3808.value)))+(x3809.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3810=IKsin(j4);
IkReal x3811=IKcos(j4);
IkReal x3812=(gconst107*r11);
IkReal x3813=(cj2*sj1);
IkReal x3814=(gconst106*r20);
IkReal x3815=((1.0)*sj2);
IkReal x3816=(gconst106*r00);
IkReal x3817=(gconst107*r01);
IkReal x3818=(gconst107*r21);
IkReal x3819=((1.0)*cj0);
IkReal x3820=(gconst106*r10);
IkReal x3821=((1.0)*x3811);
IkReal x3822=((1.0)*x3810);
evalcond[0]=((((-1.0)*r22*x3821))+(((-1.0)*x3814*x3822))+(((-1.0)*x3818*x3822)));
evalcond[1]=((((-1.0)*r02*x3821))+(((-1.0)*x3817*x3822))+(((-1.0)*x3819))+(((-1.0)*x3816*x3822)));
evalcond[2]=((((-1.0)*r12*x3821))+(((-1.0)*sj0))+(((-1.0)*x3812*x3822))+(((-1.0)*x3820*x3822)));
evalcond[3]=((((-1.0)*x3814*x3821))+(((-1.0)*sj1*x3815))+((r22*x3810))+((cj1*cj2))+(((-1.0)*x3818*x3821)));
evalcond[4]=((((-1.0)*x3817*x3821))+((cj1*sj0*sj2))+((r02*x3810))+((sj0*x3813))+(((-1.0)*x3816*x3821)));
evalcond[5]=(((r12*x3810))+(((-1.0)*cj0*cj1*x3815))+(((-1.0)*x3813*x3819))+(((-1.0)*x3812*x3821))+(((-1.0)*x3820*x3821)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3823=((1.0)*gconst106);
CheckValue<IkReal> x3824=IKPowWithIntegerCheck(IKsign((((gconst107*r10))+(((-1.0)*r11*x3823)))),-1);
if(!x3824.valid){
continue;
}
CheckValue<IkReal> x3825 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst107*r21))+(((-1.0)*cj0*r20*x3823)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3825.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3824.value)))+(x3825.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3826=IKsin(j4);
IkReal x3827=IKcos(j4);
IkReal x3828=(gconst107*r11);
IkReal x3829=(cj2*sj1);
IkReal x3830=(gconst106*r20);
IkReal x3831=((1.0)*sj2);
IkReal x3832=(gconst106*r00);
IkReal x3833=(gconst107*r01);
IkReal x3834=(gconst107*r21);
IkReal x3835=((1.0)*cj0);
IkReal x3836=(gconst106*r10);
IkReal x3837=((1.0)*x3827);
IkReal x3838=((1.0)*x3826);
evalcond[0]=((((-1.0)*x3830*x3838))+(((-1.0)*r22*x3837))+(((-1.0)*x3834*x3838)));
evalcond[1]=((((-1.0)*x3832*x3838))+(((-1.0)*x3833*x3838))+(((-1.0)*r02*x3837))+(((-1.0)*x3835)));
evalcond[2]=((((-1.0)*x3828*x3838))+(((-1.0)*sj0))+(((-1.0)*r12*x3837))+(((-1.0)*x3836*x3838)));
evalcond[3]=((((-1.0)*x3830*x3837))+((r22*x3826))+(((-1.0)*x3834*x3837))+((cj1*cj2))+(((-1.0)*sj1*x3831)));
evalcond[4]=((((-1.0)*x3832*x3837))+(((-1.0)*x3833*x3837))+((cj1*sj0*sj2))+((r02*x3826))+((sj0*x3829)));
evalcond[5]=(((r12*x3826))+(((-1.0)*x3828*x3837))+(((-1.0)*x3829*x3835))+(((-1.0)*cj0*cj1*x3831))+(((-1.0)*x3836*x3837)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x3839=((1.0)*cj5);
IkReal x3840=(((r01*sj5))+(((-1.0)*r00*x3839)));
j4eval[0]=x3840;
j4eval[1]=IKsign(x3840);
j4eval[2]=((IKabs(((((-1.0)*r21*x3839))+(((-1.0)*r20*sj5)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x3841=((1.0)*sj5);
IkReal x3842=(((cj5*r20))+(((-1.0)*r21*x3841)));
j4eval[0]=x3842;
j4eval[1]=IKsign(x3842);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*r00*x3841))+(((-1.0)*cj5*r01))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x3843=cj5*cj5;
IkReal x3844=r10*r10;
IkReal x3845=(cj5*r11);
IkReal x3846=(r10*sj5);
IkReal x3847=((r12*r12)+(((-1.0)*x3843*x3844))+(((2.0)*x3845*x3846))+x3844+((x3843*(r11*r11))));
j4eval[0]=x3847;
j4eval[1]=IKsign(x3847);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x3846))+(((-1.0)*x3845))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3848=cj5*cj5;
IkReal x3849=r10*r10;
IkReal x3850=(cj5*r11);
IkReal x3851=(r10*sj5);
CheckValue<IkReal> x3852 = IKatan2WithCheck(IkReal(((((-1.0)*x3850))+(((-1.0)*x3851)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x3852.valid){
continue;
}
CheckValue<IkReal> x3853=IKPowWithIntegerCheck(IKsign(((r12*r12)+((x3848*(r11*r11)))+x3849+(((2.0)*x3850*x3851))+(((-1.0)*x3848*x3849)))),-1);
if(!x3853.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3852.value)+(((1.5707963267949)*(x3853.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3854=IKcos(j4);
IkReal x3855=IKsin(j4);
IkReal x3856=(r00*sj5);
IkReal x3857=(cj5*r01);
IkReal x3858=(r20*sj5);
IkReal x3859=(cj5*r21);
IkReal x3860=(cj5*r11);
IkReal x3861=(r10*sj5);
IkReal x3862=((1.0)*x3854);
IkReal x3863=((1.0)*x3855);
evalcond[0]=((((-1.0)*x3860*x3862))+(((-1.0)*x3861*x3862))+((r12*x3855)));
evalcond[1]=((((-1.0)*x3858*x3863))+(((-1.0)*x3859*x3863))+(((-1.0)*r22*x3862)));
evalcond[2]=((((-1.0)*r02*x3862))+(((-1.0)*x3857*x3863))+(((-1.0)*x3856*x3863)));
evalcond[3]=((-1.0)+(((-1.0)*x3860*x3863))+(((-1.0)*x3861*x3863))+(((-1.0)*r12*x3862)));
evalcond[4]=(((r02*x3855))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x3857*x3862))+(((-1.0)*x3856*x3862)));
evalcond[5]=((((-1.0)*x3858*x3862))+(((-1.0)*sj1*sj2))+(((-1.0)*x3859*x3862))+((cj1*cj2))+((r22*x3855)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3864=((1.0)*sj5);
CheckValue<IkReal> x3865 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x3864))+(((-1.0)*cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3865.valid){
continue;
}
CheckValue<IkReal> x3866=IKPowWithIntegerCheck(IKsign((((cj5*r20))+(((-1.0)*r21*x3864)))),-1);
if(!x3866.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3865.value)+(((1.5707963267949)*(x3866.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3867=IKcos(j4);
IkReal x3868=IKsin(j4);
IkReal x3869=(r00*sj5);
IkReal x3870=(cj5*r01);
IkReal x3871=(r20*sj5);
IkReal x3872=(cj5*r21);
IkReal x3873=(cj5*r11);
IkReal x3874=(r10*sj5);
IkReal x3875=((1.0)*x3867);
IkReal x3876=((1.0)*x3868);
evalcond[0]=((((-1.0)*x3873*x3875))+(((-1.0)*x3874*x3875))+((r12*x3868)));
evalcond[1]=((((-1.0)*x3871*x3876))+(((-1.0)*r22*x3875))+(((-1.0)*x3872*x3876)));
evalcond[2]=((((-1.0)*x3870*x3876))+(((-1.0)*r02*x3875))+(((-1.0)*x3869*x3876)));
evalcond[3]=((-1.0)+(((-1.0)*x3873*x3876))+(((-1.0)*r12*x3875))+(((-1.0)*x3874*x3876)));
evalcond[4]=(((cj2*sj1))+((r02*x3868))+((cj1*sj2))+(((-1.0)*x3870*x3875))+(((-1.0)*x3869*x3875)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*x3871*x3875))+((cj1*cj2))+((r22*x3868))+(((-1.0)*x3872*x3875)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3877=((1.0)*cj5);
CheckValue<IkReal> x3878=IKPowWithIntegerCheck(IKsign((((r01*sj5))+(((-1.0)*r00*x3877)))),-1);
if(!x3878.valid){
continue;
}
CheckValue<IkReal> x3879 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x3877))+(((-1.0)*r20*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3879.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3878.value)))+(x3879.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3880=IKcos(j4);
IkReal x3881=IKsin(j4);
IkReal x3882=(r00*sj5);
IkReal x3883=(cj5*r01);
IkReal x3884=(r20*sj5);
IkReal x3885=(cj5*r21);
IkReal x3886=(cj5*r11);
IkReal x3887=(r10*sj5);
IkReal x3888=((1.0)*x3880);
IkReal x3889=((1.0)*x3881);
evalcond[0]=(((r12*x3881))+(((-1.0)*x3887*x3888))+(((-1.0)*x3886*x3888)));
evalcond[1]=((((-1.0)*r22*x3888))+(((-1.0)*x3885*x3889))+(((-1.0)*x3884*x3889)));
evalcond[2]=((((-1.0)*r02*x3888))+(((-1.0)*x3883*x3889))+(((-1.0)*x3882*x3889)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x3888))+(((-1.0)*x3887*x3889))+(((-1.0)*x3886*x3889)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x3883*x3888))+((r02*x3881))+(((-1.0)*x3882*x3888)));
evalcond[5]=(((r22*x3881))+(((-1.0)*sj1*sj2))+(((-1.0)*x3885*x3888))+((cj1*cj2))+(((-1.0)*x3884*x3888)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3890=((1.0)*sj5);
IkReal x3891=((((-1.0)*r01*x3890))+((cj5*r00)));
j4eval[0]=x3891;
j4eval[1]=IKsign(x3891);
j4eval[2]=((IKabs(((((-1.0)*r20*x3890))+(((-1.0)*cj5*r21)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3892=((1.0)*cj5);
IkReal x3893=(((r21*sj5))+(((-1.0)*r20*x3892)));
j4eval[0]=x3893;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3892))))));
j4eval[2]=IKsign(x3893);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3894=(r10*sj5);
IkReal x3895=(sj1*sj2);
IkReal x3896=(cj5*r11);
IkReal x3897=((1.0)*cj1*cj2);
IkReal x3898=((((-1.0)*r01*sj5))+((cj5*r00)));
j4eval[0]=x3898;
j4eval[1]=IKsign(x3898);
j4eval[2]=((IKabs((((x3895*x3896))+((x3894*x3895))+(((-1.0)*x3896*x3897))+(((-1.0)*x3894*x3897)))))+(IKabs(((((-1.0)*r12*x3897))+((r12*x3895))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3899=(r10*sj5);
IkReal x3900=(sj1*sj2);
IkReal x3901=(cj5*r11);
IkReal x3902=((1.0)*cj1*cj2);
CheckValue<IkReal> x3903=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj5))+((cj5*r00)))),-1);
if(!x3903.valid){
continue;
}
CheckValue<IkReal> x3904 = IKatan2WithCheck(IkReal((((x3900*x3901))+(((-1.0)*x3901*x3902))+((x3899*x3900))+(((-1.0)*x3899*x3902)))),IkReal(((((-1.0)*r12*x3902))+((r12*x3900)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3904.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3903.value)))+(x3904.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3905=IKcos(j4);
IkReal x3906=IKsin(j4);
IkReal x3907=(r00*sj5);
IkReal x3908=(cj5*r01);
IkReal x3909=(r20*sj5);
IkReal x3910=((1.0)*sj2);
IkReal x3911=(cj5*r21);
IkReal x3912=(cj5*r11);
IkReal x3913=(r10*sj5);
IkReal x3914=((1.0)*x3905);
IkReal x3915=((1.0)*x3906);
evalcond[0]=((((-1.0)*x3912*x3914))+((r12*x3906))+(((-1.0)*x3913*x3914)));
evalcond[1]=((((-1.0)*x3911*x3915))+(((-1.0)*r22*x3914))+(((-1.0)*x3909*x3915)));
evalcond[2]=((((-1.0)*r02*x3914))+(((-1.0)*x3908*x3915))+(((-1.0)*x3907*x3915)));
evalcond[3]=((1.0)+(((-1.0)*x3912*x3915))+(((-1.0)*x3913*x3915))+(((-1.0)*r12*x3914)));
evalcond[4]=((((-1.0)*x3911*x3914))+((r22*x3906))+(((-1.0)*sj1*x3910))+(((-1.0)*x3909*x3914))+((cj1*cj2)));
evalcond[5]=((((-1.0)*x3908*x3914))+(((-1.0)*cj2*sj1))+(((-1.0)*x3907*x3914))+(((-1.0)*cj1*x3910))+((r02*x3906)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3916=((1.0)*cj5);
CheckValue<IkReal> x3917 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*x3916))+(((-1.0)*r00*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3917.valid){
continue;
}
CheckValue<IkReal> x3918=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x3916))+((r21*sj5)))),-1);
if(!x3918.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3917.value)+(((1.5707963267949)*(x3918.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3919=IKcos(j4);
IkReal x3920=IKsin(j4);
IkReal x3921=(r00*sj5);
IkReal x3922=(cj5*r01);
IkReal x3923=(r20*sj5);
IkReal x3924=((1.0)*sj2);
IkReal x3925=(cj5*r21);
IkReal x3926=(cj5*r11);
IkReal x3927=(r10*sj5);
IkReal x3928=((1.0)*x3919);
IkReal x3929=((1.0)*x3920);
evalcond[0]=(((r12*x3920))+(((-1.0)*x3927*x3928))+(((-1.0)*x3926*x3928)));
evalcond[1]=((((-1.0)*x3925*x3929))+(((-1.0)*r22*x3928))+(((-1.0)*x3923*x3929)));
evalcond[2]=((((-1.0)*x3922*x3929))+(((-1.0)*r02*x3928))+(((-1.0)*x3921*x3929)));
evalcond[3]=((1.0)+(((-1.0)*x3927*x3929))+(((-1.0)*r12*x3928))+(((-1.0)*x3926*x3929)));
evalcond[4]=((((-1.0)*x3925*x3928))+(((-1.0)*x3923*x3928))+((r22*x3920))+((cj1*cj2))+(((-1.0)*sj1*x3924)));
evalcond[5]=((((-1.0)*cj1*x3924))+(((-1.0)*x3922*x3928))+(((-1.0)*cj2*sj1))+((r02*x3920))+(((-1.0)*x3921*x3928)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3930=((1.0)*sj5);
CheckValue<IkReal> x3931 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x3930))+(((-1.0)*cj5*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3931.valid){
continue;
}
CheckValue<IkReal> x3932=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3930))+((cj5*r00)))),-1);
if(!x3932.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3931.value)+(((1.5707963267949)*(x3932.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3933=IKcos(j4);
IkReal x3934=IKsin(j4);
IkReal x3935=(r00*sj5);
IkReal x3936=(cj5*r01);
IkReal x3937=(r20*sj5);
IkReal x3938=((1.0)*sj2);
IkReal x3939=(cj5*r21);
IkReal x3940=(cj5*r11);
IkReal x3941=(r10*sj5);
IkReal x3942=((1.0)*x3933);
IkReal x3943=((1.0)*x3934);
evalcond[0]=((((-1.0)*x3941*x3942))+(((-1.0)*x3940*x3942))+((r12*x3934)));
evalcond[1]=((((-1.0)*x3937*x3943))+(((-1.0)*r22*x3942))+(((-1.0)*x3939*x3943)));
evalcond[2]=((((-1.0)*r02*x3942))+(((-1.0)*x3935*x3943))+(((-1.0)*x3936*x3943)));
evalcond[3]=((1.0)+(((-1.0)*x3941*x3943))+(((-1.0)*x3940*x3943))+(((-1.0)*r12*x3942)));
evalcond[4]=(((r22*x3934))+(((-1.0)*sj1*x3938))+(((-1.0)*x3937*x3942))+(((-1.0)*x3939*x3942))+((cj1*cj2)));
evalcond[5]=((((-1.0)*cj1*x3938))+(((-1.0)*cj2*sj1))+(((-1.0)*x3935*x3942))+((r02*x3934))+(((-1.0)*x3936*x3942)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3944=((-1.0)*py);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x3944);
rxp0_2=(py*r00);
rxp1_0=(r21*x3944);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3945=((-1.0)*py);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x3945);
rxp0_2=(py*r00);
rxp1_0=(r21*x3945);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3946=((-1.0)*py);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x3946);
rxp0_2=(py*r00);
rxp1_0=(r21*x3946);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3949=IKPowWithIntegerCheck(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01))),-1);
if(!x3949.valid){
continue;
}
IkReal x3947=x3949.value;
IkReal x3948=((1.0)*sj0*x3947);
cj4array[0]=((((-1.0)*cj1*sj2*x3948))+(((-1.0)*cj2*sj1*x3948)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3950=IKsin(j4);
IkReal x3951=IKcos(j4);
IkReal x3952=(r20*sj5);
IkReal x3953=((1.0)*cj5*r21);
IkReal x3954=((1.0)*x3951);
IkReal x3955=((1.0)*x3950);
evalcond[0]=(r12*x3950);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r12*x3954)));
evalcond[2]=((((-1.0)*x3950*x3953))+(((-1.0)*x3952*x3955)));
evalcond[3]=((((-1.0)*cj5*r01*x3955))+(((-1.0)*r00*sj5*x3955)));
evalcond[4]=((((-1.0)*sj1*sj2))+(((-1.0)*x3952*x3954))+(((-1.0)*x3951*x3953))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3957=IKPowWithIntegerCheck(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5))),-1);
if(!x3957.valid){
continue;
}
IkReal x3956=x3957.value;
cj4array[0]=((((-1.0)*cj1*cj2*x3956))+((sj1*sj2*x3956)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3958=IKsin(j4);
IkReal x3959=IKcos(j4);
IkReal x3960=((1.0)*cj5);
IkReal x3961=(r00*sj5);
IkReal x3962=((1.0)*x3959);
IkReal x3963=((1.0)*x3958);
evalcond[0]=(r12*x3958);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r12*x3962)));
evalcond[2]=((((-1.0)*r20*sj5*x3963))+(((-1.0)*r21*x3958*x3960)));
evalcond[3]=((((-1.0)*x3961*x3963))+(((-1.0)*r01*x3958*x3960)));
evalcond[4]=(((cj1*sj0*sj2))+((cj2*sj0*sj1))+(((-1.0)*x3961*x3962))+(((-1.0)*r01*x3959*x3960)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3964=IKPowWithIntegerCheck(r12,-1);
if(!x3964.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x3964.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3965=IKsin(j4);
IkReal x3966=IKcos(j4);
IkReal x3967=((1.0)*cj5);
IkReal x3968=((1.0)*r00*sj5);
IkReal x3969=((1.0)*r20*sj5);
evalcond[0]=(r12*x3965);
evalcond[1]=((((-1.0)*x3965*x3969))+(((-1.0)*r21*x3965*x3967)));
evalcond[2]=((((-1.0)*r01*x3965*x3967))+(((-1.0)*x3965*x3968)));
evalcond[3]=((((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*x3966*x3969))+(((-1.0)*r21*x3966*x3967)));
evalcond[4]=(((cj1*sj0*sj2))+((cj2*sj0*sj1))+(((-1.0)*x3966*x3968))+(((-1.0)*r01*x3966*x3967)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3970=((1.0)*sj0);
CheckValue<IkReal> x3971 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r12))+((r02*sj0)))),IkReal(((((-1.0)*cj5*r01*x3970))+((cj0*cj5*r11))+((cj0*r10*sj5))+(((-1.0)*r00*sj5*x3970)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3971.valid){
continue;
}
CheckValue<IkReal> x3972=IKPowWithIntegerCheck(IKsign((((cj5*r20))+(((-1.0)*r21*sj5)))),-1);
if(!x3972.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3971.value)+(((1.5707963267949)*(x3972.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3973=IKsin(j4);
IkReal x3974=IKcos(j4);
IkReal x3975=(cj2*sj1);
IkReal x3976=(r00*sj5);
IkReal x3977=(cj5*r01);
IkReal x3978=(r20*sj5);
IkReal x3979=((1.0)*sj2);
IkReal x3980=(cj5*r21);
IkReal x3981=(cj5*r11);
IkReal x3982=((1.0)*cj0);
IkReal x3983=(r10*sj5);
IkReal x3984=((1.0)*x3974);
IkReal x3985=((1.0)*x3973);
evalcond[0]=((((-1.0)*r22*x3984))+(((-1.0)*x3978*x3985))+(((-1.0)*x3980*x3985)));
evalcond[1]=((((-1.0)*x3977*x3985))+(((-1.0)*x3976*x3985))+(((-1.0)*x3982))+(((-1.0)*r02*x3984)));
evalcond[2]=((((-1.0)*r12*x3984))+(((-1.0)*sj0))+(((-1.0)*x3981*x3985))+(((-1.0)*x3983*x3985)));
evalcond[3]=(((r22*x3973))+(((-1.0)*x3978*x3984))+(((-1.0)*sj1*x3979))+((cj1*cj2))+(((-1.0)*x3980*x3984)));
evalcond[4]=((((-1.0)*x3977*x3984))+((r02*x3973))+(((-1.0)*x3976*x3984))+((cj1*sj0*sj2))+((sj0*x3975)));
evalcond[5]=((((-1.0)*x3981*x3984))+(((-1.0)*cj0*cj1*x3979))+((r12*x3973))+(((-1.0)*x3983*x3984))+(((-1.0)*x3975*x3982)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3986=((1.0)*sj0);
CheckValue<IkReal> x3987 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r21*x3986))+(((-1.0)*r20*sj5*x3986)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3987.valid){
continue;
}
CheckValue<IkReal> x3988=IKPowWithIntegerCheck(IKsign((((r01*sj5))+(((-1.0)*cj5*r00)))),-1);
if(!x3988.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3987.value)+(((1.5707963267949)*(x3988.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3989=IKsin(j4);
IkReal x3990=IKcos(j4);
IkReal x3991=(cj2*sj1);
IkReal x3992=(r00*sj5);
IkReal x3993=(cj5*r01);
IkReal x3994=(r20*sj5);
IkReal x3995=((1.0)*sj2);
IkReal x3996=(cj5*r21);
IkReal x3997=(cj5*r11);
IkReal x3998=((1.0)*cj0);
IkReal x3999=(r10*sj5);
IkReal x4000=((1.0)*x3990);
IkReal x4001=((1.0)*x3989);
evalcond[0]=((((-1.0)*r22*x4000))+(((-1.0)*x3994*x4001))+(((-1.0)*x3996*x4001)));
evalcond[1]=((((-1.0)*r02*x4000))+(((-1.0)*x3998))+(((-1.0)*x3993*x4001))+(((-1.0)*x3992*x4001)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x3999*x4001))+(((-1.0)*x3997*x4001))+(((-1.0)*r12*x4000)));
evalcond[3]=((((-1.0)*sj1*x3995))+(((-1.0)*x3994*x4000))+(((-1.0)*x3996*x4000))+((cj1*cj2))+((r22*x3989)));
evalcond[4]=((((-1.0)*x3993*x4000))+(((-1.0)*x3992*x4000))+((cj1*sj0*sj2))+((sj0*x3991))+((r02*x3989)));
evalcond[5]=((((-1.0)*x3999*x4000))+(((-1.0)*cj0*cj1*x3995))+(((-1.0)*x3991*x3998))+(((-1.0)*x3997*x4000))+((r12*x3989)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4002=((1.0)*cj0);
CheckValue<IkReal> x4003=IKPowWithIntegerCheck(IKsign((((cj5*r10))+(((-1.0)*r11*sj5)))),-1);
if(!x4003.valid){
continue;
}
CheckValue<IkReal> x4004 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj5*r21*x4002))+(((-1.0)*r20*sj5*x4002)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4004.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4003.value)))+(x4004.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4005=IKsin(j4);
IkReal x4006=IKcos(j4);
IkReal x4007=(cj2*sj1);
IkReal x4008=(r00*sj5);
IkReal x4009=(cj5*r01);
IkReal x4010=(r20*sj5);
IkReal x4011=((1.0)*sj2);
IkReal x4012=(cj5*r21);
IkReal x4013=(cj5*r11);
IkReal x4014=((1.0)*cj0);
IkReal x4015=(r10*sj5);
IkReal x4016=((1.0)*x4006);
IkReal x4017=((1.0)*x4005);
evalcond[0]=((((-1.0)*x4012*x4017))+(((-1.0)*r22*x4016))+(((-1.0)*x4010*x4017)));
evalcond[1]=((((-1.0)*r02*x4016))+(((-1.0)*x4014))+(((-1.0)*x4008*x4017))+(((-1.0)*x4009*x4017)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r12*x4016))+(((-1.0)*x4013*x4017))+(((-1.0)*x4015*x4017)));
evalcond[3]=((((-1.0)*x4012*x4016))+((r22*x4005))+((cj1*cj2))+(((-1.0)*sj1*x4011))+(((-1.0)*x4010*x4016)));
evalcond[4]=(((sj0*x4007))+((cj1*sj0*sj2))+((r02*x4005))+(((-1.0)*x4008*x4016))+(((-1.0)*x4009*x4016)));
evalcond[5]=((((-1.0)*cj0*cj1*x4011))+((r12*x4005))+(((-1.0)*x4013*x4016))+(((-1.0)*x4015*x4016))+(((-1.0)*x4007*x4014)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4018=r20*r20;
IkReal x4019=cj5*cj5;
IkReal x4020=(cj5*r21);
IkReal x4021=(sj1*sj2);
IkReal x4022=(r20*sj5);
IkReal x4023=((1.0)*cj1*cj2);
CheckValue<IkReal> x4024 = IKatan2WithCheck(IkReal((((cj1*cj2*r22))+(((-1.0)*r22*x4021)))),IkReal((((x4021*x4022))+((x4020*x4021))+(((-1.0)*x4022*x4023))+(((-1.0)*x4020*x4023)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4024.valid){
continue;
}
CheckValue<IkReal> x4025=IKPowWithIntegerCheck(IKsign(((((-2.0)*x4020*x4022))+(((-1.0)*x4018))+((x4018*x4019))+(((-1.0)*(r22*r22)))+(((-1.0)*x4019*(r21*r21))))),-1);
if(!x4025.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4024.value)+(((1.5707963267949)*(x4025.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x4026=IKsin(j4);
IkReal x4027=IKcos(j4);
IkReal x4028=(cj5*r21);
IkReal x4029=(r20*sj5);
IkReal x4030=((1.0)*x4027);
IkReal x4031=((1.0)*x4026);
evalcond[0]=((((-1.0)*r22*x4030))+(((-1.0)*x4028*x4031))+(((-1.0)*x4029*x4031)));
evalcond[1]=((((-1.0)*sj1*sj2))+(((-1.0)*x4028*x4030))+(((-1.0)*x4029*x4030))+((cj1*cj2))+((r22*x4026)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4032=((1.0)*cj4);
IkReal x4033=((1.0)*sj4*sj5);
IkReal x4034=((1.0)*cj5*sj4);
if( IKabs(((((-1.0)*r12*x4032))+(((-1.0)*r11*x4034))+(((-1.0)*r10*x4033)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x4033))+(((-1.0)*r01*x4034))+(((-1.0)*r02*x4032)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r12*x4032))+(((-1.0)*r11*x4034))+(((-1.0)*r10*x4033))))+IKsqr(((((-1.0)*r00*x4033))+(((-1.0)*r01*x4034))+(((-1.0)*r02*x4032))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r12*x4032))+(((-1.0)*r11*x4034))+(((-1.0)*r10*x4033))), ((((-1.0)*r00*x4033))+(((-1.0)*r01*x4034))+(((-1.0)*r02*x4032))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x4035=IKsin(j0);
IkReal x4036=IKcos(j0);
IkReal x4037=((0.1005)*cj5);
IkReal x4038=(cj1*sj2);
IkReal x4039=(cj1*cj2);
IkReal x4040=(cj2*sj1);
IkReal x4041=((1.0)*sj5);
IkReal x4042=((1.0)*cj5);
IkReal x4043=((1.0)*cj4);
IkReal x4044=((0.1005)*sj5);
IkReal x4045=(sj1*x4036);
IkReal x4046=((0.3495)*x4035);
IkReal x4047=((1.0)*x4036);
IkReal x4048=(sj4*x4041);
IkReal x4049=((1.0)*x4035);
IkReal x4050=(sj1*x4035);
evalcond[0]=((((-1.0)*r00*x4048))+(((-1.0)*r01*sj4*x4042))+(((-1.0)*r02*x4043))+(((-1.0)*x4047)));
evalcond[1]=((((-1.0)*r10*x4048))+(((-1.0)*r12*x4043))+(((-1.0)*r11*sj4*x4042))+(((-1.0)*x4049)));
evalcond[2]=(((sj2*x4050))+(((-1.0)*x4039*x4049))+(((-1.0)*r01*x4041))+((cj5*r00)));
evalcond[3]=(((cj5*r10))+((x4036*x4039))+(((-1.0)*r11*x4041))+(((-1.0)*sj2*x4045)));
evalcond[4]=(((x4035*x4040))+((x4035*x4038))+(((-1.0)*cj4*r00*x4041))+((r02*sj4))+(((-1.0)*cj4*r01*x4042)));
evalcond[5]=((((-1.0)*cj4*r11*x4042))+(((-1.0)*x4040*x4047))+((r12*sj4))+(((-1.0)*cj4*r10*x4041))+(((-1.0)*x4038*x4047)));
evalcond[6]=((((-1.0)*r00*x4037))+(((0.1002)*x4036))+(((-1.0)*px))+(((-1.0)*x4040*x4046))+(((-0.3484)*x4050))+((r01*x4044))+(((-1.0)*x4038*x4046)));
evalcond[7]=((((0.1002)*x4035))+(((0.3495)*x4036*x4040))+(((-1.0)*py))+((r11*x4044))+(((0.3495)*x4036*x4038))+(((0.3484)*x4045))+(((-1.0)*r10*x4037)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x4051 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal((((cj5*r10))+(((-1.0)*r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4051.valid){
continue;
}
CheckValue<IkReal> x4052=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj1*cj2))+((sj1*sj2)))),-1);
if(!x4052.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x4051.value)+(((1.5707963267949)*(x4052.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x4053=IKsin(j0);
IkReal x4054=IKcos(j0);
IkReal x4055=((0.3495)*sj1);
IkReal x4056=((0.1005)*cj5);
IkReal x4057=((1.0)*sj5);
IkReal x4058=((0.1005)*sj5);
IkReal x4059=(cj2*x4054);
IkReal x4060=((0.3495)*cj1*sj2);
IkReal x4061=(cj2*x4053);
IkReal x4062=(sj1*x4054);
IkReal x4063=(sj1*x4053);
evalcond[0]=((((-1.0)*cj1*x4061))+((sj2*x4063))+(((-1.0)*r01*x4057))+((cj5*r00)));
evalcond[1]=(((cj5*r10))+(((-1.0)*r11*x4057))+(((-1.0)*sj2*x4062))+((cj1*x4059)));
evalcond[2]=((((-1.0)*x4055*x4061))+(((-1.0)*x4053*x4060))+(((-1.0)*px))+(((-0.3484)*x4063))+(((-1.0)*r00*x4056))+((r01*x4058))+(((0.1002)*x4054)));
evalcond[3]=((((0.3484)*x4062))+((r11*x4058))+(((-1.0)*py))+((x4054*x4060))+(((-1.0)*r10*x4056))+((x4055*x4059))+(((0.1002)*x4053)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x4064=((1.0)*sj5);
IkReal x4065=(((cj5*r10))+(((-1.0)*r11*x4064)));
j4eval[0]=x4065;
j4eval[1]=IKsign(x4065);
j4eval[2]=((IKabs(((((-1.0)*cj0*cj5*r21))+(((-1.0)*cj0*r20*x4064)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x4066=((1.0)*cj5);
IkReal x4067=(((r01*sj5))+(((-1.0)*r00*x4066)));
j4eval[0]=x4067;
j4eval[1]=IKsign(x4067);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r21*sj0*x4066))+(((-1.0)*r20*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x4068=((1.0)*sj0);
IkReal x4069=(((cj5*r20))+(((-1.0)*r21*sj5)));
j4eval[0]=x4069;
j4eval[1]=((IKabs((((cj0*cj5*r11))+(((-1.0)*r00*sj5*x4068))+((cj0*r10*sj5))+(((-1.0)*cj5*r01*x4068)))))+(IKabs(((((-1.0)*cj0*r12))+((r02*sj0))))));
j4eval[2]=IKsign(x4069);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x4070=((-1.0)*r21);
IkReal x4072 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x4072)==0){
continue;
}
IkReal x4071=pow(x4072,-0.5);
CheckValue<IkReal> x4073 = IKatan2WithCheck(IkReal(r20),IkReal(x4070),IKFAST_ATAN2_MAGTHRESH);
if(!x4073.valid){
continue;
}
IkReal gconst90=((-1.0)*(x4073.value));
IkReal gconst91=((-1.0)*r20*x4071);
IkReal gconst92=(x4070*x4071);
CheckValue<IkReal> x4074 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x4074.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4074.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4075=((-1.0)*r21);
CheckValue<IkReal> x4078 = IKatan2WithCheck(IkReal(r20),IkReal(x4075),IKFAST_ATAN2_MAGTHRESH);
if(!x4078.valid){
continue;
}
IkReal x4076=((-1.0)*(x4078.value));
IkReal x4077=x4071;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst91;
cj5=gconst92;
j5=x4076;
IkReal gconst90=x4076;
IkReal gconst91=((-1.0)*r20*x4077);
IkReal gconst92=(x4075*x4077);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4079=((-1.0)*r21);
CheckValue<IkReal> x4082 = IKatan2WithCheck(IkReal(r20),IkReal(x4079),IKFAST_ATAN2_MAGTHRESH);
if(!x4082.valid){
continue;
}
IkReal x4080=((-1.0)*(x4082.value));
IkReal x4081=x4071;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst91;
cj5=gconst92;
j5=x4080;
IkReal gconst90=x4080;
IkReal gconst91=((-1.0)*r20*x4081);
IkReal gconst92=(x4079*x4081);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x4083=((-1.0)*r21);
CheckValue<IkReal> x4086 = IKatan2WithCheck(IkReal(r20),IkReal(x4083),IKFAST_ATAN2_MAGTHRESH);
if(!x4086.valid){
continue;
}
IkReal x4084=((-1.0)*(x4086.value));
IkReal x4085=x4071;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst91;
cj5=gconst92;
j5=x4084;
IkReal gconst90=x4084;
IkReal gconst91=((-1.0)*r20*x4085);
IkReal gconst92=(x4083*x4085);
IkReal x4087=((1.0)*(r22*r22));
CheckValue<IkReal> x4091=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x4087))),-1);
if(!x4091.valid){
continue;
}
IkReal x4088=x4091.value;
IkReal x4089=((1.0)*x4088);
IkReal x4090=((((-2.0)*x4088*(r20*r20)*(r21*r21)))+(((-1.0)*x4087))+(((-1.0)*x4089*(r20*r20*r20*r20)))+(((-1.0)*x4089*(r21*r21*r21*r21))));
j4eval[0]=x4090;
j4eval[1]=IKsign(x4090);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4092=(gconst92*r21);
IkReal x4093=(sj1*sj2);
IkReal x4094=(gconst91*r20);
IkReal x4095=((1.0)*cj1*cj2);
CheckValue<IkReal> x4096 = IKatan2WithCheck(IkReal((((cj1*cj2*r22))+(((-1.0)*r22*x4093)))),IkReal(((((-1.0)*x4092*x4095))+((x4093*x4094))+((x4092*x4093))+(((-1.0)*x4094*x4095)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4096.valid){
continue;
}
CheckValue<IkReal> x4097=IKPowWithIntegerCheck(IKsign(((((-2.0)*x4092*x4094))+(((-1.0)*(x4092*x4092)))+(((-1.0)*(r22*r22)))+(((-1.0)*(x4094*x4094))))),-1);
if(!x4097.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4096.value)+(((1.5707963267949)*(x4097.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4098=IKsin(j4);
IkReal x4099=IKcos(j4);
IkReal x4100=(cj2*sj1);
IkReal x4101=(gconst92*r21);
IkReal x4102=(gconst92*r01);
IkReal x4103=((1.0)*sj2);
IkReal x4104=(gconst92*r11);
IkReal x4105=(gconst91*r20);
IkReal x4106=((1.0)*cj0);
IkReal x4107=(gconst91*r10);
IkReal x4108=(gconst91*r00);
IkReal x4109=((1.0)*x4099);
IkReal x4110=((1.0)*x4098);
evalcond[0]=((((-1.0)*x4101*x4110))+(((-1.0)*x4105*x4110))+(((-1.0)*r22*x4109)));
evalcond[1]=((((-1.0)*x4106))+(((-1.0)*x4102*x4110))+(((-1.0)*x4108*x4110))+(((-1.0)*r02*x4109)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x4104*x4110))+(((-1.0)*r12*x4109))+(((-1.0)*x4107*x4110)));
evalcond[3]=((((-1.0)*x4105*x4109))+((r22*x4098))+(((-1.0)*sj1*x4103))+((cj1*cj2))+(((-1.0)*x4101*x4109)));
evalcond[4]=(((cj1*sj0*sj2))+(((-1.0)*x4108*x4109))+((r02*x4098))+(((-1.0)*x4102*x4109))+((sj0*x4100)));
evalcond[5]=((((-1.0)*x4104*x4109))+(((-1.0)*x4107*x4109))+(((-1.0)*cj0*cj1*x4103))+((r12*x4098))+(((-1.0)*x4100*x4106)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4111=((1.0)*gconst92);
CheckValue<IkReal> x4112=IKPowWithIntegerCheck(IKsign((((gconst91*r01))+(((-1.0)*r00*x4111)))),-1);
if(!x4112.valid){
continue;
}
CheckValue<IkReal> x4113 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst91*r20*sj0))+(((-1.0)*r21*sj0*x4111)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4113.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4112.value)))+(x4113.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4114=IKsin(j4);
IkReal x4115=IKcos(j4);
IkReal x4116=(cj2*sj1);
IkReal x4117=(gconst92*r21);
IkReal x4118=(gconst92*r01);
IkReal x4119=((1.0)*sj2);
IkReal x4120=(gconst92*r11);
IkReal x4121=(gconst91*r20);
IkReal x4122=((1.0)*cj0);
IkReal x4123=(gconst91*r10);
IkReal x4124=(gconst91*r00);
IkReal x4125=((1.0)*x4115);
IkReal x4126=((1.0)*x4114);
evalcond[0]=((((-1.0)*r22*x4125))+(((-1.0)*x4121*x4126))+(((-1.0)*x4117*x4126)));
evalcond[1]=((((-1.0)*x4124*x4126))+(((-1.0)*x4122))+(((-1.0)*x4118*x4126))+(((-1.0)*r02*x4125)));
evalcond[2]=((((-1.0)*r12*x4125))+(((-1.0)*sj0))+(((-1.0)*x4123*x4126))+(((-1.0)*x4120*x4126)));
evalcond[3]=((((-1.0)*sj1*x4119))+(((-1.0)*x4121*x4125))+((r22*x4114))+((cj1*cj2))+(((-1.0)*x4117*x4125)));
evalcond[4]=(((sj0*x4116))+(((-1.0)*x4124*x4125))+((r02*x4114))+((cj1*sj0*sj2))+(((-1.0)*x4118*x4125)));
evalcond[5]=(((r12*x4114))+(((-1.0)*x4116*x4122))+(((-1.0)*x4123*x4125))+(((-1.0)*cj0*cj1*x4119))+(((-1.0)*x4120*x4125)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4127=((1.0)*cj0);
CheckValue<IkReal> x4128=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r11))+((gconst92*r10)))),-1);
if(!x4128.valid){
continue;
}
CheckValue<IkReal> x4129 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*gconst91*r20*x4127))+(((-1.0)*gconst92*r21*x4127)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4129.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4128.value)))+(x4129.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4130=IKsin(j4);
IkReal x4131=IKcos(j4);
IkReal x4132=(cj2*sj1);
IkReal x4133=(gconst92*r21);
IkReal x4134=(gconst92*r01);
IkReal x4135=((1.0)*sj2);
IkReal x4136=(gconst92*r11);
IkReal x4137=(gconst91*r20);
IkReal x4138=((1.0)*cj0);
IkReal x4139=(gconst91*r10);
IkReal x4140=(gconst91*r00);
IkReal x4141=((1.0)*x4131);
IkReal x4142=((1.0)*x4130);
evalcond[0]=((((-1.0)*x4133*x4142))+(((-1.0)*r22*x4141))+(((-1.0)*x4137*x4142)));
evalcond[1]=((((-1.0)*r02*x4141))+(((-1.0)*x4140*x4142))+(((-1.0)*x4134*x4142))+(((-1.0)*x4138)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x4139*x4142))+(((-1.0)*x4136*x4142))+(((-1.0)*r12*x4141)));
evalcond[3]=(((r22*x4130))+(((-1.0)*x4133*x4141))+((cj1*cj2))+(((-1.0)*sj1*x4135))+(((-1.0)*x4137*x4141)));
evalcond[4]=((((-1.0)*x4140*x4141))+((cj1*sj0*sj2))+((sj0*x4132))+(((-1.0)*x4134*x4141))+((r02*x4130)));
evalcond[5]=((((-1.0)*cj0*cj1*x4135))+((r12*x4130))+(((-1.0)*x4139*x4141))+(((-1.0)*x4136*x4141))+(((-1.0)*x4132*x4138)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4145 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x4145)==0){
continue;
}
IkReal x4143=pow(x4145,-0.5);
IkReal x4144=((1.0)*x4143);
CheckValue<IkReal> x4146 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x4146.valid){
continue;
}
IkReal gconst93=((3.14159265358979)+(((-1.0)*(x4146.value))));
IkReal gconst94=(r20*x4144);
IkReal gconst95=(r21*x4144);
CheckValue<IkReal> x4147 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x4147.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4147.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x4151 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x4151.valid){
continue;
}
IkReal x4148=((1.0)*(x4151.value));
IkReal x4149=x4143;
IkReal x4150=((1.0)*x4149);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x4148)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x4148)));
IkReal gconst94=(r20*x4150);
IkReal gconst95=(r21*x4150);
IkReal x4152=r22*r22;
IkReal x4153=((1.0)*x4152);
CheckValue<IkReal> x4157=IKPowWithIntegerCheck(((-1.0)+x4152),-1);
if(!x4157.valid){
continue;
}
IkReal x4154=x4157.value;
if((((1.0)+(((-1.0)*x4153)))) < -0.00001)
continue;
IkReal x4155=IKsqrt(((1.0)+(((-1.0)*x4153))));
IkReal x4156=(cj0*x4154*x4155);
j4eval[0]=((IKabs(((((-1.0)*x4153*x4156))+x4156)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x4161 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x4161.valid){
continue;
}
IkReal x4158=((1.0)*(x4161.value));
IkReal x4159=x4143;
IkReal x4160=((1.0)*x4159);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x4158)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x4158)));
IkReal gconst94=(r20*x4160);
IkReal gconst95=(r21*x4160);
IkReal x4162=r22*r22;
IkReal x4163=((1.0)*x4162);
CheckValue<IkReal> x4167=IKPowWithIntegerCheck(((-1.0)+x4162),-1);
if(!x4167.valid){
continue;
}
IkReal x4164=x4167.value;
if((((1.0)+(((-1.0)*x4163)))) < -0.00001)
continue;
IkReal x4165=IKsqrt(((1.0)+(((-1.0)*x4163))));
IkReal x4166=(sj0*x4164*x4165);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x4166+(((-1.0)*x4163*x4166))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x4171 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x4171.valid){
continue;
}
IkReal x4168=((1.0)*(x4171.value));
IkReal x4169=x4143;
IkReal x4170=((1.0)*x4169);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x4168)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x4168)));
IkReal gconst94=(r20*x4170);
IkReal gconst95=(r21*x4170);
IkReal x4172=r22*r22;
IkReal x4173=(cj0*r12);
IkReal x4174=(r02*sj0);
CheckValue<IkReal> x4178=IKPowWithIntegerCheck(((-1.0)+x4172),-1);
if(!x4178.valid){
continue;
}
IkReal x4175=x4178.value;
if((((1.0)+(((-1.0)*x4172)))) < -0.00001)
continue;
IkReal x4176=IKsqrt(((1.0)+(((-1.0)*x4172))));
IkReal x4177=(r22*x4175*x4176);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs((((x4173*x4177))+(((-1.0)*x4174*x4177)))))+(IKabs(((((-1.0)*x4173))+x4174))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4179=((1.0)*sj0);
CheckValue<IkReal> x4180=IKPowWithIntegerCheck(IKsign((((gconst95*r20))+(((-1.0)*gconst94*r21)))),-1);
if(!x4180.valid){
continue;
}
CheckValue<IkReal> x4181 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r12))+((r02*sj0)))),IkReal(((((-1.0)*gconst95*r01*x4179))+(((-1.0)*gconst94*r00*x4179))+((cj0*gconst94*r10))+((cj0*gconst95*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4181.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4180.value)))+(x4181.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4182=IKsin(j4);
IkReal x4183=IKcos(j4);
IkReal x4184=(gconst95*r21);
IkReal x4185=(cj2*sj1);
IkReal x4186=(gconst95*r11);
IkReal x4187=((1.0)*sj2);
IkReal x4188=(gconst94*r10);
IkReal x4189=((1.0)*cj0);
IkReal x4190=(gconst95*r01);
IkReal x4191=(gconst94*r20);
IkReal x4192=(gconst94*r00);
IkReal x4193=((1.0)*x4183);
IkReal x4194=((1.0)*x4182);
evalcond[0]=((((-1.0)*x4184*x4194))+(((-1.0)*x4191*x4194))+(((-1.0)*r22*x4193)));
evalcond[1]=((((-1.0)*x4189))+(((-1.0)*r02*x4193))+(((-1.0)*x4190*x4194))+(((-1.0)*x4192*x4194)));
evalcond[2]=((((-1.0)*r12*x4193))+(((-1.0)*sj0))+(((-1.0)*x4186*x4194))+(((-1.0)*x4188*x4194)));
evalcond[3]=(((r22*x4182))+(((-1.0)*x4184*x4193))+(((-1.0)*x4191*x4193))+((cj1*cj2))+(((-1.0)*sj1*x4187)));
evalcond[4]=(((r02*x4182))+((sj0*x4185))+((cj1*sj0*sj2))+(((-1.0)*x4190*x4193))+(((-1.0)*x4192*x4193)));
evalcond[5]=(((r12*x4182))+(((-1.0)*cj0*cj1*x4187))+(((-1.0)*x4186*x4193))+(((-1.0)*x4188*x4193))+(((-1.0)*x4185*x4189)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4195=((1.0)*gconst95);
CheckValue<IkReal> x4196 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x4195))+(((-1.0)*gconst94*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4196.valid){
continue;
}
CheckValue<IkReal> x4197=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x4195))+((gconst94*r01)))),-1);
if(!x4197.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4196.value)+(((1.5707963267949)*(x4197.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4198=IKsin(j4);
IkReal x4199=IKcos(j4);
IkReal x4200=(gconst95*r21);
IkReal x4201=(cj2*sj1);
IkReal x4202=(gconst95*r11);
IkReal x4203=((1.0)*sj2);
IkReal x4204=(gconst94*r10);
IkReal x4205=((1.0)*cj0);
IkReal x4206=(gconst95*r01);
IkReal x4207=(gconst94*r20);
IkReal x4208=(gconst94*r00);
IkReal x4209=((1.0)*x4199);
IkReal x4210=((1.0)*x4198);
evalcond[0]=((((-1.0)*r22*x4209))+(((-1.0)*x4207*x4210))+(((-1.0)*x4200*x4210)));
evalcond[1]=((((-1.0)*r02*x4209))+(((-1.0)*x4205))+(((-1.0)*x4206*x4210))+(((-1.0)*x4208*x4210)));
evalcond[2]=((((-1.0)*x4202*x4210))+(((-1.0)*sj0))+(((-1.0)*x4204*x4210))+(((-1.0)*r12*x4209)));
evalcond[3]=((((-1.0)*x4207*x4209))+((r22*x4198))+(((-1.0)*sj1*x4203))+((cj1*cj2))+(((-1.0)*x4200*x4209)));
evalcond[4]=(((r02*x4198))+(((-1.0)*x4208*x4209))+(((-1.0)*x4206*x4209))+((sj0*x4201))+((cj1*sj0*sj2)));
evalcond[5]=(((r12*x4198))+(((-1.0)*x4201*x4205))+(((-1.0)*cj0*cj1*x4203))+(((-1.0)*x4202*x4209))+(((-1.0)*x4204*x4209)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4211=((1.0)*gconst94);
CheckValue<IkReal> x4212 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x4211))+(((-1.0)*cj0*gconst95*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4212.valid){
continue;
}
CheckValue<IkReal> x4213=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4211))+((gconst95*r10)))),-1);
if(!x4213.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4212.value)+(((1.5707963267949)*(x4213.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4214=IKsin(j4);
IkReal x4215=IKcos(j4);
IkReal x4216=(gconst95*r21);
IkReal x4217=(cj2*sj1);
IkReal x4218=(gconst95*r11);
IkReal x4219=((1.0)*sj2);
IkReal x4220=(gconst94*r10);
IkReal x4221=((1.0)*cj0);
IkReal x4222=(gconst95*r01);
IkReal x4223=(gconst94*r20);
IkReal x4224=(gconst94*r00);
IkReal x4225=((1.0)*x4215);
IkReal x4226=((1.0)*x4214);
evalcond[0]=((((-1.0)*x4223*x4226))+(((-1.0)*r22*x4225))+(((-1.0)*x4216*x4226)));
evalcond[1]=((((-1.0)*x4221))+(((-1.0)*x4224*x4226))+(((-1.0)*x4222*x4226))+(((-1.0)*r02*x4225)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x4218*x4226))+(((-1.0)*r12*x4225))+(((-1.0)*x4220*x4226)));
evalcond[3]=((((-1.0)*sj1*x4219))+((r22*x4214))+(((-1.0)*x4223*x4225))+(((-1.0)*x4216*x4225))+((cj1*cj2)));
evalcond[4]=((((-1.0)*x4224*x4225))+((r02*x4214))+(((-1.0)*x4222*x4225))+((cj1*sj0*sj2))+((sj0*x4217)));
evalcond[5]=(((r12*x4214))+(((-1.0)*x4218*x4225))+(((-1.0)*x4217*x4221))+(((-1.0)*cj0*cj1*x4219))+(((-1.0)*x4220*x4225)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4228 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x4228)==0){
continue;
}
IkReal x4227=pow(x4228,-0.5);
CheckValue<IkReal> x4229 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x4229.valid){
continue;
}
IkReal gconst96=((-1.0)*(x4229.value));
IkReal gconst97=(r00*x4227);
IkReal gconst98=(r01*x4227);
CheckValue<IkReal> x4230 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x4230.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4230.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x4233 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x4233.valid){
continue;
}
IkReal x4231=((-1.0)*(x4233.value));
IkReal x4232=x4227;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x4231;
IkReal gconst96=x4231;
IkReal gconst97=(r00*x4232);
IkReal gconst98=(r01*x4232);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x4236 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x4236.valid){
continue;
}
IkReal x4234=((-1.0)*(x4236.value));
IkReal x4235=x4227;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x4234;
IkReal gconst96=x4234;
IkReal gconst97=(r00*x4235);
IkReal gconst98=(r01*x4235);
IkReal x4237=r02*r02;
IkReal x4238=(cj0*r12);
IkReal x4239=((1.0)*x4237);
CheckValue<IkReal> x4243=IKPowWithIntegerCheck(((-1.0)+x4237),-1);
if(!x4243.valid){
continue;
}
IkReal x4240=x4243.value;
if((((1.0)+(((-1.0)*x4239)))) < -0.00001)
continue;
IkReal x4241=IKsqrt(((1.0)+(((-1.0)*x4239))));
IkReal x4242=(x4240*x4241);
j4eval[0]=((IKabs(((((-1.0)*x4238))+((r02*sj0)))))+(IKabs((((r02*x4238*x4242))+((sj0*x4242))+(((-1.0)*sj0*x4239*x4242))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x4246 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x4246.valid){
continue;
}
IkReal x4244=((-1.0)*(x4246.value));
IkReal x4245=x4227;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x4244;
IkReal gconst96=x4244;
IkReal gconst97=(r00*x4245);
IkReal gconst98=(r01*x4245);
IkReal x4247=r02*r02;
IkReal x4248=(cj1*cj2);
IkReal x4249=(sj1*sj2);
IkReal x4250=((1.0)+(((-1.0)*x4247)));
CheckValue<IkReal> x4257=IKPowWithIntegerCheck(x4250,-1);
if(!x4257.valid){
continue;
}
IkReal x4251=x4257.value;
CheckValue<IkReal> x4258=IKPowWithIntegerCheck(((-1.0)+x4247),-1);
if(!x4258.valid){
continue;
}
IkReal x4252=x4258.value;
IkReal x4253=((1.0)*x4251);
if((x4250) < -0.00001)
continue;
IkReal x4254=IKsqrt(x4250);
IkReal x4255=(r02*r22*x4252*x4254);
IkReal x4256=((((-2.0)*r00*r01*r20*r21*x4251))+(((-1.0)*x4253*(r00*r00)*(r20*r20)))+(((-1.0)*x4253*(r01*r01)*(r21*r21)))+(((-1.0)*(r22*r22))));
j4eval[0]=x4256;
j4eval[1]=((IKabs((((r22*x4248))+(((-1.0)*r22*x4249)))))+(IKabs((((x4249*x4255))+(((-1.0)*x4248*x4255))))));
j4eval[2]=IKsign(x4256);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4259=(gconst97*r20);
IkReal x4260=(sj1*sj2);
IkReal x4261=(gconst98*r21);
IkReal x4262=((1.0)*cj1*cj2);
CheckValue<IkReal> x4263 = IKatan2WithCheck(IkReal((((cj1*cj2*r22))+(((-1.0)*r22*x4260)))),IkReal(((((-1.0)*x4259*x4262))+((x4259*x4260))+(((-1.0)*x4261*x4262))+((x4260*x4261)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4263.valid){
continue;
}
CheckValue<IkReal> x4264=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x4261*x4261)))+(((-1.0)*(r22*r22)))+(((-1.0)*(x4259*x4259)))+(((-2.0)*x4259*x4261)))),-1);
if(!x4264.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4263.value)+(((1.5707963267949)*(x4264.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4265=IKsin(j4);
IkReal x4266=IKcos(j4);
IkReal x4267=(cj2*sj1);
IkReal x4268=(gconst98*r11);
IkReal x4269=(gconst97*r00);
IkReal x4270=(gconst97*r10);
IkReal x4271=((1.0)*sj2);
IkReal x4272=(gconst97*r20);
IkReal x4273=((1.0)*cj0);
IkReal x4274=(gconst98*r21);
IkReal x4275=(gconst98*r01);
IkReal x4276=((1.0)*x4266);
IkReal x4277=((1.0)*x4265);
evalcond[0]=((((-1.0)*r22*x4276))+(((-1.0)*x4272*x4277))+(((-1.0)*x4274*x4277)));
evalcond[1]=((((-1.0)*x4275*x4277))+(((-1.0)*r02*x4276))+(((-1.0)*x4269*x4277))+(((-1.0)*x4273)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r12*x4276))+(((-1.0)*x4268*x4277))+(((-1.0)*x4270*x4277)));
evalcond[3]=((((-1.0)*x4272*x4276))+(((-1.0)*x4274*x4276))+((cj1*cj2))+((r22*x4265))+(((-1.0)*sj1*x4271)));
evalcond[4]=(((r02*x4265))+(((-1.0)*x4275*x4276))+((cj1*sj0*sj2))+((sj0*x4267))+(((-1.0)*x4269*x4276)));
evalcond[5]=(((r12*x4265))+(((-1.0)*x4268*x4276))+(((-1.0)*x4270*x4276))+(((-1.0)*x4267*x4273))+(((-1.0)*cj0*cj1*x4271)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4278=((1.0)*gconst97);
CheckValue<IkReal> x4279=IKPowWithIntegerCheck(IKsign((((gconst98*r20))+(((-1.0)*r21*x4278)))),-1);
if(!x4279.valid){
continue;
}
CheckValue<IkReal> x4280 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r12))+((r02*sj0)))),IkReal((((cj0*gconst98*r11))+(((-1.0)*gconst98*r01*sj0))+((cj0*gconst97*r10))+(((-1.0)*r00*sj0*x4278)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4280.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4279.value)))+(x4280.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4281=IKsin(j4);
IkReal x4282=IKcos(j4);
IkReal x4283=(cj2*sj1);
IkReal x4284=(gconst98*r11);
IkReal x4285=(gconst97*r00);
IkReal x4286=(gconst97*r10);
IkReal x4287=((1.0)*sj2);
IkReal x4288=(gconst97*r20);
IkReal x4289=((1.0)*cj0);
IkReal x4290=(gconst98*r21);
IkReal x4291=(gconst98*r01);
IkReal x4292=((1.0)*x4282);
IkReal x4293=((1.0)*x4281);
evalcond[0]=((((-1.0)*r22*x4292))+(((-1.0)*x4288*x4293))+(((-1.0)*x4290*x4293)));
evalcond[1]=((((-1.0)*x4289))+(((-1.0)*x4291*x4293))+(((-1.0)*x4285*x4293))+(((-1.0)*r02*x4292)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x4284*x4293))+(((-1.0)*r12*x4292))+(((-1.0)*x4286*x4293)));
evalcond[3]=((((-1.0)*x4288*x4292))+((r22*x4281))+(((-1.0)*sj1*x4287))+(((-1.0)*x4290*x4292))+((cj1*cj2)));
evalcond[4]=((((-1.0)*x4291*x4292))+((r02*x4281))+(((-1.0)*x4285*x4292))+((cj1*sj0*sj2))+((sj0*x4283)));
evalcond[5]=((((-1.0)*x4283*x4289))+((r12*x4281))+(((-1.0)*x4284*x4292))+(((-1.0)*x4286*x4292))+(((-1.0)*cj0*cj1*x4287)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4294=((1.0)*gconst97);
CheckValue<IkReal> x4295 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x4294))+(((-1.0)*cj0*gconst98*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4295.valid){
continue;
}
CheckValue<IkReal> x4296=IKPowWithIntegerCheck(IKsign((((gconst98*r10))+(((-1.0)*r11*x4294)))),-1);
if(!x4296.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4295.value)+(((1.5707963267949)*(x4296.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4297=IKsin(j4);
IkReal x4298=IKcos(j4);
IkReal x4299=(cj2*sj1);
IkReal x4300=(gconst98*r11);
IkReal x4301=(gconst97*r00);
IkReal x4302=(gconst97*r10);
IkReal x4303=((1.0)*sj2);
IkReal x4304=(gconst97*r20);
IkReal x4305=((1.0)*cj0);
IkReal x4306=(gconst98*r21);
IkReal x4307=(gconst98*r01);
IkReal x4308=((1.0)*x4298);
IkReal x4309=((1.0)*x4297);
evalcond[0]=((((-1.0)*r22*x4308))+(((-1.0)*x4306*x4309))+(((-1.0)*x4304*x4309)));
evalcond[1]=((((-1.0)*x4307*x4309))+(((-1.0)*x4301*x4309))+(((-1.0)*r02*x4308))+(((-1.0)*x4305)));
evalcond[2]=((((-1.0)*r12*x4308))+(((-1.0)*sj0))+(((-1.0)*x4300*x4309))+(((-1.0)*x4302*x4309)));
evalcond[3]=((((-1.0)*sj1*x4303))+((r22*x4297))+((cj1*cj2))+(((-1.0)*x4306*x4308))+(((-1.0)*x4304*x4308)));
evalcond[4]=(((sj0*x4299))+((cj1*sj0*sj2))+(((-1.0)*x4307*x4308))+(((-1.0)*x4301*x4308))+((r02*x4297)));
evalcond[5]=((((-1.0)*cj0*cj1*x4303))+((r12*x4297))+(((-1.0)*x4299*x4305))+(((-1.0)*x4300*x4308))+(((-1.0)*x4302*x4308)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4310=((-1.0)*r00);
IkReal x4312 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x4312)==0){
continue;
}
IkReal x4311=pow(x4312,-0.5);
CheckValue<IkReal> x4313 = IKatan2WithCheck(IkReal(x4310),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x4313.valid){
continue;
}
IkReal gconst99=((3.14159265358979)+(((-1.0)*(x4313.value))));
IkReal gconst100=(x4310*x4311);
IkReal gconst101=((-1.0)*r01*x4311);
CheckValue<IkReal> x4314 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x4314.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4314.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x4315=((-1.0)*r00);
CheckValue<IkReal> x4318 = IKatan2WithCheck(IkReal(x4315),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x4318.valid){
continue;
}
IkReal x4316=((1.0)*(x4318.value));
IkReal x4317=x4311;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x4316)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x4316)));
IkReal gconst100=(x4315*x4317);
IkReal gconst101=((-1.0)*r01*x4317);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
IkReal x4319=((-1.0)*r00);
CheckValue<IkReal> x4322 = IKatan2WithCheck(IkReal(x4319),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x4322.valid){
continue;
}
IkReal x4320=((1.0)*(x4322.value));
IkReal x4321=x4311;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x4320)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x4320)));
IkReal gconst100=(x4319*x4321);
IkReal gconst101=((-1.0)*r01*x4321);
j4eval[0]=0;
j4eval[1]=r22;
j4eval[2]=sj0;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4323=((1.0)*gconst100);
CheckValue<IkReal> x4324=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4323))+((gconst101*r20)))),-1);
if(!x4324.valid){
continue;
}
CheckValue<IkReal> x4325 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r12))+((r02*sj0)))),IkReal(((((-1.0)*r00*sj0*x4323))+((cj0*gconst101*r11))+(((-1.0)*gconst101*r01*sj0))+((cj0*gconst100*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4325.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4324.value)))+(x4325.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4326=IKsin(j4);
IkReal x4327=IKcos(j4);
IkReal x4328=(gconst100*r10);
IkReal x4329=(gconst100*r00);
IkReal x4330=(cj2*sj1);
IkReal x4331=(gconst101*r11);
IkReal x4332=(gconst100*r20);
IkReal x4333=((1.0)*sj2);
IkReal x4334=(gconst101*r01);
IkReal x4335=((1.0)*cj0);
IkReal x4336=(gconst101*r21);
IkReal x4337=((1.0)*x4327);
IkReal x4338=((1.0)*x4326);
evalcond[0]=((((-1.0)*x4332*x4338))+(((-1.0)*r22*x4337))+(((-1.0)*x4336*x4338)));
evalcond[1]=((((-1.0)*x4334*x4338))+(((-1.0)*r02*x4337))+(((-1.0)*x4335))+(((-1.0)*x4329*x4338)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x4331*x4338))+(((-1.0)*r12*x4337))+(((-1.0)*x4328*x4338)));
evalcond[3]=((((-1.0)*x4332*x4337))+(((-1.0)*sj1*x4333))+((cj1*cj2))+((r22*x4326))+(((-1.0)*x4336*x4337)));
evalcond[4]=((((-1.0)*x4334*x4337))+((cj1*sj0*sj2))+((sj0*x4330))+((r02*x4326))+(((-1.0)*x4329*x4337)));
evalcond[5]=((((-1.0)*x4330*x4335))+(((-1.0)*x4331*x4337))+(((-1.0)*cj0*cj1*x4333))+((r12*x4326))+(((-1.0)*x4328*x4337)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4339=((1.0)*gconst101);
CheckValue<IkReal> x4340 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst100*r20*sj0))+(((-1.0)*r21*sj0*x4339)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4340.valid){
continue;
}
CheckValue<IkReal> x4341=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x4339))+((gconst100*r01)))),-1);
if(!x4341.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4340.value)+(((1.5707963267949)*(x4341.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4342=IKsin(j4);
IkReal x4343=IKcos(j4);
IkReal x4344=(gconst100*r10);
IkReal x4345=(gconst100*r00);
IkReal x4346=(cj2*sj1);
IkReal x4347=(gconst101*r11);
IkReal x4348=(gconst100*r20);
IkReal x4349=((1.0)*sj2);
IkReal x4350=(gconst101*r01);
IkReal x4351=((1.0)*cj0);
IkReal x4352=(gconst101*r21);
IkReal x4353=((1.0)*x4343);
IkReal x4354=((1.0)*x4342);
evalcond[0]=((((-1.0)*x4352*x4354))+(((-1.0)*r22*x4353))+(((-1.0)*x4348*x4354)));
evalcond[1]=((((-1.0)*r02*x4353))+(((-1.0)*x4351))+(((-1.0)*x4345*x4354))+(((-1.0)*x4350*x4354)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x4344*x4354))+(((-1.0)*r12*x4353))+(((-1.0)*x4347*x4354)));
evalcond[3]=(((r22*x4342))+(((-1.0)*x4352*x4353))+((cj1*cj2))+(((-1.0)*x4348*x4353))+(((-1.0)*sj1*x4349)));
evalcond[4]=((((-1.0)*x4345*x4353))+((r02*x4342))+(((-1.0)*x4350*x4353))+((cj1*sj0*sj2))+((sj0*x4346)));
evalcond[5]=((((-1.0)*x4344*x4353))+(((-1.0)*cj0*cj1*x4349))+((r12*x4342))+(((-1.0)*x4347*x4353))+(((-1.0)*x4346*x4351)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4355=((1.0)*gconst100);
CheckValue<IkReal> x4356=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4355))+((gconst101*r10)))),-1);
if(!x4356.valid){
continue;
}
CheckValue<IkReal> x4357 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst101*r21))+(((-1.0)*cj0*r20*x4355)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4357.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4356.value)))+(x4357.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4358=IKsin(j4);
IkReal x4359=IKcos(j4);
IkReal x4360=(gconst100*r10);
IkReal x4361=(gconst100*r00);
IkReal x4362=(cj2*sj1);
IkReal x4363=(gconst101*r11);
IkReal x4364=(gconst100*r20);
IkReal x4365=((1.0)*sj2);
IkReal x4366=(gconst101*r01);
IkReal x4367=((1.0)*cj0);
IkReal x4368=(gconst101*r21);
IkReal x4369=((1.0)*x4359);
IkReal x4370=((1.0)*x4358);
evalcond[0]=((((-1.0)*r22*x4369))+(((-1.0)*x4364*x4370))+(((-1.0)*x4368*x4370)));
evalcond[1]=((((-1.0)*x4361*x4370))+(((-1.0)*x4366*x4370))+(((-1.0)*x4367))+(((-1.0)*r02*x4369)));
evalcond[2]=((((-1.0)*x4363*x4370))+(((-1.0)*sj0))+(((-1.0)*r12*x4369))+(((-1.0)*x4360*x4370)));
evalcond[3]=(((r22*x4358))+(((-1.0)*sj1*x4365))+(((-1.0)*x4364*x4369))+((cj1*cj2))+(((-1.0)*x4368*x4369)));
evalcond[4]=((((-1.0)*x4361*x4369))+((sj0*x4362))+((r02*x4358))+((cj1*sj0*sj2))+(((-1.0)*x4366*x4369)));
evalcond[5]=((((-1.0)*x4360*x4369))+(((-1.0)*x4362*x4367))+((r12*x4358))+(((-1.0)*cj0*cj1*x4365))+(((-1.0)*x4363*x4369)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4371=((1.0)*sj5);
IkReal x4372=(((cj5*r10))+(((-1.0)*r11*x4371)));
j4eval[0]=x4372;
j4eval[1]=IKsign(x4372);
j4eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x4371))+(((-1.0)*cj5*r21))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4373=((1.0)*cj5);
IkReal x4374=(((r21*sj5))+(((-1.0)*r20*x4373)));
j4eval[0]=x4374;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*sj5))+(((-1.0)*r11*x4373))))));
j4eval[2]=IKsign(x4374);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4375=cj5*cj5;
IkReal x4376=r00*r00;
IkReal x4377=(r00*sj5);
IkReal x4378=(cj5*r01);
IkReal x4379=(((x4375*(r01*r01)))+(((-1.0)*x4375*x4376))+x4376+(r02*r02)+(((2.0)*x4377*x4378)));
j4eval[0]=x4379;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*x4377))+(((-1.0)*x4378))))));
j4eval[2]=IKsign(x4379);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4380=cj5*cj5;
IkReal x4381=r00*r00;
IkReal x4382=(r00*sj5);
IkReal x4383=(cj5*r01);
CheckValue<IkReal> x4384 = IKatan2WithCheck(IkReal(((((-1.0)*x4382))+(((-1.0)*x4383)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4384.valid){
continue;
}
CheckValue<IkReal> x4385=IKPowWithIntegerCheck(IKsign(((((2.0)*x4382*x4383))+((x4380*(r01*r01)))+x4381+(r02*r02)+(((-1.0)*x4380*x4381)))),-1);
if(!x4385.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4384.value)+(((1.5707963267949)*(x4385.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4386=IKcos(j4);
IkReal x4387=IKsin(j4);
IkReal x4388=(r00*sj5);
IkReal x4389=(cj5*r01);
IkReal x4390=(r20*sj5);
IkReal x4391=((1.0)*sj1);
IkReal x4392=(cj5*r11);
IkReal x4393=(cj5*r21);
IkReal x4394=(r10*sj5);
IkReal x4395=((1.0)*x4386);
IkReal x4396=((1.0)*x4387);
evalcond[0]=((((-1.0)*x4389*x4395))+(((-1.0)*x4388*x4395))+((r02*x4387)));
evalcond[1]=((((-1.0)*x4390*x4396))+(((-1.0)*r22*x4395))+(((-1.0)*x4393*x4396)));
evalcond[2]=((((-1.0)*r12*x4395))+(((-1.0)*x4394*x4396))+(((-1.0)*x4392*x4396)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x4395))+(((-1.0)*x4389*x4396))+(((-1.0)*x4388*x4396)));
evalcond[4]=(((r22*x4387))+(((-1.0)*x4390*x4395))+(((-1.0)*x4393*x4395))+((cj1*cj2))+(((-1.0)*sj2*x4391)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x4391))+(((-1.0)*x4394*x4395))+(((-1.0)*x4392*x4395))+((r12*x4387)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4397=((1.0)*cj5);
CheckValue<IkReal> x4398 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r11*x4397))+(((-1.0)*r10*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4398.valid){
continue;
}
CheckValue<IkReal> x4399=IKPowWithIntegerCheck(IKsign((((r21*sj5))+(((-1.0)*r20*x4397)))),-1);
if(!x4399.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4398.value)+(((1.5707963267949)*(x4399.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4400=IKcos(j4);
IkReal x4401=IKsin(j4);
IkReal x4402=(r00*sj5);
IkReal x4403=(cj5*r01);
IkReal x4404=(r20*sj5);
IkReal x4405=((1.0)*sj1);
IkReal x4406=(cj5*r11);
IkReal x4407=(cj5*r21);
IkReal x4408=(r10*sj5);
IkReal x4409=((1.0)*x4400);
IkReal x4410=((1.0)*x4401);
evalcond[0]=((((-1.0)*x4403*x4409))+(((-1.0)*x4402*x4409))+((r02*x4401)));
evalcond[1]=((((-1.0)*x4407*x4410))+(((-1.0)*r22*x4409))+(((-1.0)*x4404*x4410)));
evalcond[2]=((((-1.0)*x4408*x4410))+(((-1.0)*r12*x4409))+(((-1.0)*x4406*x4410)));
evalcond[3]=((-1.0)+(((-1.0)*x4403*x4410))+(((-1.0)*r02*x4409))+(((-1.0)*x4402*x4410)));
evalcond[4]=(((r22*x4401))+(((-1.0)*sj2*x4405))+(((-1.0)*x4407*x4409))+((cj1*cj2))+(((-1.0)*x4404*x4409)));
evalcond[5]=((((-1.0)*x4408*x4409))+((r12*x4401))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x4405))+(((-1.0)*x4406*x4409)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4411=((1.0)*sj5);
CheckValue<IkReal> x4412 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x4411))+(((-1.0)*cj5*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4412.valid){
continue;
}
CheckValue<IkReal> x4413=IKPowWithIntegerCheck(IKsign((((cj5*r10))+(((-1.0)*r11*x4411)))),-1);
if(!x4413.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4412.value)+(((1.5707963267949)*(x4413.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4414=IKcos(j4);
IkReal x4415=IKsin(j4);
IkReal x4416=(r00*sj5);
IkReal x4417=(cj5*r01);
IkReal x4418=(r20*sj5);
IkReal x4419=((1.0)*sj1);
IkReal x4420=(cj5*r11);
IkReal x4421=(cj5*r21);
IkReal x4422=(r10*sj5);
IkReal x4423=((1.0)*x4414);
IkReal x4424=((1.0)*x4415);
evalcond[0]=((((-1.0)*x4417*x4423))+((r02*x4415))+(((-1.0)*x4416*x4423)));
evalcond[1]=((((-1.0)*r22*x4423))+(((-1.0)*x4421*x4424))+(((-1.0)*x4418*x4424)));
evalcond[2]=((((-1.0)*x4420*x4424))+(((-1.0)*x4422*x4424))+(((-1.0)*r12*x4423)));
evalcond[3]=((-1.0)+(((-1.0)*x4417*x4424))+(((-1.0)*r02*x4423))+(((-1.0)*x4416*x4424)));
evalcond[4]=(((r22*x4415))+(((-1.0)*sj2*x4419))+(((-1.0)*x4421*x4423))+((cj1*cj2))+(((-1.0)*x4418*x4423)));
evalcond[5]=((((-1.0)*x4420*x4423))+(((-1.0)*x4422*x4423))+((r12*x4415))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x4419)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4425=((1.0)*cj5);
IkReal x4426=(((r11*sj5))+(((-1.0)*r10*x4425)));
j4eval[0]=x4426;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r21*x4425))+(((-1.0)*r20*sj5))))));
j4eval[2]=IKsign(x4426);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4427=((1.0)*sj5);
IkReal x4428=(((cj5*r20))+(((-1.0)*r21*x4427)));
j4eval[0]=x4428;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*cj5*r11))+(((-1.0)*r10*x4427))))));
j4eval[2]=IKsign(x4428);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4429=cj5*cj5;
IkReal x4430=r00*r00;
IkReal x4431=(cj5*r01);
IkReal x4432=(r00*sj5);
IkReal x4433=(((x4429*x4430))+(((-1.0)*(r02*r02)))+(((-1.0)*x4430))+(((-2.0)*x4431*x4432))+(((-1.0)*x4429*(r01*r01))));
j4eval[0]=x4433;
j4eval[1]=IKsign(x4433);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x4432))+(((-1.0)*x4431))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4434=cj5*cj5;
IkReal x4435=r00*r00;
IkReal x4436=(cj5*r01);
IkReal x4437=(r00*sj5);
CheckValue<IkReal> x4438=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*x4435))+(((-1.0)*x4434*(r01*r01)))+((x4434*x4435))+(((-2.0)*x4436*x4437)))),-1);
if(!x4438.valid){
continue;
}
CheckValue<IkReal> x4439 = IKatan2WithCheck(IkReal(((((-1.0)*x4437))+(((-1.0)*x4436)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4439.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4438.value)))+(x4439.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4440=IKcos(j4);
IkReal x4441=IKsin(j4);
IkReal x4442=(r00*sj5);
IkReal x4443=(cj5*r01);
IkReal x4444=(r20*sj5);
IkReal x4445=(cj5*r21);
IkReal x4446=(cj5*r11);
IkReal x4447=(r10*sj5);
IkReal x4448=((1.0)*x4440);
IkReal x4449=((1.0)*x4441);
evalcond[0]=((((-1.0)*x4443*x4448))+(((-1.0)*x4442*x4448))+((r02*x4441)));
evalcond[1]=((((-1.0)*x4444*x4449))+(((-1.0)*r22*x4448))+(((-1.0)*x4445*x4449)));
evalcond[2]=((((-1.0)*x4446*x4449))+(((-1.0)*r12*x4448))+(((-1.0)*x4447*x4449)));
evalcond[3]=((1.0)+(((-1.0)*x4443*x4449))+(((-1.0)*r02*x4448))+(((-1.0)*x4442*x4449)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x4446*x4448))+((cj1*sj2))+(((-1.0)*x4447*x4448))+((r12*x4441)));
evalcond[5]=((((-1.0)*x4444*x4448))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((r22*x4441))+(((-1.0)*x4445*x4448)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4450=((1.0)*sj5);
CheckValue<IkReal> x4451 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r11))+(((-1.0)*r10*x4450)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4451.valid){
continue;
}
CheckValue<IkReal> x4452=IKPowWithIntegerCheck(IKsign((((cj5*r20))+(((-1.0)*r21*x4450)))),-1);
if(!x4452.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4451.value)+(((1.5707963267949)*(x4452.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4453=IKcos(j4);
IkReal x4454=IKsin(j4);
IkReal x4455=(r00*sj5);
IkReal x4456=(cj5*r01);
IkReal x4457=(r20*sj5);
IkReal x4458=(cj5*r21);
IkReal x4459=(cj5*r11);
IkReal x4460=(r10*sj5);
IkReal x4461=((1.0)*x4453);
IkReal x4462=((1.0)*x4454);
evalcond[0]=(((r02*x4454))+(((-1.0)*x4456*x4461))+(((-1.0)*x4455*x4461)));
evalcond[1]=((((-1.0)*x4458*x4462))+(((-1.0)*r22*x4461))+(((-1.0)*x4457*x4462)));
evalcond[2]=((((-1.0)*x4459*x4462))+(((-1.0)*r12*x4461))+(((-1.0)*x4460*x4462)));
evalcond[3]=((1.0)+(((-1.0)*r02*x4461))+(((-1.0)*x4456*x4462))+(((-1.0)*x4455*x4462)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x4459*x4461))+((r12*x4454))+(((-1.0)*x4460*x4461)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*x4458*x4461))+(((-1.0)*x4457*x4461))+((cj1*cj2))+((r22*x4454)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4463=((1.0)*cj5);
CheckValue<IkReal> x4464=IKPowWithIntegerCheck(IKsign((((r11*sj5))+(((-1.0)*r10*x4463)))),-1);
if(!x4464.valid){
continue;
}
CheckValue<IkReal> x4465 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x4463))+(((-1.0)*r20*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4465.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4464.value)))+(x4465.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4466=IKcos(j4);
IkReal x4467=IKsin(j4);
IkReal x4468=(r00*sj5);
IkReal x4469=(cj5*r01);
IkReal x4470=(r20*sj5);
IkReal x4471=(cj5*r21);
IkReal x4472=(cj5*r11);
IkReal x4473=(r10*sj5);
IkReal x4474=((1.0)*x4466);
IkReal x4475=((1.0)*x4467);
evalcond[0]=((((-1.0)*x4469*x4474))+(((-1.0)*x4468*x4474))+((r02*x4467)));
evalcond[1]=((((-1.0)*x4470*x4475))+(((-1.0)*x4471*x4475))+(((-1.0)*r22*x4474)));
evalcond[2]=((((-1.0)*r12*x4474))+(((-1.0)*x4473*x4475))+(((-1.0)*x4472*x4475)));
evalcond[3]=((1.0)+(((-1.0)*x4469*x4475))+(((-1.0)*x4468*x4475))+(((-1.0)*r02*x4474)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x4473*x4474))+(((-1.0)*x4472*x4474))+((cj1*sj2))+((r12*x4467)));
evalcond[5]=(((r22*x4467))+(((-1.0)*sj1*sj2))+(((-1.0)*x4470*x4474))+(((-1.0)*x4471*x4474))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4478 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x4478)==0){
continue;
}
IkReal x4476=pow(x4478,-0.5);
IkReal x4477=((-1.0)*x4476);
CheckValue<IkReal> x4479 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x4479.valid){
continue;
}
IkReal gconst102=((-1.0)*(x4479.value));
IkReal gconst103=(r10*x4477);
IkReal gconst104=(r11*x4477);
CheckValue<IkReal> x4480 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x4480.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j5+(x4480.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x4484 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x4484.valid){
continue;
}
IkReal x4481=((-1.0)*(x4484.value));
IkReal x4482=x4476;
IkReal x4483=((-1.0)*x4482);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst103;
cj5=gconst104;
j5=x4481;
IkReal gconst102=x4481;
IkReal gconst103=(r10*x4483);
IkReal gconst104=(r11*x4483);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x4488 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x4488.valid){
continue;
}
IkReal x4485=((-1.0)*(x4488.value));
IkReal x4486=x4476;
IkReal x4487=((-1.0)*x4486);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst103;
cj5=gconst104;
j5=x4485;
IkReal gconst102=x4485;
IkReal gconst103=(r10*x4487);
IkReal gconst104=(r11*x4487);
IkReal x4489=r12*r12;
IkReal x4490=((1.0)*cj0);
IkReal x4491=(r02*sj0);
CheckValue<IkReal> x4495=IKPowWithIntegerCheck(((-1.0)+x4489),-1);
if(!x4495.valid){
continue;
}
IkReal x4492=x4495.value;
if((((1.0)+(((-1.0)*x4489)))) < -0.00001)
continue;
IkReal x4493=IKsqrt(((1.0)+(((-1.0)*x4489))));
IkReal x4494=(x4492*x4493);
j4eval[0]=((IKabs((x4491+(((-1.0)*r12*x4490)))))+(IKabs((((cj0*x4494))+(((-1.0)*x4489*x4490*x4494))+((r12*x4491*x4494))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x4499 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x4499.valid){
continue;
}
IkReal x4496=((-1.0)*(x4499.value));
IkReal x4497=x4476;
IkReal x4498=((-1.0)*x4497);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst103;
cj5=gconst104;
j5=x4496;
IkReal gconst102=x4496;
IkReal gconst103=(r10*x4498);
IkReal gconst104=(r11*x4498);
IkReal x4500=r12*r12;
IkReal x4501=((1.0)+(((-1.0)*x4500)));
IkReal x4502=(cj1*cj2*r22);
CheckValue<IkReal> x4510=IKPowWithIntegerCheck(x4501,-1);
if(!x4510.valid){
continue;
}
IkReal x4503=x4510.value;
CheckValue<IkReal> x4511=IKPowWithIntegerCheck(((-1.0)+x4500),-1);
if(!x4511.valid){
continue;
}
IkReal x4504=x4511.value;
IkReal x4505=((1.0)*x4503);
IkReal x4506=((1.0)*r22*sj1*sj2);
if((x4501) < -0.00001)
continue;
IkReal x4507=IKsqrt(x4501);
IkReal x4508=(r12*x4504*x4507);
IkReal x4509=((((-1.0)*x4505*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x4503))+(((-1.0)*(r22*r22)))+(((-1.0)*x4505*(r10*r10)*(r20*r20))));
j4eval[0]=x4509;
j4eval[1]=((IKabs(((((-1.0)*x4506))+x4502)))+(IKabs(((((-1.0)*x4506*x4508))+((x4502*x4508))))));
j4eval[2]=IKsign(x4509);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4512=(sj1*sj2);
IkReal x4513=(gconst104*r21);
IkReal x4514=(gconst103*r20);
IkReal x4515=(cj1*cj2);
CheckValue<IkReal> x4516=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x4514*x4514)))+(((-1.0)*(r22*r22)))+(((-2.0)*x4513*x4514))+(((-1.0)*(x4513*x4513))))),-1);
if(!x4516.valid){
continue;
}
CheckValue<IkReal> x4517 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x4512))+((r22*x4515)))),IkReal(((((-1.0)*x4513*x4515))+(((-1.0)*x4514*x4515))+((x4512*x4514))+((x4512*x4513)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4517.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4516.value)))+(x4517.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4518=IKsin(j4);
IkReal x4519=IKcos(j4);
IkReal x4520=(gconst103*r20);
IkReal x4521=(gconst104*r11);
IkReal x4522=(cj2*sj1);
IkReal x4523=(gconst104*r21);
IkReal x4524=((1.0)*sj2);
IkReal x4525=(gconst103*r10);
IkReal x4526=((1.0)*cj0);
IkReal x4527=(gconst104*r01);
IkReal x4528=(gconst103*r00);
IkReal x4529=((1.0)*x4519);
IkReal x4530=((1.0)*x4518);
evalcond[0]=((((-1.0)*x4520*x4530))+(((-1.0)*r22*x4529))+(((-1.0)*x4523*x4530)));
evalcond[1]=((((-1.0)*x4526))+(((-1.0)*x4527*x4530))+(((-1.0)*x4528*x4530))+(((-1.0)*r02*x4529)));
evalcond[2]=((((-1.0)*r12*x4529))+(((-1.0)*sj0))+(((-1.0)*x4521*x4530))+(((-1.0)*x4525*x4530)));
evalcond[3]=((((-1.0)*sj1*x4524))+(((-1.0)*x4520*x4529))+(((-1.0)*x4523*x4529))+((cj1*cj2))+((r22*x4518)));
evalcond[4]=(((r02*x4518))+((sj0*x4522))+((cj1*sj0*sj2))+(((-1.0)*x4527*x4529))+(((-1.0)*x4528*x4529)));
evalcond[5]=((((-1.0)*cj0*cj1*x4524))+(((-1.0)*x4521*x4529))+(((-1.0)*x4525*x4529))+((r12*x4518))+(((-1.0)*x4522*x4526)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4531=((1.0)*gconst103);
CheckValue<IkReal> x4532=IKPowWithIntegerCheck(IKsign((((gconst104*r20))+(((-1.0)*r21*x4531)))),-1);
if(!x4532.valid){
continue;
}
CheckValue<IkReal> x4533 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r12))+((r02*sj0)))),IkReal((((cj0*gconst103*r10))+(((-1.0)*r00*sj0*x4531))+((cj0*gconst104*r11))+(((-1.0)*gconst104*r01*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4533.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4532.value)))+(x4533.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4534=IKsin(j4);
IkReal x4535=IKcos(j4);
IkReal x4536=(gconst103*r20);
IkReal x4537=(gconst104*r11);
IkReal x4538=(cj2*sj1);
IkReal x4539=(gconst104*r21);
IkReal x4540=((1.0)*sj2);
IkReal x4541=(gconst103*r10);
IkReal x4542=((1.0)*cj0);
IkReal x4543=(gconst104*r01);
IkReal x4544=(gconst103*r00);
IkReal x4545=((1.0)*x4535);
IkReal x4546=((1.0)*x4534);
evalcond[0]=((((-1.0)*r22*x4545))+(((-1.0)*x4536*x4546))+(((-1.0)*x4539*x4546)));
evalcond[1]=((((-1.0)*r02*x4545))+(((-1.0)*x4544*x4546))+(((-1.0)*x4543*x4546))+(((-1.0)*x4542)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x4537*x4546))+(((-1.0)*r12*x4545))+(((-1.0)*x4541*x4546)));
evalcond[3]=((((-1.0)*x4536*x4545))+((r22*x4534))+(((-1.0)*x4539*x4545))+((cj1*cj2))+(((-1.0)*sj1*x4540)));
evalcond[4]=(((sj0*x4538))+(((-1.0)*x4544*x4545))+((cj1*sj0*sj2))+((r02*x4534))+(((-1.0)*x4543*x4545)));
evalcond[5]=(((r12*x4534))+(((-1.0)*x4537*x4545))+(((-1.0)*x4538*x4542))+(((-1.0)*x4541*x4545))+(((-1.0)*cj0*cj1*x4540)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4547=((1.0)*sj0);
CheckValue<IkReal> x4548=IKPowWithIntegerCheck(IKsign((((gconst103*r01))+(((-1.0)*gconst104*r00)))),-1);
if(!x4548.valid){
continue;
}
CheckValue<IkReal> x4549 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst104*r21*x4547))+(((-1.0)*gconst103*r20*x4547)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4549.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4548.value)))+(x4549.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4550=IKsin(j4);
IkReal x4551=IKcos(j4);
IkReal x4552=(gconst103*r20);
IkReal x4553=(gconst104*r11);
IkReal x4554=(cj2*sj1);
IkReal x4555=(gconst104*r21);
IkReal x4556=((1.0)*sj2);
IkReal x4557=(gconst103*r10);
IkReal x4558=((1.0)*cj0);
IkReal x4559=(gconst104*r01);
IkReal x4560=(gconst103*r00);
IkReal x4561=((1.0)*x4551);
IkReal x4562=((1.0)*x4550);
evalcond[0]=((((-1.0)*x4552*x4562))+(((-1.0)*x4555*x4562))+(((-1.0)*r22*x4561)));
evalcond[1]=((((-1.0)*x4558))+(((-1.0)*r02*x4561))+(((-1.0)*x4559*x4562))+(((-1.0)*x4560*x4562)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x4553*x4562))+(((-1.0)*r12*x4561))+(((-1.0)*x4557*x4562)));
evalcond[3]=((((-1.0)*x4552*x4561))+(((-1.0)*x4555*x4561))+((r22*x4550))+((cj1*cj2))+(((-1.0)*sj1*x4556)));
evalcond[4]=(((cj1*sj0*sj2))+((r02*x4550))+(((-1.0)*x4559*x4561))+(((-1.0)*x4560*x4561))+((sj0*x4554)));
evalcond[5]=((((-1.0)*cj0*cj1*x4556))+(((-1.0)*x4553*x4561))+((r12*x4550))+(((-1.0)*x4554*x4558))+(((-1.0)*x4557*x4561)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4565 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x4565)==0){
continue;
}
IkReal x4563=pow(x4565,-0.5);
IkReal x4564=((1.0)*x4563);
CheckValue<IkReal> x4566 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x4566.valid){
continue;
}
IkReal gconst105=((3.14159265358979)+(((-1.0)*(x4566.value))));
IkReal gconst106=(r10*x4564);
IkReal gconst107=(r11*x4564);
CheckValue<IkReal> x4567 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x4567.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5+(x4567.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
CheckValue<IkReal> x4571 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x4571.valid){
continue;
}
IkReal x4568=((1.0)*(x4571.value));
IkReal x4569=x4563;
IkReal x4570=((1.0)*x4569);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x4568)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4568)));
IkReal gconst106=(r10*x4570);
IkReal gconst107=(r11*x4570);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x4575 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x4575.valid){
continue;
}
IkReal x4572=((1.0)*(x4575.value));
IkReal x4573=x4563;
IkReal x4574=((1.0)*x4573);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x4572)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4572)));
IkReal gconst106=(r10*x4574);
IkReal gconst107=(r11*x4574);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4576=((1.0)*gconst106);
CheckValue<IkReal> x4577 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r12))+((r02*sj0)))),IkReal(((((-1.0)*gconst107*r01*sj0))+((cj0*gconst106*r10))+(((-1.0)*r00*sj0*x4576))+((cj0*gconst107*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4577.valid){
continue;
}
CheckValue<IkReal> x4578=IKPowWithIntegerCheck(IKsign((((gconst107*r20))+(((-1.0)*r21*x4576)))),-1);
if(!x4578.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4577.value)+(((1.5707963267949)*(x4578.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4579=IKsin(j4);
IkReal x4580=IKcos(j4);
IkReal x4581=(gconst107*r11);
IkReal x4582=(cj2*sj1);
IkReal x4583=(gconst106*r20);
IkReal x4584=((1.0)*sj2);
IkReal x4585=(gconst106*r00);
IkReal x4586=(gconst107*r01);
IkReal x4587=(gconst107*r21);
IkReal x4588=((1.0)*cj0);
IkReal x4589=(gconst106*r10);
IkReal x4590=((1.0)*x4580);
IkReal x4591=((1.0)*x4579);
evalcond[0]=((((-1.0)*r22*x4590))+(((-1.0)*x4583*x4591))+(((-1.0)*x4587*x4591)));
evalcond[1]=((((-1.0)*x4585*x4591))+(((-1.0)*x4588))+(((-1.0)*x4586*x4591))+(((-1.0)*r02*x4590)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x4589*x4591))+(((-1.0)*x4581*x4591))+(((-1.0)*r12*x4590)));
evalcond[3]=((((-1.0)*x4583*x4590))+((r22*x4579))+(((-1.0)*x4587*x4590))+(((-1.0)*sj1*x4584))+((cj1*cj2)));
evalcond[4]=((((-1.0)*x4585*x4590))+((sj0*x4582))+((r02*x4579))+((cj1*sj0*sj2))+(((-1.0)*x4586*x4590)));
evalcond[5]=(((r12*x4579))+(((-1.0)*x4589*x4590))+(((-1.0)*x4581*x4590))+(((-1.0)*cj0*cj1*x4584))+(((-1.0)*x4582*x4588)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4592=((1.0)*gconst107);
CheckValue<IkReal> x4593=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x4592))+((gconst106*r01)))),-1);
if(!x4593.valid){
continue;
}
CheckValue<IkReal> x4594 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x4592))+(((-1.0)*gconst106*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4594.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4593.value)))+(x4594.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4595=IKsin(j4);
IkReal x4596=IKcos(j4);
IkReal x4597=(gconst107*r11);
IkReal x4598=(cj2*sj1);
IkReal x4599=(gconst106*r20);
IkReal x4600=((1.0)*sj2);
IkReal x4601=(gconst106*r00);
IkReal x4602=(gconst107*r01);
IkReal x4603=(gconst107*r21);
IkReal x4604=((1.0)*cj0);
IkReal x4605=(gconst106*r10);
IkReal x4606=((1.0)*x4596);
IkReal x4607=((1.0)*x4595);
evalcond[0]=((((-1.0)*x4603*x4607))+(((-1.0)*x4599*x4607))+(((-1.0)*r22*x4606)));
evalcond[1]=((((-1.0)*x4604))+(((-1.0)*r02*x4606))+(((-1.0)*x4601*x4607))+(((-1.0)*x4602*x4607)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x4597*x4607))+(((-1.0)*r12*x4606))+(((-1.0)*x4605*x4607)));
evalcond[3]=(((r22*x4595))+(((-1.0)*x4603*x4606))+(((-1.0)*x4599*x4606))+(((-1.0)*sj1*x4600))+((cj1*cj2)));
evalcond[4]=(((sj0*x4598))+((r02*x4595))+(((-1.0)*x4601*x4606))+(((-1.0)*x4602*x4606))+((cj1*sj0*sj2)));
evalcond[5]=((((-1.0)*cj0*cj1*x4600))+(((-1.0)*x4597*x4606))+(((-1.0)*x4598*x4604))+((r12*x4595))+(((-1.0)*x4605*x4606)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4608=((1.0)*gconst106);
CheckValue<IkReal> x4609=IKPowWithIntegerCheck(IKsign((((gconst107*r10))+(((-1.0)*r11*x4608)))),-1);
if(!x4609.valid){
continue;
}
CheckValue<IkReal> x4610 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x4608))+(((-1.0)*cj0*gconst107*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4610.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4609.value)))+(x4610.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4611=IKsin(j4);
IkReal x4612=IKcos(j4);
IkReal x4613=(gconst107*r11);
IkReal x4614=(cj2*sj1);
IkReal x4615=(gconst106*r20);
IkReal x4616=((1.0)*sj2);
IkReal x4617=(gconst106*r00);
IkReal x4618=(gconst107*r01);
IkReal x4619=(gconst107*r21);
IkReal x4620=((1.0)*cj0);
IkReal x4621=(gconst106*r10);
IkReal x4622=((1.0)*x4612);
IkReal x4623=((1.0)*x4611);
evalcond[0]=((((-1.0)*r22*x4622))+(((-1.0)*x4619*x4623))+(((-1.0)*x4615*x4623)));
evalcond[1]=((((-1.0)*r02*x4622))+(((-1.0)*x4618*x4623))+(((-1.0)*x4620))+(((-1.0)*x4617*x4623)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x4621*x4623))+(((-1.0)*x4613*x4623))+(((-1.0)*r12*x4622)));
evalcond[3]=((((-1.0)*sj1*x4616))+((r22*x4611))+(((-1.0)*x4619*x4622))+((cj1*cj2))+(((-1.0)*x4615*x4622)));
evalcond[4]=(((sj0*x4614))+((r02*x4611))+(((-1.0)*x4618*x4622))+((cj1*sj0*sj2))+(((-1.0)*x4617*x4622)));
evalcond[5]=((((-1.0)*x4614*x4620))+(((-1.0)*x4621*x4622))+((r12*x4611))+(((-1.0)*cj0*cj1*x4616))+(((-1.0)*x4613*x4622)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4624=((1.0)*cj5);
IkReal x4625=(((r01*sj5))+(((-1.0)*r00*x4624)));
j4eval[0]=x4625;
j4eval[1]=IKsign(x4625);
j4eval[2]=((IKabs(((((-1.0)*r21*x4624))+(((-1.0)*r20*sj5)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4626=((1.0)*sj5);
IkReal x4627=(((cj5*r20))+(((-1.0)*r21*x4626)));
j4eval[0]=x4627;
j4eval[1]=IKsign(x4627);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*r00*x4626))+(((-1.0)*cj5*r01))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4628=cj5*cj5;
IkReal x4629=r10*r10;
IkReal x4630=(cj5*r11);
IkReal x4631=(r10*sj5);
IkReal x4632=((r12*r12)+x4629+((x4628*(r11*r11)))+(((-1.0)*x4628*x4629))+(((2.0)*x4630*x4631)));
j4eval[0]=x4632;
j4eval[1]=IKsign(x4632);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x4631))+(((-1.0)*x4630))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4633=cj5*cj5;
IkReal x4634=r10*r10;
IkReal x4635=(cj5*r11);
IkReal x4636=(r10*sj5);
CheckValue<IkReal> x4637=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((2.0)*x4635*x4636))+((x4633*(r11*r11)))+x4634+(((-1.0)*x4633*x4634)))),-1);
if(!x4637.valid){
continue;
}
CheckValue<IkReal> x4638 = IKatan2WithCheck(IkReal(((((-1.0)*x4636))+(((-1.0)*x4635)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x4638.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4637.value)))+(x4638.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4639=IKcos(j4);
IkReal x4640=IKsin(j4);
IkReal x4641=(r00*sj5);
IkReal x4642=(cj5*r01);
IkReal x4643=(r20*sj5);
IkReal x4644=(cj5*r21);
IkReal x4645=(cj5*r11);
IkReal x4646=(r10*sj5);
IkReal x4647=((1.0)*x4639);
IkReal x4648=((1.0)*x4640);
evalcond[0]=((((-1.0)*x4645*x4647))+((r12*x4640))+(((-1.0)*x4646*x4647)));
evalcond[1]=((((-1.0)*r22*x4647))+(((-1.0)*x4643*x4648))+(((-1.0)*x4644*x4648)));
evalcond[2]=((((-1.0)*r02*x4647))+(((-1.0)*x4641*x4648))+(((-1.0)*x4642*x4648)));
evalcond[3]=((-1.0)+(((-1.0)*x4645*x4648))+(((-1.0)*r12*x4647))+(((-1.0)*x4646*x4648)));
evalcond[4]=(((r02*x4640))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x4641*x4647))+(((-1.0)*x4642*x4647)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r22*x4640))+((cj1*cj2))+(((-1.0)*x4643*x4647))+(((-1.0)*x4644*x4647)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4649=((1.0)*sj5);
CheckValue<IkReal> x4650=IKPowWithIntegerCheck(IKsign((((cj5*r20))+(((-1.0)*r21*x4649)))),-1);
if(!x4650.valid){
continue;
}
CheckValue<IkReal> x4651 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x4649))+(((-1.0)*cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4651.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4650.value)))+(x4651.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4652=IKcos(j4);
IkReal x4653=IKsin(j4);
IkReal x4654=(r00*sj5);
IkReal x4655=(cj5*r01);
IkReal x4656=(r20*sj5);
IkReal x4657=(cj5*r21);
IkReal x4658=(cj5*r11);
IkReal x4659=(r10*sj5);
IkReal x4660=((1.0)*x4652);
IkReal x4661=((1.0)*x4653);
evalcond[0]=(((r12*x4653))+(((-1.0)*x4659*x4660))+(((-1.0)*x4658*x4660)));
evalcond[1]=((((-1.0)*x4656*x4661))+(((-1.0)*r22*x4660))+(((-1.0)*x4657*x4661)));
evalcond[2]=((((-1.0)*x4654*x4661))+(((-1.0)*x4655*x4661))+(((-1.0)*r02*x4660)));
evalcond[3]=((-1.0)+(((-1.0)*x4659*x4661))+(((-1.0)*x4658*x4661))+(((-1.0)*r12*x4660)));
evalcond[4]=((((-1.0)*x4654*x4660))+((cj2*sj1))+((cj1*sj2))+((r02*x4653))+(((-1.0)*x4655*x4660)));
evalcond[5]=((((-1.0)*x4656*x4660))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((r22*x4653))+(((-1.0)*x4657*x4660)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4662=((1.0)*cj5);
CheckValue<IkReal> x4663=IKPowWithIntegerCheck(IKsign((((r01*sj5))+(((-1.0)*r00*x4662)))),-1);
if(!x4663.valid){
continue;
}
CheckValue<IkReal> x4664 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x4662))+(((-1.0)*r20*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4664.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4663.value)))+(x4664.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4665=IKcos(j4);
IkReal x4666=IKsin(j4);
IkReal x4667=(r00*sj5);
IkReal x4668=(cj5*r01);
IkReal x4669=(r20*sj5);
IkReal x4670=(cj5*r21);
IkReal x4671=(cj5*r11);
IkReal x4672=(r10*sj5);
IkReal x4673=((1.0)*x4665);
IkReal x4674=((1.0)*x4666);
evalcond[0]=(((r12*x4666))+(((-1.0)*x4671*x4673))+(((-1.0)*x4672*x4673)));
evalcond[1]=((((-1.0)*r22*x4673))+(((-1.0)*x4669*x4674))+(((-1.0)*x4670*x4674)));
evalcond[2]=((((-1.0)*r02*x4673))+(((-1.0)*x4667*x4674))+(((-1.0)*x4668*x4674)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x4673))+(((-1.0)*x4671*x4674))+(((-1.0)*x4672*x4674)));
evalcond[4]=(((cj2*sj1))+((r02*x4666))+((cj1*sj2))+(((-1.0)*x4667*x4673))+(((-1.0)*x4668*x4673)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r22*x4666))+(((-1.0)*x4669*x4673))+((cj1*cj2))+(((-1.0)*x4670*x4673)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4675=((1.0)*sj5);
IkReal x4676=((((-1.0)*r01*x4675))+((cj5*r00)));
j4eval[0]=x4676;
j4eval[1]=IKsign(x4676);
j4eval[2]=((IKabs(((((-1.0)*r20*x4675))+(((-1.0)*cj5*r21)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4677=((1.0)*cj5);
IkReal x4678=(((r21*sj5))+(((-1.0)*r20*x4677)));
j4eval[0]=x4678;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r00*sj5))+(((-1.0)*r01*x4677))))));
j4eval[2]=IKsign(x4678);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4679=(r10*sj5);
IkReal x4680=(sj1*sj2);
IkReal x4681=(cj5*r11);
IkReal x4682=((1.0)*cj1*cj2);
IkReal x4683=((((-1.0)*r01*sj5))+((cj5*r00)));
j4eval[0]=x4683;
j4eval[1]=IKsign(x4683);
j4eval[2]=((IKabs((((r12*x4680))+(((-1.0)*r12*x4682)))))+(IKabs(((((-1.0)*x4679*x4682))+((x4680*x4681))+(((-1.0)*x4681*x4682))+((x4679*x4680))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4684=(r10*sj5);
IkReal x4685=(sj1*sj2);
IkReal x4686=(cj5*r11);
IkReal x4687=((1.0)*cj1*cj2);
CheckValue<IkReal> x4688=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj5))+((cj5*r00)))),-1);
if(!x4688.valid){
continue;
}
CheckValue<IkReal> x4689 = IKatan2WithCheck(IkReal(((((-1.0)*x4686*x4687))+(((-1.0)*x4684*x4687))+((x4684*x4685))+((x4685*x4686)))),IkReal((((r12*x4685))+(((-1.0)*r12*x4687)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4689.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4688.value)))+(x4689.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4690=IKcos(j4);
IkReal x4691=IKsin(j4);
IkReal x4692=(r00*sj5);
IkReal x4693=(cj5*r01);
IkReal x4694=(r20*sj5);
IkReal x4695=((1.0)*sj2);
IkReal x4696=(cj5*r21);
IkReal x4697=(cj5*r11);
IkReal x4698=(r10*sj5);
IkReal x4699=((1.0)*x4690);
IkReal x4700=((1.0)*x4691);
evalcond[0]=((((-1.0)*x4698*x4699))+((r12*x4691))+(((-1.0)*x4697*x4699)));
evalcond[1]=((((-1.0)*x4696*x4700))+(((-1.0)*x4694*x4700))+(((-1.0)*r22*x4699)));
evalcond[2]=((((-1.0)*x4693*x4700))+(((-1.0)*r02*x4699))+(((-1.0)*x4692*x4700)));
evalcond[3]=((1.0)+(((-1.0)*r12*x4699))+(((-1.0)*x4697*x4700))+(((-1.0)*x4698*x4700)));
evalcond[4]=((((-1.0)*x4696*x4699))+((r22*x4691))+(((-1.0)*x4694*x4699))+((cj1*cj2))+(((-1.0)*sj1*x4695)));
evalcond[5]=(((r02*x4691))+(((-1.0)*x4692*x4699))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*x4695))+(((-1.0)*x4693*x4699)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4701=((1.0)*cj5);
CheckValue<IkReal> x4702 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*x4701))+(((-1.0)*r00*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4702.valid){
continue;
}
CheckValue<IkReal> x4703=IKPowWithIntegerCheck(IKsign((((r21*sj5))+(((-1.0)*r20*x4701)))),-1);
if(!x4703.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4702.value)+(((1.5707963267949)*(x4703.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4704=IKcos(j4);
IkReal x4705=IKsin(j4);
IkReal x4706=(r00*sj5);
IkReal x4707=(cj5*r01);
IkReal x4708=(r20*sj5);
IkReal x4709=((1.0)*sj2);
IkReal x4710=(cj5*r21);
IkReal x4711=(cj5*r11);
IkReal x4712=(r10*sj5);
IkReal x4713=((1.0)*x4704);
IkReal x4714=((1.0)*x4705);
evalcond[0]=((((-1.0)*x4712*x4713))+(((-1.0)*x4711*x4713))+((r12*x4705)));
evalcond[1]=((((-1.0)*r22*x4713))+(((-1.0)*x4710*x4714))+(((-1.0)*x4708*x4714)));
evalcond[2]=((((-1.0)*r02*x4713))+(((-1.0)*x4707*x4714))+(((-1.0)*x4706*x4714)));
evalcond[3]=((1.0)+(((-1.0)*x4712*x4714))+(((-1.0)*x4711*x4714))+(((-1.0)*r12*x4713)));
evalcond[4]=((((-1.0)*x4710*x4713))+(((-1.0)*sj1*x4709))+((cj1*cj2))+(((-1.0)*x4708*x4713))+((r22*x4705)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*x4709))+(((-1.0)*x4707*x4713))+((r02*x4705))+(((-1.0)*x4706*x4713)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4715=((1.0)*sj5);
CheckValue<IkReal> x4716 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x4715))+(((-1.0)*cj5*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4716.valid){
continue;
}
CheckValue<IkReal> x4717=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4715))+((cj5*r00)))),-1);
if(!x4717.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4716.value)+(((1.5707963267949)*(x4717.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4718=IKcos(j4);
IkReal x4719=IKsin(j4);
IkReal x4720=(r00*sj5);
IkReal x4721=(cj5*r01);
IkReal x4722=(r20*sj5);
IkReal x4723=((1.0)*sj2);
IkReal x4724=(cj5*r21);
IkReal x4725=(cj5*r11);
IkReal x4726=(r10*sj5);
IkReal x4727=((1.0)*x4718);
IkReal x4728=((1.0)*x4719);
evalcond[0]=((((-1.0)*x4725*x4727))+(((-1.0)*x4726*x4727))+((r12*x4719)));
evalcond[1]=((((-1.0)*x4722*x4728))+(((-1.0)*x4724*x4728))+(((-1.0)*r22*x4727)));
evalcond[2]=((((-1.0)*r02*x4727))+(((-1.0)*x4721*x4728))+(((-1.0)*x4720*x4728)));
evalcond[3]=((1.0)+(((-1.0)*r12*x4727))+(((-1.0)*x4725*x4728))+(((-1.0)*x4726*x4728)));
evalcond[4]=((((-1.0)*sj1*x4723))+(((-1.0)*x4722*x4727))+((r22*x4719))+(((-1.0)*x4724*x4727))+((cj1*cj2)));
evalcond[5]=((((-1.0)*cj1*x4723))+(((-1.0)*cj2*sj1))+(((-1.0)*x4721*x4727))+(((-1.0)*x4720*x4727))+((r02*x4719)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4729=((-1.0)*py);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x4729);
rxp0_2=(py*r00);
rxp1_0=(r21*x4729);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4730=((-1.0)*py);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x4730);
rxp0_2=(py*r00);
rxp1_0=(r21*x4730);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4731=((-1.0)*py);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x4731);
rxp0_2=(py*r00);
rxp1_0=(r21*x4731);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4734=IKPowWithIntegerCheck(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01))),-1);
if(!x4734.valid){
continue;
}
IkReal x4732=x4734.value;
IkReal x4733=((1.0)*sj0*x4732);
cj4array[0]=((((-1.0)*cj1*sj2*x4733))+(((-1.0)*cj2*sj1*x4733)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4735=IKsin(j4);
IkReal x4736=IKcos(j4);
IkReal x4737=(r20*sj5);
IkReal x4738=((1.0)*cj5*r21);
IkReal x4739=((1.0)*x4736);
IkReal x4740=((1.0)*x4735);
evalcond[0]=(r12*x4735);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r12*x4739)));
evalcond[2]=((((-1.0)*x4735*x4738))+(((-1.0)*x4737*x4740)));
evalcond[3]=((((-1.0)*cj5*r01*x4740))+(((-1.0)*r00*sj5*x4740)));
evalcond[4]=((((-1.0)*x4736*x4738))+(((-1.0)*sj1*sj2))+(((-1.0)*x4737*x4739))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4742=IKPowWithIntegerCheck(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5))),-1);
if(!x4742.valid){
continue;
}
IkReal x4741=x4742.value;
cj4array[0]=((((-1.0)*cj1*cj2*x4741))+((sj1*sj2*x4741)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4743=IKsin(j4);
IkReal x4744=IKcos(j4);
IkReal x4745=((1.0)*cj5);
IkReal x4746=(r00*sj5);
IkReal x4747=((1.0)*x4744);
IkReal x4748=((1.0)*x4743);
evalcond[0]=(r12*x4743);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r12*x4747)));
evalcond[2]=((((-1.0)*r20*sj5*x4748))+(((-1.0)*r21*x4743*x4745)));
evalcond[3]=((((-1.0)*x4746*x4748))+(((-1.0)*r01*x4743*x4745)));
evalcond[4]=((((-1.0)*r01*x4744*x4745))+(((-1.0)*x4746*x4747))+((cj1*sj0*sj2))+((cj2*sj0*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4749=IKPowWithIntegerCheck(r12,-1);
if(!x4749.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x4749.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4750=IKsin(j4);
IkReal x4751=IKcos(j4);
IkReal x4752=((1.0)*cj5);
IkReal x4753=((1.0)*r00*sj5);
IkReal x4754=((1.0)*r20*sj5);
evalcond[0]=(r12*x4750);
evalcond[1]=((((-1.0)*r21*x4750*x4752))+(((-1.0)*x4750*x4754)));
evalcond[2]=((((-1.0)*x4750*x4753))+(((-1.0)*r01*x4750*x4752)));
evalcond[3]=((((-1.0)*r21*x4751*x4752))+(((-1.0)*sj1*sj2))+(((-1.0)*x4751*x4754))+((cj1*cj2)));
evalcond[4]=((((-1.0)*r01*x4751*x4752))+((cj1*sj0*sj2))+((cj2*sj0*sj1))+(((-1.0)*x4751*x4753)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4755=((1.0)*sj0);
CheckValue<IkReal> x4756 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r12))+((r02*sj0)))),IkReal((((cj0*cj5*r11))+(((-1.0)*r00*sj5*x4755))+((cj0*r10*sj5))+(((-1.0)*cj5*r01*x4755)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4756.valid){
continue;
}
CheckValue<IkReal> x4757=IKPowWithIntegerCheck(IKsign((((cj5*r20))+(((-1.0)*r21*sj5)))),-1);
if(!x4757.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4756.value)+(((1.5707963267949)*(x4757.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4758=IKsin(j4);
IkReal x4759=IKcos(j4);
IkReal x4760=(cj2*sj1);
IkReal x4761=(r00*sj5);
IkReal x4762=(cj5*r01);
IkReal x4763=(r20*sj5);
IkReal x4764=((1.0)*sj2);
IkReal x4765=(cj5*r21);
IkReal x4766=(cj5*r11);
IkReal x4767=((1.0)*cj0);
IkReal x4768=(r10*sj5);
IkReal x4769=((1.0)*x4759);
IkReal x4770=((1.0)*x4758);
evalcond[0]=((((-1.0)*r22*x4769))+(((-1.0)*x4765*x4770))+(((-1.0)*x4763*x4770)));
evalcond[1]=((((-1.0)*x4767))+(((-1.0)*r02*x4769))+(((-1.0)*x4762*x4770))+(((-1.0)*x4761*x4770)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x4766*x4770))+(((-1.0)*r12*x4769))+(((-1.0)*x4768*x4770)));
evalcond[3]=((((-1.0)*x4763*x4769))+(((-1.0)*x4765*x4769))+(((-1.0)*sj1*x4764))+((cj1*cj2))+((r22*x4758)));
evalcond[4]=((((-1.0)*x4761*x4769))+(((-1.0)*x4762*x4769))+((sj0*x4760))+((cj1*sj0*sj2))+((r02*x4758)));
evalcond[5]=(((r12*x4758))+(((-1.0)*x4760*x4767))+(((-1.0)*x4766*x4769))+(((-1.0)*x4768*x4769))+(((-1.0)*cj0*cj1*x4764)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4771=((1.0)*sj0);
CheckValue<IkReal> x4772 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj5*x4771))+(((-1.0)*cj5*r21*x4771)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4772.valid){
continue;
}
CheckValue<IkReal> x4773=IKPowWithIntegerCheck(IKsign((((r01*sj5))+(((-1.0)*cj5*r00)))),-1);
if(!x4773.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4772.value)+(((1.5707963267949)*(x4773.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4774=IKsin(j4);
IkReal x4775=IKcos(j4);
IkReal x4776=(cj2*sj1);
IkReal x4777=(r00*sj5);
IkReal x4778=(cj5*r01);
IkReal x4779=(r20*sj5);
IkReal x4780=((1.0)*sj2);
IkReal x4781=(cj5*r21);
IkReal x4782=(cj5*r11);
IkReal x4783=((1.0)*cj0);
IkReal x4784=(r10*sj5);
IkReal x4785=((1.0)*x4775);
IkReal x4786=((1.0)*x4774);
evalcond[0]=((((-1.0)*x4779*x4786))+(((-1.0)*x4781*x4786))+(((-1.0)*r22*x4785)));
evalcond[1]=((((-1.0)*x4777*x4786))+(((-1.0)*r02*x4785))+(((-1.0)*x4778*x4786))+(((-1.0)*x4783)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x4782*x4786))+(((-1.0)*x4784*x4786))+(((-1.0)*r12*x4785)));
evalcond[3]=((((-1.0)*x4779*x4785))+(((-1.0)*x4781*x4785))+(((-1.0)*sj1*x4780))+((r22*x4774))+((cj1*cj2)));
evalcond[4]=((((-1.0)*x4777*x4785))+((cj1*sj0*sj2))+((r02*x4774))+((sj0*x4776))+(((-1.0)*x4778*x4785)));
evalcond[5]=(((r12*x4774))+(((-1.0)*x4776*x4783))+(((-1.0)*x4782*x4785))+(((-1.0)*x4784*x4785))+(((-1.0)*cj0*cj1*x4780)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4787=((1.0)*cj0);
CheckValue<IkReal> x4788 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj5*r21*x4787))+(((-1.0)*r20*sj5*x4787)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4788.valid){
continue;
}
CheckValue<IkReal> x4789=IKPowWithIntegerCheck(IKsign((((cj5*r10))+(((-1.0)*r11*sj5)))),-1);
if(!x4789.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4788.value)+(((1.5707963267949)*(x4789.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4790=IKsin(j4);
IkReal x4791=IKcos(j4);
IkReal x4792=(cj2*sj1);
IkReal x4793=(r00*sj5);
IkReal x4794=(cj5*r01);
IkReal x4795=(r20*sj5);
IkReal x4796=((1.0)*sj2);
IkReal x4797=(cj5*r21);
IkReal x4798=(cj5*r11);
IkReal x4799=((1.0)*cj0);
IkReal x4800=(r10*sj5);
IkReal x4801=((1.0)*x4791);
IkReal x4802=((1.0)*x4790);
evalcond[0]=((((-1.0)*r22*x4801))+(((-1.0)*x4797*x4802))+(((-1.0)*x4795*x4802)));
evalcond[1]=((((-1.0)*x4793*x4802))+(((-1.0)*x4799))+(((-1.0)*r02*x4801))+(((-1.0)*x4794*x4802)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x4800*x4802))+(((-1.0)*x4798*x4802))+(((-1.0)*r12*x4801)));
evalcond[3]=((((-1.0)*sj1*x4796))+(((-1.0)*x4797*x4801))+((cj1*cj2))+(((-1.0)*x4795*x4801))+((r22*x4790)));
evalcond[4]=(((sj0*x4792))+(((-1.0)*x4793*x4801))+((cj1*sj0*sj2))+((r02*x4790))+(((-1.0)*x4794*x4801)));
evalcond[5]=((((-1.0)*cj0*cj1*x4796))+(((-1.0)*x4800*x4801))+(((-1.0)*x4798*x4801))+((r12*x4790))+(((-1.0)*x4792*x4799)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x4803=(((cj2*sj1))+((cj1*sj2)));
j0eval[0]=x4803;
j0eval[1]=IKsign(x4803);
j0eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x4804=r20*r20;
IkReal x4805=cj5*cj5;
IkReal x4806=(r20*sj5);
IkReal x4807=(cj5*r21);
IkReal x4808=(cj2*sj1);
IkReal x4809=((1.0)*cj1*sj2);
IkReal x4810=((((-2.0)*x4806*x4807))+(((-1.0)*x4805*(r21*r21)))+((x4804*x4805))+(((-1.0)*(r22*r22)))+(((-1.0)*x4804)));
j4eval[0]=x4810;
j4eval[1]=((IKabs((((r22*x4808))+((cj1*r22*sj2)))))+(IKabs(((((-1.0)*x4806*x4808))+(((-1.0)*x4807*x4808))+(((-1.0)*x4806*x4809))+(((-1.0)*x4807*x4809))))));
j4eval[2]=IKsign(x4810);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=0;
cj3=1.0;
j3=0;
j0eval[0]=(((cj2*sj1))+((cj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((9.98003992015968)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.98003992015968)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((9.98003992015968)*py))+IKsqr(((9.98003992015968)*px))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((9.98003992015968)*py), ((9.98003992015968)*px));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((0.1002)*(IKcos(j0)))));
evalcond[1]=((((-1.0)*py))+(((0.1002)*(IKsin(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4811=((1.0)*cj5);
IkReal x4812=((((-1.0)*r00*x4811))+((r01*sj5)));
j4eval[0]=x4812;
j4eval[1]=IKsign(x4812);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r20*sj5))+(((-1.0)*cj0*r21*x4811))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4813=((1.0)*cj5);
IkReal x4814=(((r11*sj5))+(((-1.0)*r10*x4813)));
j4eval[0]=x4814;
j4eval[1]=((IKabs(((((-1.0)*r21*sj0*x4813))+(((-1.0)*r20*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x4814);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4815=cj5*cj5;
IkReal x4816=((1.0)*r20);
IkReal x4817=(cj5*r21);
IkReal x4818=(((cj5*r01*r20*sj5))+((r00*sj5*x4817))+((r01*r21*x4815))+((r00*r20))+(((-1.0)*r00*x4815*x4816))+((r02*r22)));
j4eval[0]=x4818;
j4eval[1]=((IKabs(((((-1.0)*cj0*sj5*x4816))+(((-1.0)*cj0*x4817)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4818);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4819=cj5*cj5;
IkReal x4820=((1.0)*r20);
IkReal x4821=(cj5*r21);
CheckValue<IkReal> x4822=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+((r00*sj5*x4821))+((r01*r21*x4819))+((r00*r20))+(((-1.0)*r00*x4819*x4820))+((r02*r22)))),-1);
if(!x4822.valid){
continue;
}
CheckValue<IkReal> x4823 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*sj5*x4820))+(((-1.0)*cj0*x4821)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4823.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4822.value)))+(x4823.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4824=IKcos(j4);
IkReal x4825=IKsin(j4);
IkReal x4826=((1.0)*sj0);
IkReal x4827=(r00*sj5);
IkReal x4828=(r10*sj5);
IkReal x4829=(r20*sj5);
IkReal x4830=((1.0)*x4824);
IkReal x4831=((1.0)*x4825);
IkReal x4832=(cj5*x4831);
evalcond[0]=(((r22*x4825))+(((-1.0)*cj5*r21*x4830))+(((-1.0)*x4829*x4830)));
evalcond[1]=((((-1.0)*r21*x4832))+(((-1.0)*x4829*x4831))+(((-1.0)*r22*x4830)));
evalcond[2]=(cj0+((r12*x4825))+(((-1.0)*cj5*r11*x4830))+(((-1.0)*x4828*x4830)));
evalcond[3]=((((-1.0)*x4826))+((r02*x4825))+(((-1.0)*x4827*x4830))+(((-1.0)*cj5*r01*x4830)));
evalcond[4]=((((-1.0)*r02*x4830))+(((-1.0)*x4827*x4831))+(((-1.0)*r01*x4832))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x4826))+(((-1.0)*r12*x4830))+(((-1.0)*r11*x4832))+(((-1.0)*x4828*x4831)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4833=((1.0)*cj5);
CheckValue<IkReal> x4834 = IKatan2WithCheck(IkReal(((((-1.0)*r21*sj0*x4833))+(((-1.0)*r20*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4834.valid){
continue;
}
CheckValue<IkReal> x4835=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x4833))+((r11*sj5)))),-1);
if(!x4835.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4834.value)+(((1.5707963267949)*(x4835.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4836=IKcos(j4);
IkReal x4837=IKsin(j4);
IkReal x4838=((1.0)*sj0);
IkReal x4839=(r00*sj5);
IkReal x4840=(r10*sj5);
IkReal x4841=(r20*sj5);
IkReal x4842=((1.0)*x4836);
IkReal x4843=((1.0)*x4837);
IkReal x4844=(cj5*x4843);
evalcond[0]=((((-1.0)*x4841*x4842))+((r22*x4837))+(((-1.0)*cj5*r21*x4842)));
evalcond[1]=((((-1.0)*x4841*x4843))+(((-1.0)*r21*x4844))+(((-1.0)*r22*x4842)));
evalcond[2]=(((r12*x4837))+cj0+(((-1.0)*x4840*x4842))+(((-1.0)*cj5*r11*x4842)));
evalcond[3]=((((-1.0)*cj5*r01*x4842))+(((-1.0)*x4839*x4842))+(((-1.0)*x4838))+((r02*x4837)));
evalcond[4]=((((-1.0)*r02*x4842))+(((-1.0)*r01*x4844))+(((-1.0)*x4839*x4843))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x4840*x4843))+(((-1.0)*x4838))+(((-1.0)*r12*x4842))+(((-1.0)*r11*x4844)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4845=((1.0)*cj0);
CheckValue<IkReal> x4846 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj5*x4845))+(((-1.0)*cj5*r21*x4845)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4846.valid){
continue;
}
CheckValue<IkReal> x4847=IKPowWithIntegerCheck(IKsign((((r01*sj5))+(((-1.0)*cj5*r00)))),-1);
if(!x4847.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4846.value)+(((1.5707963267949)*(x4847.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4848=IKcos(j4);
IkReal x4849=IKsin(j4);
IkReal x4850=((1.0)*sj0);
IkReal x4851=(r00*sj5);
IkReal x4852=(r10*sj5);
IkReal x4853=(r20*sj5);
IkReal x4854=((1.0)*x4848);
IkReal x4855=((1.0)*x4849);
IkReal x4856=(cj5*x4855);
evalcond[0]=((((-1.0)*x4853*x4854))+(((-1.0)*cj5*r21*x4854))+((r22*x4849)));
evalcond[1]=((((-1.0)*x4853*x4855))+(((-1.0)*r21*x4856))+(((-1.0)*r22*x4854)));
evalcond[2]=(cj0+(((-1.0)*cj5*r11*x4854))+((r12*x4849))+(((-1.0)*x4852*x4854)));
evalcond[3]=(((r02*x4849))+(((-1.0)*cj5*r01*x4854))+(((-1.0)*x4850))+(((-1.0)*x4851*x4854)));
evalcond[4]=((((-1.0)*r01*x4856))+(((-1.0)*r02*x4854))+(((-1.0)*x4851*x4855))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x4854))+(((-1.0)*r11*x4856))+(((-1.0)*x4850))+(((-1.0)*x4852*x4855)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((9.98003992015968)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.98003992015968)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((9.98003992015968)*py))+IKsqr(((9.98003992015968)*px))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((9.98003992015968)*py), ((9.98003992015968)*px));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((0.1002)*(IKcos(j0)))));
evalcond[1]=((((-1.0)*py))+(((0.1002)*(IKsin(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4857=((1.0)*sj5);
IkReal x4858=(((cj5*r10))+(((-1.0)*r11*x4857)));
j4eval[0]=x4858;
j4eval[1]=IKsign(x4858);
j4eval[2]=((IKabs(((((-1.0)*cj5*r21*sj0))+(((-1.0)*r20*sj0*x4857)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4859=((1.0)*sj5);
IkReal x4860=((((-1.0)*r01*x4859))+((cj5*r00)));
j4eval[0]=x4860;
j4eval[1]=((IKabs(((((-1.0)*cj0*cj5*r21))+(((-1.0)*cj0*r20*x4859)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4860);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4861=cj5*cj5;
IkReal x4862=((1.0)*r20);
IkReal x4863=(cj5*r21);
IkReal x4864=(((cj5*r01*r20*sj5))+((r00*r20))+((r01*r21*x4861))+(((-1.0)*r00*x4861*x4862))+((r02*r22))+((r00*sj5*x4863)));
j4eval[0]=x4864;
j4eval[1]=((IKabs(((((-1.0)*cj0*sj5*x4862))+(((-1.0)*cj0*x4863)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4864);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4865=cj5*cj5;
IkReal x4866=((1.0)*r20);
IkReal x4867=(cj5*r21);
CheckValue<IkReal> x4868=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r00*x4865*x4866))+((r00*r20))+((r01*r21*x4865))+((r02*r22))+((r00*sj5*x4867)))),-1);
if(!x4868.valid){
continue;
}
CheckValue<IkReal> x4869 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*sj5*x4866))+(((-1.0)*cj0*x4867)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4869.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4868.value)))+(x4869.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4870=IKcos(j4);
IkReal x4871=IKsin(j4);
IkReal x4872=((1.0)*cj0);
IkReal x4873=(r00*sj5);
IkReal x4874=(r10*sj5);
IkReal x4875=(r20*sj5);
IkReal x4876=((1.0)*x4870);
IkReal x4877=((1.0)*x4871);
IkReal x4878=(cj5*x4877);
evalcond[0]=((((-1.0)*x4875*x4876))+(((-1.0)*cj5*r21*x4876))+((r22*x4871)));
evalcond[1]=((((-1.0)*r22*x4876))+(((-1.0)*r21*x4878))+(((-1.0)*x4875*x4877)));
evalcond[2]=(((r02*x4871))+sj0+(((-1.0)*cj5*r01*x4876))+(((-1.0)*x4873*x4876)));
evalcond[3]=((((-1.0)*cj5*r11*x4876))+(((-1.0)*x4874*x4876))+((r12*x4871))+(((-1.0)*x4872)));
evalcond[4]=((((-1.0)*r01*x4878))+(((-1.0)*r02*x4876))+(((-1.0)*x4873*x4877))+(((-1.0)*x4872)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x4874*x4877))+(((-1.0)*r12*x4876))+(((-1.0)*r11*x4878)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4879=((1.0)*cj0);
CheckValue<IkReal> x4880 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r21*x4879))+(((-1.0)*r20*sj5*x4879)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4880.valid){
continue;
}
CheckValue<IkReal> x4881=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj5))+((cj5*r00)))),-1);
if(!x4881.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4880.value)+(((1.5707963267949)*(x4881.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4882=IKcos(j4);
IkReal x4883=IKsin(j4);
IkReal x4884=((1.0)*cj0);
IkReal x4885=(r00*sj5);
IkReal x4886=(r10*sj5);
IkReal x4887=(r20*sj5);
IkReal x4888=((1.0)*x4882);
IkReal x4889=((1.0)*x4883);
IkReal x4890=(cj5*x4889);
evalcond[0]=((((-1.0)*cj5*r21*x4888))+(((-1.0)*x4887*x4888))+((r22*x4883)));
evalcond[1]=((((-1.0)*r21*x4890))+(((-1.0)*x4887*x4889))+(((-1.0)*r22*x4888)));
evalcond[2]=((((-1.0)*cj5*r01*x4888))+sj0+((r02*x4883))+(((-1.0)*x4885*x4888)));
evalcond[3]=(((r12*x4883))+(((-1.0)*x4884))+(((-1.0)*cj5*r11*x4888))+(((-1.0)*x4886*x4888)));
evalcond[4]=((((-1.0)*r01*x4890))+(((-1.0)*x4884))+(((-1.0)*r02*x4888))+(((-1.0)*x4885*x4889)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r11*x4890))+(((-1.0)*r12*x4888))+(((-1.0)*x4886*x4889)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4891=((1.0)*sj0);
CheckValue<IkReal> x4892 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj5*x4891))+(((-1.0)*cj5*r21*x4891)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4892.valid){
continue;
}
CheckValue<IkReal> x4893=IKPowWithIntegerCheck(IKsign((((cj5*r10))+(((-1.0)*r11*sj5)))),-1);
if(!x4893.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4892.value)+(((1.5707963267949)*(x4893.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4894=IKcos(j4);
IkReal x4895=IKsin(j4);
IkReal x4896=((1.0)*cj0);
IkReal x4897=(r00*sj5);
IkReal x4898=(r10*sj5);
IkReal x4899=(r20*sj5);
IkReal x4900=((1.0)*x4894);
IkReal x4901=((1.0)*x4895);
IkReal x4902=(cj5*x4901);
evalcond[0]=((((-1.0)*x4899*x4900))+(((-1.0)*cj5*r21*x4900))+((r22*x4895)));
evalcond[1]=((((-1.0)*x4899*x4901))+(((-1.0)*r22*x4900))+(((-1.0)*r21*x4902)));
evalcond[2]=(sj0+((r02*x4895))+(((-1.0)*x4897*x4900))+(((-1.0)*cj5*r01*x4900)));
evalcond[3]=((((-1.0)*x4896))+(((-1.0)*x4898*x4900))+((r12*x4895))+(((-1.0)*cj5*r11*x4900)));
evalcond[4]=((((-1.0)*x4896))+(((-1.0)*r01*x4902))+(((-1.0)*x4897*x4901))+(((-1.0)*r02*x4900)));
evalcond[5]=((((-1.0)*r12*x4900))+(((-1.0)*r11*x4902))+(((-1.0)*x4898*x4901))+(((-1.0)*sj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.6509900123723)*px))+(((0.762425945004893)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.6509900123723)*py))+(((0.762425945004893)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.6509900123723)*px))+(((0.762425945004893)*py))))+IKsqr(((((2.6509900123723)*py))+(((0.762425945004893)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.6509900123723)*px))+(((0.762425945004893)*py))), ((((2.6509900123723)*py))+(((0.762425945004893)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4903=IKsin(j0);
IkReal x4904=IKcos(j0);
evalcond[0]=((((0.1002)*x4904))+(((-1.0)*px))+(((-0.3484)*x4903)));
evalcond[1]=((((0.3484)*x4904))+(((0.1002)*x4903))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x4905=((1.0)*sj5);
IkReal x4906=(((cj5*r10))+(((-1.0)*r11*x4905)));
j4eval[0]=x4906;
j4eval[1]=IKsign(x4906);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*cj5*r21*sj0))+(((-1.0)*r20*sj0*x4905))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x4907=((1.0)*sj5);
IkReal x4908=((((-1.0)*r01*x4907))+((cj5*r00)));
j4eval[0]=x4908;
j4eval[1]=((IKabs(((((-1.0)*cj0*cj5*r21))+(((-1.0)*cj0*r20*x4907)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4908);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x4909=cj5*cj5;
IkReal x4910=((1.0)*r20);
IkReal x4911=(cj5*r21);
IkReal x4912=(((cj5*r01*r20*sj5))+((r00*r20))+((r00*sj5*x4911))+(((-1.0)*r00*x4909*x4910))+((r02*r22))+((r01*r21*x4909)));
j4eval[0]=x4912;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*sj5*x4910))+(((-1.0)*cj0*x4911))))));
j4eval[2]=IKsign(x4912);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4913=cj5*cj5;
IkReal x4914=((1.0)*r20);
IkReal x4915=(cj5*r21);
CheckValue<IkReal> x4916 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*sj5*x4914))+(((-1.0)*cj0*x4915)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4916.valid){
continue;
}
CheckValue<IkReal> x4917=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+((r00*r20))+((r00*sj5*x4915))+(((-1.0)*r00*x4913*x4914))+((r01*r21*x4913))+((r02*r22)))),-1);
if(!x4917.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4916.value)+(((1.5707963267949)*(x4917.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4918=IKcos(j4);
IkReal x4919=IKsin(j4);
IkReal x4920=((1.0)*cj0);
IkReal x4921=(r00*sj5);
IkReal x4922=(r10*sj5);
IkReal x4923=(r20*sj5);
IkReal x4924=((1.0)*x4918);
IkReal x4925=((1.0)*x4919);
IkReal x4926=(cj5*x4925);
evalcond[0]=((((-1.0)*cj5*r21*x4924))+(((-1.0)*x4923*x4924))+((r22*x4919)));
evalcond[1]=((((-1.0)*r21*x4926))+(((-1.0)*r22*x4924))+(((-1.0)*x4923*x4925)));
evalcond[2]=(sj0+((r02*x4919))+(((-1.0)*x4921*x4924))+(((-1.0)*cj5*r01*x4924)));
evalcond[3]=(((r12*x4919))+(((-1.0)*cj5*r11*x4924))+(((-1.0)*x4922*x4924))+(((-1.0)*x4920)));
evalcond[4]=((((-1.0)*r02*x4924))+(((-1.0)*r01*x4926))+(((-1.0)*x4921*x4925))+(((-1.0)*x4920)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r11*x4926))+(((-1.0)*x4922*x4925))+(((-1.0)*r12*x4924)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4927=((1.0)*cj0);
CheckValue<IkReal> x4928=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj5))+((cj5*r00)))),-1);
if(!x4928.valid){
continue;
}
CheckValue<IkReal> x4929 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r21*x4927))+(((-1.0)*r20*sj5*x4927)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4929.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4928.value)))+(x4929.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4930=IKcos(j4);
IkReal x4931=IKsin(j4);
IkReal x4932=((1.0)*cj0);
IkReal x4933=(r00*sj5);
IkReal x4934=(r10*sj5);
IkReal x4935=(r20*sj5);
IkReal x4936=((1.0)*x4930);
IkReal x4937=((1.0)*x4931);
IkReal x4938=(cj5*x4937);
evalcond[0]=((((-1.0)*x4935*x4936))+((r22*x4931))+(((-1.0)*cj5*r21*x4936)));
evalcond[1]=((((-1.0)*x4935*x4937))+(((-1.0)*r21*x4938))+(((-1.0)*r22*x4936)));
evalcond[2]=(sj0+(((-1.0)*x4933*x4936))+((r02*x4931))+(((-1.0)*cj5*r01*x4936)));
evalcond[3]=(((r12*x4931))+(((-1.0)*x4934*x4936))+(((-1.0)*cj5*r11*x4936))+(((-1.0)*x4932)));
evalcond[4]=((((-1.0)*r02*x4936))+(((-1.0)*x4933*x4937))+(((-1.0)*r01*x4938))+(((-1.0)*x4932)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x4934*x4937))+(((-1.0)*r12*x4936))+(((-1.0)*r11*x4938)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4939=((1.0)*sj0);
CheckValue<IkReal> x4940 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj5*x4939))+(((-1.0)*cj5*r21*x4939)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4940.valid){
continue;
}
CheckValue<IkReal> x4941=IKPowWithIntegerCheck(IKsign((((cj5*r10))+(((-1.0)*r11*sj5)))),-1);
if(!x4941.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4940.value)+(((1.5707963267949)*(x4941.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4942=IKcos(j4);
IkReal x4943=IKsin(j4);
IkReal x4944=((1.0)*cj0);
IkReal x4945=(r00*sj5);
IkReal x4946=(r10*sj5);
IkReal x4947=(r20*sj5);
IkReal x4948=((1.0)*x4942);
IkReal x4949=((1.0)*x4943);
IkReal x4950=(cj5*x4949);
evalcond[0]=((((-1.0)*x4947*x4948))+(((-1.0)*cj5*r21*x4948))+((r22*x4943)));
evalcond[1]=((((-1.0)*x4947*x4949))+(((-1.0)*r21*x4950))+(((-1.0)*r22*x4948)));
evalcond[2]=(sj0+(((-1.0)*cj5*r01*x4948))+((r02*x4943))+(((-1.0)*x4945*x4948)));
evalcond[3]=((((-1.0)*x4946*x4948))+(((-1.0)*x4944))+((r12*x4943))+(((-1.0)*cj5*r11*x4948)));
evalcond[4]=((((-1.0)*x4944))+(((-1.0)*x4945*x4949))+(((-1.0)*r02*x4948))+(((-1.0)*r01*x4950)));
evalcond[5]=((((-1.0)*x4946*x4949))+(((-1.0)*sj0))+(((-1.0)*r12*x4948))+(((-1.0)*r11*x4950)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.6509900123723)*px))+(((0.762425945004893)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.6509900123723)*py))+(((0.762425945004893)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.6509900123723)*px))+(((0.762425945004893)*py))))+IKsqr(((((2.6509900123723)*py))+(((0.762425945004893)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.6509900123723)*px))+(((0.762425945004893)*py))), ((((2.6509900123723)*py))+(((0.762425945004893)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4951=IKsin(j0);
IkReal x4952=IKcos(j0);
evalcond[0]=((((-0.3484)*x4951))+(((-1.0)*px))+(((0.1002)*x4952)));
evalcond[1]=((((-1.0)*py))+(((0.1002)*x4951))+(((0.3484)*x4952)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x4953=((1.0)*cj5);
IkReal x4954=(((r01*sj5))+(((-1.0)*r00*x4953)));
j4eval[0]=x4954;
j4eval[1]=IKsign(x4954);
j4eval[2]=((IKabs(((((-1.0)*cj0*r20*sj5))+(((-1.0)*cj0*r21*x4953)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x4955=((1.0)*cj5);
IkReal x4956=(((r11*sj5))+(((-1.0)*r10*x4955)));
j4eval[0]=x4956;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r21*sj0*x4955))+(((-1.0)*r20*sj0*sj5))))));
j4eval[2]=IKsign(x4956);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x4957=cj5*cj5;
IkReal x4958=((1.0)*r20);
IkReal x4959=(cj5*r21);
IkReal x4960=(((cj5*r01*r20*sj5))+((r00*r20))+((r00*sj5*x4959))+((r01*r21*x4957))+(((-1.0)*r00*x4957*x4958))+((r02*r22)));
j4eval[0]=x4960;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*x4959))+(((-1.0)*cj0*sj5*x4958))))));
j4eval[2]=IKsign(x4960);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4961=cj5*cj5;
IkReal x4962=((1.0)*r20);
IkReal x4963=(cj5*r21);
CheckValue<IkReal> x4964 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*x4963))+(((-1.0)*cj0*sj5*x4962)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4964.valid){
continue;
}
CheckValue<IkReal> x4965=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r00*x4961*x4962))+((r00*r20))+((r00*sj5*x4963))+((r01*r21*x4961))+((r02*r22)))),-1);
if(!x4965.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4964.value)+(((1.5707963267949)*(x4965.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4966=IKcos(j4);
IkReal x4967=IKsin(j4);
IkReal x4968=((1.0)*sj0);
IkReal x4969=(r00*sj5);
IkReal x4970=(r10*sj5);
IkReal x4971=(r20*sj5);
IkReal x4972=((1.0)*x4966);
IkReal x4973=((1.0)*x4967);
IkReal x4974=(cj5*x4973);
evalcond[0]=((((-1.0)*cj5*r21*x4972))+((r22*x4967))+(((-1.0)*x4971*x4972)));
evalcond[1]=((((-1.0)*r21*x4974))+(((-1.0)*x4971*x4973))+(((-1.0)*r22*x4972)));
evalcond[2]=(cj0+(((-1.0)*cj5*r11*x4972))+((r12*x4967))+(((-1.0)*x4970*x4972)));
evalcond[3]=((((-1.0)*cj5*r01*x4972))+(((-1.0)*x4968))+((r02*x4967))+(((-1.0)*x4969*x4972)));
evalcond[4]=((((-1.0)*r02*x4972))+(((-1.0)*r01*x4974))+(((-1.0)*cj0))+(((-1.0)*x4969*x4973)));
evalcond[5]=((((-1.0)*x4968))+(((-1.0)*r12*x4972))+(((-1.0)*r11*x4974))+(((-1.0)*x4970*x4973)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4975=((1.0)*cj5);
CheckValue<IkReal> x4976 = IKatan2WithCheck(IkReal(((((-1.0)*r21*sj0*x4975))+(((-1.0)*r20*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4976.valid){
continue;
}
CheckValue<IkReal> x4977=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x4975))+((r11*sj5)))),-1);
if(!x4977.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4976.value)+(((1.5707963267949)*(x4977.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4978=IKcos(j4);
IkReal x4979=IKsin(j4);
IkReal x4980=((1.0)*sj0);
IkReal x4981=(r00*sj5);
IkReal x4982=(r10*sj5);
IkReal x4983=(r20*sj5);
IkReal x4984=((1.0)*x4978);
IkReal x4985=((1.0)*x4979);
IkReal x4986=(cj5*x4985);
evalcond[0]=(((r22*x4979))+(((-1.0)*cj5*r21*x4984))+(((-1.0)*x4983*x4984)));
evalcond[1]=((((-1.0)*r22*x4984))+(((-1.0)*r21*x4986))+(((-1.0)*x4983*x4985)));
evalcond[2]=((((-1.0)*cj5*r11*x4984))+(((-1.0)*x4982*x4984))+cj0+((r12*x4979)));
evalcond[3]=((((-1.0)*cj5*r01*x4984))+((r02*x4979))+(((-1.0)*x4980))+(((-1.0)*x4981*x4984)));
evalcond[4]=((((-1.0)*r01*x4986))+(((-1.0)*r02*x4984))+(((-1.0)*x4981*x4985))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x4982*x4985))+(((-1.0)*r12*x4984))+(((-1.0)*r11*x4986))+(((-1.0)*x4980)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4987=((1.0)*cj0);
CheckValue<IkReal> x4988 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj5*x4987))+(((-1.0)*cj5*r21*x4987)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4988.valid){
continue;
}
CheckValue<IkReal> x4989=IKPowWithIntegerCheck(IKsign((((r01*sj5))+(((-1.0)*cj5*r00)))),-1);
if(!x4989.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4988.value)+(((1.5707963267949)*(x4989.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4990=IKcos(j4);
IkReal x4991=IKsin(j4);
IkReal x4992=((1.0)*sj0);
IkReal x4993=(r00*sj5);
IkReal x4994=(r10*sj5);
IkReal x4995=(r20*sj5);
IkReal x4996=((1.0)*x4990);
IkReal x4997=((1.0)*x4991);
IkReal x4998=(cj5*x4997);
evalcond[0]=(((r22*x4991))+(((-1.0)*cj5*r21*x4996))+(((-1.0)*x4995*x4996)));
evalcond[1]=((((-1.0)*r21*x4998))+(((-1.0)*r22*x4996))+(((-1.0)*x4995*x4997)));
evalcond[2]=(cj0+(((-1.0)*cj5*r11*x4996))+((r12*x4991))+(((-1.0)*x4994*x4996)));
evalcond[3]=((((-1.0)*cj5*r01*x4996))+(((-1.0)*x4992))+((r02*x4991))+(((-1.0)*x4993*x4996)));
evalcond[4]=((((-1.0)*r01*x4998))+(((-1.0)*r02*x4996))+(((-1.0)*x4993*x4997))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r11*x4998))+(((-1.0)*x4992))+(((-1.0)*r12*x4996))+(((-1.0)*x4994*x4997)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((9.98003992015968)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.98003992015968)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((9.98003992015968)*py))+IKsqr(((9.98003992015968)*px))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((9.98003992015968)*py), ((9.98003992015968)*px));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((0.1002)*(IKcos(j0)))));
evalcond[1]=((((-1.0)*py))+(((0.1002)*(IKsin(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4999=((1.0)*sj5);
IkReal x5000=(((cj5*r10))+(((-1.0)*r11*x4999)));
j4eval[0]=x5000;
j4eval[1]=IKsign(x5000);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*cj5*r21*sj0))+(((-1.0)*r20*sj0*x4999))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5001=((1.0)*sj5);
IkReal x5002=((((-1.0)*r01*x5001))+((cj5*r00)));
j4eval[0]=x5002;
j4eval[1]=((IKabs(((((-1.0)*cj0*cj5*r21))+(((-1.0)*cj0*r20*x5001)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5002);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5003=cj5*cj5;
IkReal x5004=((1.0)*r20);
IkReal x5005=(cj5*r21);
IkReal x5006=(((cj5*r01*r20*sj5))+((r00*sj5*x5005))+((r00*r20))+(((-1.0)*r00*x5003*x5004))+((r02*r22))+((r01*r21*x5003)));
j4eval[0]=x5006;
j4eval[1]=((IKabs(((((-1.0)*cj0*x5005))+(((-1.0)*cj0*sj5*x5004)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5006);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5007=cj5*cj5;
IkReal x5008=((1.0)*r20);
IkReal x5009=(cj5*r21);
CheckValue<IkReal> x5010=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+((r00*sj5*x5009))+((r00*r20))+(((-1.0)*r00*x5007*x5008))+((r02*r22))+((r01*r21*x5007)))),-1);
if(!x5010.valid){
continue;
}
CheckValue<IkReal> x5011 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*x5009))+(((-1.0)*cj0*sj5*x5008)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5011.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5010.value)))+(x5011.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5012=IKcos(j4);
IkReal x5013=IKsin(j4);
IkReal x5014=((1.0)*cj0);
IkReal x5015=(r00*sj5);
IkReal x5016=(r10*sj5);
IkReal x5017=(r20*sj5);
IkReal x5018=((1.0)*x5012);
IkReal x5019=((1.0)*x5013);
IkReal x5020=(cj5*x5019);
evalcond[0]=((((-1.0)*x5017*x5018))+(((-1.0)*cj5*r21*x5018))+((r22*x5013)));
evalcond[1]=((((-1.0)*r21*x5020))+(((-1.0)*x5017*x5019))+(((-1.0)*r22*x5018)));
evalcond[2]=(sj0+((r02*x5013))+(((-1.0)*cj5*r01*x5018))+(((-1.0)*x5015*x5018)));
evalcond[3]=((((-1.0)*cj5*r11*x5018))+(((-1.0)*x5016*x5018))+((r12*x5013))+(((-1.0)*x5014)));
evalcond[4]=((((-1.0)*r01*x5020))+(((-1.0)*r02*x5018))+(((-1.0)*x5015*x5019))+(((-1.0)*x5014)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r11*x5020))+(((-1.0)*x5016*x5019))+(((-1.0)*r12*x5018)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5021=((1.0)*cj0);
CheckValue<IkReal> x5022=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj5))+((cj5*r00)))),-1);
if(!x5022.valid){
continue;
}
CheckValue<IkReal> x5023 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r21*x5021))+(((-1.0)*r20*sj5*x5021)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5023.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5022.value)))+(x5023.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5024=IKcos(j4);
IkReal x5025=IKsin(j4);
IkReal x5026=((1.0)*cj0);
IkReal x5027=(r00*sj5);
IkReal x5028=(r10*sj5);
IkReal x5029=(r20*sj5);
IkReal x5030=((1.0)*x5024);
IkReal x5031=((1.0)*x5025);
IkReal x5032=(cj5*x5031);
evalcond[0]=((((-1.0)*cj5*r21*x5030))+(((-1.0)*x5029*x5030))+((r22*x5025)));
evalcond[1]=((((-1.0)*x5029*x5031))+(((-1.0)*r22*x5030))+(((-1.0)*r21*x5032)));
evalcond[2]=((((-1.0)*x5027*x5030))+sj0+((r02*x5025))+(((-1.0)*cj5*r01*x5030)));
evalcond[3]=((((-1.0)*x5028*x5030))+((r12*x5025))+(((-1.0)*cj5*r11*x5030))+(((-1.0)*x5026)));
evalcond[4]=((((-1.0)*x5027*x5031))+(((-1.0)*r02*x5030))+(((-1.0)*x5026))+(((-1.0)*r01*x5032)));
evalcond[5]=((((-1.0)*x5028*x5031))+(((-1.0)*sj0))+(((-1.0)*r11*x5032))+(((-1.0)*r12*x5030)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5033=((1.0)*sj0);
CheckValue<IkReal> x5034=IKPowWithIntegerCheck(IKsign((((cj5*r10))+(((-1.0)*r11*sj5)))),-1);
if(!x5034.valid){
continue;
}
CheckValue<IkReal> x5035 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r21*x5033))+(((-1.0)*r20*sj5*x5033)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5035.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5034.value)))+(x5035.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5036=IKcos(j4);
IkReal x5037=IKsin(j4);
IkReal x5038=((1.0)*cj0);
IkReal x5039=(r00*sj5);
IkReal x5040=(r10*sj5);
IkReal x5041=(r20*sj5);
IkReal x5042=((1.0)*x5036);
IkReal x5043=((1.0)*x5037);
IkReal x5044=(cj5*x5043);
evalcond[0]=((((-1.0)*cj5*r21*x5042))+(((-1.0)*x5041*x5042))+((r22*x5037)));
evalcond[1]=((((-1.0)*r21*x5044))+(((-1.0)*x5041*x5043))+(((-1.0)*r22*x5042)));
evalcond[2]=(sj0+((r02*x5037))+(((-1.0)*cj5*r01*x5042))+(((-1.0)*x5039*x5042)));
evalcond[3]=(((r12*x5037))+(((-1.0)*x5040*x5042))+(((-1.0)*cj5*r11*x5042))+(((-1.0)*x5038)));
evalcond[4]=((((-1.0)*r02*x5042))+(((-1.0)*x5039*x5043))+(((-1.0)*r01*x5044))+(((-1.0)*x5038)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5040*x5043))+(((-1.0)*r12*x5042))+(((-1.0)*r11*x5044)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((9.98003992015968)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.98003992015968)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((9.98003992015968)*py))+IKsqr(((9.98003992015968)*px))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((9.98003992015968)*py), ((9.98003992015968)*px));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((0.1002)*(IKcos(j0)))));
evalcond[1]=((((-1.0)*py))+(((0.1002)*(IKsin(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5045=((1.0)*cj5);
IkReal x5046=(((r01*sj5))+(((-1.0)*r00*x5045)));
j4eval[0]=x5046;
j4eval[1]=IKsign(x5046);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r20*sj5))+(((-1.0)*cj0*r21*x5045))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5047=((1.0)*cj5);
IkReal x5048=((((-1.0)*r10*x5047))+((r11*sj5)));
j4eval[0]=x5048;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r21*sj0*x5047))+(((-1.0)*r20*sj0*sj5))))));
j4eval[2]=IKsign(x5048);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5049=cj5*cj5;
IkReal x5050=((1.0)*r20);
IkReal x5051=(cj5*r21);
IkReal x5052=(((cj5*r01*r20*sj5))+((r00*r20))+((r01*r21*x5049))+((r00*sj5*x5051))+(((-1.0)*r00*x5049*x5050))+((r02*r22)));
j4eval[0]=x5052;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*sj5*x5050))+(((-1.0)*cj0*x5051))))));
j4eval[2]=IKsign(x5052);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5053=cj5*cj5;
IkReal x5054=((1.0)*r20);
IkReal x5055=(cj5*r21);
CheckValue<IkReal> x5056=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+((r01*r21*x5053))+((r00*r20))+(((-1.0)*r00*x5053*x5054))+((r00*sj5*x5055))+((r02*r22)))),-1);
if(!x5056.valid){
continue;
}
CheckValue<IkReal> x5057 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*sj5*x5054))+(((-1.0)*cj0*x5055)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5057.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5056.value)))+(x5057.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5058=IKcos(j4);
IkReal x5059=IKsin(j4);
IkReal x5060=((1.0)*sj0);
IkReal x5061=(r00*sj5);
IkReal x5062=(r10*sj5);
IkReal x5063=(r20*sj5);
IkReal x5064=((1.0)*x5058);
IkReal x5065=((1.0)*x5059);
IkReal x5066=(cj5*x5065);
evalcond[0]=(((r22*x5059))+(((-1.0)*cj5*r21*x5064))+(((-1.0)*x5063*x5064)));
evalcond[1]=((((-1.0)*r21*x5066))+(((-1.0)*r22*x5064))+(((-1.0)*x5063*x5065)));
evalcond[2]=((((-1.0)*cj5*r11*x5064))+cj0+((r12*x5059))+(((-1.0)*x5062*x5064)));
evalcond[3]=((((-1.0)*x5060))+(((-1.0)*x5061*x5064))+(((-1.0)*cj5*r01*x5064))+((r02*x5059)));
evalcond[4]=((((-1.0)*x5061*x5065))+(((-1.0)*r02*x5064))+(((-1.0)*cj0))+(((-1.0)*r01*x5066)));
evalcond[5]=((((-1.0)*x5060))+(((-1.0)*r12*x5064))+(((-1.0)*r11*x5066))+(((-1.0)*x5062*x5065)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5067=((1.0)*cj5);
CheckValue<IkReal> x5068 = IKatan2WithCheck(IkReal(((((-1.0)*r21*sj0*x5067))+(((-1.0)*r20*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5068.valid){
continue;
}
CheckValue<IkReal> x5069=IKPowWithIntegerCheck(IKsign((((r11*sj5))+(((-1.0)*r10*x5067)))),-1);
if(!x5069.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5068.value)+(((1.5707963267949)*(x5069.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5070=IKcos(j4);
IkReal x5071=IKsin(j4);
IkReal x5072=((1.0)*sj0);
IkReal x5073=(r00*sj5);
IkReal x5074=(r10*sj5);
IkReal x5075=(r20*sj5);
IkReal x5076=((1.0)*x5070);
IkReal x5077=((1.0)*x5071);
IkReal x5078=(cj5*x5077);
evalcond[0]=((((-1.0)*cj5*r21*x5076))+(((-1.0)*x5075*x5076))+((r22*x5071)));
evalcond[1]=((((-1.0)*r21*x5078))+(((-1.0)*r22*x5076))+(((-1.0)*x5075*x5077)));
evalcond[2]=(cj0+(((-1.0)*cj5*r11*x5076))+((r12*x5071))+(((-1.0)*x5074*x5076)));
evalcond[3]=((((-1.0)*x5072))+(((-1.0)*cj5*r01*x5076))+((r02*x5071))+(((-1.0)*x5073*x5076)));
evalcond[4]=((((-1.0)*r02*x5076))+(((-1.0)*x5073*x5077))+(((-1.0)*r01*x5078))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x5072))+(((-1.0)*r11*x5078))+(((-1.0)*r12*x5076))+(((-1.0)*x5074*x5077)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5079=((1.0)*cj0);
CheckValue<IkReal> x5080=IKPowWithIntegerCheck(IKsign((((r01*sj5))+(((-1.0)*cj5*r00)))),-1);
if(!x5080.valid){
continue;
}
CheckValue<IkReal> x5081 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r21*x5079))+(((-1.0)*r20*sj5*x5079)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5081.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5080.value)))+(x5081.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5082=IKcos(j4);
IkReal x5083=IKsin(j4);
IkReal x5084=((1.0)*sj0);
IkReal x5085=(r00*sj5);
IkReal x5086=(r10*sj5);
IkReal x5087=(r20*sj5);
IkReal x5088=((1.0)*x5082);
IkReal x5089=((1.0)*x5083);
IkReal x5090=(cj5*x5089);
evalcond[0]=((((-1.0)*cj5*r21*x5088))+(((-1.0)*x5087*x5088))+((r22*x5083)));
evalcond[1]=((((-1.0)*x5087*x5089))+(((-1.0)*r21*x5090))+(((-1.0)*r22*x5088)));
evalcond[2]=(cj0+((r12*x5083))+(((-1.0)*x5086*x5088))+(((-1.0)*cj5*r11*x5088)));
evalcond[3]=((((-1.0)*cj5*r01*x5088))+(((-1.0)*x5085*x5088))+(((-1.0)*x5084))+((r02*x5083)));
evalcond[4]=((((-1.0)*r01*x5090))+(((-1.0)*x5085*x5089))+(((-1.0)*r02*x5088))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x5088))+(((-1.0)*r11*x5090))+(((-1.0)*x5086*x5089))+(((-1.0)*x5084)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.6509900123723)*px))+(((0.762425945004893)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.6509900123723)*py))+(((0.762425945004893)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.6509900123723)*px))+(((0.762425945004893)*py))))+IKsqr(((((-2.6509900123723)*py))+(((0.762425945004893)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.6509900123723)*px))+(((0.762425945004893)*py))), ((((-2.6509900123723)*py))+(((0.762425945004893)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5091=IKsin(j0);
IkReal x5092=IKcos(j0);
evalcond[0]=((((0.1002)*x5092))+(((0.3484)*x5091))+(((-1.0)*px)));
evalcond[1]=((((0.1002)*x5091))+(((-0.3484)*x5092))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5093=((1.0)*cj5);
IkReal x5094=(((r01*sj5))+(((-1.0)*r00*x5093)));
j4eval[0]=x5094;
j4eval[1]=IKsign(x5094);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r20*sj5))+(((-1.0)*cj0*r21*x5093))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5095=((1.0)*cj5);
IkReal x5096=((((-1.0)*r10*x5095))+((r11*sj5)));
j4eval[0]=x5096;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r21*sj0*x5095))+(((-1.0)*r20*sj0*sj5))))));
j4eval[2]=IKsign(x5096);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5097=cj5*cj5;
IkReal x5098=((1.0)*r20);
IkReal x5099=(cj5*r21);
IkReal x5100=(((cj5*r01*r20*sj5))+((r00*r20))+((r01*r21*x5097))+(((-1.0)*r00*x5097*x5098))+((r00*sj5*x5099))+((r02*r22)));
j4eval[0]=x5100;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*sj5*x5098))+(((-1.0)*cj0*x5099))))));
j4eval[2]=IKsign(x5100);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5101=cj5*cj5;
IkReal x5102=((1.0)*r20);
IkReal x5103=(cj5*r21);
CheckValue<IkReal> x5104 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*x5103))+(((-1.0)*cj0*sj5*x5102)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5104.valid){
continue;
}
CheckValue<IkReal> x5105=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r00*x5101*x5102))+((r00*r20))+((r00*sj5*x5103))+((r01*r21*x5101))+((r02*r22)))),-1);
if(!x5105.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5104.value)+(((1.5707963267949)*(x5105.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5106=IKcos(j4);
IkReal x5107=IKsin(j4);
IkReal x5108=((1.0)*sj0);
IkReal x5109=(r00*sj5);
IkReal x5110=(r10*sj5);
IkReal x5111=(r20*sj5);
IkReal x5112=((1.0)*x5106);
IkReal x5113=((1.0)*x5107);
IkReal x5114=(cj5*x5113);
evalcond[0]=((((-1.0)*x5111*x5112))+((r22*x5107))+(((-1.0)*cj5*r21*x5112)));
evalcond[1]=((((-1.0)*r22*x5112))+(((-1.0)*x5111*x5113))+(((-1.0)*r21*x5114)));
evalcond[2]=(((r12*x5107))+(((-1.0)*cj5*r11*x5112))+cj0+(((-1.0)*x5110*x5112)));
evalcond[3]=((((-1.0)*x5108))+((r02*x5107))+(((-1.0)*cj5*r01*x5112))+(((-1.0)*x5109*x5112)));
evalcond[4]=((((-1.0)*r02*x5112))+(((-1.0)*x5109*x5113))+(((-1.0)*r01*x5114))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x5108))+(((-1.0)*x5110*x5113))+(((-1.0)*r11*x5114))+(((-1.0)*r12*x5112)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5115=((1.0)*cj5);
CheckValue<IkReal> x5116=IKPowWithIntegerCheck(IKsign((((r11*sj5))+(((-1.0)*r10*x5115)))),-1);
if(!x5116.valid){
continue;
}
CheckValue<IkReal> x5117 = IKatan2WithCheck(IkReal(((((-1.0)*r21*sj0*x5115))+(((-1.0)*r20*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5117.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5116.value)))+(x5117.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5118=IKcos(j4);
IkReal x5119=IKsin(j4);
IkReal x5120=((1.0)*sj0);
IkReal x5121=(r00*sj5);
IkReal x5122=(r10*sj5);
IkReal x5123=(r20*sj5);
IkReal x5124=((1.0)*x5118);
IkReal x5125=((1.0)*x5119);
IkReal x5126=(cj5*x5125);
evalcond[0]=(((r22*x5119))+(((-1.0)*x5123*x5124))+(((-1.0)*cj5*r21*x5124)));
evalcond[1]=((((-1.0)*r21*x5126))+(((-1.0)*x5123*x5125))+(((-1.0)*r22*x5124)));
evalcond[2]=(cj0+(((-1.0)*cj5*r11*x5124))+(((-1.0)*x5122*x5124))+((r12*x5119)));
evalcond[3]=(((r02*x5119))+(((-1.0)*x5121*x5124))+(((-1.0)*x5120))+(((-1.0)*cj5*r01*x5124)));
evalcond[4]=((((-1.0)*r01*x5126))+(((-1.0)*x5121*x5125))+(((-1.0)*r02*x5124))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x5122*x5125))+(((-1.0)*r12*x5124))+(((-1.0)*x5120))+(((-1.0)*r11*x5126)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5127=((1.0)*cj0);
CheckValue<IkReal> x5128=IKPowWithIntegerCheck(IKsign((((r01*sj5))+(((-1.0)*cj5*r00)))),-1);
if(!x5128.valid){
continue;
}
CheckValue<IkReal> x5129 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj5*x5127))+(((-1.0)*cj5*r21*x5127)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5129.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5128.value)))+(x5129.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5130=IKcos(j4);
IkReal x5131=IKsin(j4);
IkReal x5132=((1.0)*sj0);
IkReal x5133=(r00*sj5);
IkReal x5134=(r10*sj5);
IkReal x5135=(r20*sj5);
IkReal x5136=((1.0)*x5130);
IkReal x5137=((1.0)*x5131);
IkReal x5138=(cj5*x5137);
evalcond[0]=(((r22*x5131))+(((-1.0)*x5135*x5136))+(((-1.0)*cj5*r21*x5136)));
evalcond[1]=((((-1.0)*x5135*x5137))+(((-1.0)*r21*x5138))+(((-1.0)*r22*x5136)));
evalcond[2]=(cj0+((r12*x5131))+(((-1.0)*cj5*r11*x5136))+(((-1.0)*x5134*x5136)));
evalcond[3]=((((-1.0)*x5132))+(((-1.0)*cj5*r01*x5136))+((r02*x5131))+(((-1.0)*x5133*x5136)));
evalcond[4]=((((-1.0)*r01*x5138))+(((-1.0)*r02*x5136))+(((-1.0)*cj0))+(((-1.0)*x5133*x5137)));
evalcond[5]=((((-1.0)*r11*x5138))+(((-1.0)*x5132))+(((-1.0)*r12*x5136))+(((-1.0)*x5134*x5137)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.6509900123723)*px))+(((0.762425945004893)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.6509900123723)*py))+(((0.762425945004893)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.6509900123723)*px))+(((0.762425945004893)*py))))+IKsqr(((((-2.6509900123723)*py))+(((0.762425945004893)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.6509900123723)*px))+(((0.762425945004893)*py))), ((((-2.6509900123723)*py))+(((0.762425945004893)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5139=IKsin(j0);
IkReal x5140=IKcos(j0);
evalcond[0]=((((-1.0)*px))+(((0.1002)*x5140))+(((0.3484)*x5139)));
evalcond[1]=((((-1.0)*py))+(((0.1002)*x5139))+(((-0.3484)*x5140)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5141=((1.0)*sj5);
IkReal x5142=(((cj5*r10))+(((-1.0)*r11*x5141)));
j4eval[0]=x5142;
j4eval[1]=IKsign(x5142);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x5141))+(((-1.0)*cj5*r21*sj0))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5143=((1.0)*sj5);
IkReal x5144=((((-1.0)*r01*x5143))+((cj5*r00)));
j4eval[0]=x5144;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*cj5*r21))+(((-1.0)*cj0*r20*x5143))))));
j4eval[2]=IKsign(x5144);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5145=cj5*cj5;
IkReal x5146=((1.0)*r20);
IkReal x5147=(cj5*r21);
IkReal x5148=(((cj5*r01*r20*sj5))+((r01*r21*x5145))+(((-1.0)*r00*x5145*x5146))+((r00*r20))+((r00*sj5*x5147))+((r02*r22)));
j4eval[0]=x5148;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*x5147))+(((-1.0)*cj0*sj5*x5146))))));
j4eval[2]=IKsign(x5148);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5149=cj5*cj5;
IkReal x5150=((1.0)*r20);
IkReal x5151=(cj5*r21);
CheckValue<IkReal> x5152 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*x5151))+(((-1.0)*cj0*sj5*x5150)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5152.valid){
continue;
}
CheckValue<IkReal> x5153=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+((r01*r21*x5149))+((r00*r20))+(((-1.0)*r00*x5149*x5150))+((r00*sj5*x5151))+((r02*r22)))),-1);
if(!x5153.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5152.value)+(((1.5707963267949)*(x5153.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5154=IKcos(j4);
IkReal x5155=IKsin(j4);
IkReal x5156=((1.0)*cj0);
IkReal x5157=(r00*sj5);
IkReal x5158=(r10*sj5);
IkReal x5159=(r20*sj5);
IkReal x5160=((1.0)*x5154);
IkReal x5161=((1.0)*x5155);
IkReal x5162=(cj5*x5161);
evalcond[0]=((((-1.0)*x5159*x5160))+((r22*x5155))+(((-1.0)*cj5*r21*x5160)));
evalcond[1]=((((-1.0)*r22*x5160))+(((-1.0)*r21*x5162))+(((-1.0)*x5159*x5161)));
evalcond[2]=((((-1.0)*x5157*x5160))+sj0+((r02*x5155))+(((-1.0)*cj5*r01*x5160)));
evalcond[3]=(((r12*x5155))+(((-1.0)*x5158*x5160))+(((-1.0)*x5156))+(((-1.0)*cj5*r11*x5160)));
evalcond[4]=((((-1.0)*x5157*x5161))+(((-1.0)*r02*x5160))+(((-1.0)*r01*x5162))+(((-1.0)*x5156)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r12*x5160))+(((-1.0)*r11*x5162))+(((-1.0)*x5158*x5161)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5163=((1.0)*cj0);
CheckValue<IkReal> x5164=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj5))+((cj5*r00)))),-1);
if(!x5164.valid){
continue;
}
CheckValue<IkReal> x5165 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj5*x5163))+(((-1.0)*cj5*r21*x5163)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5165.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5164.value)))+(x5165.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5166=IKcos(j4);
IkReal x5167=IKsin(j4);
IkReal x5168=((1.0)*cj0);
IkReal x5169=(r00*sj5);
IkReal x5170=(r10*sj5);
IkReal x5171=(r20*sj5);
IkReal x5172=((1.0)*x5166);
IkReal x5173=((1.0)*x5167);
IkReal x5174=(cj5*x5173);
evalcond[0]=(((r22*x5167))+(((-1.0)*cj5*r21*x5172))+(((-1.0)*x5171*x5172)));
evalcond[1]=((((-1.0)*r21*x5174))+(((-1.0)*r22*x5172))+(((-1.0)*x5171*x5173)));
evalcond[2]=(sj0+(((-1.0)*x5169*x5172))+(((-1.0)*cj5*r01*x5172))+((r02*x5167)));
evalcond[3]=((((-1.0)*x5170*x5172))+(((-1.0)*x5168))+((r12*x5167))+(((-1.0)*cj5*r11*x5172)));
evalcond[4]=((((-1.0)*r02*x5172))+(((-1.0)*x5169*x5173))+(((-1.0)*r01*x5174))+(((-1.0)*x5168)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5170*x5173))+(((-1.0)*r11*x5174))+(((-1.0)*r12*x5172)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5175=((1.0)*sj0);
CheckValue<IkReal> x5176 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj5*x5175))+(((-1.0)*cj5*r21*x5175)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5176.valid){
continue;
}
CheckValue<IkReal> x5177=IKPowWithIntegerCheck(IKsign((((cj5*r10))+(((-1.0)*r11*sj5)))),-1);
if(!x5177.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5176.value)+(((1.5707963267949)*(x5177.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5178=IKcos(j4);
IkReal x5179=IKsin(j4);
IkReal x5180=((1.0)*cj0);
IkReal x5181=(r00*sj5);
IkReal x5182=(r10*sj5);
IkReal x5183=(r20*sj5);
IkReal x5184=((1.0)*x5178);
IkReal x5185=((1.0)*x5179);
IkReal x5186=(cj5*x5185);
evalcond[0]=((((-1.0)*x5183*x5184))+(((-1.0)*cj5*r21*x5184))+((r22*x5179)));
evalcond[1]=((((-1.0)*r21*x5186))+(((-1.0)*x5183*x5185))+(((-1.0)*r22*x5184)));
evalcond[2]=(sj0+((r02*x5179))+(((-1.0)*cj5*r01*x5184))+(((-1.0)*x5181*x5184)));
evalcond[3]=((((-1.0)*x5182*x5184))+((r12*x5179))+(((-1.0)*cj5*r11*x5184))+(((-1.0)*x5180)));
evalcond[4]=((((-1.0)*r02*x5184))+(((-1.0)*x5180))+(((-1.0)*x5181*x5185))+(((-1.0)*r01*x5186)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5182*x5185))+(((-1.0)*r12*x5184))+(((-1.0)*r11*x5186)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5187=(cj1*sj2);
IkReal x5188=(cj2*sj1);
IkReal x5189=(cj5*r00);
IkReal x5190=((5000.0)*px);
IkReal x5191=(r01*sj5);
IkReal x5192=((1742.0)*sj1);
CheckValue<IkReal> x5193=IKPowWithIntegerCheck((x5187+x5188),-1);
if(!x5193.valid){
continue;
}
CheckValue<IkReal> x5194=IKPowWithIntegerCheck(((((501.0)*x5187))+(((501.0)*x5188))),-1);
if(!x5194.valid){
continue;
}
if( IKabs(((x5193.value)*(((((-1.0)*x5191))+x5189)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x5194.value)*(((((2250.0)*x5187*x5189))+((x5188*x5190))+(((-1.0)*x5191*x5192))+(((-2250.0)*x5188*x5191))+(((2250.0)*x5188*x5189))+(((-2250.0)*x5187*x5191))+((x5187*x5190))+((x5189*x5192)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x5193.value)*(((((-1.0)*x5191))+x5189))))+IKsqr(((x5194.value)*(((((2250.0)*x5187*x5189))+((x5188*x5190))+(((-1.0)*x5191*x5192))+(((-2250.0)*x5188*x5191))+(((2250.0)*x5188*x5189))+(((-2250.0)*x5187*x5191))+((x5187*x5190))+((x5189*x5192))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x5193.value)*(((((-1.0)*x5191))+x5189))), ((x5194.value)*(((((2250.0)*x5187*x5189))+((x5188*x5190))+(((-1.0)*x5191*x5192))+(((-2250.0)*x5188*x5191))+(((2250.0)*x5188*x5189))+(((-2250.0)*x5187*x5191))+((x5187*x5190))+((x5189*x5192))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5195=IKsin(j0);
IkReal x5196=IKcos(j0);
IkReal x5197=(cj2*sj1);
IkReal x5198=(cj5*r00);
IkReal x5199=((0.3484)*sj1);
IkReal x5200=(cj1*sj2);
IkReal x5201=(cj5*r10);
IkReal x5202=(r11*sj5);
IkReal x5203=(r01*sj5);
IkReal x5204=((0.3495)*x5196);
IkReal x5205=((1.0)*x5196);
IkReal x5206=((0.3495)*x5195);
evalcond[0]=(((x5195*x5197))+(((-1.0)*x5198))+x5203+((x5195*x5200)));
evalcond[1]=((((-1.0)*x5200*x5205))+x5202+(((-1.0)*x5197*x5205))+(((-1.0)*x5201)));
evalcond[2]=((((0.1005)*x5203))+(((-1.0)*x5200*x5206))+(((-0.1005)*x5198))+(((-1.0)*px))+(((-1.0)*x5197*x5206))+(((-1.0)*x5195*x5199))+(((0.1002)*x5196)));
evalcond[3]=((((0.1005)*x5202))+((x5200*x5204))+((x5197*x5204))+(((-1.0)*py))+((x5196*x5199))+(((0.1002)*x5195))+(((-0.1005)*x5201)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5207=((1.0)*sj5);
IkReal x5208=(((cj5*r10))+(((-1.0)*r11*x5207)));
j4eval[0]=x5208;
j4eval[1]=IKsign(x5208);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*cj5*r21))+(((-1.0)*cj0*r20*x5207))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5209=((1.0)*cj5);
IkReal x5210=(((r01*sj5))+(((-1.0)*r00*x5209)));
j4eval[0]=x5210;
j4eval[1]=IKsign(x5210);
j4eval[2]=((IKabs(((((-1.0)*r21*sj0*x5209))+(((-1.0)*r20*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5211=((1.0)*sj0);
IkReal x5212=(((cj5*r20))+(((-1.0)*r21*sj5)));
j4eval[0]=x5212;
j4eval[1]=((IKabs((((cj0*cj5*r11))+(((-1.0)*cj5*r01*x5211))+((cj0*r10*sj5))+(((-1.0)*r00*sj5*x5211)))))+(IKabs(((((-1.0)*cj0*r12))+((r02*sj0))))));
j4eval[2]=IKsign(x5212);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x5213=((-1.0)*r21);
IkReal x5215 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x5215)==0){
continue;
}
IkReal x5214=pow(x5215,-0.5);
CheckValue<IkReal> x5216 = IKatan2WithCheck(IkReal(r20),IkReal(x5213),IKFAST_ATAN2_MAGTHRESH);
if(!x5216.valid){
continue;
}
IkReal gconst108=((-1.0)*(x5216.value));
IkReal gconst109=((-1.0)*r20*x5214);
IkReal gconst110=(x5213*x5214);
CheckValue<IkReal> x5217 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x5217.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5217.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x5218=((-1.0)*r21);
CheckValue<IkReal> x5221 = IKatan2WithCheck(IkReal(r20),IkReal(x5218),IKFAST_ATAN2_MAGTHRESH);
if(!x5221.valid){
continue;
}
IkReal x5219=((-1.0)*(x5221.value));
IkReal x5220=x5214;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst109;
cj5=gconst110;
j5=x5219;
IkReal gconst108=x5219;
IkReal gconst109=((-1.0)*r20*x5220);
IkReal gconst110=(x5218*x5220);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5222=((-1.0)*r21);
CheckValue<IkReal> x5225 = IKatan2WithCheck(IkReal(r20),IkReal(x5222),IKFAST_ATAN2_MAGTHRESH);
if(!x5225.valid){
continue;
}
IkReal x5223=((-1.0)*(x5225.value));
IkReal x5224=x5214;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst109;
cj5=gconst110;
j5=x5223;
IkReal gconst108=x5223;
IkReal gconst109=((-1.0)*r20*x5224);
IkReal gconst110=(x5222*x5224);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x5226=((-1.0)*r21);
CheckValue<IkReal> x5229 = IKatan2WithCheck(IkReal(r20),IkReal(x5226),IKFAST_ATAN2_MAGTHRESH);
if(!x5229.valid){
continue;
}
IkReal x5227=((-1.0)*(x5229.value));
IkReal x5228=x5214;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst109;
cj5=gconst110;
j5=x5227;
IkReal gconst108=x5227;
IkReal gconst109=((-1.0)*r20*x5228);
IkReal gconst110=(x5226*x5228);
IkReal x5230=((1.0)*(r22*r22));
CheckValue<IkReal> x5234=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x5230))),-1);
if(!x5234.valid){
continue;
}
IkReal x5231=x5234.value;
IkReal x5232=((1.0)*x5231);
IkReal x5233=((((-1.0)*x5232*(r20*r20*r20*r20)))+(((-1.0)*x5230))+(((-1.0)*x5232*(r21*r21*r21*r21)))+(((-2.0)*x5231*(r20*r20)*(r21*r21))));
j4eval[0]=x5233;
j4eval[1]=IKsign(x5233);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5235=(gconst109*r20);
IkReal x5236=(gconst110*r21);
IkReal x5237=(cj2*sj1);
IkReal x5238=((1.0)*cj1*sj2);
CheckValue<IkReal> x5239=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x5235*x5235)))+(((-1.0)*(r22*r22)))+(((-2.0)*x5235*x5236))+(((-1.0)*(x5236*x5236))))),-1);
if(!x5239.valid){
continue;
}
CheckValue<IkReal> x5240 = IKatan2WithCheck(IkReal((((cj1*r22*sj2))+((r22*x5237)))),IkReal(((((-1.0)*x5236*x5237))+(((-1.0)*x5236*x5238))+(((-1.0)*x5235*x5238))+(((-1.0)*x5235*x5237)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5240.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5239.value)))+(x5240.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5241=IKsin(j4);
IkReal x5242=IKcos(j4);
IkReal x5243=(gconst110*r11);
IkReal x5244=(gconst109*r00);
IkReal x5245=(gconst109*r20);
IkReal x5246=(gconst110*r21);
IkReal x5247=((1.0)*sj0);
IkReal x5248=(gconst110*r01);
IkReal x5249=(cj1*cj2);
IkReal x5250=(gconst109*r10);
IkReal x5251=((1.0)*cj0);
IkReal x5252=(sj1*sj2);
IkReal x5253=((1.0)*x5242);
IkReal x5254=((1.0)*x5241);
evalcond[0]=((((-1.0)*r22*x5253))+(((-1.0)*x5245*x5254))+(((-1.0)*x5246*x5254)));
evalcond[1]=((((-1.0)*x5248*x5254))+(((-1.0)*r02*x5253))+(((-1.0)*x5251))+(((-1.0)*x5244*x5254)));
evalcond[2]=((((-1.0)*x5247))+(((-1.0)*x5243*x5254))+(((-1.0)*r12*x5253))+(((-1.0)*x5250*x5254)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x5245*x5253))+(((-1.0)*x5246*x5253))+((r22*x5241)));
evalcond[4]=((((-1.0)*x5247*x5249))+(((-1.0)*x5248*x5253))+((sj0*x5252))+(((-1.0)*x5244*x5253))+((r02*x5241)));
evalcond[5]=(((cj0*x5249))+(((-1.0)*x5243*x5253))+((r12*x5241))+(((-1.0)*x5250*x5253))+(((-1.0)*x5251*x5252)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5255=((1.0)*gconst110);
CheckValue<IkReal> x5256 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst109*r20*sj0))+(((-1.0)*r21*sj0*x5255)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5256.valid){
continue;
}
CheckValue<IkReal> x5257=IKPowWithIntegerCheck(IKsign((((gconst109*r01))+(((-1.0)*r00*x5255)))),-1);
if(!x5257.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5256.value)+(((1.5707963267949)*(x5257.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5258=IKsin(j4);
IkReal x5259=IKcos(j4);
IkReal x5260=(gconst110*r11);
IkReal x5261=(gconst109*r00);
IkReal x5262=(gconst109*r20);
IkReal x5263=(gconst110*r21);
IkReal x5264=((1.0)*sj0);
IkReal x5265=(gconst110*r01);
IkReal x5266=(cj1*cj2);
IkReal x5267=(gconst109*r10);
IkReal x5268=((1.0)*cj0);
IkReal x5269=(sj1*sj2);
IkReal x5270=((1.0)*x5259);
IkReal x5271=((1.0)*x5258);
evalcond[0]=((((-1.0)*x5263*x5271))+(((-1.0)*x5262*x5271))+(((-1.0)*r22*x5270)));
evalcond[1]=((((-1.0)*x5268))+(((-1.0)*x5265*x5271))+(((-1.0)*x5261*x5271))+(((-1.0)*r02*x5270)));
evalcond[2]=((((-1.0)*x5264))+(((-1.0)*x5260*x5271))+(((-1.0)*r12*x5270))+(((-1.0)*x5267*x5271)));
evalcond[3]=(((r22*x5258))+((cj2*sj1))+(((-1.0)*x5263*x5270))+((cj1*sj2))+(((-1.0)*x5262*x5270)));
evalcond[4]=((((-1.0)*x5264*x5266))+((sj0*x5269))+(((-1.0)*x5265*x5270))+(((-1.0)*x5261*x5270))+((r02*x5258)));
evalcond[5]=(((r12*x5258))+(((-1.0)*x5268*x5269))+(((-1.0)*x5260*x5270))+(((-1.0)*x5267*x5270))+((cj0*x5266)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5272=((1.0)*gconst109);
CheckValue<IkReal> x5273=IKPowWithIntegerCheck(IKsign((((gconst110*r10))+(((-1.0)*r11*x5272)))),-1);
if(!x5273.valid){
continue;
}
CheckValue<IkReal> x5274 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x5272))+(((-1.0)*cj0*gconst110*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5274.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5273.value)))+(x5274.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5275=IKsin(j4);
IkReal x5276=IKcos(j4);
IkReal x5277=(gconst110*r11);
IkReal x5278=(gconst109*r00);
IkReal x5279=(gconst109*r20);
IkReal x5280=(gconst110*r21);
IkReal x5281=((1.0)*sj0);
IkReal x5282=(gconst110*r01);
IkReal x5283=(cj1*cj2);
IkReal x5284=(gconst109*r10);
IkReal x5285=((1.0)*cj0);
IkReal x5286=(sj1*sj2);
IkReal x5287=((1.0)*x5276);
IkReal x5288=((1.0)*x5275);
evalcond[0]=((((-1.0)*r22*x5287))+(((-1.0)*x5279*x5288))+(((-1.0)*x5280*x5288)));
evalcond[1]=((((-1.0)*x5278*x5288))+(((-1.0)*x5285))+(((-1.0)*r02*x5287))+(((-1.0)*x5282*x5288)));
evalcond[2]=((((-1.0)*x5284*x5288))+(((-1.0)*x5281))+(((-1.0)*r12*x5287))+(((-1.0)*x5277*x5288)));
evalcond[3]=(((cj2*sj1))+((r22*x5275))+(((-1.0)*x5279*x5287))+((cj1*sj2))+(((-1.0)*x5280*x5287)));
evalcond[4]=((((-1.0)*x5281*x5283))+((r02*x5275))+((sj0*x5286))+(((-1.0)*x5278*x5287))+(((-1.0)*x5282*x5287)));
evalcond[5]=((((-1.0)*x5284*x5287))+((cj0*x5283))+(((-1.0)*x5277*x5287))+(((-1.0)*x5285*x5286))+((r12*x5275)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5291 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x5291)==0){
continue;
}
IkReal x5289=pow(x5291,-0.5);
IkReal x5290=((1.0)*x5289);
CheckValue<IkReal> x5292 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x5292.valid){
continue;
}
IkReal gconst111=((3.14159265358979)+(((-1.0)*(x5292.value))));
IkReal gconst112=(r20*x5290);
IkReal gconst113=(r21*x5290);
CheckValue<IkReal> x5293 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x5293.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5293.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x5297 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x5297.valid){
continue;
}
IkReal x5294=((1.0)*(x5297.value));
IkReal x5295=x5289;
IkReal x5296=((1.0)*x5295);
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x5294)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x5294)));
IkReal gconst112=(r20*x5296);
IkReal gconst113=(r21*x5296);
IkReal x5298=r22*r22;
IkReal x5299=((1.0)*x5298);
CheckValue<IkReal> x5303=IKPowWithIntegerCheck(((-1.0)+x5298),-1);
if(!x5303.valid){
continue;
}
IkReal x5300=x5303.value;
if((((1.0)+(((-1.0)*x5299)))) < -0.00001)
continue;
IkReal x5301=IKsqrt(((1.0)+(((-1.0)*x5299))));
IkReal x5302=(cj0*x5300*x5301);
j4eval[0]=((IKabs((x5302+(((-1.0)*x5299*x5302)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x5307 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x5307.valid){
continue;
}
IkReal x5304=((1.0)*(x5307.value));
IkReal x5305=x5289;
IkReal x5306=((1.0)*x5305);
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x5304)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x5304)));
IkReal gconst112=(r20*x5306);
IkReal gconst113=(r21*x5306);
IkReal x5308=r22*r22;
IkReal x5309=((1.0)*x5308);
CheckValue<IkReal> x5313=IKPowWithIntegerCheck(((-1.0)+x5308),-1);
if(!x5313.valid){
continue;
}
IkReal x5310=x5313.value;
if((((1.0)+(((-1.0)*x5309)))) < -0.00001)
continue;
IkReal x5311=IKsqrt(((1.0)+(((-1.0)*x5309))));
IkReal x5312=(sj0*x5310*x5311);
j4eval[0]=((IKabs((x5312+(((-1.0)*x5309*x5312)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x5317 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x5317.valid){
continue;
}
IkReal x5314=((1.0)*(x5317.value));
IkReal x5315=x5289;
IkReal x5316=((1.0)*x5315);
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x5314)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x5314)));
IkReal gconst112=(r20*x5316);
IkReal gconst113=(r21*x5316);
IkReal x5318=r22*r22;
IkReal x5319=(cj0*r12);
IkReal x5320=(r02*sj0);
CheckValue<IkReal> x5324=IKPowWithIntegerCheck(((-1.0)+x5318),-1);
if(!x5324.valid){
continue;
}
IkReal x5321=x5324.value;
if((((1.0)+(((-1.0)*x5318)))) < -0.00001)
continue;
IkReal x5322=IKsqrt(((1.0)+(((-1.0)*x5318))));
IkReal x5323=(r22*x5321*x5322);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs(((((-1.0)*x5320*x5323))+((x5319*x5323)))))+(IKabs((x5320+(((-1.0)*x5319))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5325=((1.0)*gconst112);
CheckValue<IkReal> x5326 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r12))+((r02*sj0)))),IkReal((((cj0*gconst112*r10))+((cj0*gconst113*r11))+(((-1.0)*r00*sj0*x5325))+(((-1.0)*gconst113*r01*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5326.valid){
continue;
}
CheckValue<IkReal> x5327=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x5325))+((gconst113*r20)))),-1);
if(!x5327.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5326.value)+(((1.5707963267949)*(x5327.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5328=IKsin(j4);
IkReal x5329=IKcos(j4);
IkReal x5330=(gconst112*r10);
IkReal x5331=(gconst112*r20);
IkReal x5332=(gconst113*r01);
IkReal x5333=(gconst112*r00);
IkReal x5334=(gconst113*r11);
IkReal x5335=((1.0)*sj0);
IkReal x5336=(gconst113*r21);
IkReal x5337=(cj1*cj2);
IkReal x5338=((1.0)*cj0);
IkReal x5339=(sj1*sj2);
IkReal x5340=((1.0)*x5329);
IkReal x5341=((1.0)*x5328);
evalcond[0]=((((-1.0)*x5336*x5341))+(((-1.0)*x5331*x5341))+(((-1.0)*r22*x5340)));
evalcond[1]=((((-1.0)*r02*x5340))+(((-1.0)*x5333*x5341))+(((-1.0)*x5332*x5341))+(((-1.0)*x5338)));
evalcond[2]=((((-1.0)*x5334*x5341))+(((-1.0)*x5330*x5341))+(((-1.0)*x5335))+(((-1.0)*r12*x5340)));
evalcond[3]=((((-1.0)*x5336*x5340))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x5331*x5340))+((r22*x5328)));
evalcond[4]=((((-1.0)*x5333*x5340))+(((-1.0)*x5335*x5337))+(((-1.0)*x5332*x5340))+((r02*x5328))+((sj0*x5339)));
evalcond[5]=((((-1.0)*x5334*x5340))+((r12*x5328))+(((-1.0)*x5330*x5340))+(((-1.0)*x5338*x5339))+((cj0*x5337)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5342=((1.0)*sj0);
CheckValue<IkReal> x5343=IKPowWithIntegerCheck(IKsign((((gconst112*r01))+(((-1.0)*gconst113*r00)))),-1);
if(!x5343.valid){
continue;
}
CheckValue<IkReal> x5344 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst113*r21*x5342))+(((-1.0)*gconst112*r20*x5342)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5344.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5343.value)))+(x5344.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5345=IKsin(j4);
IkReal x5346=IKcos(j4);
IkReal x5347=(gconst112*r10);
IkReal x5348=(gconst112*r20);
IkReal x5349=(gconst113*r01);
IkReal x5350=(gconst112*r00);
IkReal x5351=(gconst113*r11);
IkReal x5352=((1.0)*sj0);
IkReal x5353=(gconst113*r21);
IkReal x5354=(cj1*cj2);
IkReal x5355=((1.0)*cj0);
IkReal x5356=(sj1*sj2);
IkReal x5357=((1.0)*x5346);
IkReal x5358=((1.0)*x5345);
evalcond[0]=((((-1.0)*x5353*x5358))+(((-1.0)*r22*x5357))+(((-1.0)*x5348*x5358)));
evalcond[1]=((((-1.0)*r02*x5357))+(((-1.0)*x5355))+(((-1.0)*x5349*x5358))+(((-1.0)*x5350*x5358)));
evalcond[2]=((((-1.0)*x5351*x5358))+(((-1.0)*r12*x5357))+(((-1.0)*x5352))+(((-1.0)*x5347*x5358)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x5353*x5357))+((cj1*sj2))+((r22*x5345))+(((-1.0)*x5348*x5357)));
evalcond[4]=(((sj0*x5356))+(((-1.0)*x5352*x5354))+(((-1.0)*x5349*x5357))+(((-1.0)*x5350*x5357))+((r02*x5345)));
evalcond[5]=((((-1.0)*x5355*x5356))+(((-1.0)*x5351*x5357))+((r12*x5345))+((cj0*x5354))+(((-1.0)*x5347*x5357)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5359=((1.0)*gconst112);
CheckValue<IkReal> x5360=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5359))+((gconst113*r10)))),-1);
if(!x5360.valid){
continue;
}
CheckValue<IkReal> x5361 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst113*r21))+(((-1.0)*cj0*r20*x5359)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5361.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5360.value)))+(x5361.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5362=IKsin(j4);
IkReal x5363=IKcos(j4);
IkReal x5364=(gconst112*r10);
IkReal x5365=(gconst112*r20);
IkReal x5366=(gconst113*r01);
IkReal x5367=(gconst112*r00);
IkReal x5368=(gconst113*r11);
IkReal x5369=((1.0)*sj0);
IkReal x5370=(gconst113*r21);
IkReal x5371=(cj1*cj2);
IkReal x5372=((1.0)*cj0);
IkReal x5373=(sj1*sj2);
IkReal x5374=((1.0)*x5363);
IkReal x5375=((1.0)*x5362);
evalcond[0]=((((-1.0)*r22*x5374))+(((-1.0)*x5370*x5375))+(((-1.0)*x5365*x5375)));
evalcond[1]=((((-1.0)*x5372))+(((-1.0)*x5367*x5375))+(((-1.0)*x5366*x5375))+(((-1.0)*r02*x5374)));
evalcond[2]=((((-1.0)*r12*x5374))+(((-1.0)*x5364*x5375))+(((-1.0)*x5369))+(((-1.0)*x5368*x5375)));
evalcond[3]=(((r22*x5362))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x5370*x5374))+(((-1.0)*x5365*x5374)));
evalcond[4]=(((r02*x5362))+((sj0*x5373))+(((-1.0)*x5367*x5374))+(((-1.0)*x5366*x5374))+(((-1.0)*x5369*x5371)));
evalcond[5]=(((r12*x5362))+((cj0*x5371))+(((-1.0)*x5372*x5373))+(((-1.0)*x5364*x5374))+(((-1.0)*x5368*x5374)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5377 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x5377)==0){
continue;
}
IkReal x5376=pow(x5377,-0.5);
CheckValue<IkReal> x5378 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x5378.valid){
continue;
}
IkReal gconst114=((-1.0)*(x5378.value));
IkReal gconst115=(r00*x5376);
IkReal gconst116=(r01*x5376);
CheckValue<IkReal> x5379 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x5379.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5379.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x5382 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x5382.valid){
continue;
}
IkReal x5380=((-1.0)*(x5382.value));
IkReal x5381=x5376;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x5380;
IkReal gconst114=x5380;
IkReal gconst115=(r00*x5381);
IkReal gconst116=(r01*x5381);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x5385 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x5385.valid){
continue;
}
IkReal x5383=((-1.0)*(x5385.value));
IkReal x5384=x5376;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x5383;
IkReal gconst114=x5383;
IkReal gconst115=(r00*x5384);
IkReal gconst116=(r01*x5384);
IkReal x5386=r02*r02;
IkReal x5387=(cj0*r12);
IkReal x5388=((1.0)*x5386);
CheckValue<IkReal> x5392=IKPowWithIntegerCheck(((-1.0)+x5386),-1);
if(!x5392.valid){
continue;
}
IkReal x5389=x5392.value;
if((((1.0)+(((-1.0)*x5388)))) < -0.00001)
continue;
IkReal x5390=IKsqrt(((1.0)+(((-1.0)*x5388))));
IkReal x5391=(x5389*x5390);
j4eval[0]=((IKabs((((r02*sj0))+(((-1.0)*x5387)))))+(IKabs(((((-1.0)*sj0*x5388*x5391))+((r02*x5387*x5391))+((sj0*x5391))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x5395 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x5395.valid){
continue;
}
IkReal x5393=((-1.0)*(x5395.value));
IkReal x5394=x5376;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x5393;
IkReal gconst114=x5393;
IkReal gconst115=(r00*x5394);
IkReal gconst116=(r01*x5394);
IkReal x5396=r02*r02;
IkReal x5397=((1.0)+(((-1.0)*x5396)));
IkReal x5398=(cj2*r22*sj1);
IkReal x5399=(cj1*r22*sj2);
CheckValue<IkReal> x5406=IKPowWithIntegerCheck(x5397,-1);
if(!x5406.valid){
continue;
}
IkReal x5400=x5406.value;
CheckValue<IkReal> x5407=IKPowWithIntegerCheck(((-1.0)+x5396),-1);
if(!x5407.valid){
continue;
}
IkReal x5401=x5407.value;
IkReal x5402=((1.0)*x5400);
if((x5397) < -0.00001)
continue;
IkReal x5403=IKsqrt(x5397);
IkReal x5404=((1.0)*r02*x5401*x5403);
IkReal x5405=((((-1.0)*x5402*(r01*r01)*(r21*r21)))+(((-1.0)*x5402*(r00*r00)*(r20*r20)))+(((-1.0)*(r22*r22)))+(((-2.0)*r00*r01*r20*r21*x5400)));
j4eval[0]=x5405;
j4eval[1]=((IKabs((x5399+x5398)))+(IKabs(((((-1.0)*x5398*x5404))+(((-1.0)*x5399*x5404))))));
j4eval[2]=IKsign(x5405);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5408=(cj2*sj1);
IkReal x5409=(cj1*sj2);
IkReal x5410=((1.0)*gconst115*r20);
IkReal x5411=((1.0)*gconst116*r21);
CheckValue<IkReal> x5412=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst115*r20*x5410))+(((-1.0)*gconst116*r21*x5411))+(((-1.0)*(r22*r22)))+(((-2.0)*gconst115*gconst116*r20*r21)))),-1);
if(!x5412.valid){
continue;
}
CheckValue<IkReal> x5413 = IKatan2WithCheck(IkReal((((r22*x5409))+((r22*x5408)))),IkReal(((((-1.0)*x5408*x5411))+(((-1.0)*x5408*x5410))+(((-1.0)*x5409*x5411))+(((-1.0)*x5409*x5410)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5413.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5412.value)))+(x5413.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5414=IKsin(j4);
IkReal x5415=IKcos(j4);
IkReal x5416=(gconst116*r21);
IkReal x5417=(gconst116*r01);
IkReal x5418=((1.0)*sj0);
IkReal x5419=(gconst116*r11);
IkReal x5420=(cj1*cj2);
IkReal x5421=((1.0)*cj0);
IkReal x5422=(sj1*sj2);
IkReal x5423=((1.0)*x5415);
IkReal x5424=((1.0)*x5414);
IkReal x5425=(gconst115*x5424);
evalcond[0]=((((-1.0)*x5416*x5424))+(((-1.0)*r20*x5425))+(((-1.0)*r22*x5423)));
evalcond[1]=((((-1.0)*x5421))+(((-1.0)*x5417*x5424))+(((-1.0)*r02*x5423))+(((-1.0)*r00*x5425)));
evalcond[2]=((((-1.0)*x5419*x5424))+(((-1.0)*x5418))+(((-1.0)*r10*x5425))+(((-1.0)*r12*x5423)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst115*r20*x5423))+((cj1*sj2))+((r22*x5414))+(((-1.0)*x5416*x5423)));
evalcond[4]=((((-1.0)*x5417*x5423))+(((-1.0)*gconst115*r00*x5423))+((r02*x5414))+((sj0*x5422))+(((-1.0)*x5418*x5420)));
evalcond[5]=((((-1.0)*x5421*x5422))+(((-1.0)*x5419*x5423))+(((-1.0)*gconst115*r10*x5423))+((cj0*x5420))+((r12*x5414)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5426=((1.0)*gconst115);
CheckValue<IkReal> x5427 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r12))+((r02*sj0)))),IkReal(((((-1.0)*gconst116*r01*sj0))+((cj0*gconst115*r10))+((cj0*gconst116*r11))+(((-1.0)*r00*sj0*x5426)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5427.valid){
continue;
}
CheckValue<IkReal> x5428=IKPowWithIntegerCheck(IKsign((((gconst116*r20))+(((-1.0)*r21*x5426)))),-1);
if(!x5428.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5427.value)+(((1.5707963267949)*(x5428.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5429=IKsin(j4);
IkReal x5430=IKcos(j4);
IkReal x5431=(gconst116*r21);
IkReal x5432=(gconst116*r01);
IkReal x5433=((1.0)*sj0);
IkReal x5434=(gconst116*r11);
IkReal x5435=(cj1*cj2);
IkReal x5436=((1.0)*cj0);
IkReal x5437=(sj1*sj2);
IkReal x5438=((1.0)*x5430);
IkReal x5439=((1.0)*x5429);
IkReal x5440=(gconst115*x5439);
evalcond[0]=((((-1.0)*x5431*x5439))+(((-1.0)*r22*x5438))+(((-1.0)*r20*x5440)));
evalcond[1]=((((-1.0)*r02*x5438))+(((-1.0)*r00*x5440))+(((-1.0)*x5436))+(((-1.0)*x5432*x5439)));
evalcond[2]=((((-1.0)*r10*x5440))+(((-1.0)*x5434*x5439))+(((-1.0)*r12*x5438))+(((-1.0)*x5433)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x5431*x5438))+((cj1*sj2))+((r22*x5429))+(((-1.0)*gconst115*r20*x5438)));
evalcond[4]=(((sj0*x5437))+((r02*x5429))+(((-1.0)*x5433*x5435))+(((-1.0)*x5432*x5438))+(((-1.0)*gconst115*r00*x5438)));
evalcond[5]=(((r12*x5429))+(((-1.0)*gconst115*r10*x5438))+(((-1.0)*x5434*x5438))+(((-1.0)*x5436*x5437))+((cj0*x5435)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5441=((1.0)*gconst115);
CheckValue<IkReal> x5442=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5441))+((gconst116*r10)))),-1);
if(!x5442.valid){
continue;
}
CheckValue<IkReal> x5443 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x5441))+(((-1.0)*cj0*gconst116*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5443.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5442.value)))+(x5443.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5444=IKsin(j4);
IkReal x5445=IKcos(j4);
IkReal x5446=(gconst116*r21);
IkReal x5447=(gconst116*r01);
IkReal x5448=((1.0)*sj0);
IkReal x5449=(gconst116*r11);
IkReal x5450=(cj1*cj2);
IkReal x5451=((1.0)*cj0);
IkReal x5452=(sj1*sj2);
IkReal x5453=((1.0)*x5445);
IkReal x5454=((1.0)*x5444);
IkReal x5455=(gconst115*x5454);
evalcond[0]=((((-1.0)*r20*x5455))+(((-1.0)*r22*x5453))+(((-1.0)*x5446*x5454)));
evalcond[1]=((((-1.0)*r02*x5453))+(((-1.0)*x5447*x5454))+(((-1.0)*r00*x5455))+(((-1.0)*x5451)));
evalcond[2]=((((-1.0)*r12*x5453))+(((-1.0)*x5448))+(((-1.0)*r10*x5455))+(((-1.0)*x5449*x5454)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst115*r20*x5453))+((r22*x5444))+(((-1.0)*x5446*x5453)));
evalcond[4]=((((-1.0)*gconst115*r00*x5453))+((sj0*x5452))+(((-1.0)*x5448*x5450))+(((-1.0)*x5447*x5453))+((r02*x5444)));
evalcond[5]=((((-1.0)*x5451*x5452))+(((-1.0)*gconst115*r10*x5453))+((cj0*x5450))+((r12*x5444))+(((-1.0)*x5449*x5453)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5456=((-1.0)*r00);
IkReal x5458 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x5458)==0){
continue;
}
IkReal x5457=pow(x5458,-0.5);
CheckValue<IkReal> x5459 = IKatan2WithCheck(IkReal(x5456),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x5459.valid){
continue;
}
IkReal gconst117=((3.14159265358979)+(((-1.0)*(x5459.value))));
IkReal gconst118=(x5456*x5457);
IkReal gconst119=((-1.0)*r01*x5457);
CheckValue<IkReal> x5460 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x5460.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5460.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x5461=((-1.0)*r00);
CheckValue<IkReal> x5464 = IKatan2WithCheck(IkReal(x5461),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x5464.valid){
continue;
}
IkReal x5462=((1.0)*(x5464.value));
IkReal x5463=x5457;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5462)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5462)));
IkReal gconst118=(x5461*x5463);
IkReal gconst119=((-1.0)*r01*x5463);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
IkReal x5465=((-1.0)*r00);
CheckValue<IkReal> x5468 = IKatan2WithCheck(IkReal(x5465),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x5468.valid){
continue;
}
IkReal x5466=((1.0)*(x5468.value));
IkReal x5467=x5457;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5466)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5466)));
IkReal gconst118=(x5465*x5467);
IkReal gconst119=((-1.0)*r01*x5467);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=sj0;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5469=((1.0)*gconst118);
CheckValue<IkReal> x5470=IKPowWithIntegerCheck(IKsign((((gconst119*r20))+(((-1.0)*r21*x5469)))),-1);
if(!x5470.valid){
continue;
}
CheckValue<IkReal> x5471 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r12))+((r02*sj0)))),IkReal(((((-1.0)*gconst119*r01*sj0))+(((-1.0)*r00*sj0*x5469))+((cj0*gconst118*r10))+((cj0*gconst119*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5471.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5470.value)))+(x5471.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5472=IKsin(j4);
IkReal x5473=IKcos(j4);
IkReal x5474=(gconst118*r20);
IkReal x5475=(gconst118*r00);
IkReal x5476=(gconst119*r11);
IkReal x5477=(gconst119*r01);
IkReal x5478=(gconst118*r10);
IkReal x5479=((1.0)*sj0);
IkReal x5480=(gconst119*r21);
IkReal x5481=(cj1*cj2);
IkReal x5482=((1.0)*cj0);
IkReal x5483=(sj1*sj2);
IkReal x5484=((1.0)*x5473);
IkReal x5485=((1.0)*x5472);
evalcond[0]=((((-1.0)*r22*x5484))+(((-1.0)*x5474*x5485))+(((-1.0)*x5480*x5485)));
evalcond[1]=((((-1.0)*x5482))+(((-1.0)*x5475*x5485))+(((-1.0)*x5477*x5485))+(((-1.0)*r02*x5484)));
evalcond[2]=((((-1.0)*r12*x5484))+(((-1.0)*x5479))+(((-1.0)*x5476*x5485))+(((-1.0)*x5478*x5485)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x5474*x5484))+((r22*x5472))+(((-1.0)*x5480*x5484)));
evalcond[4]=((((-1.0)*x5479*x5481))+(((-1.0)*x5475*x5484))+(((-1.0)*x5477*x5484))+((r02*x5472))+((sj0*x5483)));
evalcond[5]=(((cj0*x5481))+(((-1.0)*x5476*x5484))+((r12*x5472))+(((-1.0)*x5478*x5484))+(((-1.0)*x5482*x5483)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5486=((1.0)*sj0);
CheckValue<IkReal> x5487=IKPowWithIntegerCheck(IKsign((((gconst118*r01))+(((-1.0)*gconst119*r00)))),-1);
if(!x5487.valid){
continue;
}
CheckValue<IkReal> x5488 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst118*r20*x5486))+(((-1.0)*gconst119*r21*x5486)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5488.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5487.value)))+(x5488.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5489=IKsin(j4);
IkReal x5490=IKcos(j4);
IkReal x5491=(gconst118*r20);
IkReal x5492=(gconst118*r00);
IkReal x5493=(gconst119*r11);
IkReal x5494=(gconst119*r01);
IkReal x5495=(gconst118*r10);
IkReal x5496=((1.0)*sj0);
IkReal x5497=(gconst119*r21);
IkReal x5498=(cj1*cj2);
IkReal x5499=((1.0)*cj0);
IkReal x5500=(sj1*sj2);
IkReal x5501=((1.0)*x5490);
IkReal x5502=((1.0)*x5489);
evalcond[0]=((((-1.0)*r22*x5501))+(((-1.0)*x5497*x5502))+(((-1.0)*x5491*x5502)));
evalcond[1]=((((-1.0)*x5499))+(((-1.0)*r02*x5501))+(((-1.0)*x5494*x5502))+(((-1.0)*x5492*x5502)));
evalcond[2]=((((-1.0)*x5496))+(((-1.0)*r12*x5501))+(((-1.0)*x5493*x5502))+(((-1.0)*x5495*x5502)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x5497*x5501))+((cj1*sj2))+((r22*x5489))+(((-1.0)*x5491*x5501)));
evalcond[4]=(((sj0*x5500))+(((-1.0)*x5496*x5498))+((r02*x5489))+(((-1.0)*x5494*x5501))+(((-1.0)*x5492*x5501)));
evalcond[5]=(((cj0*x5498))+((r12*x5489))+(((-1.0)*x5493*x5501))+(((-1.0)*x5499*x5500))+(((-1.0)*x5495*x5501)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5503=((1.0)*gconst118);
CheckValue<IkReal> x5504 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x5503))+(((-1.0)*cj0*gconst119*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5504.valid){
continue;
}
CheckValue<IkReal> x5505=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5503))+((gconst119*r10)))),-1);
if(!x5505.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5504.value)+(((1.5707963267949)*(x5505.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5506=IKsin(j4);
IkReal x5507=IKcos(j4);
IkReal x5508=(gconst118*r20);
IkReal x5509=(gconst118*r00);
IkReal x5510=(gconst119*r11);
IkReal x5511=(gconst119*r01);
IkReal x5512=(gconst118*r10);
IkReal x5513=((1.0)*sj0);
IkReal x5514=(gconst119*r21);
IkReal x5515=(cj1*cj2);
IkReal x5516=((1.0)*cj0);
IkReal x5517=(sj1*sj2);
IkReal x5518=((1.0)*x5507);
IkReal x5519=((1.0)*x5506);
evalcond[0]=((((-1.0)*r22*x5518))+(((-1.0)*x5514*x5519))+(((-1.0)*x5508*x5519)));
evalcond[1]=((((-1.0)*r02*x5518))+(((-1.0)*x5511*x5519))+(((-1.0)*x5516))+(((-1.0)*x5509*x5519)));
evalcond[2]=((((-1.0)*x5510*x5519))+(((-1.0)*x5512*x5519))+(((-1.0)*r12*x5518))+(((-1.0)*x5513)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x5506))+(((-1.0)*x5514*x5518))+(((-1.0)*x5508*x5518)));
evalcond[4]=((((-1.0)*x5513*x5515))+((r02*x5506))+(((-1.0)*x5511*x5518))+((sj0*x5517))+(((-1.0)*x5509*x5518)));
evalcond[5]=((((-1.0)*x5510*x5518))+(((-1.0)*x5512*x5518))+((r12*x5506))+((cj0*x5515))+(((-1.0)*x5516*x5517)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5520=((1.0)*sj5);
IkReal x5521=(((cj5*r10))+(((-1.0)*r11*x5520)));
j4eval[0]=x5521;
j4eval[1]=IKsign(x5521);
j4eval[2]=((IKabs(((((-1.0)*r20*x5520))+(((-1.0)*cj5*r21)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5522=((1.0)*cj5);
IkReal x5523=(((r21*sj5))+(((-1.0)*r20*x5522)));
j4eval[0]=x5523;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5522))))));
j4eval[2]=IKsign(x5523);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5524=cj5*cj5;
IkReal x5525=r00*r00;
IkReal x5526=(r00*sj5);
IkReal x5527=(cj5*r01);
IkReal x5528=(x5525+(r02*r02)+((x5524*(r01*r01)))+(((2.0)*x5526*x5527))+(((-1.0)*x5524*x5525)));
j4eval[0]=x5528;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*x5526))+(((-1.0)*x5527))))));
j4eval[2]=IKsign(x5528);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5529=cj5*cj5;
IkReal x5530=r00*r00;
IkReal x5531=(r00*sj5);
IkReal x5532=(cj5*r01);
CheckValue<IkReal> x5533=IKPowWithIntegerCheck(IKsign((x5530+((x5529*(r01*r01)))+(r02*r02)+(((-1.0)*x5529*x5530))+(((2.0)*x5531*x5532)))),-1);
if(!x5533.valid){
continue;
}
CheckValue<IkReal> x5534 = IKatan2WithCheck(IkReal(((((-1.0)*x5532))+(((-1.0)*x5531)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5534.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5533.value)))+(x5534.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5535=IKcos(j4);
IkReal x5536=IKsin(j4);
IkReal x5537=(r00*sj5);
IkReal x5538=(cj5*r01);
IkReal x5539=(r20*sj5);
IkReal x5540=(cj5*r21);
IkReal x5541=(cj5*r11);
IkReal x5542=(r10*sj5);
IkReal x5543=((1.0)*x5535);
IkReal x5544=((1.0)*x5536);
evalcond[0]=((((-1.0)*x5538*x5543))+(((-1.0)*x5537*x5543))+((r02*x5536)));
evalcond[1]=((((-1.0)*x5539*x5544))+(((-1.0)*x5540*x5544))+(((-1.0)*r22*x5543)));
evalcond[2]=((((-1.0)*x5542*x5544))+(((-1.0)*x5541*x5544))+(((-1.0)*r12*x5543)));
evalcond[3]=((-1.0)+(((-1.0)*x5538*x5544))+(((-1.0)*x5537*x5544))+(((-1.0)*r02*x5543)));
evalcond[4]=((((-1.0)*x5539*x5543))+((cj2*sj1))+((cj1*sj2))+((r22*x5536))+(((-1.0)*x5540*x5543)));
evalcond[5]=((((-1.0)*x5542*x5543))+(((-1.0)*x5541*x5543))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((r12*x5536)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5545=((1.0)*cj5);
CheckValue<IkReal> x5546 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5545)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5546.valid){
continue;
}
CheckValue<IkReal> x5547=IKPowWithIntegerCheck(IKsign((((r21*sj5))+(((-1.0)*r20*x5545)))),-1);
if(!x5547.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5546.value)+(((1.5707963267949)*(x5547.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5548=IKcos(j4);
IkReal x5549=IKsin(j4);
IkReal x5550=(r00*sj5);
IkReal x5551=(cj5*r01);
IkReal x5552=(r20*sj5);
IkReal x5553=(cj5*r21);
IkReal x5554=(cj5*r11);
IkReal x5555=(r10*sj5);
IkReal x5556=((1.0)*x5548);
IkReal x5557=((1.0)*x5549);
evalcond[0]=((((-1.0)*x5550*x5556))+(((-1.0)*x5551*x5556))+((r02*x5549)));
evalcond[1]=((((-1.0)*x5552*x5557))+(((-1.0)*x5553*x5557))+(((-1.0)*r22*x5556)));
evalcond[2]=((((-1.0)*x5555*x5557))+(((-1.0)*r12*x5556))+(((-1.0)*x5554*x5557)));
evalcond[3]=((-1.0)+(((-1.0)*x5550*x5557))+(((-1.0)*x5551*x5557))+(((-1.0)*r02*x5556)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x5552*x5556))+(((-1.0)*x5553*x5556))+((cj1*sj2))+((r22*x5549)));
evalcond[5]=((((-1.0)*x5555*x5556))+((r12*x5549))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*x5554*x5556)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5558=((1.0)*sj5);
CheckValue<IkReal> x5559 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x5558))+(((-1.0)*cj5*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5559.valid){
continue;
}
CheckValue<IkReal> x5560=IKPowWithIntegerCheck(IKsign((((cj5*r10))+(((-1.0)*r11*x5558)))),-1);
if(!x5560.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5559.value)+(((1.5707963267949)*(x5560.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5561=IKcos(j4);
IkReal x5562=IKsin(j4);
IkReal x5563=(r00*sj5);
IkReal x5564=(cj5*r01);
IkReal x5565=(r20*sj5);
IkReal x5566=(cj5*r21);
IkReal x5567=(cj5*r11);
IkReal x5568=(r10*sj5);
IkReal x5569=((1.0)*x5561);
IkReal x5570=((1.0)*x5562);
evalcond[0]=((((-1.0)*x5564*x5569))+((r02*x5562))+(((-1.0)*x5563*x5569)));
evalcond[1]=((((-1.0)*r22*x5569))+(((-1.0)*x5566*x5570))+(((-1.0)*x5565*x5570)));
evalcond[2]=((((-1.0)*r12*x5569))+(((-1.0)*x5568*x5570))+(((-1.0)*x5567*x5570)));
evalcond[3]=((-1.0)+(((-1.0)*x5564*x5570))+(((-1.0)*x5563*x5570))+(((-1.0)*r02*x5569)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x5562))+(((-1.0)*x5565*x5569))+(((-1.0)*x5566*x5569)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*x5568*x5569))+((r12*x5562))+(((-1.0)*x5567*x5569))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5571=((1.0)*cj5);
IkReal x5572=((((-1.0)*r10*x5571))+((r11*sj5)));
j4eval[0]=x5572;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r21*x5571))+(((-1.0)*r20*sj5))))));
j4eval[2]=IKsign(x5572);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5573=((1.0)*sj5);
IkReal x5574=(((cj5*r20))+(((-1.0)*r21*x5573)));
j4eval[0]=x5574;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*cj5*r11))+(((-1.0)*r10*x5573))))));
j4eval[2]=IKsign(x5574);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5575=cj5*cj5;
IkReal x5576=r00*r00;
IkReal x5577=(cj5*r01);
IkReal x5578=(r00*sj5);
IkReal x5579=(((x5575*x5576))+(((-1.0)*(r02*r02)))+(((-2.0)*x5577*x5578))+(((-1.0)*x5576))+(((-1.0)*x5575*(r01*r01))));
j4eval[0]=x5579;
j4eval[1]=IKsign(x5579);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x5578))+(((-1.0)*x5577))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5580=cj5*cj5;
IkReal x5581=r00*r00;
IkReal x5582=(cj5*r01);
IkReal x5583=(r00*sj5);
CheckValue<IkReal> x5584=IKPowWithIntegerCheck(IKsign(((((-1.0)*x5580*(r01*r01)))+(((-1.0)*x5581))+(((-1.0)*(r02*r02)))+((x5580*x5581))+(((-2.0)*x5582*x5583)))),-1);
if(!x5584.valid){
continue;
}
CheckValue<IkReal> x5585 = IKatan2WithCheck(IkReal(((((-1.0)*x5582))+(((-1.0)*x5583)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5585.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5584.value)))+(x5585.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5586=IKcos(j4);
IkReal x5587=IKsin(j4);
IkReal x5588=(r00*sj5);
IkReal x5589=(cj5*r01);
IkReal x5590=(r20*sj5);
IkReal x5591=(cj5*r21);
IkReal x5592=(cj5*r11);
IkReal x5593=(r10*sj5);
IkReal x5594=((1.0)*x5586);
IkReal x5595=((1.0)*x5587);
evalcond[0]=((((-1.0)*x5588*x5594))+((r02*x5587))+(((-1.0)*x5589*x5594)));
evalcond[1]=((((-1.0)*x5590*x5595))+(((-1.0)*x5591*x5595))+(((-1.0)*r22*x5594)));
evalcond[2]=((((-1.0)*r12*x5594))+(((-1.0)*x5592*x5595))+(((-1.0)*x5593*x5595)));
evalcond[3]=((1.0)+(((-1.0)*x5588*x5595))+(((-1.0)*r02*x5594))+(((-1.0)*x5589*x5595)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x5590*x5594))+(((-1.0)*x5591*x5594))+((r22*x5587)));
evalcond[5]=((((-1.0)*x5592*x5594))+(((-1.0)*x5593*x5594))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x5587)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5596=((1.0)*sj5);
CheckValue<IkReal> x5597=IKPowWithIntegerCheck(IKsign((((cj5*r20))+(((-1.0)*r21*x5596)))),-1);
if(!x5597.valid){
continue;
}
CheckValue<IkReal> x5598 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r11))+(((-1.0)*r10*x5596)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5598.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5597.value)))+(x5598.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5599=IKcos(j4);
IkReal x5600=IKsin(j4);
IkReal x5601=(r00*sj5);
IkReal x5602=(cj5*r01);
IkReal x5603=(r20*sj5);
IkReal x5604=(cj5*r21);
IkReal x5605=(cj5*r11);
IkReal x5606=(r10*sj5);
IkReal x5607=((1.0)*x5599);
IkReal x5608=((1.0)*x5600);
evalcond[0]=(((r02*x5600))+(((-1.0)*x5602*x5607))+(((-1.0)*x5601*x5607)));
evalcond[1]=((((-1.0)*r22*x5607))+(((-1.0)*x5603*x5608))+(((-1.0)*x5604*x5608)));
evalcond[2]=((((-1.0)*r12*x5607))+(((-1.0)*x5606*x5608))+(((-1.0)*x5605*x5608)));
evalcond[3]=((1.0)+(((-1.0)*x5602*x5608))+(((-1.0)*x5601*x5608))+(((-1.0)*r02*x5607)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x5603*x5607))+((r22*x5600))+(((-1.0)*x5604*x5607)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x5600))+(((-1.0)*x5606*x5607))+(((-1.0)*x5605*x5607)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5609=((1.0)*cj5);
CheckValue<IkReal> x5610=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x5609))+((r11*sj5)))),-1);
if(!x5610.valid){
continue;
}
CheckValue<IkReal> x5611 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x5609))+(((-1.0)*r20*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5611.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5610.value)))+(x5611.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5612=IKcos(j4);
IkReal x5613=IKsin(j4);
IkReal x5614=(r00*sj5);
IkReal x5615=(cj5*r01);
IkReal x5616=(r20*sj5);
IkReal x5617=(cj5*r21);
IkReal x5618=(cj5*r11);
IkReal x5619=(r10*sj5);
IkReal x5620=((1.0)*x5612);
IkReal x5621=((1.0)*x5613);
evalcond[0]=(((r02*x5613))+(((-1.0)*x5615*x5620))+(((-1.0)*x5614*x5620)));
evalcond[1]=((((-1.0)*r22*x5620))+(((-1.0)*x5617*x5621))+(((-1.0)*x5616*x5621)));
evalcond[2]=((((-1.0)*x5618*x5621))+(((-1.0)*x5619*x5621))+(((-1.0)*r12*x5620)));
evalcond[3]=((1.0)+(((-1.0)*x5615*x5621))+(((-1.0)*x5614*x5621))+(((-1.0)*r02*x5620)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x5617*x5620))+(((-1.0)*x5616*x5620))+((r22*x5613)));
evalcond[5]=((((-1.0)*x5618*x5620))+(((-1.0)*x5619*x5620))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x5613)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5624 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x5624)==0){
continue;
}
IkReal x5622=pow(x5624,-0.5);
IkReal x5623=((-1.0)*x5622);
CheckValue<IkReal> x5625 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x5625.valid){
continue;
}
IkReal gconst120=((-1.0)*(x5625.value));
IkReal gconst121=(r10*x5623);
IkReal gconst122=(r11*x5623);
CheckValue<IkReal> x5626 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x5626.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j5+(x5626.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x5630 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x5630.valid){
continue;
}
IkReal x5627=((-1.0)*(x5630.value));
IkReal x5628=x5622;
IkReal x5629=((-1.0)*x5628);
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst121;
cj5=gconst122;
j5=x5627;
IkReal gconst120=x5627;
IkReal gconst121=(r10*x5629);
IkReal gconst122=(r11*x5629);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x5634 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x5634.valid){
continue;
}
IkReal x5631=((-1.0)*(x5634.value));
IkReal x5632=x5622;
IkReal x5633=((-1.0)*x5632);
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst121;
cj5=gconst122;
j5=x5631;
IkReal gconst120=x5631;
IkReal gconst121=(r10*x5633);
IkReal gconst122=(r11*x5633);
IkReal x5635=r12*r12;
IkReal x5636=((1.0)*cj0);
IkReal x5637=(r02*sj0);
CheckValue<IkReal> x5641=IKPowWithIntegerCheck(((-1.0)+x5635),-1);
if(!x5641.valid){
continue;
}
IkReal x5638=x5641.value;
if((((1.0)+(((-1.0)*x5635)))) < -0.00001)
continue;
IkReal x5639=IKsqrt(((1.0)+(((-1.0)*x5635))));
IkReal x5640=(x5638*x5639);
j4eval[0]=((IKabs(((((-1.0)*r12*x5636))+x5637)))+(IKabs((((cj0*x5640))+((r12*x5637*x5640))+(((-1.0)*x5635*x5636*x5640))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x5645 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x5645.valid){
continue;
}
IkReal x5642=((-1.0)*(x5645.value));
IkReal x5643=x5622;
IkReal x5644=((-1.0)*x5643);
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst121;
cj5=gconst122;
j5=x5642;
IkReal gconst120=x5642;
IkReal gconst121=(r10*x5644);
IkReal gconst122=(r11*x5644);
IkReal x5646=(cj1*sj2);
IkReal x5647=(cj2*sj1);
IkReal x5648=((1.0)+(((-1.0)*(r12*r12))));
CheckValue<IkReal> x5654=IKPowWithIntegerCheck(x5648,-1);
if(!x5654.valid){
continue;
}
IkReal x5649=x5654.value;
IkReal x5650=((1.0)*x5649);
IkReal x5651=x5622;
IkReal x5652=(r12*r22*x5651);
IkReal x5653=((((-1.0)*x5650*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x5649))+(((-1.0)*x5650*(r10*r10)*(r20*r20)))+(((-1.0)*(r22*r22))));
j4eval[0]=x5653;
j4eval[1]=IKsign(x5653);
j4eval[2]=((IKabs((((r22*x5647))+((r22*x5646)))))+(IKabs((((x5647*x5652))+((x5646*x5652))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5655=(cj1*sj2);
IkReal x5656=(cj2*sj1);
IkReal x5657=(gconst122*r21);
IkReal x5658=((1.0)*gconst121*r20);
CheckValue<IkReal> x5659 = IKatan2WithCheck(IkReal((((r22*x5656))+((r22*x5655)))),IkReal(((((-1.0)*x5656*x5657))+(((-1.0)*x5655*x5658))+(((-1.0)*x5656*x5658))+(((-1.0)*x5655*x5657)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5659.valid){
continue;
}
CheckValue<IkReal> x5660=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst121*r20*x5658))+(((-2.0)*gconst121*r20*x5657))+(((-1.0)*(r22*r22)))+(((-1.0)*(x5657*x5657))))),-1);
if(!x5660.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5659.value)+(((1.5707963267949)*(x5660.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5661=IKsin(j4);
IkReal x5662=IKcos(j4);
IkReal x5663=(gconst122*r01);
IkReal x5664=(gconst121*r10);
IkReal x5665=(gconst122*r21);
IkReal x5666=(gconst121*r20);
IkReal x5667=(gconst122*r11);
IkReal x5668=(gconst121*r00);
IkReal x5669=((1.0)*sj0);
IkReal x5670=(cj1*cj2);
IkReal x5671=((1.0)*cj0);
IkReal x5672=(sj1*sj2);
IkReal x5673=((1.0)*x5662);
IkReal x5674=((1.0)*x5661);
evalcond[0]=((((-1.0)*x5666*x5674))+(((-1.0)*r22*x5673))+(((-1.0)*x5665*x5674)));
evalcond[1]=((((-1.0)*x5663*x5674))+(((-1.0)*x5668*x5674))+(((-1.0)*x5671))+(((-1.0)*r02*x5673)));
evalcond[2]=((((-1.0)*x5664*x5674))+(((-1.0)*x5669))+(((-1.0)*x5667*x5674))+(((-1.0)*r12*x5673)));
evalcond[3]=(((cj2*sj1))+((r22*x5661))+(((-1.0)*x5666*x5673))+((cj1*sj2))+(((-1.0)*x5665*x5673)));
evalcond[4]=((((-1.0)*x5669*x5670))+(((-1.0)*x5663*x5673))+((r02*x5661))+((sj0*x5672))+(((-1.0)*x5668*x5673)));
evalcond[5]=((((-1.0)*x5664*x5673))+((cj0*x5670))+(((-1.0)*x5667*x5673))+(((-1.0)*x5671*x5672))+((r12*x5661)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5675=((1.0)*gconst121);
CheckValue<IkReal> x5676=IKPowWithIntegerCheck(IKsign((((gconst122*r20))+(((-1.0)*r21*x5675)))),-1);
if(!x5676.valid){
continue;
}
CheckValue<IkReal> x5677 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r12))+((r02*sj0)))),IkReal(((((-1.0)*r00*sj0*x5675))+((cj0*gconst122*r11))+(((-1.0)*gconst122*r01*sj0))+((cj0*gconst121*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5677.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5676.value)))+(x5677.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5678=IKsin(j4);
IkReal x5679=IKcos(j4);
IkReal x5680=(gconst122*r01);
IkReal x5681=(gconst121*r10);
IkReal x5682=(gconst122*r21);
IkReal x5683=(gconst121*r20);
IkReal x5684=(gconst122*r11);
IkReal x5685=(gconst121*r00);
IkReal x5686=((1.0)*sj0);
IkReal x5687=(cj1*cj2);
IkReal x5688=((1.0)*cj0);
IkReal x5689=(sj1*sj2);
IkReal x5690=((1.0)*x5679);
IkReal x5691=((1.0)*x5678);
evalcond[0]=((((-1.0)*x5683*x5691))+(((-1.0)*r22*x5690))+(((-1.0)*x5682*x5691)));
evalcond[1]=((((-1.0)*r02*x5690))+(((-1.0)*x5688))+(((-1.0)*x5680*x5691))+(((-1.0)*x5685*x5691)));
evalcond[2]=((((-1.0)*x5686))+(((-1.0)*x5681*x5691))+(((-1.0)*x5684*x5691))+(((-1.0)*r12*x5690)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x5683*x5690))+((r22*x5678))+(((-1.0)*x5682*x5690)));
evalcond[4]=((((-1.0)*x5686*x5687))+((r02*x5678))+(((-1.0)*x5680*x5690))+(((-1.0)*x5685*x5690))+((sj0*x5689)));
evalcond[5]=((((-1.0)*x5681*x5690))+(((-1.0)*x5684*x5690))+((r12*x5678))+((cj0*x5687))+(((-1.0)*x5688*x5689)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5692=((1.0)*sj0);
CheckValue<IkReal> x5693 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst122*r21*x5692))+(((-1.0)*gconst121*r20*x5692)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5693.valid){
continue;
}
CheckValue<IkReal> x5694=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst122*r00))+((gconst121*r01)))),-1);
if(!x5694.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5693.value)+(((1.5707963267949)*(x5694.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5695=IKsin(j4);
IkReal x5696=IKcos(j4);
IkReal x5697=(gconst122*r01);
IkReal x5698=(gconst121*r10);
IkReal x5699=(gconst122*r21);
IkReal x5700=(gconst121*r20);
IkReal x5701=(gconst122*r11);
IkReal x5702=(gconst121*r00);
IkReal x5703=((1.0)*sj0);
IkReal x5704=(cj1*cj2);
IkReal x5705=((1.0)*cj0);
IkReal x5706=(sj1*sj2);
IkReal x5707=((1.0)*x5696);
IkReal x5708=((1.0)*x5695);
evalcond[0]=((((-1.0)*x5700*x5708))+(((-1.0)*r22*x5707))+(((-1.0)*x5699*x5708)));
evalcond[1]=((((-1.0)*x5697*x5708))+(((-1.0)*x5702*x5708))+(((-1.0)*r02*x5707))+(((-1.0)*x5705)));
evalcond[2]=((((-1.0)*r12*x5707))+(((-1.0)*x5701*x5708))+(((-1.0)*x5698*x5708))+(((-1.0)*x5703)));
evalcond[3]=(((cj2*sj1))+((r22*x5695))+(((-1.0)*x5700*x5707))+((cj1*sj2))+(((-1.0)*x5699*x5707)));
evalcond[4]=((((-1.0)*x5697*x5707))+(((-1.0)*x5702*x5707))+((sj0*x5706))+((r02*x5695))+(((-1.0)*x5703*x5704)));
evalcond[5]=((((-1.0)*x5701*x5707))+(((-1.0)*x5698*x5707))+((r12*x5695))+(((-1.0)*x5705*x5706))+((cj0*x5704)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5711 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x5711)==0){
continue;
}
IkReal x5709=pow(x5711,-0.5);
IkReal x5710=((1.0)*x5709);
CheckValue<IkReal> x5712 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x5712.valid){
continue;
}
IkReal gconst123=((3.14159265358979)+(((-1.0)*(x5712.value))));
IkReal gconst124=(r10*x5710);
IkReal gconst125=(r11*x5710);
CheckValue<IkReal> x5713 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x5713.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5+(x5713.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
CheckValue<IkReal> x5717 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x5717.valid){
continue;
}
IkReal x5714=((1.0)*(x5717.value));
IkReal x5715=x5709;
IkReal x5716=((1.0)*x5715);
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5714)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5714)));
IkReal gconst124=(r10*x5716);
IkReal gconst125=(r11*x5716);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x5721 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x5721.valid){
continue;
}
IkReal x5718=((1.0)*(x5721.value));
IkReal x5719=x5709;
IkReal x5720=((1.0)*x5719);
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5718)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5718)));
IkReal gconst124=(r10*x5720);
IkReal gconst125=(r11*x5720);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5722=((1.0)*sj0);
CheckValue<IkReal> x5723 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r12))+((r02*sj0)))),IkReal(((((-1.0)*gconst124*r00*x5722))+((cj0*gconst124*r10))+(((-1.0)*gconst125*r01*x5722))+((cj0*gconst125*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5723.valid){
continue;
}
CheckValue<IkReal> x5724=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r21))+((gconst125*r20)))),-1);
if(!x5724.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5723.value)+(((1.5707963267949)*(x5724.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5725=IKsin(j4);
IkReal x5726=IKcos(j4);
IkReal x5727=(gconst125*r01);
IkReal x5728=(gconst124*r10);
IkReal x5729=((1.0)*sj0);
IkReal x5730=(gconst125*r11);
IkReal x5731=(cj1*cj2);
IkReal x5732=(gconst125*r21);
IkReal x5733=((1.0)*cj0);
IkReal x5734=(sj1*sj2);
IkReal x5735=((1.0)*x5726);
IkReal x5736=((1.0)*x5725);
IkReal x5737=(gconst124*x5736);
evalcond[0]=((((-1.0)*x5732*x5736))+(((-1.0)*r20*x5737))+(((-1.0)*r22*x5735)));
evalcond[1]=((((-1.0)*x5733))+(((-1.0)*r02*x5735))+(((-1.0)*x5727*x5736))+(((-1.0)*r00*x5737)));
evalcond[2]=((((-1.0)*x5728*x5736))+(((-1.0)*x5729))+(((-1.0)*r12*x5735))+(((-1.0)*x5730*x5736)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x5732*x5735))+((cj1*sj2))+(((-1.0)*gconst124*r20*x5735))+((r22*x5725)));
evalcond[4]=((((-1.0)*x5729*x5731))+(((-1.0)*gconst124*r00*x5735))+(((-1.0)*x5727*x5735))+((r02*x5725))+((sj0*x5734)));
evalcond[5]=((((-1.0)*x5728*x5735))+((r12*x5725))+(((-1.0)*x5733*x5734))+(((-1.0)*x5730*x5735))+((cj0*x5731)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5738=((1.0)*sj0);
CheckValue<IkReal> x5739=IKPowWithIntegerCheck(IKsign((((gconst124*r01))+(((-1.0)*gconst125*r00)))),-1);
if(!x5739.valid){
continue;
}
CheckValue<IkReal> x5740 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst125*r21*x5738))+(((-1.0)*gconst124*r20*x5738)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5740.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5739.value)))+(x5740.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5741=IKsin(j4);
IkReal x5742=IKcos(j4);
IkReal x5743=(gconst125*r01);
IkReal x5744=(gconst124*r10);
IkReal x5745=((1.0)*sj0);
IkReal x5746=(gconst125*r11);
IkReal x5747=(cj1*cj2);
IkReal x5748=(gconst125*r21);
IkReal x5749=((1.0)*cj0);
IkReal x5750=(sj1*sj2);
IkReal x5751=((1.0)*x5742);
IkReal x5752=((1.0)*x5741);
IkReal x5753=(gconst124*x5752);
evalcond[0]=((((-1.0)*r20*x5753))+(((-1.0)*r22*x5751))+(((-1.0)*x5748*x5752)));
evalcond[1]=((((-1.0)*x5743*x5752))+(((-1.0)*r00*x5753))+(((-1.0)*x5749))+(((-1.0)*r02*x5751)));
evalcond[2]=((((-1.0)*x5744*x5752))+(((-1.0)*x5746*x5752))+(((-1.0)*r12*x5751))+(((-1.0)*x5745)));
evalcond[3]=(((cj2*sj1))+((r22*x5741))+((cj1*sj2))+(((-1.0)*x5748*x5751))+(((-1.0)*gconst124*r20*x5751)));
evalcond[4]=((((-1.0)*x5743*x5751))+(((-1.0)*x5745*x5747))+(((-1.0)*gconst124*r00*x5751))+((sj0*x5750))+((r02*x5741)));
evalcond[5]=((((-1.0)*x5744*x5751))+(((-1.0)*x5749*x5750))+(((-1.0)*x5746*x5751))+((cj0*x5747))+((r12*x5741)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5754=((1.0)*cj0);
CheckValue<IkReal> x5755 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*gconst125*r21*x5754))+(((-1.0)*gconst124*r20*x5754)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5755.valid){
continue;
}
CheckValue<IkReal> x5756=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r11))+((gconst125*r10)))),-1);
if(!x5756.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5755.value)+(((1.5707963267949)*(x5756.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5757=IKsin(j4);
IkReal x5758=IKcos(j4);
IkReal x5759=(gconst125*r01);
IkReal x5760=(gconst124*r10);
IkReal x5761=((1.0)*sj0);
IkReal x5762=(gconst125*r11);
IkReal x5763=(cj1*cj2);
IkReal x5764=(gconst125*r21);
IkReal x5765=((1.0)*cj0);
IkReal x5766=(sj1*sj2);
IkReal x5767=((1.0)*x5758);
IkReal x5768=((1.0)*x5757);
IkReal x5769=(gconst124*x5768);
evalcond[0]=((((-1.0)*r20*x5769))+(((-1.0)*r22*x5767))+(((-1.0)*x5764*x5768)));
evalcond[1]=((((-1.0)*x5759*x5768))+(((-1.0)*r02*x5767))+(((-1.0)*x5765))+(((-1.0)*r00*x5769)));
evalcond[2]=((((-1.0)*r12*x5767))+(((-1.0)*x5760*x5768))+(((-1.0)*x5762*x5768))+(((-1.0)*x5761)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst124*r20*x5767))+((cj1*sj2))+(((-1.0)*x5764*x5767))+((r22*x5757)));
evalcond[4]=((((-1.0)*x5761*x5763))+(((-1.0)*gconst124*r00*x5767))+(((-1.0)*x5759*x5767))+((r02*x5757))+((sj0*x5766)));
evalcond[5]=((((-1.0)*x5760*x5767))+(((-1.0)*x5762*x5767))+((cj0*x5763))+(((-1.0)*x5765*x5766))+((r12*x5757)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x5770=((1.0)*cj5);
IkReal x5771=((((-1.0)*r00*x5770))+((r01*sj5)));
j4eval[0]=x5771;
j4eval[1]=IKsign(x5771);
j4eval[2]=((IKabs(((((-1.0)*r21*x5770))+(((-1.0)*r20*sj5)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x5772=((1.0)*sj5);
IkReal x5773=(((cj5*r20))+(((-1.0)*r21*x5772)));
j4eval[0]=x5773;
j4eval[1]=IKsign(x5773);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*r00*x5772))+(((-1.0)*cj5*r01))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x5774=cj5*cj5;
IkReal x5775=r10*r10;
IkReal x5776=(cj5*r11);
IkReal x5777=(r10*sj5);
IkReal x5778=((r12*r12)+(((-1.0)*x5774*x5775))+(((2.0)*x5776*x5777))+((x5774*(r11*r11)))+x5775);
j4eval[0]=x5778;
j4eval[1]=IKsign(x5778);
j4eval[2]=((IKabs(((((-1.0)*x5777))+(((-1.0)*x5776)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5779=cj5*cj5;
IkReal x5780=r10*r10;
IkReal x5781=(cj5*r11);
IkReal x5782=(r10*sj5);
CheckValue<IkReal> x5783 = IKatan2WithCheck(IkReal(((((-1.0)*x5782))+(((-1.0)*x5781)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5783.valid){
continue;
}
CheckValue<IkReal> x5784=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((2.0)*x5781*x5782))+(((-1.0)*x5779*x5780))+x5780+((x5779*(r11*r11))))),-1);
if(!x5784.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5783.value)+(((1.5707963267949)*(x5784.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5785=IKcos(j4);
IkReal x5786=IKsin(j4);
IkReal x5787=(r00*sj5);
IkReal x5788=(cj5*r01);
IkReal x5789=(r20*sj5);
IkReal x5790=(cj5*r21);
IkReal x5791=(cj5*r11);
IkReal x5792=(r10*sj5);
IkReal x5793=((1.0)*x5785);
IkReal x5794=((1.0)*x5786);
evalcond[0]=((((-1.0)*x5792*x5793))+((r12*x5786))+(((-1.0)*x5791*x5793)));
evalcond[1]=((((-1.0)*r22*x5793))+(((-1.0)*x5789*x5794))+(((-1.0)*x5790*x5794)));
evalcond[2]=((((-1.0)*x5787*x5794))+(((-1.0)*x5788*x5794))+(((-1.0)*r02*x5793)));
evalcond[3]=((-1.0)+(((-1.0)*x5792*x5794))+(((-1.0)*x5791*x5794))+(((-1.0)*r12*x5793)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x5786))+(((-1.0)*x5789*x5793))+(((-1.0)*x5790*x5793)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x5787*x5793))+(((-1.0)*x5788*x5793))+((r02*x5786)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5795=((1.0)*sj5);
CheckValue<IkReal> x5796=IKPowWithIntegerCheck(IKsign((((cj5*r20))+(((-1.0)*r21*x5795)))),-1);
if(!x5796.valid){
continue;
}
CheckValue<IkReal> x5797 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x5795))+(((-1.0)*cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5797.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5796.value)))+(x5797.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5798=IKcos(j4);
IkReal x5799=IKsin(j4);
IkReal x5800=(r00*sj5);
IkReal x5801=(cj5*r01);
IkReal x5802=(r20*sj5);
IkReal x5803=(cj5*r21);
IkReal x5804=(cj5*r11);
IkReal x5805=(r10*sj5);
IkReal x5806=((1.0)*x5798);
IkReal x5807=((1.0)*x5799);
evalcond[0]=((((-1.0)*x5804*x5806))+((r12*x5799))+(((-1.0)*x5805*x5806)));
evalcond[1]=((((-1.0)*r22*x5806))+(((-1.0)*x5802*x5807))+(((-1.0)*x5803*x5807)));
evalcond[2]=((((-1.0)*x5800*x5807))+(((-1.0)*r02*x5806))+(((-1.0)*x5801*x5807)));
evalcond[3]=((-1.0)+(((-1.0)*x5804*x5807))+(((-1.0)*x5805*x5807))+(((-1.0)*r12*x5806)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x5802*x5806))+((r22*x5799))+(((-1.0)*x5803*x5806)));
evalcond[5]=((((-1.0)*x5800*x5806))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x5799))+(((-1.0)*x5801*x5806)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5808=((1.0)*cj5);
CheckValue<IkReal> x5809=IKPowWithIntegerCheck(IKsign((((r01*sj5))+(((-1.0)*r00*x5808)))),-1);
if(!x5809.valid){
continue;
}
CheckValue<IkReal> x5810 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x5808))+(((-1.0)*r20*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5810.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5809.value)))+(x5810.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5811=IKcos(j4);
IkReal x5812=IKsin(j4);
IkReal x5813=(r00*sj5);
IkReal x5814=(cj5*r01);
IkReal x5815=(r20*sj5);
IkReal x5816=(cj5*r21);
IkReal x5817=(cj5*r11);
IkReal x5818=(r10*sj5);
IkReal x5819=((1.0)*x5811);
IkReal x5820=((1.0)*x5812);
evalcond[0]=((((-1.0)*x5818*x5819))+((r12*x5812))+(((-1.0)*x5817*x5819)));
evalcond[1]=((((-1.0)*x5815*x5820))+(((-1.0)*x5816*x5820))+(((-1.0)*r22*x5819)));
evalcond[2]=((((-1.0)*r02*x5819))+(((-1.0)*x5814*x5820))+(((-1.0)*x5813*x5820)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x5819))+(((-1.0)*x5818*x5820))+(((-1.0)*x5817*x5820)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x5815*x5819))+((r22*x5812))+((cj1*sj2))+(((-1.0)*x5816*x5819)));
evalcond[5]=((((-1.0)*x5813*x5819))+(((-1.0)*x5814*x5819))+((r02*x5812))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x5821=((1.0)*sj5);
IkReal x5822=((((-1.0)*r01*x5821))+((cj5*r00)));
j4eval[0]=x5822;
j4eval[1]=IKsign(x5822);
j4eval[2]=((IKabs(((((-1.0)*r20*x5821))+(((-1.0)*cj5*r21)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x5823=((1.0)*cj5);
IkReal x5824=((((-1.0)*r20*x5823))+((r21*sj5)));
j4eval[0]=x5824;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x5823))+(((-1.0)*r00*sj5))))));
j4eval[2]=IKsign(x5824);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x5825=cj5*cj5;
IkReal x5826=r10*r10;
IkReal x5827=(cj5*r11);
IkReal x5828=(r10*sj5);
IkReal x5829=((((-1.0)*x5825*(r11*r11)))+(((-2.0)*x5827*x5828))+((x5825*x5826))+(((-1.0)*(r12*r12)))+(((-1.0)*x5826)));
j4eval[0]=x5829;
j4eval[1]=IKsign(x5829);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x5828))+(((-1.0)*x5827))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5830=cj5*cj5;
IkReal x5831=r10*r10;
IkReal x5832=(cj5*r11);
IkReal x5833=(r10*sj5);
CheckValue<IkReal> x5834 = IKatan2WithCheck(IkReal(((((-1.0)*x5833))+(((-1.0)*x5832)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5834.valid){
continue;
}
CheckValue<IkReal> x5835=IKPowWithIntegerCheck(IKsign(((((-1.0)*x5830*(r11*r11)))+((x5830*x5831))+(((-2.0)*x5832*x5833))+(((-1.0)*(r12*r12)))+(((-1.0)*x5831)))),-1);
if(!x5835.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5834.value)+(((1.5707963267949)*(x5835.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5836=IKcos(j4);
IkReal x5837=IKsin(j4);
IkReal x5838=(r00*sj5);
IkReal x5839=(cj5*r01);
IkReal x5840=(r20*sj5);
IkReal x5841=(cj5*r21);
IkReal x5842=(cj5*r11);
IkReal x5843=(r10*sj5);
IkReal x5844=((1.0)*x5836);
IkReal x5845=((1.0)*x5837);
evalcond[0]=(((r12*x5837))+(((-1.0)*x5842*x5844))+(((-1.0)*x5843*x5844)));
evalcond[1]=((((-1.0)*x5840*x5845))+(((-1.0)*x5841*x5845))+(((-1.0)*r22*x5844)));
evalcond[2]=((((-1.0)*r02*x5844))+(((-1.0)*x5839*x5845))+(((-1.0)*x5838*x5845)));
evalcond[3]=((1.0)+(((-1.0)*x5842*x5845))+(((-1.0)*x5843*x5845))+(((-1.0)*r12*x5844)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x5840*x5844))+(((-1.0)*x5841*x5844))+((r22*x5837)));
evalcond[5]=(((r02*x5837))+(((-1.0)*sj1*sj2))+(((-1.0)*x5839*x5844))+(((-1.0)*x5838*x5844))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5846=((1.0)*cj5);
CheckValue<IkReal> x5847 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*x5846))+(((-1.0)*r00*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5847.valid){
continue;
}
CheckValue<IkReal> x5848=IKPowWithIntegerCheck(IKsign((((r21*sj5))+(((-1.0)*r20*x5846)))),-1);
if(!x5848.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5847.value)+(((1.5707963267949)*(x5848.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5849=IKcos(j4);
IkReal x5850=IKsin(j4);
IkReal x5851=(r00*sj5);
IkReal x5852=(cj5*r01);
IkReal x5853=(r20*sj5);
IkReal x5854=(cj5*r21);
IkReal x5855=(cj5*r11);
IkReal x5856=(r10*sj5);
IkReal x5857=((1.0)*x5849);
IkReal x5858=((1.0)*x5850);
evalcond[0]=(((r12*x5850))+(((-1.0)*x5856*x5857))+(((-1.0)*x5855*x5857)));
evalcond[1]=((((-1.0)*x5853*x5858))+(((-1.0)*x5854*x5858))+(((-1.0)*r22*x5857)));
evalcond[2]=((((-1.0)*x5851*x5858))+(((-1.0)*x5852*x5858))+(((-1.0)*r02*x5857)));
evalcond[3]=((1.0)+(((-1.0)*r12*x5857))+(((-1.0)*x5856*x5858))+(((-1.0)*x5855*x5858)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x5853*x5857))+((cj1*sj2))+((r22*x5850))+(((-1.0)*x5854*x5857)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r02*x5850))+(((-1.0)*x5851*x5857))+(((-1.0)*x5852*x5857))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5859=((1.0)*sj5);
CheckValue<IkReal> x5860 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x5859))+(((-1.0)*cj5*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5860.valid){
continue;
}
CheckValue<IkReal> x5861=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5859))+((cj5*r00)))),-1);
if(!x5861.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5860.value)+(((1.5707963267949)*(x5861.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5862=IKcos(j4);
IkReal x5863=IKsin(j4);
IkReal x5864=(r00*sj5);
IkReal x5865=(cj5*r01);
IkReal x5866=(r20*sj5);
IkReal x5867=(cj5*r21);
IkReal x5868=(cj5*r11);
IkReal x5869=(r10*sj5);
IkReal x5870=((1.0)*x5862);
IkReal x5871=((1.0)*x5863);
evalcond[0]=(((r12*x5863))+(((-1.0)*x5869*x5870))+(((-1.0)*x5868*x5870)));
evalcond[1]=((((-1.0)*r22*x5870))+(((-1.0)*x5866*x5871))+(((-1.0)*x5867*x5871)));
evalcond[2]=((((-1.0)*r02*x5870))+(((-1.0)*x5865*x5871))+(((-1.0)*x5864*x5871)));
evalcond[3]=((1.0)+(((-1.0)*r12*x5870))+(((-1.0)*x5869*x5871))+(((-1.0)*x5868*x5871)));
evalcond[4]=(((cj2*sj1))+((r22*x5863))+((cj1*sj2))+(((-1.0)*x5866*x5870))+(((-1.0)*x5867*x5870)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r02*x5863))+(((-1.0)*x5865*x5870))+((cj1*cj2))+(((-1.0)*x5864*x5870)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x5872=((-1.0)*py);
sj3=0;
cj3=1.0;
j3=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x5872);
rxp0_2=(py*r00);
rxp1_0=(r21*x5872);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5873=((-1.0)*py);
sj3=0;
cj3=1.0;
j3=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x5873);
rxp0_2=(py*r00);
rxp1_0=(r21*x5873);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5874=((-1.0)*py);
sj3=0;
cj3=1.0;
j3=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x5874);
rxp0_2=(py*r00);
rxp1_0=(r21*x5874);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x5877=IKPowWithIntegerCheck(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01))),-1);
if(!x5877.valid){
continue;
}
IkReal x5875=x5877.value;
IkReal x5876=(sj0*x5875);
cj4array[0]=(((cj1*cj2*x5876))+(((-1.0)*sj1*sj2*x5876)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x5878=IKsin(j4);
IkReal x5879=IKcos(j4);
IkReal x5880=(r20*sj5);
IkReal x5881=((1.0)*cj5*r21);
IkReal x5882=((1.0)*x5879);
IkReal x5883=((1.0)*x5878);
evalcond[0]=(r12*x5878);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r12*x5882)));
evalcond[2]=((((-1.0)*x5880*x5883))+(((-1.0)*x5878*x5881)));
evalcond[3]=((((-1.0)*r00*sj5*x5883))+(((-1.0)*cj5*r01*x5883)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x5879*x5881))+(((-1.0)*x5880*x5882)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x5886=IKPowWithIntegerCheck(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5))),-1);
if(!x5886.valid){
continue;
}
IkReal x5884=x5886.value;
IkReal x5885=((1.0)*x5884);
cj4array[0]=((((-1.0)*cj1*sj2*x5885))+(((-1.0)*cj2*sj1*x5885)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x5887=IKsin(j4);
IkReal x5888=IKcos(j4);
IkReal x5889=((1.0)*cj5);
IkReal x5890=((1.0)*sj0);
IkReal x5891=(r00*sj5);
IkReal x5892=((1.0)*x5888);
IkReal x5893=((1.0)*x5887);
evalcond[0]=(r12*x5887);
evalcond[1]=((((-1.0)*r12*x5892))+(((-1.0)*x5890)));
evalcond[2]=((((-1.0)*r20*sj5*x5893))+(((-1.0)*r21*x5887*x5889)));
evalcond[3]=((((-1.0)*r01*x5887*x5889))+(((-1.0)*x5891*x5893)));
evalcond[4]=((((-1.0)*r01*x5888*x5889))+(((-1.0)*x5891*x5892))+((sj0*sj1*sj2))+(((-1.0)*cj1*cj2*x5890)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x5894=IKPowWithIntegerCheck(r12,-1);
if(!x5894.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x5894.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x5895=IKsin(j4);
IkReal x5896=IKcos(j4);
IkReal x5897=((1.0)*cj5);
IkReal x5898=((1.0)*r00*sj5);
IkReal x5899=((1.0)*r20*sj5);
evalcond[0]=(r12*x5895);
evalcond[1]=((((-1.0)*r21*x5895*x5897))+(((-1.0)*x5895*x5899)));
evalcond[2]=((((-1.0)*r01*x5895*x5897))+(((-1.0)*x5895*x5898)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x5896*x5899))+((cj1*sj2))+(((-1.0)*r21*x5896*x5897)));
evalcond[4]=((((-1.0)*x5896*x5898))+(((-1.0)*cj1*cj2*sj0))+((sj0*sj1*sj2))+(((-1.0)*r01*x5896*x5897)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5900=((1.0)*sj0);
CheckValue<IkReal> x5901 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r12))+((r02*sj0)))),IkReal(((((-1.0)*cj5*r01*x5900))+(((-1.0)*r00*sj5*x5900))+((cj0*cj5*r11))+((cj0*r10*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5901.valid){
continue;
}
CheckValue<IkReal> x5902=IKPowWithIntegerCheck(IKsign((((cj5*r20))+(((-1.0)*r21*sj5)))),-1);
if(!x5902.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5901.value)+(((1.5707963267949)*(x5902.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5903=IKsin(j4);
IkReal x5904=IKcos(j4);
IkReal x5905=(r00*sj5);
IkReal x5906=(cj5*r01);
IkReal x5907=(r20*sj5);
IkReal x5908=(cj5*r21);
IkReal x5909=(cj5*r11);
IkReal x5910=((1.0)*sj0);
IkReal x5911=(r10*sj5);
IkReal x5912=(cj1*cj2);
IkReal x5913=((1.0)*cj0);
IkReal x5914=(sj1*sj2);
IkReal x5915=((1.0)*x5904);
IkReal x5916=((1.0)*x5903);
evalcond[0]=((((-1.0)*x5907*x5916))+(((-1.0)*r22*x5915))+(((-1.0)*x5908*x5916)));
evalcond[1]=((((-1.0)*x5905*x5916))+(((-1.0)*x5906*x5916))+(((-1.0)*r02*x5915))+(((-1.0)*x5913)));
evalcond[2]=((((-1.0)*r12*x5915))+(((-1.0)*x5909*x5916))+(((-1.0)*x5911*x5916))+(((-1.0)*x5910)));
evalcond[3]=(((cj2*sj1))+((r22*x5903))+(((-1.0)*x5907*x5915))+((cj1*sj2))+(((-1.0)*x5908*x5915)));
evalcond[4]=(((sj0*x5914))+(((-1.0)*x5905*x5915))+((r02*x5903))+(((-1.0)*x5910*x5912))+(((-1.0)*x5906*x5915)));
evalcond[5]=(((r12*x5903))+(((-1.0)*x5913*x5914))+(((-1.0)*x5909*x5915))+(((-1.0)*x5911*x5915))+((cj0*x5912)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5917=((1.0)*sj0);
CheckValue<IkReal> x5918 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj5*x5917))+(((-1.0)*cj5*r21*x5917)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5918.valid){
continue;
}
CheckValue<IkReal> x5919=IKPowWithIntegerCheck(IKsign((((r01*sj5))+(((-1.0)*cj5*r00)))),-1);
if(!x5919.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5918.value)+(((1.5707963267949)*(x5919.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5920=IKsin(j4);
IkReal x5921=IKcos(j4);
IkReal x5922=(r00*sj5);
IkReal x5923=(cj5*r01);
IkReal x5924=(r20*sj5);
IkReal x5925=(cj5*r21);
IkReal x5926=(cj5*r11);
IkReal x5927=((1.0)*sj0);
IkReal x5928=(r10*sj5);
IkReal x5929=(cj1*cj2);
IkReal x5930=((1.0)*cj0);
IkReal x5931=(sj1*sj2);
IkReal x5932=((1.0)*x5921);
IkReal x5933=((1.0)*x5920);
evalcond[0]=((((-1.0)*x5925*x5933))+(((-1.0)*x5924*x5933))+(((-1.0)*r22*x5932)));
evalcond[1]=((((-1.0)*r02*x5932))+(((-1.0)*x5930))+(((-1.0)*x5923*x5933))+(((-1.0)*x5922*x5933)));
evalcond[2]=((((-1.0)*x5926*x5933))+(((-1.0)*x5928*x5933))+(((-1.0)*x5927))+(((-1.0)*r12*x5932)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x5925*x5932))+((cj1*sj2))+((r22*x5920))+(((-1.0)*x5924*x5932)));
evalcond[4]=((((-1.0)*x5927*x5929))+((sj0*x5931))+(((-1.0)*x5923*x5932))+(((-1.0)*x5922*x5932))+((r02*x5920)));
evalcond[5]=((((-1.0)*x5926*x5932))+(((-1.0)*x5928*x5932))+((r12*x5920))+((cj0*x5929))+(((-1.0)*x5930*x5931)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5934=((1.0)*cj0);
CheckValue<IkReal> x5935=IKPowWithIntegerCheck(IKsign((((cj5*r10))+(((-1.0)*r11*sj5)))),-1);
if(!x5935.valid){
continue;
}
CheckValue<IkReal> x5936 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*r20*sj5*x5934))+(((-1.0)*cj5*r21*x5934)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5936.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5935.value)))+(x5936.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5937=IKsin(j4);
IkReal x5938=IKcos(j4);
IkReal x5939=(r00*sj5);
IkReal x5940=(cj5*r01);
IkReal x5941=(r20*sj5);
IkReal x5942=(cj5*r21);
IkReal x5943=(cj5*r11);
IkReal x5944=((1.0)*sj0);
IkReal x5945=(r10*sj5);
IkReal x5946=(cj1*cj2);
IkReal x5947=((1.0)*cj0);
IkReal x5948=(sj1*sj2);
IkReal x5949=((1.0)*x5938);
IkReal x5950=((1.0)*x5937);
evalcond[0]=((((-1.0)*r22*x5949))+(((-1.0)*x5942*x5950))+(((-1.0)*x5941*x5950)));
evalcond[1]=((((-1.0)*x5947))+(((-1.0)*x5940*x5950))+(((-1.0)*r02*x5949))+(((-1.0)*x5939*x5950)));
evalcond[2]=((((-1.0)*x5944))+(((-1.0)*r12*x5949))+(((-1.0)*x5943*x5950))+(((-1.0)*x5945*x5950)));
evalcond[3]=((((-1.0)*x5942*x5949))+((cj2*sj1))+((cj1*sj2))+((r22*x5937))+(((-1.0)*x5941*x5949)));
evalcond[4]=((((-1.0)*x5944*x5946))+(((-1.0)*x5940*x5949))+(((-1.0)*x5939*x5949))+((sj0*x5948))+((r02*x5937)));
evalcond[5]=((((-1.0)*x5945*x5949))+((cj0*x5946))+((r12*x5937))+(((-1.0)*x5947*x5948))+(((-1.0)*x5943*x5949)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5951=r20*r20;
IkReal x5952=cj5*cj5;
IkReal x5953=(r20*sj5);
IkReal x5954=(cj5*r21);
IkReal x5955=((1.0)*cj1*sj2);
IkReal x5956=((1.0)*cj2*sj1);
CheckValue<IkReal> x5957 = IKatan2WithCheck(IkReal((((cj2*r22*sj1))+((cj1*r22*sj2)))),IkReal(((((-1.0)*x5954*x5956))+(((-1.0)*x5954*x5955))+(((-1.0)*x5953*x5955))+(((-1.0)*x5953*x5956)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5957.valid){
continue;
}
CheckValue<IkReal> x5958=IKPowWithIntegerCheck(IKsign((((x5951*x5952))+(((-1.0)*(r22*r22)))+(((-1.0)*x5952*(r21*r21)))+(((-1.0)*x5951))+(((-2.0)*x5953*x5954)))),-1);
if(!x5958.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5957.value)+(((1.5707963267949)*(x5958.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x5959=IKsin(j4);
IkReal x5960=IKcos(j4);
IkReal x5961=(cj5*r21);
IkReal x5962=(r20*sj5);
IkReal x5963=((1.0)*x5960);
IkReal x5964=((1.0)*x5959);
evalcond[0]=((((-1.0)*r22*x5963))+(((-1.0)*x5961*x5964))+(((-1.0)*x5962*x5964)));
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x5961*x5963))+((r22*x5959))+(((-1.0)*x5962*x5963)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5965=((1.0)*cj4);
IkReal x5966=((1.0)*sj4*sj5);
IkReal x5967=((1.0)*cj5*sj4);
if( IKabs(((((-1.0)*r12*x5965))+(((-1.0)*r10*x5966))+(((-1.0)*r11*x5967)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x5966))+(((-1.0)*r01*x5967))+(((-1.0)*r02*x5965)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r12*x5965))+(((-1.0)*r10*x5966))+(((-1.0)*r11*x5967))))+IKsqr(((((-1.0)*r00*x5966))+(((-1.0)*r01*x5967))+(((-1.0)*r02*x5965))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r12*x5965))+(((-1.0)*r10*x5966))+(((-1.0)*r11*x5967))), ((((-1.0)*r00*x5966))+(((-1.0)*r01*x5967))+(((-1.0)*r02*x5965))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x5968=IKsin(j0);
IkReal x5969=IKcos(j0);
IkReal x5970=(cj5*r00);
IkReal x5971=(cj1*sj2);
IkReal x5972=(cj1*cj2);
IkReal x5973=(cj5*r10);
IkReal x5974=(cj2*sj1);
IkReal x5975=(r11*sj5);
IkReal x5976=((1.0)*cj5);
IkReal x5977=((1.0)*cj4);
IkReal x5978=(r01*sj5);
IkReal x5979=(sj1*x5969);
IkReal x5980=((0.3495)*x5968);
IkReal x5981=((1.0)*x5969);
IkReal x5982=((1.0)*sj4*sj5);
IkReal x5983=((1.0)*x5968);
IkReal x5984=(sj1*x5968);
evalcond[0]=((((-1.0)*r02*x5977))+(((-1.0)*x5981))+(((-1.0)*r01*sj4*x5976))+(((-1.0)*r00*x5982)));
evalcond[1]=((((-1.0)*x5983))+(((-1.0)*r11*sj4*x5976))+(((-1.0)*r10*x5982))+(((-1.0)*r12*x5977)));
evalcond[2]=((((-1.0)*x5970))+((x5968*x5971))+((x5968*x5974))+x5978);
evalcond[3]=((((-1.0)*x5971*x5981))+(((-1.0)*x5973))+x5975+(((-1.0)*x5974*x5981)));
evalcond[4]=((((-1.0)*x5972*x5983))+((r02*sj4))+((sj2*x5984))+(((-1.0)*cj4*r01*x5976))+(((-1.0)*r00*sj5*x5977)));
evalcond[5]=(((x5969*x5972))+(((-1.0)*r10*sj5*x5977))+(((-1.0)*cj4*r11*x5976))+((r12*sj4))+(((-1.0)*sj2*x5979)));
evalcond[6]=((((-1.0)*x5971*x5980))+(((-0.1005)*x5970))+(((0.1002)*x5969))+(((0.1005)*x5978))+(((-1.0)*px))+(((-0.3484)*x5984))+(((-1.0)*x5974*x5980)));
evalcond[7]=((((0.3484)*x5979))+(((-0.1005)*x5973))+(((0.1002)*x5968))+(((0.1005)*x5975))+(((0.3495)*x5969*x5971))+(((0.3495)*x5969*x5974))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x5985=IKPowWithIntegerCheck(IKsign((((cj2*sj1))+((cj1*sj2)))),-1);
if(!x5985.valid){
continue;
}
CheckValue<IkReal> x5986 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5986.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5985.value)))+(x5986.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5987=IKsin(j0);
IkReal x5988=IKcos(j0);
IkReal x5989=(cj2*sj1);
IkReal x5990=(cj5*r00);
IkReal x5991=((0.3484)*sj1);
IkReal x5992=(cj1*sj2);
IkReal x5993=(cj5*r10);
IkReal x5994=(r11*sj5);
IkReal x5995=(r01*sj5);
IkReal x5996=((0.3495)*x5988);
IkReal x5997=((1.0)*x5988);
IkReal x5998=((0.3495)*x5987);
evalcond[0]=(((x5987*x5992))+((x5987*x5989))+(((-1.0)*x5990))+x5995);
evalcond[1]=((((-1.0)*x5992*x5997))+(((-1.0)*x5993))+(((-1.0)*x5989*x5997))+x5994);
evalcond[2]=((((-1.0)*x5992*x5998))+(((-1.0)*x5987*x5991))+(((0.1005)*x5995))+(((-1.0)*px))+(((0.1002)*x5988))+(((-0.1005)*x5990))+(((-1.0)*x5989*x5998)));
evalcond[3]=(((x5989*x5996))+((x5988*x5991))+(((0.1005)*x5994))+((x5992*x5996))+(((-1.0)*py))+(((0.1002)*x5987))+(((-0.1005)*x5993)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5999=((1.0)*sj5);
IkReal x6000=(((cj5*r10))+(((-1.0)*r11*x5999)));
j4eval[0]=x6000;
j4eval[1]=IKsign(x6000);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*cj5*r21))+(((-1.0)*cj0*r20*x5999))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x6001=((1.0)*cj5);
IkReal x6002=(((r01*sj5))+(((-1.0)*r00*x6001)));
j4eval[0]=x6002;
j4eval[1]=IKsign(x6002);
j4eval[2]=((IKabs(((((-1.0)*r21*sj0*x6001))+(((-1.0)*r20*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x6003=((1.0)*sj0);
IkReal x6004=(((cj5*r20))+(((-1.0)*r21*sj5)));
j4eval[0]=x6004;
j4eval[1]=((IKabs(((((-1.0)*cj0*r12))+((r02*sj0)))))+(IKabs((((cj0*cj5*r11))+(((-1.0)*cj5*r01*x6003))+((cj0*r10*sj5))+(((-1.0)*r00*sj5*x6003))))));
j4eval[2]=IKsign(x6004);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x6005=((-1.0)*r21);
IkReal x6007 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x6007)==0){
continue;
}
IkReal x6006=pow(x6007,-0.5);
CheckValue<IkReal> x6008 = IKatan2WithCheck(IkReal(r20),IkReal(x6005),IKFAST_ATAN2_MAGTHRESH);
if(!x6008.valid){
continue;
}
IkReal gconst108=((-1.0)*(x6008.value));
IkReal gconst109=((-1.0)*r20*x6006);
IkReal gconst110=(x6005*x6006);
CheckValue<IkReal> x6009 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x6009.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6009.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6010=((-1.0)*r21);
CheckValue<IkReal> x6013 = IKatan2WithCheck(IkReal(r20),IkReal(x6010),IKFAST_ATAN2_MAGTHRESH);
if(!x6013.valid){
continue;
}
IkReal x6011=((-1.0)*(x6013.value));
IkReal x6012=x6006;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst109;
cj5=gconst110;
j5=x6011;
IkReal gconst108=x6011;
IkReal gconst109=((-1.0)*r20*x6012);
IkReal gconst110=(x6010*x6012);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6014=((-1.0)*r21);
CheckValue<IkReal> x6017 = IKatan2WithCheck(IkReal(r20),IkReal(x6014),IKFAST_ATAN2_MAGTHRESH);
if(!x6017.valid){
continue;
}
IkReal x6015=((-1.0)*(x6017.value));
IkReal x6016=x6006;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst109;
cj5=gconst110;
j5=x6015;
IkReal gconst108=x6015;
IkReal gconst109=((-1.0)*r20*x6016);
IkReal gconst110=(x6014*x6016);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x6018=((-1.0)*r21);
CheckValue<IkReal> x6021 = IKatan2WithCheck(IkReal(r20),IkReal(x6018),IKFAST_ATAN2_MAGTHRESH);
if(!x6021.valid){
continue;
}
IkReal x6019=((-1.0)*(x6021.value));
IkReal x6020=x6006;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst109;
cj5=gconst110;
j5=x6019;
IkReal gconst108=x6019;
IkReal gconst109=((-1.0)*r20*x6020);
IkReal gconst110=(x6018*x6020);
IkReal x6022=((1.0)*(r22*r22));
CheckValue<IkReal> x6026=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x6022))),-1);
if(!x6026.valid){
continue;
}
IkReal x6023=x6026.value;
IkReal x6024=((1.0)*x6023);
IkReal x6025=((((-2.0)*x6023*(r20*r20)*(r21*r21)))+(((-1.0)*x6022))+(((-1.0)*x6024*(r21*r21*r21*r21)))+(((-1.0)*x6024*(r20*r20*r20*r20))));
j4eval[0]=x6025;
j4eval[1]=IKsign(x6025);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6027=(gconst109*r20);
IkReal x6028=(gconst110*r21);
IkReal x6029=(cj2*sj1);
IkReal x6030=((1.0)*cj1*sj2);
CheckValue<IkReal> x6031 = IKatan2WithCheck(IkReal((((r22*x6029))+((cj1*r22*sj2)))),IkReal(((((-1.0)*x6027*x6029))+(((-1.0)*x6028*x6029))+(((-1.0)*x6027*x6030))+(((-1.0)*x6028*x6030)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6031.valid){
continue;
}
CheckValue<IkReal> x6032=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x6027*x6027)))+(((-1.0)*(x6028*x6028)))+(((-1.0)*(r22*r22)))+(((-2.0)*x6027*x6028)))),-1);
if(!x6032.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6031.value)+(((1.5707963267949)*(x6032.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6033=IKsin(j4);
IkReal x6034=IKcos(j4);
IkReal x6035=(gconst110*r11);
IkReal x6036=(gconst109*r00);
IkReal x6037=(gconst109*r20);
IkReal x6038=(gconst110*r21);
IkReal x6039=((1.0)*sj0);
IkReal x6040=(gconst110*r01);
IkReal x6041=(cj1*cj2);
IkReal x6042=(gconst109*r10);
IkReal x6043=((1.0)*cj0);
IkReal x6044=(sj1*sj2);
IkReal x6045=((1.0)*x6034);
IkReal x6046=((1.0)*x6033);
evalcond[0]=((((-1.0)*x6037*x6046))+(((-1.0)*r22*x6045))+(((-1.0)*x6038*x6046)));
evalcond[1]=((((-1.0)*x6043))+(((-1.0)*r02*x6045))+(((-1.0)*x6036*x6046))+(((-1.0)*x6040*x6046)));
evalcond[2]=((((-1.0)*x6039))+(((-1.0)*x6042*x6046))+(((-1.0)*x6035*x6046))+(((-1.0)*r12*x6045)));
evalcond[3]=(((r22*x6033))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6037*x6045))+(((-1.0)*x6038*x6045)));
evalcond[4]=(((sj0*x6044))+(((-1.0)*x6039*x6041))+(((-1.0)*x6036*x6045))+((r02*x6033))+(((-1.0)*x6040*x6045)));
evalcond[5]=(((cj0*x6041))+((r12*x6033))+(((-1.0)*x6042*x6045))+(((-1.0)*x6035*x6045))+(((-1.0)*x6043*x6044)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6047=((1.0)*gconst110);
CheckValue<IkReal> x6048 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x6047))+(((-1.0)*gconst109*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6048.valid){
continue;
}
CheckValue<IkReal> x6049=IKPowWithIntegerCheck(IKsign((((gconst109*r01))+(((-1.0)*r00*x6047)))),-1);
if(!x6049.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6048.value)+(((1.5707963267949)*(x6049.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6050=IKsin(j4);
IkReal x6051=IKcos(j4);
IkReal x6052=(gconst110*r11);
IkReal x6053=(gconst109*r00);
IkReal x6054=(gconst109*r20);
IkReal x6055=(gconst110*r21);
IkReal x6056=((1.0)*sj0);
IkReal x6057=(gconst110*r01);
IkReal x6058=(cj1*cj2);
IkReal x6059=(gconst109*r10);
IkReal x6060=((1.0)*cj0);
IkReal x6061=(sj1*sj2);
IkReal x6062=((1.0)*x6051);
IkReal x6063=((1.0)*x6050);
evalcond[0]=((((-1.0)*r22*x6062))+(((-1.0)*x6054*x6063))+(((-1.0)*x6055*x6063)));
evalcond[1]=((((-1.0)*x6057*x6063))+(((-1.0)*x6060))+(((-1.0)*x6053*x6063))+(((-1.0)*r02*x6062)));
evalcond[2]=((((-1.0)*x6056))+(((-1.0)*x6059*x6063))+(((-1.0)*x6052*x6063))+(((-1.0)*r12*x6062)));
evalcond[3]=(((cj2*sj1))+((r22*x6050))+(((-1.0)*x6054*x6062))+(((-1.0)*x6055*x6062))+((cj1*sj2)));
evalcond[4]=((((-1.0)*x6057*x6062))+((sj0*x6061))+(((-1.0)*x6053*x6062))+(((-1.0)*x6056*x6058))+((r02*x6050)));
evalcond[5]=(((r12*x6050))+(((-1.0)*x6059*x6062))+(((-1.0)*x6052*x6062))+((cj0*x6058))+(((-1.0)*x6060*x6061)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6064=((1.0)*gconst109);
CheckValue<IkReal> x6065=IKPowWithIntegerCheck(IKsign((((gconst110*r10))+(((-1.0)*r11*x6064)))),-1);
if(!x6065.valid){
continue;
}
CheckValue<IkReal> x6066 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst110*r21))+(((-1.0)*cj0*r20*x6064)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6066.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6065.value)))+(x6066.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6067=IKsin(j4);
IkReal x6068=IKcos(j4);
IkReal x6069=(gconst110*r11);
IkReal x6070=(gconst109*r00);
IkReal x6071=(gconst109*r20);
IkReal x6072=(gconst110*r21);
IkReal x6073=((1.0)*sj0);
IkReal x6074=(gconst110*r01);
IkReal x6075=(cj1*cj2);
IkReal x6076=(gconst109*r10);
IkReal x6077=((1.0)*cj0);
IkReal x6078=(sj1*sj2);
IkReal x6079=((1.0)*x6068);
IkReal x6080=((1.0)*x6067);
evalcond[0]=((((-1.0)*x6071*x6080))+(((-1.0)*r22*x6079))+(((-1.0)*x6072*x6080)));
evalcond[1]=((((-1.0)*x6070*x6080))+(((-1.0)*x6077))+(((-1.0)*r02*x6079))+(((-1.0)*x6074*x6080)));
evalcond[2]=((((-1.0)*x6073))+(((-1.0)*x6069*x6080))+(((-1.0)*r12*x6079))+(((-1.0)*x6076*x6080)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6072*x6079))+((r22*x6067))+(((-1.0)*x6071*x6079)));
evalcond[4]=(((sj0*x6078))+(((-1.0)*x6074*x6079))+(((-1.0)*x6073*x6075))+((r02*x6067))+(((-1.0)*x6070*x6079)));
evalcond[5]=(((cj0*x6075))+(((-1.0)*x6077*x6078))+(((-1.0)*x6076*x6079))+((r12*x6067))+(((-1.0)*x6069*x6079)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6083 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x6083)==0){
continue;
}
IkReal x6081=pow(x6083,-0.5);
IkReal x6082=((1.0)*x6081);
CheckValue<IkReal> x6084 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x6084.valid){
continue;
}
IkReal gconst111=((3.14159265358979)+(((-1.0)*(x6084.value))));
IkReal gconst112=(r20*x6082);
IkReal gconst113=(r21*x6082);
CheckValue<IkReal> x6085 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x6085.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6085.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x6089 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x6089.valid){
continue;
}
IkReal x6086=((1.0)*(x6089.value));
IkReal x6087=x6081;
IkReal x6088=((1.0)*x6087);
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x6086)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x6086)));
IkReal gconst112=(r20*x6088);
IkReal gconst113=(r21*x6088);
IkReal x6090=r22*r22;
IkReal x6091=((1.0)*x6090);
CheckValue<IkReal> x6095=IKPowWithIntegerCheck(((-1.0)+x6090),-1);
if(!x6095.valid){
continue;
}
IkReal x6092=x6095.value;
if((((1.0)+(((-1.0)*x6091)))) < -0.00001)
continue;
IkReal x6093=IKsqrt(((1.0)+(((-1.0)*x6091))));
IkReal x6094=(cj0*x6092*x6093);
j4eval[0]=((IKabs(((((-1.0)*x6091*x6094))+x6094)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x6099 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x6099.valid){
continue;
}
IkReal x6096=((1.0)*(x6099.value));
IkReal x6097=x6081;
IkReal x6098=((1.0)*x6097);
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x6096)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x6096)));
IkReal gconst112=(r20*x6098);
IkReal gconst113=(r21*x6098);
IkReal x6100=r22*r22;
IkReal x6101=((1.0)*x6100);
CheckValue<IkReal> x6105=IKPowWithIntegerCheck(((-1.0)+x6100),-1);
if(!x6105.valid){
continue;
}
IkReal x6102=x6105.value;
if((((1.0)+(((-1.0)*x6101)))) < -0.00001)
continue;
IkReal x6103=IKsqrt(((1.0)+(((-1.0)*x6101))));
IkReal x6104=(sj0*x6102*x6103);
j4eval[0]=((IKabs((x6104+(((-1.0)*x6101*x6104)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x6109 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x6109.valid){
continue;
}
IkReal x6106=((1.0)*(x6109.value));
IkReal x6107=x6081;
IkReal x6108=((1.0)*x6107);
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x6106)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x6106)));
IkReal gconst112=(r20*x6108);
IkReal gconst113=(r21*x6108);
IkReal x6110=r22*r22;
IkReal x6111=(cj0*r12);
IkReal x6112=(r02*sj0);
CheckValue<IkReal> x6116=IKPowWithIntegerCheck(((-1.0)+x6110),-1);
if(!x6116.valid){
continue;
}
IkReal x6113=x6116.value;
if((((1.0)+(((-1.0)*x6110)))) < -0.00001)
continue;
IkReal x6114=IKsqrt(((1.0)+(((-1.0)*x6110))));
IkReal x6115=(r22*x6113*x6114);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs((((x6111*x6115))+(((-1.0)*x6112*x6115)))))+(IKabs(((((-1.0)*x6111))+x6112))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6117=((1.0)*gconst112);
CheckValue<IkReal> x6118 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r12))+((r02*sj0)))),IkReal(((((-1.0)*r00*sj0*x6117))+((cj0*gconst112*r10))+((cj0*gconst113*r11))+(((-1.0)*gconst113*r01*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6118.valid){
continue;
}
CheckValue<IkReal> x6119=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6117))+((gconst113*r20)))),-1);
if(!x6119.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6118.value)+(((1.5707963267949)*(x6119.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6120=IKsin(j4);
IkReal x6121=IKcos(j4);
IkReal x6122=(gconst112*r10);
IkReal x6123=(gconst112*r20);
IkReal x6124=(gconst113*r01);
IkReal x6125=(gconst112*r00);
IkReal x6126=(gconst113*r11);
IkReal x6127=((1.0)*sj0);
IkReal x6128=(gconst113*r21);
IkReal x6129=(cj1*cj2);
IkReal x6130=((1.0)*cj0);
IkReal x6131=(sj1*sj2);
IkReal x6132=((1.0)*x6121);
IkReal x6133=((1.0)*x6120);
evalcond[0]=((((-1.0)*x6128*x6133))+(((-1.0)*r22*x6132))+(((-1.0)*x6123*x6133)));
evalcond[1]=((((-1.0)*x6125*x6133))+(((-1.0)*x6124*x6133))+(((-1.0)*x6130))+(((-1.0)*r02*x6132)));
evalcond[2]=((((-1.0)*x6126*x6133))+(((-1.0)*x6127))+(((-1.0)*r12*x6132))+(((-1.0)*x6122*x6133)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6128*x6132))+(((-1.0)*x6123*x6132))+((r22*x6120)));
evalcond[4]=((((-1.0)*x6125*x6132))+(((-1.0)*x6124*x6132))+(((-1.0)*x6127*x6129))+((r02*x6120))+((sj0*x6131)));
evalcond[5]=((((-1.0)*x6130*x6131))+((r12*x6120))+(((-1.0)*x6126*x6132))+((cj0*x6129))+(((-1.0)*x6122*x6132)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6134=((1.0)*sj0);
CheckValue<IkReal> x6135=IKPowWithIntegerCheck(IKsign((((gconst112*r01))+(((-1.0)*gconst113*r00)))),-1);
if(!x6135.valid){
continue;
}
CheckValue<IkReal> x6136 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst113*r21*x6134))+(((-1.0)*gconst112*r20*x6134)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6136.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6135.value)))+(x6136.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6137=IKsin(j4);
IkReal x6138=IKcos(j4);
IkReal x6139=(gconst112*r10);
IkReal x6140=(gconst112*r20);
IkReal x6141=(gconst113*r01);
IkReal x6142=(gconst112*r00);
IkReal x6143=(gconst113*r11);
IkReal x6144=((1.0)*sj0);
IkReal x6145=(gconst113*r21);
IkReal x6146=(cj1*cj2);
IkReal x6147=((1.0)*cj0);
IkReal x6148=(sj1*sj2);
IkReal x6149=((1.0)*x6138);
IkReal x6150=((1.0)*x6137);
evalcond[0]=((((-1.0)*x6140*x6150))+(((-1.0)*r22*x6149))+(((-1.0)*x6145*x6150)));
evalcond[1]=((((-1.0)*x6147))+(((-1.0)*x6141*x6150))+(((-1.0)*r02*x6149))+(((-1.0)*x6142*x6150)));
evalcond[2]=((((-1.0)*x6144))+(((-1.0)*x6139*x6150))+(((-1.0)*r12*x6149))+(((-1.0)*x6143*x6150)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6145*x6149))+((r22*x6137))+((cj1*sj2))+(((-1.0)*x6140*x6149)));
evalcond[4]=((((-1.0)*x6144*x6146))+(((-1.0)*x6142*x6149))+((sj0*x6148))+((r02*x6137))+(((-1.0)*x6141*x6149)));
evalcond[5]=((((-1.0)*x6139*x6149))+(((-1.0)*x6143*x6149))+((cj0*x6146))+(((-1.0)*x6147*x6148))+((r12*x6137)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6151=((1.0)*gconst112);
CheckValue<IkReal> x6152=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x6151))+((gconst113*r10)))),-1);
if(!x6152.valid){
continue;
}
CheckValue<IkReal> x6153 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst113*r21))+(((-1.0)*cj0*r20*x6151)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6153.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6152.value)))+(x6153.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6154=IKsin(j4);
IkReal x6155=IKcos(j4);
IkReal x6156=(gconst112*r10);
IkReal x6157=(gconst112*r20);
IkReal x6158=(gconst113*r01);
IkReal x6159=(gconst112*r00);
IkReal x6160=(gconst113*r11);
IkReal x6161=((1.0)*sj0);
IkReal x6162=(gconst113*r21);
IkReal x6163=(cj1*cj2);
IkReal x6164=((1.0)*cj0);
IkReal x6165=(sj1*sj2);
IkReal x6166=((1.0)*x6155);
IkReal x6167=((1.0)*x6154);
evalcond[0]=((((-1.0)*x6157*x6167))+(((-1.0)*r22*x6166))+(((-1.0)*x6162*x6167)));
evalcond[1]=((((-1.0)*x6164))+(((-1.0)*r02*x6166))+(((-1.0)*x6159*x6167))+(((-1.0)*x6158*x6167)));
evalcond[2]=((((-1.0)*x6160*x6167))+(((-1.0)*x6156*x6167))+(((-1.0)*x6161))+(((-1.0)*r12*x6166)));
evalcond[3]=(((r22*x6154))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6157*x6166))+(((-1.0)*x6162*x6166)));
evalcond[4]=(((sj0*x6165))+((r02*x6154))+(((-1.0)*x6159*x6166))+(((-1.0)*x6158*x6166))+(((-1.0)*x6161*x6163)));
evalcond[5]=((((-1.0)*x6160*x6166))+((r12*x6154))+(((-1.0)*x6156*x6166))+((cj0*x6163))+(((-1.0)*x6164*x6165)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6169 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x6169)==0){
continue;
}
IkReal x6168=pow(x6169,-0.5);
CheckValue<IkReal> x6170 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x6170.valid){
continue;
}
IkReal gconst114=((-1.0)*(x6170.value));
IkReal gconst115=(r00*x6168);
IkReal gconst116=(r01*x6168);
CheckValue<IkReal> x6171 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x6171.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6171.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x6174 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x6174.valid){
continue;
}
IkReal x6172=((-1.0)*(x6174.value));
IkReal x6173=x6168;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x6172;
IkReal gconst114=x6172;
IkReal gconst115=(r00*x6173);
IkReal gconst116=(r01*x6173);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x6177 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x6177.valid){
continue;
}
IkReal x6175=((-1.0)*(x6177.value));
IkReal x6176=x6168;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x6175;
IkReal gconst114=x6175;
IkReal gconst115=(r00*x6176);
IkReal gconst116=(r01*x6176);
IkReal x6178=r02*r02;
IkReal x6179=(cj0*r12);
IkReal x6180=((1.0)*x6178);
CheckValue<IkReal> x6184=IKPowWithIntegerCheck(((-1.0)+x6178),-1);
if(!x6184.valid){
continue;
}
IkReal x6181=x6184.value;
if((((1.0)+(((-1.0)*x6180)))) < -0.00001)
continue;
IkReal x6182=IKsqrt(((1.0)+(((-1.0)*x6180))));
IkReal x6183=(x6181*x6182);
j4eval[0]=((IKabs((((r02*x6179*x6183))+(((-1.0)*sj0*x6180*x6183))+((sj0*x6183)))))+(IKabs((((r02*sj0))+(((-1.0)*x6179))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x6187 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x6187.valid){
continue;
}
IkReal x6185=((-1.0)*(x6187.value));
IkReal x6186=x6168;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x6185;
IkReal gconst114=x6185;
IkReal gconst115=(r00*x6186);
IkReal gconst116=(r01*x6186);
IkReal x6188=r02*r02;
IkReal x6189=((1.0)+(((-1.0)*x6188)));
IkReal x6190=(cj2*r22*sj1);
IkReal x6191=(cj1*r22*sj2);
CheckValue<IkReal> x6198=IKPowWithIntegerCheck(x6189,-1);
if(!x6198.valid){
continue;
}
IkReal x6192=x6198.value;
CheckValue<IkReal> x6199=IKPowWithIntegerCheck(((-1.0)+x6188),-1);
if(!x6199.valid){
continue;
}
IkReal x6193=x6199.value;
IkReal x6194=((1.0)*x6192);
if((x6189) < -0.00001)
continue;
IkReal x6195=IKsqrt(x6189);
IkReal x6196=((1.0)*r02*x6193*x6195);
IkReal x6197=((((-1.0)*x6194*(r00*r00)*(r20*r20)))+(((-2.0)*r00*r01*r20*r21*x6192))+(((-1.0)*(r22*r22)))+(((-1.0)*x6194*(r01*r01)*(r21*r21))));
j4eval[0]=x6197;
j4eval[1]=((IKabs(((((-1.0)*x6191*x6196))+(((-1.0)*x6190*x6196)))))+(IKabs((x6190+x6191))));
j4eval[2]=IKsign(x6197);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6200=(cj2*sj1);
IkReal x6201=(cj1*sj2);
IkReal x6202=((1.0)*gconst115*r20);
IkReal x6203=((1.0)*gconst116*r21);
CheckValue<IkReal> x6204=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst115*r20*x6202))+(((-1.0)*gconst116*r21*x6203))+(((-1.0)*(r22*r22)))+(((-2.0)*gconst115*gconst116*r20*r21)))),-1);
if(!x6204.valid){
continue;
}
CheckValue<IkReal> x6205 = IKatan2WithCheck(IkReal((((r22*x6200))+((r22*x6201)))),IkReal(((((-1.0)*x6201*x6203))+(((-1.0)*x6201*x6202))+(((-1.0)*x6200*x6202))+(((-1.0)*x6200*x6203)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6205.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6204.value)))+(x6205.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6206=IKsin(j4);
IkReal x6207=IKcos(j4);
IkReal x6208=(gconst116*r21);
IkReal x6209=(gconst116*r01);
IkReal x6210=((1.0)*sj0);
IkReal x6211=(gconst116*r11);
IkReal x6212=(cj1*cj2);
IkReal x6213=((1.0)*cj0);
IkReal x6214=(sj1*sj2);
IkReal x6215=((1.0)*x6207);
IkReal x6216=((1.0)*x6206);
IkReal x6217=(gconst115*x6216);
evalcond[0]=((((-1.0)*x6208*x6216))+(((-1.0)*r20*x6217))+(((-1.0)*r22*x6215)));
evalcond[1]=((((-1.0)*x6213))+(((-1.0)*x6209*x6216))+(((-1.0)*r00*x6217))+(((-1.0)*r02*x6215)));
evalcond[2]=((((-1.0)*r12*x6215))+(((-1.0)*x6210))+(((-1.0)*x6211*x6216))+(((-1.0)*r10*x6217)));
evalcond[3]=(((cj2*sj1))+((r22*x6206))+((cj1*sj2))+(((-1.0)*x6208*x6215))+(((-1.0)*gconst115*r20*x6215)));
evalcond[4]=(((sj0*x6214))+(((-1.0)*x6210*x6212))+(((-1.0)*x6209*x6215))+((r02*x6206))+(((-1.0)*gconst115*r00*x6215)));
evalcond[5]=((((-1.0)*x6213*x6214))+(((-1.0)*gconst115*r10*x6215))+(((-1.0)*x6211*x6215))+((cj0*x6212))+((r12*x6206)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6218=((1.0)*gconst115);
CheckValue<IkReal> x6219 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r12))+((r02*sj0)))),IkReal(((((-1.0)*gconst116*r01*sj0))+((cj0*gconst115*r10))+((cj0*gconst116*r11))+(((-1.0)*r00*sj0*x6218)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6219.valid){
continue;
}
CheckValue<IkReal> x6220=IKPowWithIntegerCheck(IKsign((((gconst116*r20))+(((-1.0)*r21*x6218)))),-1);
if(!x6220.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6219.value)+(((1.5707963267949)*(x6220.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6221=IKsin(j4);
IkReal x6222=IKcos(j4);
IkReal x6223=(gconst116*r21);
IkReal x6224=(gconst116*r01);
IkReal x6225=((1.0)*sj0);
IkReal x6226=(gconst116*r11);
IkReal x6227=(cj1*cj2);
IkReal x6228=((1.0)*cj0);
IkReal x6229=(sj1*sj2);
IkReal x6230=((1.0)*x6222);
IkReal x6231=((1.0)*x6221);
IkReal x6232=(gconst115*x6231);
evalcond[0]=((((-1.0)*r20*x6232))+(((-1.0)*r22*x6230))+(((-1.0)*x6223*x6231)));
evalcond[1]=((((-1.0)*x6224*x6231))+(((-1.0)*x6228))+(((-1.0)*r00*x6232))+(((-1.0)*r02*x6230)));
evalcond[2]=((((-1.0)*r12*x6230))+(((-1.0)*r10*x6232))+(((-1.0)*x6225))+(((-1.0)*x6226*x6231)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x6221))+(((-1.0)*gconst115*r20*x6230))+(((-1.0)*x6223*x6230)));
evalcond[4]=((((-1.0)*x6224*x6230))+((r02*x6221))+(((-1.0)*gconst115*r00*x6230))+(((-1.0)*x6225*x6227))+((sj0*x6229)));
evalcond[5]=((((-1.0)*x6226*x6230))+(((-1.0)*x6228*x6229))+((cj0*x6227))+(((-1.0)*gconst115*r10*x6230))+((r12*x6221)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6233=((1.0)*gconst115);
CheckValue<IkReal> x6234=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x6233))+((gconst116*r10)))),-1);
if(!x6234.valid){
continue;
}
CheckValue<IkReal> x6235 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x6233))+(((-1.0)*cj0*gconst116*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6235.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6234.value)))+(x6235.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6236=IKsin(j4);
IkReal x6237=IKcos(j4);
IkReal x6238=(gconst116*r21);
IkReal x6239=(gconst116*r01);
IkReal x6240=((1.0)*sj0);
IkReal x6241=(gconst116*r11);
IkReal x6242=(cj1*cj2);
IkReal x6243=((1.0)*cj0);
IkReal x6244=(sj1*sj2);
IkReal x6245=((1.0)*x6237);
IkReal x6246=((1.0)*x6236);
IkReal x6247=(gconst115*x6246);
evalcond[0]=((((-1.0)*x6238*x6246))+(((-1.0)*r20*x6247))+(((-1.0)*r22*x6245)));
evalcond[1]=((((-1.0)*r02*x6245))+(((-1.0)*x6239*x6246))+(((-1.0)*x6243))+(((-1.0)*r00*x6247)));
evalcond[2]=((((-1.0)*x6240))+(((-1.0)*r10*x6247))+(((-1.0)*r12*x6245))+(((-1.0)*x6241*x6246)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6238*x6245))+((cj1*sj2))+((r22*x6236))+(((-1.0)*gconst115*r20*x6245)));
evalcond[4]=(((r02*x6236))+(((-1.0)*x6239*x6245))+(((-1.0)*gconst115*r00*x6245))+(((-1.0)*x6240*x6242))+((sj0*x6244)));
evalcond[5]=((((-1.0)*gconst115*r10*x6245))+((r12*x6236))+((cj0*x6242))+(((-1.0)*x6241*x6245))+(((-1.0)*x6243*x6244)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6248=((-1.0)*r00);
IkReal x6250 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x6250)==0){
continue;
}
IkReal x6249=pow(x6250,-0.5);
CheckValue<IkReal> x6251 = IKatan2WithCheck(IkReal(x6248),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x6251.valid){
continue;
}
IkReal gconst117=((3.14159265358979)+(((-1.0)*(x6251.value))));
IkReal gconst118=(x6248*x6249);
IkReal gconst119=((-1.0)*r01*x6249);
CheckValue<IkReal> x6252 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x6252.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6252.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x6253=((-1.0)*r00);
CheckValue<IkReal> x6256 = IKatan2WithCheck(IkReal(x6253),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x6256.valid){
continue;
}
IkReal x6254=((1.0)*(x6256.value));
IkReal x6255=x6249;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x6254)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x6254)));
IkReal gconst118=(x6253*x6255);
IkReal gconst119=((-1.0)*r01*x6255);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
IkReal x6257=((-1.0)*r00);
CheckValue<IkReal> x6260 = IKatan2WithCheck(IkReal(x6257),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x6260.valid){
continue;
}
IkReal x6258=((1.0)*(x6260.value));
IkReal x6259=x6249;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x6258)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x6258)));
IkReal gconst118=(x6257*x6259);
IkReal gconst119=((-1.0)*r01*x6259);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=sj0;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6261=((1.0)*gconst118);
CheckValue<IkReal> x6262 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r12))+((r02*sj0)))),IkReal(((((-1.0)*gconst119*r01*sj0))+(((-1.0)*r00*sj0*x6261))+((cj0*gconst118*r10))+((cj0*gconst119*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6262.valid){
continue;
}
CheckValue<IkReal> x6263=IKPowWithIntegerCheck(IKsign((((gconst119*r20))+(((-1.0)*r21*x6261)))),-1);
if(!x6263.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6262.value)+(((1.5707963267949)*(x6263.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6264=IKsin(j4);
IkReal x6265=IKcos(j4);
IkReal x6266=(gconst118*r20);
IkReal x6267=(gconst118*r00);
IkReal x6268=(gconst119*r11);
IkReal x6269=(gconst119*r01);
IkReal x6270=(gconst118*r10);
IkReal x6271=((1.0)*sj0);
IkReal x6272=(gconst119*r21);
IkReal x6273=(cj1*cj2);
IkReal x6274=((1.0)*cj0);
IkReal x6275=(sj1*sj2);
IkReal x6276=((1.0)*x6265);
IkReal x6277=((1.0)*x6264);
evalcond[0]=((((-1.0)*x6272*x6277))+(((-1.0)*r22*x6276))+(((-1.0)*x6266*x6277)));
evalcond[1]=((((-1.0)*x6267*x6277))+(((-1.0)*r02*x6276))+(((-1.0)*x6269*x6277))+(((-1.0)*x6274)));
evalcond[2]=((((-1.0)*x6270*x6277))+(((-1.0)*x6268*x6277))+(((-1.0)*x6271))+(((-1.0)*r12*x6276)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6272*x6276))+((r22*x6264))+((cj1*sj2))+(((-1.0)*x6266*x6276)));
evalcond[4]=((((-1.0)*x6267*x6276))+((sj0*x6275))+(((-1.0)*x6269*x6276))+(((-1.0)*x6271*x6273))+((r02*x6264)));
evalcond[5]=((((-1.0)*x6274*x6275))+(((-1.0)*x6270*x6276))+(((-1.0)*x6268*x6276))+((r12*x6264))+((cj0*x6273)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6278=((1.0)*sj0);
CheckValue<IkReal> x6279 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst119*r21*x6278))+(((-1.0)*gconst118*r20*x6278)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6279.valid){
continue;
}
CheckValue<IkReal> x6280=IKPowWithIntegerCheck(IKsign((((gconst118*r01))+(((-1.0)*gconst119*r00)))),-1);
if(!x6280.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6279.value)+(((1.5707963267949)*(x6280.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6281=IKsin(j4);
IkReal x6282=IKcos(j4);
IkReal x6283=(gconst118*r20);
IkReal x6284=(gconst118*r00);
IkReal x6285=(gconst119*r11);
IkReal x6286=(gconst119*r01);
IkReal x6287=(gconst118*r10);
IkReal x6288=((1.0)*sj0);
IkReal x6289=(gconst119*r21);
IkReal x6290=(cj1*cj2);
IkReal x6291=((1.0)*cj0);
IkReal x6292=(sj1*sj2);
IkReal x6293=((1.0)*x6282);
IkReal x6294=((1.0)*x6281);
evalcond[0]=((((-1.0)*x6283*x6294))+(((-1.0)*r22*x6293))+(((-1.0)*x6289*x6294)));
evalcond[1]=((((-1.0)*x6284*x6294))+(((-1.0)*r02*x6293))+(((-1.0)*x6291))+(((-1.0)*x6286*x6294)));
evalcond[2]=((((-1.0)*r12*x6293))+(((-1.0)*x6288))+(((-1.0)*x6287*x6294))+(((-1.0)*x6285*x6294)));
evalcond[3]=(((cj2*sj1))+((r22*x6281))+(((-1.0)*x6283*x6293))+((cj1*sj2))+(((-1.0)*x6289*x6293)));
evalcond[4]=((((-1.0)*x6284*x6293))+(((-1.0)*x6288*x6290))+(((-1.0)*x6286*x6293))+((sj0*x6292))+((r02*x6281)));
evalcond[5]=(((cj0*x6290))+((r12*x6281))+(((-1.0)*x6291*x6292))+(((-1.0)*x6287*x6293))+(((-1.0)*x6285*x6293)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6295=((1.0)*gconst118);
CheckValue<IkReal> x6296 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst119*r21))+(((-1.0)*cj0*r20*x6295)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6296.valid){
continue;
}
CheckValue<IkReal> x6297=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x6295))+((gconst119*r10)))),-1);
if(!x6297.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6296.value)+(((1.5707963267949)*(x6297.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6298=IKsin(j4);
IkReal x6299=IKcos(j4);
IkReal x6300=(gconst118*r20);
IkReal x6301=(gconst118*r00);
IkReal x6302=(gconst119*r11);
IkReal x6303=(gconst119*r01);
IkReal x6304=(gconst118*r10);
IkReal x6305=((1.0)*sj0);
IkReal x6306=(gconst119*r21);
IkReal x6307=(cj1*cj2);
IkReal x6308=((1.0)*cj0);
IkReal x6309=(sj1*sj2);
IkReal x6310=((1.0)*x6299);
IkReal x6311=((1.0)*x6298);
evalcond[0]=((((-1.0)*r22*x6310))+(((-1.0)*x6306*x6311))+(((-1.0)*x6300*x6311)));
evalcond[1]=((((-1.0)*r02*x6310))+(((-1.0)*x6308))+(((-1.0)*x6303*x6311))+(((-1.0)*x6301*x6311)));
evalcond[2]=((((-1.0)*x6302*x6311))+(((-1.0)*r12*x6310))+(((-1.0)*x6305))+(((-1.0)*x6304*x6311)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6306*x6310))+((r22*x6298))+(((-1.0)*x6300*x6310))+((cj1*sj2)));
evalcond[4]=((((-1.0)*x6305*x6307))+((r02*x6298))+(((-1.0)*x6303*x6310))+(((-1.0)*x6301*x6310))+((sj0*x6309)));
evalcond[5]=((((-1.0)*x6302*x6310))+(((-1.0)*x6308*x6309))+((cj0*x6307))+(((-1.0)*x6304*x6310))+((r12*x6298)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6312=((1.0)*sj5);
IkReal x6313=(((cj5*r10))+(((-1.0)*r11*x6312)));
j4eval[0]=x6313;
j4eval[1]=IKsign(x6313);
j4eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*cj5*r21))+(((-1.0)*r20*x6312))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6314=((1.0)*cj5);
IkReal x6315=(((r21*sj5))+(((-1.0)*r20*x6314)));
j4eval[0]=x6315;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6314))))));
j4eval[2]=IKsign(x6315);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6316=cj5*cj5;
IkReal x6317=r00*r00;
IkReal x6318=(r00*sj5);
IkReal x6319=(cj5*r01);
IkReal x6320=(x6317+(((2.0)*x6318*x6319))+(((-1.0)*x6316*x6317))+(r02*r02)+((x6316*(r01*r01))));
j4eval[0]=x6320;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*x6318))+(((-1.0)*x6319))))));
j4eval[2]=IKsign(x6320);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6321=cj5*cj5;
IkReal x6322=r00*r00;
IkReal x6323=(r00*sj5);
IkReal x6324=(cj5*r01);
CheckValue<IkReal> x6325=IKPowWithIntegerCheck(IKsign((x6322+(((-1.0)*x6321*x6322))+((x6321*(r01*r01)))+(((2.0)*x6323*x6324))+(r02*r02))),-1);
if(!x6325.valid){
continue;
}
CheckValue<IkReal> x6326 = IKatan2WithCheck(IkReal(((((-1.0)*x6324))+(((-1.0)*x6323)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x6326.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6325.value)))+(x6326.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6327=IKcos(j4);
IkReal x6328=IKsin(j4);
IkReal x6329=(r00*sj5);
IkReal x6330=(cj5*r01);
IkReal x6331=(r20*sj5);
IkReal x6332=(cj5*r21);
IkReal x6333=(cj5*r11);
IkReal x6334=(r10*sj5);
IkReal x6335=((1.0)*x6327);
IkReal x6336=((1.0)*x6328);
evalcond[0]=(((r02*x6328))+(((-1.0)*x6330*x6335))+(((-1.0)*x6329*x6335)));
evalcond[1]=((((-1.0)*x6331*x6336))+(((-1.0)*r22*x6335))+(((-1.0)*x6332*x6336)));
evalcond[2]=((((-1.0)*r12*x6335))+(((-1.0)*x6333*x6336))+(((-1.0)*x6334*x6336)));
evalcond[3]=((-1.0)+(((-1.0)*x6330*x6336))+(((-1.0)*r02*x6335))+(((-1.0)*x6329*x6336)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6331*x6335))+((r22*x6328))+(((-1.0)*x6332*x6335)));
evalcond[5]=((((-1.0)*x6333*x6335))+((r12*x6328))+(((-1.0)*sj1*sj2))+(((-1.0)*x6334*x6335))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6337=((1.0)*cj5);
CheckValue<IkReal> x6338=IKPowWithIntegerCheck(IKsign((((r21*sj5))+(((-1.0)*r20*x6337)))),-1);
if(!x6338.valid){
continue;
}
CheckValue<IkReal> x6339 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r11*x6337))+(((-1.0)*r10*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6339.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6338.value)))+(x6339.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6340=IKcos(j4);
IkReal x6341=IKsin(j4);
IkReal x6342=(r00*sj5);
IkReal x6343=(cj5*r01);
IkReal x6344=(r20*sj5);
IkReal x6345=(cj5*r21);
IkReal x6346=(cj5*r11);
IkReal x6347=(r10*sj5);
IkReal x6348=((1.0)*x6340);
IkReal x6349=((1.0)*x6341);
evalcond[0]=((((-1.0)*x6343*x6348))+((r02*x6341))+(((-1.0)*x6342*x6348)));
evalcond[1]=((((-1.0)*r22*x6348))+(((-1.0)*x6345*x6349))+(((-1.0)*x6344*x6349)));
evalcond[2]=((((-1.0)*x6346*x6349))+(((-1.0)*x6347*x6349))+(((-1.0)*r12*x6348)));
evalcond[3]=((-1.0)+(((-1.0)*x6343*x6349))+(((-1.0)*x6342*x6349))+(((-1.0)*r02*x6348)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x6345*x6348))+((r22*x6341))+((cj1*sj2))+(((-1.0)*x6344*x6348)));
evalcond[5]=(((r12*x6341))+(((-1.0)*x6346*x6348))+(((-1.0)*sj1*sj2))+(((-1.0)*x6347*x6348))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6350=((1.0)*sj5);
CheckValue<IkReal> x6351 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x6350))+(((-1.0)*cj5*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6351.valid){
continue;
}
CheckValue<IkReal> x6352=IKPowWithIntegerCheck(IKsign((((cj5*r10))+(((-1.0)*r11*x6350)))),-1);
if(!x6352.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6351.value)+(((1.5707963267949)*(x6352.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6353=IKcos(j4);
IkReal x6354=IKsin(j4);
IkReal x6355=(r00*sj5);
IkReal x6356=(cj5*r01);
IkReal x6357=(r20*sj5);
IkReal x6358=(cj5*r21);
IkReal x6359=(cj5*r11);
IkReal x6360=(r10*sj5);
IkReal x6361=((1.0)*x6353);
IkReal x6362=((1.0)*x6354);
evalcond[0]=((((-1.0)*x6356*x6361))+((r02*x6354))+(((-1.0)*x6355*x6361)));
evalcond[1]=((((-1.0)*x6357*x6362))+(((-1.0)*r22*x6361))+(((-1.0)*x6358*x6362)));
evalcond[2]=((((-1.0)*x6360*x6362))+(((-1.0)*x6359*x6362))+(((-1.0)*r12*x6361)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x6361))+(((-1.0)*x6356*x6362))+(((-1.0)*x6355*x6362)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6357*x6361))+((r22*x6354))+(((-1.0)*x6358*x6361)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*x6360*x6361))+((r12*x6354))+(((-1.0)*x6359*x6361))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6363=((1.0)*cj5);
IkReal x6364=(((r11*sj5))+(((-1.0)*r10*x6363)));
j4eval[0]=x6364;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r21*x6363))+(((-1.0)*r20*sj5))))));
j4eval[2]=IKsign(x6364);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6365=((1.0)*sj5);
IkReal x6366=(((cj5*r20))+(((-1.0)*r21*x6365)));
j4eval[0]=x6366;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*cj5*r11))+(((-1.0)*r10*x6365))))));
j4eval[2]=IKsign(x6366);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6367=cj5*cj5;
IkReal x6368=r00*r00;
IkReal x6369=(cj5*r01);
IkReal x6370=(r00*sj5);
IkReal x6371=((((-1.0)*x6367*(r01*r01)))+(((-1.0)*(r02*r02)))+((x6367*x6368))+(((-1.0)*x6368))+(((-2.0)*x6369*x6370)));
j4eval[0]=x6371;
j4eval[1]=IKsign(x6371);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x6370))+(((-1.0)*x6369))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6372=cj5*cj5;
IkReal x6373=r00*r00;
IkReal x6374=(cj5*r01);
IkReal x6375=(r00*sj5);
CheckValue<IkReal> x6376=IKPowWithIntegerCheck(IKsign(((((-2.0)*x6374*x6375))+(((-1.0)*(r02*r02)))+((x6372*x6373))+(((-1.0)*x6373))+(((-1.0)*x6372*(r01*r01))))),-1);
if(!x6376.valid){
continue;
}
CheckValue<IkReal> x6377 = IKatan2WithCheck(IkReal(((((-1.0)*x6374))+(((-1.0)*x6375)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x6377.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6376.value)))+(x6377.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6378=IKcos(j4);
IkReal x6379=IKsin(j4);
IkReal x6380=(r00*sj5);
IkReal x6381=(cj5*r01);
IkReal x6382=(r20*sj5);
IkReal x6383=(cj5*r21);
IkReal x6384=(cj5*r11);
IkReal x6385=(r10*sj5);
IkReal x6386=((1.0)*x6378);
IkReal x6387=((1.0)*x6379);
evalcond[0]=((((-1.0)*x6380*x6386))+(((-1.0)*x6381*x6386))+((r02*x6379)));
evalcond[1]=((((-1.0)*x6383*x6387))+(((-1.0)*x6382*x6387))+(((-1.0)*r22*x6386)));
evalcond[2]=((((-1.0)*x6384*x6387))+(((-1.0)*r12*x6386))+(((-1.0)*x6385*x6387)));
evalcond[3]=((1.0)+(((-1.0)*x6380*x6387))+(((-1.0)*x6381*x6387))+(((-1.0)*r02*x6386)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x6383*x6386))+(((-1.0)*x6382*x6386))+((cj1*sj2))+((r22*x6379)));
evalcond[5]=((((-1.0)*x6384*x6386))+((r12*x6379))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x6385*x6386)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6388=((1.0)*sj5);
CheckValue<IkReal> x6389 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r11))+(((-1.0)*r10*x6388)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6389.valid){
continue;
}
CheckValue<IkReal> x6390=IKPowWithIntegerCheck(IKsign((((cj5*r20))+(((-1.0)*r21*x6388)))),-1);
if(!x6390.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6389.value)+(((1.5707963267949)*(x6390.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6391=IKcos(j4);
IkReal x6392=IKsin(j4);
IkReal x6393=(r00*sj5);
IkReal x6394=(cj5*r01);
IkReal x6395=(r20*sj5);
IkReal x6396=(cj5*r21);
IkReal x6397=(cj5*r11);
IkReal x6398=(r10*sj5);
IkReal x6399=((1.0)*x6391);
IkReal x6400=((1.0)*x6392);
evalcond[0]=((((-1.0)*x6394*x6399))+(((-1.0)*x6393*x6399))+((r02*x6392)));
evalcond[1]=((((-1.0)*x6396*x6400))+(((-1.0)*r22*x6399))+(((-1.0)*x6395*x6400)));
evalcond[2]=((((-1.0)*x6398*x6400))+(((-1.0)*x6397*x6400))+(((-1.0)*r12*x6399)));
evalcond[3]=((1.0)+(((-1.0)*x6393*x6400))+(((-1.0)*r02*x6399))+(((-1.0)*x6394*x6400)));
evalcond[4]=((((-1.0)*x6395*x6399))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6396*x6399))+((r22*x6392)));
evalcond[5]=(((r12*x6392))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x6398*x6399))+(((-1.0)*x6397*x6399)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6401=((1.0)*cj5);
CheckValue<IkReal> x6402 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x6401))+(((-1.0)*r20*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6402.valid){
continue;
}
CheckValue<IkReal> x6403=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x6401))+((r11*sj5)))),-1);
if(!x6403.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6402.value)+(((1.5707963267949)*(x6403.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6404=IKcos(j4);
IkReal x6405=IKsin(j4);
IkReal x6406=(r00*sj5);
IkReal x6407=(cj5*r01);
IkReal x6408=(r20*sj5);
IkReal x6409=(cj5*r21);
IkReal x6410=(cj5*r11);
IkReal x6411=(r10*sj5);
IkReal x6412=((1.0)*x6404);
IkReal x6413=((1.0)*x6405);
evalcond[0]=(((r02*x6405))+(((-1.0)*x6407*x6412))+(((-1.0)*x6406*x6412)));
evalcond[1]=((((-1.0)*x6408*x6413))+(((-1.0)*r22*x6412))+(((-1.0)*x6409*x6413)));
evalcond[2]=((((-1.0)*x6410*x6413))+(((-1.0)*x6411*x6413))+(((-1.0)*r12*x6412)));
evalcond[3]=((1.0)+(((-1.0)*x6407*x6413))+(((-1.0)*x6406*x6413))+(((-1.0)*r02*x6412)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6408*x6412))+((r22*x6405))+(((-1.0)*x6409*x6412)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x6405))+(((-1.0)*x6410*x6412))+(((-1.0)*x6411*x6412)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6416 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x6416)==0){
continue;
}
IkReal x6414=pow(x6416,-0.5);
IkReal x6415=((-1.0)*x6414);
CheckValue<IkReal> x6417 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x6417.valid){
continue;
}
IkReal gconst120=((-1.0)*(x6417.value));
IkReal gconst121=(r10*x6415);
IkReal gconst122=(r11*x6415);
CheckValue<IkReal> x6418 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x6418.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j5+(x6418.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x6422 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x6422.valid){
continue;
}
IkReal x6419=((-1.0)*(x6422.value));
IkReal x6420=x6414;
IkReal x6421=((-1.0)*x6420);
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst121;
cj5=gconst122;
j5=x6419;
IkReal gconst120=x6419;
IkReal gconst121=(r10*x6421);
IkReal gconst122=(r11*x6421);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x6426 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x6426.valid){
continue;
}
IkReal x6423=((-1.0)*(x6426.value));
IkReal x6424=x6414;
IkReal x6425=((-1.0)*x6424);
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst121;
cj5=gconst122;
j5=x6423;
IkReal gconst120=x6423;
IkReal gconst121=(r10*x6425);
IkReal gconst122=(r11*x6425);
IkReal x6427=r12*r12;
IkReal x6428=((1.0)*cj0);
IkReal x6429=(r02*sj0);
CheckValue<IkReal> x6433=IKPowWithIntegerCheck(((-1.0)+x6427),-1);
if(!x6433.valid){
continue;
}
IkReal x6430=x6433.value;
if((((1.0)+(((-1.0)*x6427)))) < -0.00001)
continue;
IkReal x6431=IKsqrt(((1.0)+(((-1.0)*x6427))));
IkReal x6432=(x6430*x6431);
j4eval[0]=((IKabs((x6429+(((-1.0)*r12*x6428)))))+(IKabs((((cj0*x6432))+((r12*x6429*x6432))+(((-1.0)*x6427*x6428*x6432))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x6437 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x6437.valid){
continue;
}
IkReal x6434=((-1.0)*(x6437.value));
IkReal x6435=x6414;
IkReal x6436=((-1.0)*x6435);
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst121;
cj5=gconst122;
j5=x6434;
IkReal gconst120=x6434;
IkReal gconst121=(r10*x6436);
IkReal gconst122=(r11*x6436);
IkReal x6438=(cj1*sj2);
IkReal x6439=(cj2*sj1);
IkReal x6440=((1.0)+(((-1.0)*(r12*r12))));
CheckValue<IkReal> x6446=IKPowWithIntegerCheck(x6440,-1);
if(!x6446.valid){
continue;
}
IkReal x6441=x6446.value;
IkReal x6442=((1.0)*x6441);
IkReal x6443=x6414;
IkReal x6444=(r12*r22*x6443);
IkReal x6445=((((-2.0)*r10*r11*r20*r21*x6441))+(((-1.0)*x6442*(r10*r10)*(r20*r20)))+(((-1.0)*(r22*r22)))+(((-1.0)*x6442*(r11*r11)*(r21*r21))));
j4eval[0]=x6445;
j4eval[1]=IKsign(x6445);
j4eval[2]=((IKabs((((x6438*x6444))+((x6439*x6444)))))+(IKabs((((r22*x6439))+((r22*x6438))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6447=(cj1*sj2);
IkReal x6448=(cj2*sj1);
IkReal x6449=(gconst122*r21);
IkReal x6450=((1.0)*gconst121*r20);
CheckValue<IkReal> x6451 = IKatan2WithCheck(IkReal((((r22*x6448))+((r22*x6447)))),IkReal(((((-1.0)*x6447*x6450))+(((-1.0)*x6448*x6449))+(((-1.0)*x6448*x6450))+(((-1.0)*x6447*x6449)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6451.valid){
continue;
}
CheckValue<IkReal> x6452=IKPowWithIntegerCheck(IKsign(((((-2.0)*gconst121*r20*x6449))+(((-1.0)*gconst121*r20*x6450))+(((-1.0)*(x6449*x6449)))+(((-1.0)*(r22*r22))))),-1);
if(!x6452.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6451.value)+(((1.5707963267949)*(x6452.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6453=IKsin(j4);
IkReal x6454=IKcos(j4);
IkReal x6455=(gconst122*r01);
IkReal x6456=(gconst121*r10);
IkReal x6457=(gconst122*r21);
IkReal x6458=(gconst121*r20);
IkReal x6459=(gconst122*r11);
IkReal x6460=(gconst121*r00);
IkReal x6461=((1.0)*sj0);
IkReal x6462=(cj1*cj2);
IkReal x6463=((1.0)*cj0);
IkReal x6464=(sj1*sj2);
IkReal x6465=((1.0)*x6454);
IkReal x6466=((1.0)*x6453);
evalcond[0]=((((-1.0)*x6458*x6466))+(((-1.0)*x6457*x6466))+(((-1.0)*r22*x6465)));
evalcond[1]=((((-1.0)*x6463))+(((-1.0)*x6455*x6466))+(((-1.0)*r02*x6465))+(((-1.0)*x6460*x6466)));
evalcond[2]=((((-1.0)*x6461))+(((-1.0)*r12*x6465))+(((-1.0)*x6456*x6466))+(((-1.0)*x6459*x6466)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6458*x6465))+(((-1.0)*x6457*x6465))+((cj1*sj2))+((r22*x6453)));
evalcond[4]=(((sj0*x6464))+(((-1.0)*x6455*x6465))+(((-1.0)*x6461*x6462))+((r02*x6453))+(((-1.0)*x6460*x6465)));
evalcond[5]=((((-1.0)*x6463*x6464))+((cj0*x6462))+(((-1.0)*x6456*x6465))+(((-1.0)*x6459*x6465))+((r12*x6453)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6467=((1.0)*gconst121);
CheckValue<IkReal> x6468 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r12))+((r02*sj0)))),IkReal(((((-1.0)*r00*sj0*x6467))+((cj0*gconst122*r11))+(((-1.0)*gconst122*r01*sj0))+((cj0*gconst121*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6468.valid){
continue;
}
CheckValue<IkReal> x6469=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6467))+((gconst122*r20)))),-1);
if(!x6469.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6468.value)+(((1.5707963267949)*(x6469.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6470=IKsin(j4);
IkReal x6471=IKcos(j4);
IkReal x6472=(gconst122*r01);
IkReal x6473=(gconst121*r10);
IkReal x6474=(gconst122*r21);
IkReal x6475=(gconst121*r20);
IkReal x6476=(gconst122*r11);
IkReal x6477=(gconst121*r00);
IkReal x6478=((1.0)*sj0);
IkReal x6479=(cj1*cj2);
IkReal x6480=((1.0)*cj0);
IkReal x6481=(sj1*sj2);
IkReal x6482=((1.0)*x6471);
IkReal x6483=((1.0)*x6470);
evalcond[0]=((((-1.0)*r22*x6482))+(((-1.0)*x6474*x6483))+(((-1.0)*x6475*x6483)));
evalcond[1]=((((-1.0)*x6480))+(((-1.0)*r02*x6482))+(((-1.0)*x6477*x6483))+(((-1.0)*x6472*x6483)));
evalcond[2]=((((-1.0)*x6473*x6483))+(((-1.0)*r12*x6482))+(((-1.0)*x6476*x6483))+(((-1.0)*x6478)));
evalcond[3]=(((r22*x6470))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6474*x6482))+(((-1.0)*x6475*x6482)));
evalcond[4]=((((-1.0)*x6478*x6479))+((r02*x6470))+(((-1.0)*x6477*x6482))+(((-1.0)*x6472*x6482))+((sj0*x6481)));
evalcond[5]=((((-1.0)*x6473*x6482))+(((-1.0)*x6480*x6481))+((r12*x6470))+(((-1.0)*x6476*x6482))+((cj0*x6479)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6484=((1.0)*sj0);
CheckValue<IkReal> x6485=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst122*r00))+((gconst121*r01)))),-1);
if(!x6485.valid){
continue;
}
CheckValue<IkReal> x6486 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst122*r21*x6484))+(((-1.0)*gconst121*r20*x6484)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6486.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6485.value)))+(x6486.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6487=IKsin(j4);
IkReal x6488=IKcos(j4);
IkReal x6489=(gconst122*r01);
IkReal x6490=(gconst121*r10);
IkReal x6491=(gconst122*r21);
IkReal x6492=(gconst121*r20);
IkReal x6493=(gconst122*r11);
IkReal x6494=(gconst121*r00);
IkReal x6495=((1.0)*sj0);
IkReal x6496=(cj1*cj2);
IkReal x6497=((1.0)*cj0);
IkReal x6498=(sj1*sj2);
IkReal x6499=((1.0)*x6488);
IkReal x6500=((1.0)*x6487);
evalcond[0]=((((-1.0)*r22*x6499))+(((-1.0)*x6492*x6500))+(((-1.0)*x6491*x6500)));
evalcond[1]=((((-1.0)*x6497))+(((-1.0)*r02*x6499))+(((-1.0)*x6489*x6500))+(((-1.0)*x6494*x6500)));
evalcond[2]=((((-1.0)*x6495))+(((-1.0)*r12*x6499))+(((-1.0)*x6490*x6500))+(((-1.0)*x6493*x6500)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6492*x6499))+(((-1.0)*x6491*x6499))+((r22*x6487)));
evalcond[4]=((((-1.0)*x6495*x6496))+(((-1.0)*x6489*x6499))+((r02*x6487))+(((-1.0)*x6494*x6499))+((sj0*x6498)));
evalcond[5]=(((cj0*x6496))+((r12*x6487))+(((-1.0)*x6490*x6499))+(((-1.0)*x6493*x6499))+(((-1.0)*x6497*x6498)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6503 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x6503)==0){
continue;
}
IkReal x6501=pow(x6503,-0.5);
IkReal x6502=((1.0)*x6501);
CheckValue<IkReal> x6504 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x6504.valid){
continue;
}
IkReal gconst123=((3.14159265358979)+(((-1.0)*(x6504.value))));
IkReal gconst124=(r10*x6502);
IkReal gconst125=(r11*x6502);
CheckValue<IkReal> x6505 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x6505.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5+(x6505.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
CheckValue<IkReal> x6509 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x6509.valid){
continue;
}
IkReal x6506=((1.0)*(x6509.value));
IkReal x6507=x6501;
IkReal x6508=((1.0)*x6507);
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x6506)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x6506)));
IkReal gconst124=(r10*x6508);
IkReal gconst125=(r11*x6508);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x6513 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x6513.valid){
continue;
}
IkReal x6510=((1.0)*(x6513.value));
IkReal x6511=x6501;
IkReal x6512=((1.0)*x6511);
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x6510)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x6510)));
IkReal gconst124=(r10*x6512);
IkReal gconst125=(r11*x6512);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6514=((1.0)*sj0);
CheckValue<IkReal> x6515=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r21))+((gconst125*r20)))),-1);
if(!x6515.valid){
continue;
}
CheckValue<IkReal> x6516 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r12))+((r02*sj0)))),IkReal(((((-1.0)*gconst124*r00*x6514))+(((-1.0)*gconst125*r01*x6514))+((cj0*gconst124*r10))+((cj0*gconst125*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6516.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6515.value)))+(x6516.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6517=IKsin(j4);
IkReal x6518=IKcos(j4);
IkReal x6519=(gconst125*r01);
IkReal x6520=(gconst124*r10);
IkReal x6521=((1.0)*sj0);
IkReal x6522=(gconst125*r11);
IkReal x6523=(cj1*cj2);
IkReal x6524=(gconst125*r21);
IkReal x6525=((1.0)*cj0);
IkReal x6526=(sj1*sj2);
IkReal x6527=((1.0)*x6518);
IkReal x6528=((1.0)*x6517);
IkReal x6529=(gconst124*x6528);
evalcond[0]=((((-1.0)*r22*x6527))+(((-1.0)*r20*x6529))+(((-1.0)*x6524*x6528)));
evalcond[1]=((((-1.0)*x6519*x6528))+(((-1.0)*x6525))+(((-1.0)*r02*x6527))+(((-1.0)*r00*x6529)));
evalcond[2]=((((-1.0)*x6522*x6528))+(((-1.0)*x6521))+(((-1.0)*r12*x6527))+(((-1.0)*x6520*x6528)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6524*x6527))+(((-1.0)*gconst124*r20*x6527))+((r22*x6517)));
evalcond[4]=((((-1.0)*x6519*x6527))+(((-1.0)*x6521*x6523))+((sj0*x6526))+((r02*x6517))+(((-1.0)*gconst124*r00*x6527)));
evalcond[5]=((((-1.0)*x6522*x6527))+((r12*x6517))+(((-1.0)*x6520*x6527))+(((-1.0)*x6525*x6526))+((cj0*x6523)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6530=((1.0)*sj0);
CheckValue<IkReal> x6531=IKPowWithIntegerCheck(IKsign((((gconst124*r01))+(((-1.0)*gconst125*r00)))),-1);
if(!x6531.valid){
continue;
}
CheckValue<IkReal> x6532 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst124*r20*x6530))+(((-1.0)*gconst125*r21*x6530)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6532.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6531.value)))+(x6532.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6533=IKsin(j4);
IkReal x6534=IKcos(j4);
IkReal x6535=(gconst125*r01);
IkReal x6536=(gconst124*r10);
IkReal x6537=((1.0)*sj0);
IkReal x6538=(gconst125*r11);
IkReal x6539=(cj1*cj2);
IkReal x6540=(gconst125*r21);
IkReal x6541=((1.0)*cj0);
IkReal x6542=(sj1*sj2);
IkReal x6543=((1.0)*x6534);
IkReal x6544=((1.0)*x6533);
IkReal x6545=(gconst124*x6544);
evalcond[0]=((((-1.0)*x6540*x6544))+(((-1.0)*r22*x6543))+(((-1.0)*r20*x6545)));
evalcond[1]=((((-1.0)*r00*x6545))+(((-1.0)*x6541))+(((-1.0)*r02*x6543))+(((-1.0)*x6535*x6544)));
evalcond[2]=((((-1.0)*x6537))+(((-1.0)*r12*x6543))+(((-1.0)*x6536*x6544))+(((-1.0)*x6538*x6544)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6540*x6543))+((cj1*sj2))+((r22*x6533))+(((-1.0)*gconst124*r20*x6543)));
evalcond[4]=(((r02*x6533))+(((-1.0)*x6537*x6539))+(((-1.0)*gconst124*r00*x6543))+((sj0*x6542))+(((-1.0)*x6535*x6543)));
evalcond[5]=((((-1.0)*x6541*x6542))+(((-1.0)*x6536*x6543))+(((-1.0)*x6538*x6543))+((cj0*x6539))+((r12*x6533)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6546=((1.0)*cj0);
CheckValue<IkReal> x6547 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*gconst125*r21*x6546))+(((-1.0)*gconst124*r20*x6546)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6547.valid){
continue;
}
CheckValue<IkReal> x6548=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r11))+((gconst125*r10)))),-1);
if(!x6548.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6547.value)+(((1.5707963267949)*(x6548.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6549=IKsin(j4);
IkReal x6550=IKcos(j4);
IkReal x6551=(gconst125*r01);
IkReal x6552=(gconst124*r10);
IkReal x6553=((1.0)*sj0);
IkReal x6554=(gconst125*r11);
IkReal x6555=(cj1*cj2);
IkReal x6556=(gconst125*r21);
IkReal x6557=((1.0)*cj0);
IkReal x6558=(sj1*sj2);
IkReal x6559=((1.0)*x6550);
IkReal x6560=((1.0)*x6549);
IkReal x6561=(gconst124*x6560);
evalcond[0]=((((-1.0)*r22*x6559))+(((-1.0)*x6556*x6560))+(((-1.0)*r20*x6561)));
evalcond[1]=((((-1.0)*x6551*x6560))+(((-1.0)*x6557))+(((-1.0)*r02*x6559))+(((-1.0)*r00*x6561)));
evalcond[2]=((((-1.0)*x6553))+(((-1.0)*r12*x6559))+(((-1.0)*x6554*x6560))+(((-1.0)*x6552*x6560)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x6549))+(((-1.0)*x6556*x6559))+(((-1.0)*gconst124*r20*x6559)));
evalcond[4]=((((-1.0)*x6553*x6555))+(((-1.0)*x6551*x6559))+((r02*x6549))+(((-1.0)*gconst124*r00*x6559))+((sj0*x6558)));
evalcond[5]=((((-1.0)*x6552*x6559))+(((-1.0)*x6554*x6559))+((r12*x6549))+(((-1.0)*x6557*x6558))+((cj0*x6555)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6562=((1.0)*cj5);
IkReal x6563=(((r01*sj5))+(((-1.0)*r00*x6562)));
j4eval[0]=x6563;
j4eval[1]=IKsign(x6563);
j4eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*r21*x6562))+(((-1.0)*r20*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6564=((1.0)*sj5);
IkReal x6565=(((cj5*r20))+(((-1.0)*r21*x6564)));
j4eval[0]=x6565;
j4eval[1]=IKsign(x6565);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*r00*x6564))+(((-1.0)*cj5*r01))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6566=cj5*cj5;
IkReal x6567=r10*r10;
IkReal x6568=(cj5*r11);
IkReal x6569=(r10*sj5);
IkReal x6570=((r12*r12)+(((-1.0)*x6566*x6567))+x6567+((x6566*(r11*r11)))+(((2.0)*x6568*x6569)));
j4eval[0]=x6570;
j4eval[1]=IKsign(x6570);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x6568))+(((-1.0)*x6569))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6571=cj5*cj5;
IkReal x6572=r10*r10;
IkReal x6573=(cj5*r11);
IkReal x6574=(r10*sj5);
CheckValue<IkReal> x6575 = IKatan2WithCheck(IkReal(((((-1.0)*x6574))+(((-1.0)*x6573)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x6575.valid){
continue;
}
CheckValue<IkReal> x6576=IKPowWithIntegerCheck(IKsign(((r12*r12)+x6572+(((2.0)*x6573*x6574))+(((-1.0)*x6571*x6572))+((x6571*(r11*r11))))),-1);
if(!x6576.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6575.value)+(((1.5707963267949)*(x6576.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6577=IKcos(j4);
IkReal x6578=IKsin(j4);
IkReal x6579=(r00*sj5);
IkReal x6580=(cj5*r01);
IkReal x6581=(r20*sj5);
IkReal x6582=(cj5*r21);
IkReal x6583=(cj5*r11);
IkReal x6584=(r10*sj5);
IkReal x6585=((1.0)*x6577);
IkReal x6586=((1.0)*x6578);
evalcond[0]=((((-1.0)*x6584*x6585))+((r12*x6578))+(((-1.0)*x6583*x6585)));
evalcond[1]=((((-1.0)*x6581*x6586))+(((-1.0)*x6582*x6586))+(((-1.0)*r22*x6585)));
evalcond[2]=((((-1.0)*r02*x6585))+(((-1.0)*x6579*x6586))+(((-1.0)*x6580*x6586)));
evalcond[3]=((-1.0)+(((-1.0)*x6584*x6586))+(((-1.0)*r12*x6585))+(((-1.0)*x6583*x6586)));
evalcond[4]=(((r22*x6578))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6581*x6585))+(((-1.0)*x6582*x6585)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x6579*x6585))+((r02*x6578))+(((-1.0)*x6580*x6585)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6587=((1.0)*sj5);
CheckValue<IkReal> x6588=IKPowWithIntegerCheck(IKsign((((cj5*r20))+(((-1.0)*r21*x6587)))),-1);
if(!x6588.valid){
continue;
}
CheckValue<IkReal> x6589 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x6587))+(((-1.0)*cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6589.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6588.value)))+(x6589.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6590=IKcos(j4);
IkReal x6591=IKsin(j4);
IkReal x6592=(r00*sj5);
IkReal x6593=(cj5*r01);
IkReal x6594=(r20*sj5);
IkReal x6595=(cj5*r21);
IkReal x6596=(cj5*r11);
IkReal x6597=(r10*sj5);
IkReal x6598=((1.0)*x6590);
IkReal x6599=((1.0)*x6591);
evalcond[0]=(((r12*x6591))+(((-1.0)*x6596*x6598))+(((-1.0)*x6597*x6598)));
evalcond[1]=((((-1.0)*x6594*x6599))+(((-1.0)*r22*x6598))+(((-1.0)*x6595*x6599)));
evalcond[2]=((((-1.0)*r02*x6598))+(((-1.0)*x6592*x6599))+(((-1.0)*x6593*x6599)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x6598))+(((-1.0)*x6596*x6599))+(((-1.0)*x6597*x6599)));
evalcond[4]=(((cj2*sj1))+((r22*x6591))+((cj1*sj2))+(((-1.0)*x6594*x6598))+(((-1.0)*x6595*x6598)));
evalcond[5]=(((r02*x6591))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x6592*x6598))+(((-1.0)*x6593*x6598)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6600=((1.0)*cj5);
CheckValue<IkReal> x6601=IKPowWithIntegerCheck(IKsign((((r01*sj5))+(((-1.0)*r00*x6600)))),-1);
if(!x6601.valid){
continue;
}
CheckValue<IkReal> x6602 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x6600))+(((-1.0)*r20*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6602.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6601.value)))+(x6602.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6603=IKcos(j4);
IkReal x6604=IKsin(j4);
IkReal x6605=(r00*sj5);
IkReal x6606=(cj5*r01);
IkReal x6607=(r20*sj5);
IkReal x6608=(cj5*r21);
IkReal x6609=(cj5*r11);
IkReal x6610=(r10*sj5);
IkReal x6611=((1.0)*x6603);
IkReal x6612=((1.0)*x6604);
evalcond[0]=((((-1.0)*x6610*x6611))+(((-1.0)*x6609*x6611))+((r12*x6604)));
evalcond[1]=((((-1.0)*x6607*x6612))+(((-1.0)*x6608*x6612))+(((-1.0)*r22*x6611)));
evalcond[2]=((((-1.0)*x6605*x6612))+(((-1.0)*x6606*x6612))+(((-1.0)*r02*x6611)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x6611))+(((-1.0)*x6610*x6612))+(((-1.0)*x6609*x6612)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x6607*x6611))+((r22*x6604))+(((-1.0)*x6608*x6611))+((cj1*sj2)));
evalcond[5]=((((-1.0)*x6605*x6611))+(((-1.0)*x6606*x6611))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x6604)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6613=((1.0)*sj5);
IkReal x6614=((((-1.0)*r01*x6613))+((cj5*r00)));
j4eval[0]=x6614;
j4eval[1]=IKsign(x6614);
j4eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*cj5*r21))+(((-1.0)*r20*x6613))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6615=((1.0)*cj5);
IkReal x6616=(((r21*sj5))+(((-1.0)*r20*x6615)));
j4eval[0]=x6616;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r00*sj5))+(((-1.0)*r01*x6615))))));
j4eval[2]=IKsign(x6616);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6617=cj5*cj5;
IkReal x6618=r10*r10;
IkReal x6619=(cj5*r11);
IkReal x6620=(r10*sj5);
IkReal x6621=((((-1.0)*x6617*(r11*r11)))+(((-1.0)*x6618))+(((-1.0)*(r12*r12)))+((x6617*x6618))+(((-2.0)*x6619*x6620)));
j4eval[0]=x6621;
j4eval[1]=IKsign(x6621);
j4eval[2]=((IKabs(((((-1.0)*x6619))+(((-1.0)*x6620)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6622=cj5*cj5;
IkReal x6623=r10*r10;
IkReal x6624=(cj5*r11);
IkReal x6625=(r10*sj5);
CheckValue<IkReal> x6626 = IKatan2WithCheck(IkReal(((((-1.0)*x6625))+(((-1.0)*x6624)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x6626.valid){
continue;
}
CheckValue<IkReal> x6627=IKPowWithIntegerCheck(IKsign(((((-2.0)*x6624*x6625))+(((-1.0)*x6623))+(((-1.0)*x6622*(r11*r11)))+(((-1.0)*(r12*r12)))+((x6622*x6623)))),-1);
if(!x6627.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6626.value)+(((1.5707963267949)*(x6627.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6628=IKcos(j4);
IkReal x6629=IKsin(j4);
IkReal x6630=(r00*sj5);
IkReal x6631=(cj5*r01);
IkReal x6632=(r20*sj5);
IkReal x6633=(cj5*r21);
IkReal x6634=(cj5*r11);
IkReal x6635=(r10*sj5);
IkReal x6636=((1.0)*x6628);
IkReal x6637=((1.0)*x6629);
evalcond[0]=(((r12*x6629))+(((-1.0)*x6634*x6636))+(((-1.0)*x6635*x6636)));
evalcond[1]=((((-1.0)*r22*x6636))+(((-1.0)*x6632*x6637))+(((-1.0)*x6633*x6637)));
evalcond[2]=((((-1.0)*x6630*x6637))+(((-1.0)*r02*x6636))+(((-1.0)*x6631*x6637)));
evalcond[3]=((1.0)+(((-1.0)*x6634*x6637))+(((-1.0)*x6635*x6637))+(((-1.0)*r12*x6636)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x6629))+(((-1.0)*x6632*x6636))+(((-1.0)*x6633*x6636)));
evalcond[5]=(((r02*x6629))+(((-1.0)*sj1*sj2))+(((-1.0)*x6630*x6636))+((cj1*cj2))+(((-1.0)*x6631*x6636)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6638=((1.0)*cj5);
CheckValue<IkReal> x6639=IKPowWithIntegerCheck(IKsign((((r21*sj5))+(((-1.0)*r20*x6638)))),-1);
if(!x6639.valid){
continue;
}
CheckValue<IkReal> x6640 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*sj5))+(((-1.0)*r01*x6638)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6640.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6639.value)))+(x6640.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6641=IKcos(j4);
IkReal x6642=IKsin(j4);
IkReal x6643=(r00*sj5);
IkReal x6644=(cj5*r01);
IkReal x6645=(r20*sj5);
IkReal x6646=(cj5*r21);
IkReal x6647=(cj5*r11);
IkReal x6648=(r10*sj5);
IkReal x6649=((1.0)*x6641);
IkReal x6650=((1.0)*x6642);
evalcond[0]=((((-1.0)*x6647*x6649))+((r12*x6642))+(((-1.0)*x6648*x6649)));
evalcond[1]=((((-1.0)*r22*x6649))+(((-1.0)*x6645*x6650))+(((-1.0)*x6646*x6650)));
evalcond[2]=((((-1.0)*x6643*x6650))+(((-1.0)*x6644*x6650))+(((-1.0)*r02*x6649)));
evalcond[3]=((1.0)+(((-1.0)*x6648*x6650))+(((-1.0)*x6647*x6650))+(((-1.0)*r12*x6649)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6646*x6649))+((r22*x6642))+(((-1.0)*x6645*x6649)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*x6643*x6649))+(((-1.0)*x6644*x6649))+((cj1*cj2))+((r02*x6642)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6651=((1.0)*sj5);
CheckValue<IkReal> x6652=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6651))+((cj5*r00)))),-1);
if(!x6652.valid){
continue;
}
CheckValue<IkReal> x6653 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x6651))+(((-1.0)*cj5*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6653.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6652.value)))+(x6653.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6654=IKcos(j4);
IkReal x6655=IKsin(j4);
IkReal x6656=(r00*sj5);
IkReal x6657=(cj5*r01);
IkReal x6658=(r20*sj5);
IkReal x6659=(cj5*r21);
IkReal x6660=(cj5*r11);
IkReal x6661=(r10*sj5);
IkReal x6662=((1.0)*x6654);
IkReal x6663=((1.0)*x6655);
evalcond[0]=(((r12*x6655))+(((-1.0)*x6661*x6662))+(((-1.0)*x6660*x6662)));
evalcond[1]=((((-1.0)*x6658*x6663))+(((-1.0)*x6659*x6663))+(((-1.0)*r22*x6662)));
evalcond[2]=((((-1.0)*x6657*x6663))+(((-1.0)*r02*x6662))+(((-1.0)*x6656*x6663)));
evalcond[3]=((1.0)+(((-1.0)*x6661*x6663))+(((-1.0)*x6660*x6663))+(((-1.0)*r12*x6662)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x6658*x6662))+((cj1*sj2))+(((-1.0)*x6659*x6662))+((r22*x6655)));
evalcond[5]=((((-1.0)*x6657*x6662))+(((-1.0)*sj1*sj2))+((r02*x6655))+((cj1*cj2))+(((-1.0)*x6656*x6662)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6664=((-1.0)*py);
sj3=0;
cj3=1.0;
j3=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x6664);
rxp0_2=(py*r00);
rxp1_0=(r21*x6664);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6665=((-1.0)*py);
sj3=0;
cj3=1.0;
j3=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x6665);
rxp0_2=(py*r00);
rxp1_0=(r21*x6665);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6666=((-1.0)*py);
sj3=0;
cj3=1.0;
j3=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x6666);
rxp0_2=(py*r00);
rxp1_0=(r21*x6666);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6669=IKPowWithIntegerCheck(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01))),-1);
if(!x6669.valid){
continue;
}
IkReal x6667=x6669.value;
IkReal x6668=(sj0*x6667);
cj4array[0]=(((cj1*cj2*x6668))+(((-1.0)*sj1*sj2*x6668)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6670=IKsin(j4);
IkReal x6671=IKcos(j4);
IkReal x6672=(r20*sj5);
IkReal x6673=((1.0)*cj5*r21);
IkReal x6674=((1.0)*x6671);
IkReal x6675=((1.0)*x6670);
evalcond[0]=(r12*x6670);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r12*x6674)));
evalcond[2]=((((-1.0)*x6672*x6675))+(((-1.0)*x6670*x6673)));
evalcond[3]=((((-1.0)*cj5*r01*x6675))+(((-1.0)*r00*sj5*x6675)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x6672*x6674))+(((-1.0)*x6671*x6673))+((cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6678=IKPowWithIntegerCheck(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5))),-1);
if(!x6678.valid){
continue;
}
IkReal x6676=x6678.value;
IkReal x6677=((1.0)*x6676);
cj4array[0]=((((-1.0)*cj2*sj1*x6677))+(((-1.0)*cj1*sj2*x6677)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6679=IKsin(j4);
IkReal x6680=IKcos(j4);
IkReal x6681=((1.0)*cj5);
IkReal x6682=((1.0)*sj0);
IkReal x6683=(r00*sj5);
IkReal x6684=((1.0)*x6680);
IkReal x6685=((1.0)*x6679);
evalcond[0]=(r12*x6679);
evalcond[1]=((((-1.0)*x6682))+(((-1.0)*r12*x6684)));
evalcond[2]=((((-1.0)*r20*sj5*x6685))+(((-1.0)*r21*x6679*x6681)));
evalcond[3]=((((-1.0)*x6683*x6685))+(((-1.0)*r01*x6679*x6681)));
evalcond[4]=((((-1.0)*x6683*x6684))+(((-1.0)*cj1*cj2*x6682))+(((-1.0)*r01*x6680*x6681))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6686=IKPowWithIntegerCheck(r12,-1);
if(!x6686.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x6686.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6687=IKsin(j4);
IkReal x6688=IKcos(j4);
IkReal x6689=((1.0)*cj5);
IkReal x6690=((1.0)*r00*sj5);
IkReal x6691=((1.0)*r20*sj5);
evalcond[0]=(r12*x6687);
evalcond[1]=((((-1.0)*x6687*x6691))+(((-1.0)*r21*x6687*x6689)));
evalcond[2]=((((-1.0)*x6687*x6690))+(((-1.0)*r01*x6687*x6689)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6688*x6691))+(((-1.0)*r21*x6688*x6689)));
evalcond[4]=((((-1.0)*x6688*x6690))+(((-1.0)*cj1*cj2*sj0))+(((-1.0)*r01*x6688*x6689))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6692=((1.0)*sj0);
CheckValue<IkReal> x6693 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r12))+((r02*sj0)))),IkReal(((((-1.0)*r00*sj5*x6692))+((cj0*cj5*r11))+(((-1.0)*cj5*r01*x6692))+((cj0*r10*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6693.valid){
continue;
}
CheckValue<IkReal> x6694=IKPowWithIntegerCheck(IKsign((((cj5*r20))+(((-1.0)*r21*sj5)))),-1);
if(!x6694.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6693.value)+(((1.5707963267949)*(x6694.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6695=IKsin(j4);
IkReal x6696=IKcos(j4);
IkReal x6697=(r00*sj5);
IkReal x6698=(cj5*r01);
IkReal x6699=(r20*sj5);
IkReal x6700=(cj5*r21);
IkReal x6701=(cj5*r11);
IkReal x6702=((1.0)*sj0);
IkReal x6703=(r10*sj5);
IkReal x6704=(cj1*cj2);
IkReal x6705=((1.0)*cj0);
IkReal x6706=(sj1*sj2);
IkReal x6707=((1.0)*x6696);
IkReal x6708=((1.0)*x6695);
evalcond[0]=((((-1.0)*r22*x6707))+(((-1.0)*x6699*x6708))+(((-1.0)*x6700*x6708)));
evalcond[1]=((((-1.0)*r02*x6707))+(((-1.0)*x6697*x6708))+(((-1.0)*x6698*x6708))+(((-1.0)*x6705)));
evalcond[2]=((((-1.0)*x6702))+(((-1.0)*x6703*x6708))+(((-1.0)*x6701*x6708))+(((-1.0)*r12*x6707)));
evalcond[3]=(((cj2*sj1))+((r22*x6695))+((cj1*sj2))+(((-1.0)*x6699*x6707))+(((-1.0)*x6700*x6707)));
evalcond[4]=((((-1.0)*x6697*x6707))+(((-1.0)*x6698*x6707))+(((-1.0)*x6702*x6704))+((sj0*x6706))+((r02*x6695)));
evalcond[5]=((((-1.0)*x6705*x6706))+((r12*x6695))+(((-1.0)*x6703*x6707))+(((-1.0)*x6701*x6707))+((cj0*x6704)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6709=((1.0)*sj0);
CheckValue<IkReal> x6710=IKPowWithIntegerCheck(IKsign((((r01*sj5))+(((-1.0)*cj5*r00)))),-1);
if(!x6710.valid){
continue;
}
CheckValue<IkReal> x6711 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r21*x6709))+(((-1.0)*r20*sj5*x6709)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6711.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6710.value)))+(x6711.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6712=IKsin(j4);
IkReal x6713=IKcos(j4);
IkReal x6714=(r00*sj5);
IkReal x6715=(cj5*r01);
IkReal x6716=(r20*sj5);
IkReal x6717=(cj5*r21);
IkReal x6718=(cj5*r11);
IkReal x6719=((1.0)*sj0);
IkReal x6720=(r10*sj5);
IkReal x6721=(cj1*cj2);
IkReal x6722=((1.0)*cj0);
IkReal x6723=(sj1*sj2);
IkReal x6724=((1.0)*x6713);
IkReal x6725=((1.0)*x6712);
evalcond[0]=((((-1.0)*r22*x6724))+(((-1.0)*x6717*x6725))+(((-1.0)*x6716*x6725)));
evalcond[1]=((((-1.0)*x6722))+(((-1.0)*x6714*x6725))+(((-1.0)*x6715*x6725))+(((-1.0)*r02*x6724)));
evalcond[2]=((((-1.0)*x6718*x6725))+(((-1.0)*x6719))+(((-1.0)*r12*x6724))+(((-1.0)*x6720*x6725)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x6712))+(((-1.0)*x6717*x6724))+(((-1.0)*x6716*x6724)));
evalcond[4]=((((-1.0)*x6719*x6721))+((r02*x6712))+(((-1.0)*x6714*x6724))+(((-1.0)*x6715*x6724))+((sj0*x6723)));
evalcond[5]=((((-1.0)*x6718*x6724))+((cj0*x6721))+(((-1.0)*x6722*x6723))+(((-1.0)*x6720*x6724))+((r12*x6712)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6726=((1.0)*cj0);
CheckValue<IkReal> x6727=IKPowWithIntegerCheck(IKsign((((cj5*r10))+(((-1.0)*r11*sj5)))),-1);
if(!x6727.valid){
continue;
}
CheckValue<IkReal> x6728 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*r20*sj5*x6726))+(((-1.0)*cj5*r21*x6726)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6728.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6727.value)))+(x6728.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6729=IKsin(j4);
IkReal x6730=IKcos(j4);
IkReal x6731=(r00*sj5);
IkReal x6732=(cj5*r01);
IkReal x6733=(r20*sj5);
IkReal x6734=(cj5*r21);
IkReal x6735=(cj5*r11);
IkReal x6736=((1.0)*sj0);
IkReal x6737=(r10*sj5);
IkReal x6738=(cj1*cj2);
IkReal x6739=((1.0)*cj0);
IkReal x6740=(sj1*sj2);
IkReal x6741=((1.0)*x6730);
IkReal x6742=((1.0)*x6729);
evalcond[0]=((((-1.0)*r22*x6741))+(((-1.0)*x6733*x6742))+(((-1.0)*x6734*x6742)));
evalcond[1]=((((-1.0)*r02*x6741))+(((-1.0)*x6739))+(((-1.0)*x6731*x6742))+(((-1.0)*x6732*x6742)));
evalcond[2]=((((-1.0)*r12*x6741))+(((-1.0)*x6737*x6742))+(((-1.0)*x6736))+(((-1.0)*x6735*x6742)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6733*x6741))+((cj1*sj2))+((r22*x6729))+(((-1.0)*x6734*x6741)));
evalcond[4]=(((sj0*x6740))+((r02*x6729))+(((-1.0)*x6736*x6738))+(((-1.0)*x6731*x6741))+(((-1.0)*x6732*x6741)));
evalcond[5]=(((r12*x6729))+(((-1.0)*x6737*x6741))+(((-1.0)*x6735*x6741))+(((-1.0)*x6739*x6740))+((cj0*x6738)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x6743=(((cj2*sj1))+((cj1*sj2)));
j0eval[0]=x6743;
j0eval[1]=IKsign(x6743);
j0eval[2]=((IKabs((((cj5*r10))+(((-1.0)*r11*sj5)))))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x6744=cj5*cj5;
IkReal x6745=r20*r20;
IkReal x6746=(r20*sj5);
IkReal x6747=(cj5*r21);
IkReal x6748=(cj2*sj1);
IkReal x6749=((1.0)*cj1*sj2);
IkReal x6750=(((x6744*(r21*r21)))+(r22*r22)+x6745+(((-1.0)*x6744*x6745))+(((2.0)*x6746*x6747)));
j4eval[0]=x6750;
j4eval[1]=((IKabs((((cj1*r22*sj2))+((r22*x6748)))))+(IKabs(((((-1.0)*x6747*x6749))+(((-1.0)*x6746*x6749))+(((-1.0)*x6747*x6748))+(((-1.0)*x6746*x6748))))));
j4eval[2]=IKsign(x6750);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j0eval[0]=(((cj2*sj1))+((cj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((9.98003992015968)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.98003992015968)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((9.98003992015968)*py))+IKsqr(((9.98003992015968)*px))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((9.98003992015968)*py), ((9.98003992015968)*px));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((0.1002)*(IKcos(j0)))));
evalcond[1]=((((-1.0)*py))+(((0.1002)*(IKsin(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6751=(((r01*sj5))+(((-1.0)*cj5*r00)));
j4eval[0]=x6751;
j4eval[1]=IKsign(x6751);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs((((cj0*cj5*r21))+((cj0*r20*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6752=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[0]=x6752;
j4eval[1]=IKsign(x6752);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r21*sj0))+((r20*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6753=((1.0)*sj0);
IkReal x6754=((1.0)*cj5);
IkReal x6755=((1.0)*cj0);
IkReal x6756=((((-1.0)*r20*x6754))+((r21*sj5)));
j4eval[0]=x6756;
j4eval[1]=((IKabs(((((-1.0)*r02*x6755))+(((-1.0)*r12*x6753)))))+(IKabs(((((-1.0)*r00*sj5*x6755))+(((-1.0)*cj0*r01*x6754))+(((-1.0)*r10*sj5*x6753))+(((-1.0)*cj5*r11*x6753))))));
j4eval[2]=IKsign(x6756);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6757=((1.0)*sj0);
IkReal x6758=((1.0)*cj5);
IkReal x6759=((1.0)*cj0);
CheckValue<IkReal> x6760 = IKatan2WithCheck(IkReal(((((-1.0)*r00*sj5*x6759))+(((-1.0)*cj0*r01*x6758))+(((-1.0)*r10*sj5*x6757))+(((-1.0)*cj5*r11*x6757)))),IkReal(((((-1.0)*r02*x6759))+(((-1.0)*r12*x6757)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6760.valid){
continue;
}
CheckValue<IkReal> x6761=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x6758))+((r21*sj5)))),-1);
if(!x6761.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6760.value)+(((1.5707963267949)*(x6761.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6762=IKcos(j4);
IkReal x6763=IKsin(j4);
IkReal x6764=((1.0)*sj0);
IkReal x6765=(cj5*r21);
IkReal x6766=(cj5*r11);
IkReal x6767=(cj5*r01);
IkReal x6768=((1.0)*x6762);
IkReal x6769=(sj5*x6762);
IkReal x6770=((1.0)*x6763);
evalcond[0]=((((-1.0)*r22*x6770))+((r20*x6769))+((x6762*x6765)));
evalcond[1]=(cj0+(((-1.0)*r12*x6770))+((r10*x6769))+((x6762*x6766)));
evalcond[2]=((((-1.0)*r22*x6768))+(((-1.0)*x6765*x6770))+(((-1.0)*r20*sj5*x6770)));
evalcond[3]=(((r00*x6769))+(((-1.0)*x6764))+(((-1.0)*r02*x6770))+((x6762*x6767)));
evalcond[4]=((((-1.0)*r02*x6768))+(((-1.0)*r00*sj5*x6770))+(((-1.0)*cj0))+(((-1.0)*x6767*x6770)));
evalcond[5]=((((-1.0)*r10*sj5*x6770))+(((-1.0)*x6764))+(((-1.0)*r12*x6768))+(((-1.0)*x6766*x6770)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6771=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10))+((r11*sj5)))),-1);
if(!x6771.valid){
continue;
}
CheckValue<IkReal> x6772 = IKatan2WithCheck(IkReal((((cj5*r21*sj0))+((r20*sj0*sj5)))),IkReal((r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x6772.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6771.value)))+(x6772.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6773=IKcos(j4);
IkReal x6774=IKsin(j4);
IkReal x6775=((1.0)*sj0);
IkReal x6776=(cj5*r21);
IkReal x6777=(cj5*r11);
IkReal x6778=(cj5*r01);
IkReal x6779=((1.0)*x6773);
IkReal x6780=(sj5*x6773);
IkReal x6781=((1.0)*x6774);
evalcond[0]=(((r20*x6780))+((x6773*x6776))+(((-1.0)*r22*x6781)));
evalcond[1]=(cj0+(((-1.0)*r12*x6781))+((x6773*x6777))+((r10*x6780)));
evalcond[2]=((((-1.0)*r22*x6779))+(((-1.0)*r20*sj5*x6781))+(((-1.0)*x6776*x6781)));
evalcond[3]=((((-1.0)*x6775))+((x6773*x6778))+(((-1.0)*r02*x6781))+((r00*x6780)));
evalcond[4]=((((-1.0)*x6778*x6781))+(((-1.0)*r02*x6779))+(((-1.0)*r00*sj5*x6781))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r10*sj5*x6781))+(((-1.0)*x6775))+(((-1.0)*r12*x6779))+(((-1.0)*x6777*x6781)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6782 = IKatan2WithCheck(IkReal((((cj0*cj5*r21))+((cj0*r20*sj5)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6782.valid){
continue;
}
CheckValue<IkReal> x6783=IKPowWithIntegerCheck(IKsign((((r01*sj5))+(((-1.0)*cj5*r00)))),-1);
if(!x6783.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6782.value)+(((1.5707963267949)*(x6783.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6784=IKcos(j4);
IkReal x6785=IKsin(j4);
IkReal x6786=((1.0)*sj0);
IkReal x6787=(cj5*r21);
IkReal x6788=(cj5*r11);
IkReal x6789=(cj5*r01);
IkReal x6790=((1.0)*x6784);
IkReal x6791=(sj5*x6784);
IkReal x6792=((1.0)*x6785);
evalcond[0]=(((x6784*x6787))+((r20*x6791))+(((-1.0)*r22*x6792)));
evalcond[1]=(((x6784*x6788))+cj0+((r10*x6791))+(((-1.0)*r12*x6792)));
evalcond[2]=((((-1.0)*r20*sj5*x6792))+(((-1.0)*r22*x6790))+(((-1.0)*x6787*x6792)));
evalcond[3]=(((x6784*x6789))+(((-1.0)*x6786))+((r00*x6791))+(((-1.0)*r02*x6792)));
evalcond[4]=((((-1.0)*x6789*x6792))+(((-1.0)*r00*sj5*x6792))+(((-1.0)*cj0))+(((-1.0)*r02*x6790)));
evalcond[5]=((((-1.0)*x6786))+(((-1.0)*x6788*x6792))+(((-1.0)*r10*sj5*x6792))+(((-1.0)*r12*x6790)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((9.98003992015968)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.98003992015968)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((9.98003992015968)*py))+IKsqr(((9.98003992015968)*px))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((9.98003992015968)*py), ((9.98003992015968)*px));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((0.1002)*(IKcos(j0)))));
evalcond[1]=((((-1.0)*py))+(((0.1002)*(IKsin(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6793=(((cj5*r10))+(((-1.0)*r11*sj5)));
j4eval[0]=x6793;
j4eval[1]=IKsign(x6793);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r21*sj0))+((r20*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6794=((((-1.0)*r01*sj5))+((cj5*r00)));
j4eval[0]=x6794;
j4eval[1]=IKsign(x6794);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs((((cj0*cj5*r21))+((cj0*r20*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6795=(((r21*sj5))+(((-1.0)*cj5*r20)));
j4eval[0]=x6795;
j4eval[1]=((IKabs((((r12*sj0))+((cj0*r02)))))+(IKabs((((cj0*cj5*r01))+((cj5*r11*sj0))+((cj0*r00*sj5))+((r10*sj0*sj5))))));
j4eval[2]=IKsign(x6795);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6796 = IKatan2WithCheck(IkReal((((cj0*cj5*r01))+((cj5*r11*sj0))+((cj0*r00*sj5))+((r10*sj0*sj5)))),IkReal((((r12*sj0))+((cj0*r02)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6796.valid){
continue;
}
CheckValue<IkReal> x6797=IKPowWithIntegerCheck(IKsign((((r21*sj5))+(((-1.0)*cj5*r20)))),-1);
if(!x6797.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6796.value)+(((1.5707963267949)*(x6797.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6798=IKcos(j4);
IkReal x6799=IKsin(j4);
IkReal x6800=((1.0)*cj0);
IkReal x6801=(cj5*r21);
IkReal x6802=(cj5*r11);
IkReal x6803=(cj5*r01);
IkReal x6804=((1.0)*x6798);
IkReal x6805=(sj5*x6798);
IkReal x6806=((1.0)*x6799);
evalcond[0]=(((r20*x6805))+(((-1.0)*r22*x6806))+((x6798*x6801)));
evalcond[1]=(sj0+(((-1.0)*r02*x6806))+((r00*x6805))+((x6798*x6803)));
evalcond[2]=((((-1.0)*r20*sj5*x6806))+(((-1.0)*r22*x6804))+(((-1.0)*x6801*x6806)));
evalcond[3]=((((-1.0)*r12*x6806))+((r10*x6805))+((x6798*x6802))+(((-1.0)*x6800)));
evalcond[4]=((((-1.0)*x6803*x6806))+(((-1.0)*r02*x6804))+(((-1.0)*r00*sj5*x6806))+(((-1.0)*x6800)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r12*x6804))+(((-1.0)*x6802*x6806))+(((-1.0)*r10*sj5*x6806)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6807=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj5))+((cj5*r00)))),-1);
if(!x6807.valid){
continue;
}
CheckValue<IkReal> x6808 = IKatan2WithCheck(IkReal((((cj0*cj5*r21))+((cj0*r20*sj5)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6808.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6807.value)))+(x6808.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6809=IKcos(j4);
IkReal x6810=IKsin(j4);
IkReal x6811=((1.0)*cj0);
IkReal x6812=(cj5*r21);
IkReal x6813=(cj5*r11);
IkReal x6814=(cj5*r01);
IkReal x6815=((1.0)*x6809);
IkReal x6816=(sj5*x6809);
IkReal x6817=((1.0)*x6810);
evalcond[0]=(((x6809*x6812))+(((-1.0)*r22*x6817))+((r20*x6816)));
evalcond[1]=(sj0+((x6809*x6814))+(((-1.0)*r02*x6817))+((r00*x6816)));
evalcond[2]=((((-1.0)*x6812*x6817))+(((-1.0)*r22*x6815))+(((-1.0)*r20*sj5*x6817)));
evalcond[3]=(((r10*x6816))+(((-1.0)*x6811))+((x6809*x6813))+(((-1.0)*r12*x6817)));
evalcond[4]=((((-1.0)*x6811))+(((-1.0)*r02*x6815))+(((-1.0)*x6814*x6817))+(((-1.0)*r00*sj5*x6817)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r10*sj5*x6817))+(((-1.0)*r12*x6815))+(((-1.0)*x6813*x6817)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6818=IKPowWithIntegerCheck(IKsign((((cj5*r10))+(((-1.0)*r11*sj5)))),-1);
if(!x6818.valid){
continue;
}
CheckValue<IkReal> x6819 = IKatan2WithCheck(IkReal((((cj5*r21*sj0))+((r20*sj0*sj5)))),IkReal((r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x6819.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6818.value)))+(x6819.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6820=IKcos(j4);
IkReal x6821=IKsin(j4);
IkReal x6822=((1.0)*cj0);
IkReal x6823=(cj5*r21);
IkReal x6824=(cj5*r11);
IkReal x6825=(cj5*r01);
IkReal x6826=((1.0)*x6820);
IkReal x6827=(sj5*x6820);
IkReal x6828=((1.0)*x6821);
evalcond[0]=(((x6820*x6823))+((r20*x6827))+(((-1.0)*r22*x6828)));
evalcond[1]=(sj0+((r00*x6827))+(((-1.0)*r02*x6828))+((x6820*x6825)));
evalcond[2]=((((-1.0)*x6823*x6828))+(((-1.0)*r20*sj5*x6828))+(((-1.0)*r22*x6826)));
evalcond[3]=((((-1.0)*x6822))+((r10*x6827))+(((-1.0)*r12*x6828))+((x6820*x6824)));
evalcond[4]=((((-1.0)*x6822))+(((-1.0)*r00*sj5*x6828))+(((-1.0)*r02*x6826))+(((-1.0)*x6825*x6828)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r12*x6826))+(((-1.0)*x6824*x6828))+(((-1.0)*r10*sj5*x6828)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.6509900123723)*px))+(((0.762425945004893)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.6509900123723)*py))+(((0.762425945004893)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.6509900123723)*px))+(((0.762425945004893)*py))))+IKsqr(((((2.6509900123723)*py))+(((0.762425945004893)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.6509900123723)*px))+(((0.762425945004893)*py))), ((((2.6509900123723)*py))+(((0.762425945004893)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6829=IKsin(j0);
IkReal x6830=IKcos(j0);
evalcond[0]=((((-0.3484)*x6829))+(((-1.0)*px))+(((0.1002)*x6830)));
evalcond[1]=((((-1.0)*py))+(((0.3484)*x6830))+(((0.1002)*x6829)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x6831=(((cj5*r10))+(((-1.0)*r11*sj5)));
j4eval[0]=x6831;
j4eval[1]=IKsign(x6831);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r21*sj0))+((r20*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x6832=((((-1.0)*r01*sj5))+((cj5*r00)));
j4eval[0]=x6832;
j4eval[1]=IKsign(x6832);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs((((cj0*cj5*r21))+((cj0*r20*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x6833=(((r21*sj5))+(((-1.0)*cj5*r20)));
j4eval[0]=x6833;
j4eval[1]=((IKabs((((r12*sj0))+((cj0*r02)))))+(IKabs((((cj0*cj5*r01))+((cj5*r11*sj0))+((cj0*r00*sj5))+((r10*sj0*sj5))))));
j4eval[2]=IKsign(x6833);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6834 = IKatan2WithCheck(IkReal((((cj0*cj5*r01))+((cj5*r11*sj0))+((cj0*r00*sj5))+((r10*sj0*sj5)))),IkReal((((r12*sj0))+((cj0*r02)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6834.valid){
continue;
}
CheckValue<IkReal> x6835=IKPowWithIntegerCheck(IKsign((((r21*sj5))+(((-1.0)*cj5*r20)))),-1);
if(!x6835.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6834.value)+(((1.5707963267949)*(x6835.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6836=IKcos(j4);
IkReal x6837=IKsin(j4);
IkReal x6838=((1.0)*cj0);
IkReal x6839=(cj5*r21);
IkReal x6840=(cj5*r11);
IkReal x6841=(cj5*r01);
IkReal x6842=((1.0)*x6836);
IkReal x6843=(sj5*x6836);
IkReal x6844=((1.0)*x6837);
evalcond[0]=((((-1.0)*r22*x6844))+((r20*x6843))+((x6836*x6839)));
evalcond[1]=(sj0+(((-1.0)*r02*x6844))+((x6836*x6841))+((r00*x6843)));
evalcond[2]=((((-1.0)*x6839*x6844))+(((-1.0)*r22*x6842))+(((-1.0)*r20*sj5*x6844)));
evalcond[3]=((((-1.0)*r12*x6844))+((x6836*x6840))+((r10*x6843))+(((-1.0)*x6838)));
evalcond[4]=((((-1.0)*x6841*x6844))+(((-1.0)*r02*x6842))+(((-1.0)*r00*sj5*x6844))+(((-1.0)*x6838)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r12*x6842))+(((-1.0)*r10*sj5*x6844))+(((-1.0)*x6840*x6844)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6845=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj5))+((cj5*r00)))),-1);
if(!x6845.valid){
continue;
}
CheckValue<IkReal> x6846 = IKatan2WithCheck(IkReal((((cj0*cj5*r21))+((cj0*r20*sj5)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6846.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6845.value)))+(x6846.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6847=IKcos(j4);
IkReal x6848=IKsin(j4);
IkReal x6849=((1.0)*cj0);
IkReal x6850=(cj5*r21);
IkReal x6851=(cj5*r11);
IkReal x6852=(cj5*r01);
IkReal x6853=((1.0)*x6847);
IkReal x6854=(sj5*x6847);
IkReal x6855=((1.0)*x6848);
evalcond[0]=(((r20*x6854))+(((-1.0)*r22*x6855))+((x6847*x6850)));
evalcond[1]=(sj0+(((-1.0)*r02*x6855))+((r00*x6854))+((x6847*x6852)));
evalcond[2]=((((-1.0)*r20*sj5*x6855))+(((-1.0)*r22*x6853))+(((-1.0)*x6850*x6855)));
evalcond[3]=(((r10*x6854))+(((-1.0)*x6849))+(((-1.0)*r12*x6855))+((x6847*x6851)));
evalcond[4]=((((-1.0)*r02*x6853))+(((-1.0)*r00*sj5*x6855))+(((-1.0)*x6849))+(((-1.0)*x6852*x6855)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r12*x6853))+(((-1.0)*r10*sj5*x6855))+(((-1.0)*x6851*x6855)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6856=IKPowWithIntegerCheck(IKsign((((cj5*r10))+(((-1.0)*r11*sj5)))),-1);
if(!x6856.valid){
continue;
}
CheckValue<IkReal> x6857 = IKatan2WithCheck(IkReal((((cj5*r21*sj0))+((r20*sj0*sj5)))),IkReal((r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x6857.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6856.value)))+(x6857.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6858=IKcos(j4);
IkReal x6859=IKsin(j4);
IkReal x6860=((1.0)*cj0);
IkReal x6861=(cj5*r21);
IkReal x6862=(cj5*r11);
IkReal x6863=(cj5*r01);
IkReal x6864=((1.0)*x6858);
IkReal x6865=(sj5*x6858);
IkReal x6866=((1.0)*x6859);
evalcond[0]=((((-1.0)*r22*x6866))+((x6858*x6861))+((r20*x6865)));
evalcond[1]=(sj0+(((-1.0)*r02*x6866))+((r00*x6865))+((x6858*x6863)));
evalcond[2]=((((-1.0)*r22*x6864))+(((-1.0)*x6861*x6866))+(((-1.0)*r20*sj5*x6866)));
evalcond[3]=((((-1.0)*x6860))+(((-1.0)*r12*x6866))+((x6858*x6862))+((r10*x6865)));
evalcond[4]=((((-1.0)*r00*sj5*x6866))+(((-1.0)*x6860))+(((-1.0)*x6863*x6866))+(((-1.0)*r02*x6864)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x6862*x6866))+(((-1.0)*r12*x6864))+(((-1.0)*r10*sj5*x6866)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.6509900123723)*px))+(((0.762425945004893)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.6509900123723)*py))+(((0.762425945004893)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.6509900123723)*px))+(((0.762425945004893)*py))))+IKsqr(((((2.6509900123723)*py))+(((0.762425945004893)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.6509900123723)*px))+(((0.762425945004893)*py))), ((((2.6509900123723)*py))+(((0.762425945004893)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6867=IKsin(j0);
IkReal x6868=IKcos(j0);
evalcond[0]=((((-1.0)*px))+(((0.1002)*x6868))+(((-0.3484)*x6867)));
evalcond[1]=((((-1.0)*py))+(((0.3484)*x6868))+(((0.1002)*x6867)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x6869=(((r01*sj5))+(((-1.0)*cj5*r00)));
j4eval[0]=x6869;
j4eval[1]=IKsign(x6869);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs((((cj0*cj5*r21))+((cj0*r20*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x6870=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[0]=x6870;
j4eval[1]=IKsign(x6870);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r21*sj0))+((r20*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x6871=((1.0)*sj0);
IkReal x6872=((1.0)*cj5);
IkReal x6873=((1.0)*cj0);
IkReal x6874=((((-1.0)*r20*x6872))+((r21*sj5)));
j4eval[0]=x6874;
j4eval[1]=((IKabs(((((-1.0)*r00*sj5*x6873))+(((-1.0)*cj5*r11*x6871))+(((-1.0)*cj0*r01*x6872))+(((-1.0)*r10*sj5*x6871)))))+(IKabs(((((-1.0)*r12*x6871))+(((-1.0)*r02*x6873))))));
j4eval[2]=IKsign(x6874);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6875=((1.0)*sj0);
IkReal x6876=((1.0)*cj5);
IkReal x6877=((1.0)*cj0);
CheckValue<IkReal> x6878=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x6876))+((r21*sj5)))),-1);
if(!x6878.valid){
continue;
}
CheckValue<IkReal> x6879 = IKatan2WithCheck(IkReal(((((-1.0)*r00*sj5*x6877))+(((-1.0)*cj5*r11*x6875))+(((-1.0)*cj0*r01*x6876))+(((-1.0)*r10*sj5*x6875)))),IkReal(((((-1.0)*r12*x6875))+(((-1.0)*r02*x6877)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6879.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6878.value)))+(x6879.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6880=IKcos(j4);
IkReal x6881=IKsin(j4);
IkReal x6882=((1.0)*sj0);
IkReal x6883=(cj5*r21);
IkReal x6884=(cj5*r11);
IkReal x6885=(cj5*r01);
IkReal x6886=((1.0)*x6880);
IkReal x6887=(sj5*x6880);
IkReal x6888=((1.0)*x6881);
evalcond[0]=(((x6880*x6883))+((r20*x6887))+(((-1.0)*r22*x6888)));
evalcond[1]=(((x6880*x6884))+cj0+(((-1.0)*r12*x6888))+((r10*x6887)));
evalcond[2]=((((-1.0)*x6883*x6888))+(((-1.0)*r20*sj5*x6888))+(((-1.0)*r22*x6886)));
evalcond[3]=(((x6880*x6885))+(((-1.0)*r02*x6888))+(((-1.0)*x6882))+((r00*x6887)));
evalcond[4]=((((-1.0)*r02*x6886))+(((-1.0)*x6885*x6888))+(((-1.0)*r00*sj5*x6888))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x6884*x6888))+(((-1.0)*x6882))+(((-1.0)*r12*x6886))+(((-1.0)*r10*sj5*x6888)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6889=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10))+((r11*sj5)))),-1);
if(!x6889.valid){
continue;
}
CheckValue<IkReal> x6890 = IKatan2WithCheck(IkReal((((cj5*r21*sj0))+((r20*sj0*sj5)))),IkReal((r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x6890.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6889.value)))+(x6890.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6891=IKcos(j4);
IkReal x6892=IKsin(j4);
IkReal x6893=((1.0)*sj0);
IkReal x6894=(cj5*r21);
IkReal x6895=(cj5*r11);
IkReal x6896=(cj5*r01);
IkReal x6897=((1.0)*x6891);
IkReal x6898=(sj5*x6891);
IkReal x6899=((1.0)*x6892);
evalcond[0]=(((x6891*x6894))+(((-1.0)*r22*x6899))+((r20*x6898)));
evalcond[1]=(((r10*x6898))+((x6891*x6895))+cj0+(((-1.0)*r12*x6899)));
evalcond[2]=((((-1.0)*x6894*x6899))+(((-1.0)*r22*x6897))+(((-1.0)*r20*sj5*x6899)));
evalcond[3]=(((x6891*x6896))+(((-1.0)*x6893))+(((-1.0)*r02*x6899))+((r00*x6898)));
evalcond[4]=((((-1.0)*r00*sj5*x6899))+(((-1.0)*x6896*x6899))+(((-1.0)*r02*x6897))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x6895*x6899))+(((-1.0)*r10*sj5*x6899))+(((-1.0)*x6893))+(((-1.0)*r12*x6897)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6900 = IKatan2WithCheck(IkReal((((cj0*cj5*r21))+((cj0*r20*sj5)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6900.valid){
continue;
}
CheckValue<IkReal> x6901=IKPowWithIntegerCheck(IKsign((((r01*sj5))+(((-1.0)*cj5*r00)))),-1);
if(!x6901.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6900.value)+(((1.5707963267949)*(x6901.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6902=IKcos(j4);
IkReal x6903=IKsin(j4);
IkReal x6904=((1.0)*sj0);
IkReal x6905=(cj5*r21);
IkReal x6906=(cj5*r11);
IkReal x6907=(cj5*r01);
IkReal x6908=((1.0)*x6902);
IkReal x6909=(sj5*x6902);
IkReal x6910=((1.0)*x6903);
evalcond[0]=((((-1.0)*r22*x6910))+((r20*x6909))+((x6902*x6905)));
evalcond[1]=(cj0+((r10*x6909))+(((-1.0)*r12*x6910))+((x6902*x6906)));
evalcond[2]=((((-1.0)*r20*sj5*x6910))+(((-1.0)*r22*x6908))+(((-1.0)*x6905*x6910)));
evalcond[3]=(((r00*x6909))+(((-1.0)*x6904))+(((-1.0)*r02*x6910))+((x6902*x6907)));
evalcond[4]=((((-1.0)*r02*x6908))+(((-1.0)*x6907*x6910))+(((-1.0)*r00*sj5*x6910))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x6908))+(((-1.0)*r10*sj5*x6910))+(((-1.0)*x6904))+(((-1.0)*x6906*x6910)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((9.98003992015968)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.98003992015968)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((9.98003992015968)*py))+IKsqr(((9.98003992015968)*px))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((9.98003992015968)*py), ((9.98003992015968)*px));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((0.1002)*(IKcos(j0)))));
evalcond[1]=((((-1.0)*py))+(((0.1002)*(IKsin(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6911=(((cj5*r10))+(((-1.0)*r11*sj5)));
j4eval[0]=x6911;
j4eval[1]=IKsign(x6911);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r21*sj0))+((r20*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6912=((((-1.0)*r01*sj5))+((cj5*r00)));
j4eval[0]=x6912;
j4eval[1]=IKsign(x6912);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs((((cj0*cj5*r21))+((cj0*r20*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6913=(((r21*sj5))+(((-1.0)*cj5*r20)));
j4eval[0]=x6913;
j4eval[1]=((IKabs((((r12*sj0))+((cj0*r02)))))+(IKabs((((cj0*cj5*r01))+((cj5*r11*sj0))+((cj0*r00*sj5))+((r10*sj0*sj5))))));
j4eval[2]=IKsign(x6913);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6914 = IKatan2WithCheck(IkReal((((cj0*cj5*r01))+((cj5*r11*sj0))+((cj0*r00*sj5))+((r10*sj0*sj5)))),IkReal((((r12*sj0))+((cj0*r02)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6914.valid){
continue;
}
CheckValue<IkReal> x6915=IKPowWithIntegerCheck(IKsign((((r21*sj5))+(((-1.0)*cj5*r20)))),-1);
if(!x6915.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6914.value)+(((1.5707963267949)*(x6915.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6916=IKcos(j4);
IkReal x6917=IKsin(j4);
IkReal x6918=((1.0)*cj0);
IkReal x6919=(cj5*r21);
IkReal x6920=(cj5*r11);
IkReal x6921=(cj5*r01);
IkReal x6922=((1.0)*x6916);
IkReal x6923=(sj5*x6916);
IkReal x6924=((1.0)*x6917);
evalcond[0]=(((r20*x6923))+((x6916*x6919))+(((-1.0)*r22*x6924)));
evalcond[1]=(sj0+(((-1.0)*r02*x6924))+((r00*x6923))+((x6916*x6921)));
evalcond[2]=((((-1.0)*r20*sj5*x6924))+(((-1.0)*r22*x6922))+(((-1.0)*x6919*x6924)));
evalcond[3]=(((r10*x6923))+(((-1.0)*x6918))+((x6916*x6920))+(((-1.0)*r12*x6924)));
evalcond[4]=((((-1.0)*r02*x6922))+(((-1.0)*r00*sj5*x6924))+(((-1.0)*x6918))+(((-1.0)*x6921*x6924)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x6920*x6924))+(((-1.0)*r12*x6922))+(((-1.0)*r10*sj5*x6924)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6925=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj5))+((cj5*r00)))),-1);
if(!x6925.valid){
continue;
}
CheckValue<IkReal> x6926 = IKatan2WithCheck(IkReal((((cj0*cj5*r21))+((cj0*r20*sj5)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6926.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6925.value)))+(x6926.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6927=IKcos(j4);
IkReal x6928=IKsin(j4);
IkReal x6929=((1.0)*cj0);
IkReal x6930=(cj5*r21);
IkReal x6931=(cj5*r11);
IkReal x6932=(cj5*r01);
IkReal x6933=((1.0)*x6927);
IkReal x6934=(sj5*x6927);
IkReal x6935=((1.0)*x6928);
evalcond[0]=(((r20*x6934))+((x6927*x6930))+(((-1.0)*r22*x6935)));
evalcond[1]=(sj0+((x6927*x6932))+((r00*x6934))+(((-1.0)*r02*x6935)));
evalcond[2]=((((-1.0)*r20*sj5*x6935))+(((-1.0)*x6930*x6935))+(((-1.0)*r22*x6933)));
evalcond[3]=(((x6927*x6931))+((r10*x6934))+(((-1.0)*r12*x6935))+(((-1.0)*x6929)));
evalcond[4]=((((-1.0)*x6932*x6935))+(((-1.0)*r02*x6933))+(((-1.0)*r00*sj5*x6935))+(((-1.0)*x6929)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r12*x6933))+(((-1.0)*x6931*x6935))+(((-1.0)*r10*sj5*x6935)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6936=IKPowWithIntegerCheck(IKsign((((cj5*r10))+(((-1.0)*r11*sj5)))),-1);
if(!x6936.valid){
continue;
}
CheckValue<IkReal> x6937 = IKatan2WithCheck(IkReal((((cj5*r21*sj0))+((r20*sj0*sj5)))),IkReal((r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x6937.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6936.value)))+(x6937.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6938=IKcos(j4);
IkReal x6939=IKsin(j4);
IkReal x6940=((1.0)*cj0);
IkReal x6941=(cj5*r21);
IkReal x6942=(cj5*r11);
IkReal x6943=(cj5*r01);
IkReal x6944=((1.0)*x6938);
IkReal x6945=(sj5*x6938);
IkReal x6946=((1.0)*x6939);
evalcond[0]=(((x6938*x6941))+((r20*x6945))+(((-1.0)*r22*x6946)));
evalcond[1]=(sj0+((x6938*x6943))+(((-1.0)*r02*x6946))+((r00*x6945)));
evalcond[2]=((((-1.0)*x6941*x6946))+(((-1.0)*r20*sj5*x6946))+(((-1.0)*r22*x6944)));
evalcond[3]=(((r10*x6945))+(((-1.0)*r12*x6946))+((x6938*x6942))+(((-1.0)*x6940)));
evalcond[4]=((((-1.0)*x6943*x6946))+(((-1.0)*x6940))+(((-1.0)*r02*x6944))+(((-1.0)*r00*sj5*x6946)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r12*x6944))+(((-1.0)*x6942*x6946))+(((-1.0)*r10*sj5*x6946)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((9.98003992015968)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.98003992015968)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((9.98003992015968)*py))+IKsqr(((9.98003992015968)*px))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((9.98003992015968)*py), ((9.98003992015968)*px));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((0.1002)*(IKcos(j0)))));
evalcond[1]=((((-1.0)*py))+(((0.1002)*(IKsin(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6947=(((r01*sj5))+(((-1.0)*cj5*r00)));
j4eval[0]=x6947;
j4eval[1]=IKsign(x6947);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs((((cj0*cj5*r21))+((cj0*r20*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6948=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[0]=x6948;
j4eval[1]=IKsign(x6948);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r21*sj0))+((r20*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6949=((1.0)*sj0);
IkReal x6950=((1.0)*cj5);
IkReal x6951=((1.0)*cj0);
IkReal x6952=((((-1.0)*r20*x6950))+((r21*sj5)));
j4eval[0]=x6952;
j4eval[1]=((IKabs(((((-1.0)*r00*sj5*x6951))+(((-1.0)*cj0*r01*x6950))+(((-1.0)*cj5*r11*x6949))+(((-1.0)*r10*sj5*x6949)))))+(IKabs(((((-1.0)*r12*x6949))+(((-1.0)*r02*x6951))))));
j4eval[2]=IKsign(x6952);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6953=((1.0)*sj0);
IkReal x6954=((1.0)*cj5);
IkReal x6955=((1.0)*cj0);
CheckValue<IkReal> x6956=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x6954))+((r21*sj5)))),-1);
if(!x6956.valid){
continue;
}
CheckValue<IkReal> x6957 = IKatan2WithCheck(IkReal(((((-1.0)*r00*sj5*x6955))+(((-1.0)*cj0*r01*x6954))+(((-1.0)*cj5*r11*x6953))+(((-1.0)*r10*sj5*x6953)))),IkReal(((((-1.0)*r12*x6953))+(((-1.0)*r02*x6955)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6957.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6956.value)))+(x6957.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6958=IKcos(j4);
IkReal x6959=IKsin(j4);
IkReal x6960=((1.0)*sj0);
IkReal x6961=(cj5*r21);
IkReal x6962=(cj5*r11);
IkReal x6963=(cj5*r01);
IkReal x6964=((1.0)*x6958);
IkReal x6965=(sj5*x6958);
IkReal x6966=((1.0)*x6959);
evalcond[0]=(((x6958*x6961))+(((-1.0)*r22*x6966))+((r20*x6965)));
evalcond[1]=(((r10*x6965))+cj0+(((-1.0)*r12*x6966))+((x6958*x6962)));
evalcond[2]=((((-1.0)*x6961*x6966))+(((-1.0)*r20*sj5*x6966))+(((-1.0)*r22*x6964)));
evalcond[3]=((((-1.0)*r02*x6966))+((r00*x6965))+(((-1.0)*x6960))+((x6958*x6963)));
evalcond[4]=((((-1.0)*r02*x6964))+(((-1.0)*r00*sj5*x6966))+(((-1.0)*x6963*x6966))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r10*sj5*x6966))+(((-1.0)*r12*x6964))+(((-1.0)*x6960))+(((-1.0)*x6962*x6966)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6967=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10))+((r11*sj5)))),-1);
if(!x6967.valid){
continue;
}
CheckValue<IkReal> x6968 = IKatan2WithCheck(IkReal((((cj5*r21*sj0))+((r20*sj0*sj5)))),IkReal((r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x6968.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6967.value)))+(x6968.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6969=IKcos(j4);
IkReal x6970=IKsin(j4);
IkReal x6971=((1.0)*sj0);
IkReal x6972=(cj5*r21);
IkReal x6973=(cj5*r11);
IkReal x6974=(cj5*r01);
IkReal x6975=((1.0)*x6969);
IkReal x6976=(sj5*x6969);
IkReal x6977=((1.0)*x6970);
evalcond[0]=(((x6969*x6972))+(((-1.0)*r22*x6977))+((r20*x6976)));
evalcond[1]=(((x6969*x6973))+cj0+(((-1.0)*r12*x6977))+((r10*x6976)));
evalcond[2]=((((-1.0)*r20*sj5*x6977))+(((-1.0)*r22*x6975))+(((-1.0)*x6972*x6977)));
evalcond[3]=(((x6969*x6974))+(((-1.0)*r02*x6977))+((r00*x6976))+(((-1.0)*x6971)));
evalcond[4]=((((-1.0)*x6974*x6977))+(((-1.0)*r02*x6975))+(((-1.0)*r00*sj5*x6977))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r10*sj5*x6977))+(((-1.0)*r12*x6975))+(((-1.0)*x6971))+(((-1.0)*x6973*x6977)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6978 = IKatan2WithCheck(IkReal((((cj0*cj5*r21))+((cj0*r20*sj5)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6978.valid){
continue;
}
CheckValue<IkReal> x6979=IKPowWithIntegerCheck(IKsign((((r01*sj5))+(((-1.0)*cj5*r00)))),-1);
if(!x6979.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6978.value)+(((1.5707963267949)*(x6979.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6980=IKcos(j4);
IkReal x6981=IKsin(j4);
IkReal x6982=((1.0)*sj0);
IkReal x6983=(cj5*r21);
IkReal x6984=(cj5*r11);
IkReal x6985=(cj5*r01);
IkReal x6986=((1.0)*x6980);
IkReal x6987=(sj5*x6980);
IkReal x6988=((1.0)*x6981);
evalcond[0]=(((x6980*x6983))+((r20*x6987))+(((-1.0)*r22*x6988)));
evalcond[1]=(cj0+((r10*x6987))+((x6980*x6984))+(((-1.0)*r12*x6988)));
evalcond[2]=((((-1.0)*r20*sj5*x6988))+(((-1.0)*r22*x6986))+(((-1.0)*x6983*x6988)));
evalcond[3]=((((-1.0)*x6982))+((x6980*x6985))+((r00*x6987))+(((-1.0)*r02*x6988)));
evalcond[4]=((((-1.0)*r00*sj5*x6988))+(((-1.0)*x6985*x6988))+(((-1.0)*cj0))+(((-1.0)*r02*x6986)));
evalcond[5]=((((-1.0)*x6982))+(((-1.0)*x6984*x6988))+(((-1.0)*r12*x6986))+(((-1.0)*r10*sj5*x6988)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.6509900123723)*px))+(((0.762425945004893)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.6509900123723)*py))+(((0.762425945004893)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.6509900123723)*px))+(((0.762425945004893)*py))))+IKsqr(((((-2.6509900123723)*py))+(((0.762425945004893)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.6509900123723)*px))+(((0.762425945004893)*py))), ((((-2.6509900123723)*py))+(((0.762425945004893)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6989=IKsin(j0);
IkReal x6990=IKcos(j0);
evalcond[0]=((((0.1002)*x6990))+(((0.3484)*x6989))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.1002)*x6989))+(((-0.3484)*x6990)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x6991=(((r01*sj5))+(((-1.0)*cj5*r00)));
j4eval[0]=x6991;
j4eval[1]=IKsign(x6991);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs((((cj0*cj5*r21))+((cj0*r20*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x6992=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[0]=x6992;
j4eval[1]=IKsign(x6992);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r21*sj0))+((r20*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x6993=((1.0)*sj0);
IkReal x6994=((1.0)*cj5);
IkReal x6995=((1.0)*cj0);
IkReal x6996=(((r21*sj5))+(((-1.0)*r20*x6994)));
j4eval[0]=x6996;
j4eval[1]=((IKabs(((((-1.0)*cj5*r11*x6993))+(((-1.0)*r00*sj5*x6995))+(((-1.0)*r10*sj5*x6993))+(((-1.0)*cj0*r01*x6994)))))+(IKabs(((((-1.0)*r12*x6993))+(((-1.0)*r02*x6995))))));
j4eval[2]=IKsign(x6996);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6997=((1.0)*sj0);
IkReal x6998=((1.0)*cj5);
IkReal x6999=((1.0)*cj0);
CheckValue<IkReal> x7000=IKPowWithIntegerCheck(IKsign((((r21*sj5))+(((-1.0)*r20*x6998)))),-1);
if(!x7000.valid){
continue;
}
CheckValue<IkReal> x7001 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r11*x6997))+(((-1.0)*r00*sj5*x6999))+(((-1.0)*r10*sj5*x6997))+(((-1.0)*cj0*r01*x6998)))),IkReal(((((-1.0)*r12*x6997))+(((-1.0)*r02*x6999)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7001.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7000.value)))+(x7001.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7002=IKcos(j4);
IkReal x7003=IKsin(j4);
IkReal x7004=((1.0)*sj0);
IkReal x7005=(cj5*r21);
IkReal x7006=(cj5*r11);
IkReal x7007=(cj5*r01);
IkReal x7008=((1.0)*x7002);
IkReal x7009=(sj5*x7002);
IkReal x7010=((1.0)*x7003);
evalcond[0]=((((-1.0)*r22*x7010))+((r20*x7009))+((x7002*x7005)));
evalcond[1]=(cj0+((x7002*x7006))+(((-1.0)*r12*x7010))+((r10*x7009)));
evalcond[2]=((((-1.0)*r22*x7008))+(((-1.0)*r20*sj5*x7010))+(((-1.0)*x7005*x7010)));
evalcond[3]=(((x7002*x7007))+(((-1.0)*x7004))+((r00*x7009))+(((-1.0)*r02*x7010)));
evalcond[4]=((((-1.0)*r02*x7008))+(((-1.0)*r00*sj5*x7010))+(((-1.0)*x7007*x7010))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x7008))+(((-1.0)*r10*sj5*x7010))+(((-1.0)*x7004))+(((-1.0)*x7006*x7010)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7011=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10))+((r11*sj5)))),-1);
if(!x7011.valid){
continue;
}
CheckValue<IkReal> x7012 = IKatan2WithCheck(IkReal((((cj5*r21*sj0))+((r20*sj0*sj5)))),IkReal((r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x7012.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7011.value)))+(x7012.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7013=IKcos(j4);
IkReal x7014=IKsin(j4);
IkReal x7015=((1.0)*sj0);
IkReal x7016=(cj5*r21);
IkReal x7017=(cj5*r11);
IkReal x7018=(cj5*r01);
IkReal x7019=((1.0)*x7013);
IkReal x7020=(sj5*x7013);
IkReal x7021=((1.0)*x7014);
evalcond[0]=((((-1.0)*r22*x7021))+((x7013*x7016))+((r20*x7020)));
evalcond[1]=((((-1.0)*r12*x7021))+((x7013*x7017))+cj0+((r10*x7020)));
evalcond[2]=((((-1.0)*r22*x7019))+(((-1.0)*r20*sj5*x7021))+(((-1.0)*x7016*x7021)));
evalcond[3]=(((x7013*x7018))+(((-1.0)*x7015))+((r00*x7020))+(((-1.0)*r02*x7021)));
evalcond[4]=((((-1.0)*x7018*x7021))+(((-1.0)*r00*sj5*x7021))+(((-1.0)*r02*x7019))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x7015))+(((-1.0)*r12*x7019))+(((-1.0)*x7017*x7021))+(((-1.0)*r10*sj5*x7021)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7022 = IKatan2WithCheck(IkReal((((cj0*cj5*r21))+((cj0*r20*sj5)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7022.valid){
continue;
}
CheckValue<IkReal> x7023=IKPowWithIntegerCheck(IKsign((((r01*sj5))+(((-1.0)*cj5*r00)))),-1);
if(!x7023.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7022.value)+(((1.5707963267949)*(x7023.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7024=IKcos(j4);
IkReal x7025=IKsin(j4);
IkReal x7026=((1.0)*sj0);
IkReal x7027=(cj5*r21);
IkReal x7028=(cj5*r11);
IkReal x7029=(cj5*r01);
IkReal x7030=((1.0)*x7024);
IkReal x7031=(sj5*x7024);
IkReal x7032=((1.0)*x7025);
evalcond[0]=((((-1.0)*r22*x7032))+((x7024*x7027))+((r20*x7031)));
evalcond[1]=(cj0+((x7024*x7028))+(((-1.0)*r12*x7032))+((r10*x7031)));
evalcond[2]=((((-1.0)*r20*sj5*x7032))+(((-1.0)*r22*x7030))+(((-1.0)*x7027*x7032)));
evalcond[3]=((((-1.0)*r02*x7032))+((r00*x7031))+((x7024*x7029))+(((-1.0)*x7026)));
evalcond[4]=((((-1.0)*r02*x7030))+(((-1.0)*r00*sj5*x7032))+(((-1.0)*x7029*x7032))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x7030))+(((-1.0)*r10*sj5*x7032))+(((-1.0)*x7028*x7032))+(((-1.0)*x7026)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.6509900123723)*px))+(((0.762425945004893)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.6509900123723)*py))+(((0.762425945004893)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.6509900123723)*px))+(((0.762425945004893)*py))))+IKsqr(((((-2.6509900123723)*py))+(((0.762425945004893)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.6509900123723)*px))+(((0.762425945004893)*py))), ((((-2.6509900123723)*py))+(((0.762425945004893)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7033=IKsin(j0);
IkReal x7034=IKcos(j0);
evalcond[0]=((((-1.0)*px))+(((0.1002)*x7034))+(((0.3484)*x7033)));
evalcond[1]=((((-0.3484)*x7034))+(((-1.0)*py))+(((0.1002)*x7033)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7035=(((cj5*r10))+(((-1.0)*r11*sj5)));
j4eval[0]=x7035;
j4eval[1]=IKsign(x7035);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r21*sj0))+((r20*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7036=((((-1.0)*r01*sj5))+((cj5*r00)));
j4eval[0]=x7036;
j4eval[1]=IKsign(x7036);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs((((cj0*cj5*r21))+((cj0*r20*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7037=(((r21*sj5))+(((-1.0)*cj5*r20)));
j4eval[0]=x7037;
j4eval[1]=((IKabs((((r12*sj0))+((cj0*r02)))))+(IKabs((((cj0*cj5*r01))+((cj5*r11*sj0))+((cj0*r00*sj5))+((r10*sj0*sj5))))));
j4eval[2]=IKsign(x7037);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7038 = IKatan2WithCheck(IkReal((((cj0*cj5*r01))+((cj5*r11*sj0))+((cj0*r00*sj5))+((r10*sj0*sj5)))),IkReal((((r12*sj0))+((cj0*r02)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7038.valid){
continue;
}
CheckValue<IkReal> x7039=IKPowWithIntegerCheck(IKsign((((r21*sj5))+(((-1.0)*cj5*r20)))),-1);
if(!x7039.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7038.value)+(((1.5707963267949)*(x7039.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7040=IKcos(j4);
IkReal x7041=IKsin(j4);
IkReal x7042=((1.0)*cj0);
IkReal x7043=(cj5*r21);
IkReal x7044=(cj5*r11);
IkReal x7045=(cj5*r01);
IkReal x7046=((1.0)*x7040);
IkReal x7047=(sj5*x7040);
IkReal x7048=((1.0)*x7041);
evalcond[0]=((((-1.0)*r22*x7048))+((r20*x7047))+((x7040*x7043)));
evalcond[1]=(sj0+((r00*x7047))+(((-1.0)*r02*x7048))+((x7040*x7045)));
evalcond[2]=((((-1.0)*r20*sj5*x7048))+(((-1.0)*r22*x7046))+(((-1.0)*x7043*x7048)));
evalcond[3]=((((-1.0)*x7042))+(((-1.0)*r12*x7048))+((r10*x7047))+((x7040*x7044)));
evalcond[4]=((((-1.0)*x7042))+(((-1.0)*r02*x7046))+(((-1.0)*r00*sj5*x7048))+(((-1.0)*x7045*x7048)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r12*x7046))+(((-1.0)*x7044*x7048))+(((-1.0)*r10*sj5*x7048)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7049=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj5))+((cj5*r00)))),-1);
if(!x7049.valid){
continue;
}
CheckValue<IkReal> x7050 = IKatan2WithCheck(IkReal((((cj0*cj5*r21))+((cj0*r20*sj5)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7050.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7049.value)))+(x7050.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7051=IKcos(j4);
IkReal x7052=IKsin(j4);
IkReal x7053=((1.0)*cj0);
IkReal x7054=(cj5*r21);
IkReal x7055=(cj5*r11);
IkReal x7056=(cj5*r01);
IkReal x7057=((1.0)*x7051);
IkReal x7058=(sj5*x7051);
IkReal x7059=((1.0)*x7052);
evalcond[0]=(((r20*x7058))+((x7051*x7054))+(((-1.0)*r22*x7059)));
evalcond[1]=(sj0+((x7051*x7056))+((r00*x7058))+(((-1.0)*r02*x7059)));
evalcond[2]=((((-1.0)*x7054*x7059))+(((-1.0)*r22*x7057))+(((-1.0)*r20*sj5*x7059)));
evalcond[3]=(((r10*x7058))+((x7051*x7055))+(((-1.0)*x7053))+(((-1.0)*r12*x7059)));
evalcond[4]=((((-1.0)*x7053))+(((-1.0)*r00*sj5*x7059))+(((-1.0)*x7056*x7059))+(((-1.0)*r02*x7057)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r10*sj5*x7059))+(((-1.0)*r12*x7057))+(((-1.0)*x7055*x7059)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7060=IKPowWithIntegerCheck(IKsign((((cj5*r10))+(((-1.0)*r11*sj5)))),-1);
if(!x7060.valid){
continue;
}
CheckValue<IkReal> x7061 = IKatan2WithCheck(IkReal((((cj5*r21*sj0))+((r20*sj0*sj5)))),IkReal((r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x7061.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7060.value)))+(x7061.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7062=IKcos(j4);
IkReal x7063=IKsin(j4);
IkReal x7064=((1.0)*cj0);
IkReal x7065=(cj5*r21);
IkReal x7066=(cj5*r11);
IkReal x7067=(cj5*r01);
IkReal x7068=((1.0)*x7062);
IkReal x7069=(sj5*x7062);
IkReal x7070=((1.0)*x7063);
evalcond[0]=(((x7062*x7065))+((r20*x7069))+(((-1.0)*r22*x7070)));
evalcond[1]=(((x7062*x7067))+sj0+(((-1.0)*r02*x7070))+((r00*x7069)));
evalcond[2]=((((-1.0)*x7065*x7070))+(((-1.0)*r22*x7068))+(((-1.0)*r20*sj5*x7070)));
evalcond[3]=(((x7062*x7066))+(((-1.0)*x7064))+(((-1.0)*r12*x7070))+((r10*x7069)));
evalcond[4]=((((-1.0)*x7064))+(((-1.0)*x7067*x7070))+(((-1.0)*r02*x7068))+(((-1.0)*r00*sj5*x7070)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7066*x7070))+(((-1.0)*r10*sj5*x7070))+(((-1.0)*r12*x7068)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7071=(cj1*sj2);
IkReal x7072=(cj2*sj1);
IkReal x7073=((5000.0)*px);
IkReal x7074=(r01*sj5);
IkReal x7075=(cj5*r00);
IkReal x7076=(sj1*x7075);
CheckValue<IkReal> x7077=IKPowWithIntegerCheck((x7071+x7072),-1);
if(!x7077.valid){
continue;
}
CheckValue<IkReal> x7078=IKPowWithIntegerCheck(((((501.0)*x7071))+(((501.0)*x7072))),-1);
if(!x7078.valid){
continue;
}
if( IKabs(((x7077.value)*((x7074+(((-1.0)*x7075)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x7078.value)*(((((1245.0)*x7071*x7074))+(((1245.0)*x7072*x7074))+(((-1245.0)*x7071*x7075))+(((-1742.0)*x7076))+((x7072*x7073))+((x7071*x7073))+(((-1245.0)*x7072*x7075))+(((1742.0)*sj1*x7074)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x7077.value)*((x7074+(((-1.0)*x7075))))))+IKsqr(((x7078.value)*(((((1245.0)*x7071*x7074))+(((1245.0)*x7072*x7074))+(((-1245.0)*x7071*x7075))+(((-1742.0)*x7076))+((x7072*x7073))+((x7071*x7073))+(((-1245.0)*x7072*x7075))+(((1742.0)*sj1*x7074))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x7077.value)*((x7074+(((-1.0)*x7075))))), ((x7078.value)*(((((1245.0)*x7071*x7074))+(((1245.0)*x7072*x7074))+(((-1245.0)*x7071*x7075))+(((-1742.0)*x7076))+((x7072*x7073))+((x7071*x7073))+(((-1245.0)*x7072*x7075))+(((1742.0)*sj1*x7074))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7079=IKsin(j0);
IkReal x7080=IKcos(j0);
IkReal x7081=((0.1005)*cj5);
IkReal x7082=((1.0)*sj5);
IkReal x7083=((0.1005)*sj5);
IkReal x7084=(sj1*x7079);
IkReal x7085=(cj2*sj1*x7080);
IkReal x7086=(cj1*sj2*x7080);
IkReal x7087=(cj1*sj2*x7079);
evalcond[0]=(x7087+(((-1.0)*r01*x7082))+((cj2*x7084))+((cj5*r00)));
evalcond[1]=(((cj5*r10))+(((-1.0)*x7086))+(((-1.0)*x7085))+(((-1.0)*r11*x7082)));
evalcond[2]=(((r01*x7083))+(((0.1002)*x7080))+(((-1.0)*r00*x7081))+(((-1.0)*px))+(((-0.3495)*cj2*x7084))+(((-0.3495)*x7087))+(((-0.3484)*x7084)));
evalcond[3]=(((r11*x7083))+(((-1.0)*r10*x7081))+(((-1.0)*py))+(((0.1002)*x7079))+(((0.3495)*x7086))+(((0.3495)*x7085))+(((0.3484)*sj1*x7080)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7088=((1.0)*sj5);
IkReal x7089=(((cj5*r10))+(((-1.0)*r11*x7088)));
j4eval[0]=x7089;
j4eval[1]=IKsign(x7089);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*cj5*r21))+(((-1.0)*cj0*r20*x7088))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7090=((1.0)*cj5);
IkReal x7091=(((r01*sj5))+(((-1.0)*r00*x7090)));
j4eval[0]=x7091;
j4eval[1]=IKsign(x7091);
j4eval[2]=((IKabs(((((-1.0)*r21*sj0*x7090))+(((-1.0)*r20*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7092=((1.0)*sj0);
IkReal x7093=(((cj5*r20))+(((-1.0)*r21*sj5)));
j4eval[0]=x7093;
j4eval[1]=((IKabs(((((-1.0)*cj5*r01*x7092))+((cj0*cj5*r11))+(((-1.0)*r00*sj5*x7092))+((cj0*r10*sj5)))))+(IKabs(((((-1.0)*cj0*r12))+((r02*sj0))))));
j4eval[2]=IKsign(x7093);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x7094=((-1.0)*r21);
IkReal x7096 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7096)==0){
continue;
}
IkReal x7095=pow(x7096,-0.5);
CheckValue<IkReal> x7097 = IKatan2WithCheck(IkReal(r20),IkReal(x7094),IKFAST_ATAN2_MAGTHRESH);
if(!x7097.valid){
continue;
}
IkReal gconst126=((-1.0)*(x7097.value));
IkReal gconst127=((-1.0)*r20*x7095);
IkReal gconst128=(x7094*x7095);
CheckValue<IkReal> x7098 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x7098.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7098.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7099=((-1.0)*r21);
CheckValue<IkReal> x7102 = IKatan2WithCheck(IkReal(r20),IkReal(x7099),IKFAST_ATAN2_MAGTHRESH);
if(!x7102.valid){
continue;
}
IkReal x7100=((-1.0)*(x7102.value));
IkReal x7101=x7095;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst127;
cj5=gconst128;
j5=x7100;
IkReal gconst126=x7100;
IkReal gconst127=((-1.0)*r20*x7101);
IkReal gconst128=(x7099*x7101);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7103=((-1.0)*r21);
CheckValue<IkReal> x7106 = IKatan2WithCheck(IkReal(r20),IkReal(x7103),IKFAST_ATAN2_MAGTHRESH);
if(!x7106.valid){
continue;
}
IkReal x7104=((-1.0)*(x7106.value));
IkReal x7105=x7095;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst127;
cj5=gconst128;
j5=x7104;
IkReal gconst126=x7104;
IkReal gconst127=((-1.0)*r20*x7105);
IkReal gconst128=(x7103*x7105);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x7107=((-1.0)*r21);
CheckValue<IkReal> x7110 = IKatan2WithCheck(IkReal(r20),IkReal(x7107),IKFAST_ATAN2_MAGTHRESH);
if(!x7110.valid){
continue;
}
IkReal x7108=((-1.0)*(x7110.value));
IkReal x7109=x7095;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst127;
cj5=gconst128;
j5=x7108;
IkReal gconst126=x7108;
IkReal gconst127=((-1.0)*r20*x7109);
IkReal gconst128=(x7107*x7109);
IkReal x7111=r22*r22;
CheckValue<IkReal> x7114=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x7111))),-1);
if(!x7114.valid){
continue;
}
IkReal x7112=x7114.value;
IkReal x7113=(x7111+((x7112*(r21*r21*r21*r21)))+((x7112*(r20*r20*r20*r20)))+(((2.0)*x7112*(r20*r20)*(r21*r21))));
j4eval[0]=x7113;
j4eval[1]=IKsign(x7113);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7115=(gconst128*r21);
IkReal x7116=(gconst127*r20);
IkReal x7117=(cj2*sj1);
IkReal x7118=(cj1*sj2);
CheckValue<IkReal> x7119 = IKatan2WithCheck(IkReal((((r22*x7117))+((r22*x7118)))),IkReal(((((-1.0)*x7116*x7118))+(((-1.0)*x7116*x7117))+(((-1.0)*x7115*x7118))+(((-1.0)*x7115*x7117)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7119.valid){
continue;
}
CheckValue<IkReal> x7120=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((2.0)*x7115*x7116))+(x7115*x7115)+(x7116*x7116))),-1);
if(!x7120.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7119.value)+(((1.5707963267949)*(x7120.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7121=IKsin(j4);
IkReal x7122=IKcos(j4);
IkReal x7123=(gconst128*r11);
IkReal x7124=(gconst128*r21);
IkReal x7125=((1.0)*sj0);
IkReal x7126=(gconst128*r01);
IkReal x7127=(cj1*cj2);
IkReal x7128=((1.0)*cj0);
IkReal x7129=(sj1*sj2);
IkReal x7130=((1.0)*x7122);
IkReal x7131=(gconst127*x7122);
IkReal x7132=((1.0)*x7121);
evalcond[0]=((((-1.0)*gconst127*r20*x7132))+(((-1.0)*x7124*x7132))+(((-1.0)*r22*x7130)));
evalcond[1]=((((-1.0)*x7128))+(((-1.0)*gconst127*r00*x7132))+(((-1.0)*x7126*x7132))+(((-1.0)*r02*x7130)));
evalcond[2]=((((-1.0)*r12*x7130))+(((-1.0)*x7123*x7132))+(((-1.0)*x7125))+(((-1.0)*gconst127*r10*x7132)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x7132))+((r20*x7131))+((x7122*x7124)));
evalcond[4]=(((r00*x7131))+(((-1.0)*x7125*x7127))+((sj0*x7129))+(((-1.0)*r02*x7132))+((x7122*x7126)));
evalcond[5]=((((-1.0)*r12*x7132))+((cj0*x7127))+(((-1.0)*x7128*x7129))+((r10*x7131))+((x7122*x7123)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7133=((1.0)*sj0);
CheckValue<IkReal> x7134=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst128*r00))+((gconst127*r01)))),-1);
if(!x7134.valid){
continue;
}
CheckValue<IkReal> x7135 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst128*r21*x7133))+(((-1.0)*gconst127*r20*x7133)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7135.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7134.value)))+(x7135.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7136=IKsin(j4);
IkReal x7137=IKcos(j4);
IkReal x7138=(gconst128*r11);
IkReal x7139=(gconst128*r21);
IkReal x7140=((1.0)*sj0);
IkReal x7141=(gconst128*r01);
IkReal x7142=(cj1*cj2);
IkReal x7143=((1.0)*cj0);
IkReal x7144=(sj1*sj2);
IkReal x7145=((1.0)*x7137);
IkReal x7146=(gconst127*x7137);
IkReal x7147=((1.0)*x7136);
evalcond[0]=((((-1.0)*r22*x7145))+(((-1.0)*x7139*x7147))+(((-1.0)*gconst127*r20*x7147)));
evalcond[1]=((((-1.0)*x7143))+(((-1.0)*gconst127*r00*x7147))+(((-1.0)*x7141*x7147))+(((-1.0)*r02*x7145)));
evalcond[2]=((((-1.0)*gconst127*r10*x7147))+(((-1.0)*x7140))+(((-1.0)*x7138*x7147))+(((-1.0)*r12*x7145)));
evalcond[3]=(((r20*x7146))+((cj2*sj1))+(((-1.0)*r22*x7147))+((cj1*sj2))+((x7137*x7139)));
evalcond[4]=(((r00*x7146))+((x7137*x7141))+(((-1.0)*x7140*x7142))+(((-1.0)*r02*x7147))+((sj0*x7144)));
evalcond[5]=(((cj0*x7142))+((x7137*x7138))+(((-1.0)*r12*x7147))+((r10*x7146))+(((-1.0)*x7143*x7144)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7148=((1.0)*gconst127);
CheckValue<IkReal> x7149=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x7148))+((gconst128*r10)))),-1);
if(!x7149.valid){
continue;
}
CheckValue<IkReal> x7150 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x7148))+(((-1.0)*cj0*gconst128*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7150.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7149.value)))+(x7150.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7151=IKsin(j4);
IkReal x7152=IKcos(j4);
IkReal x7153=(gconst128*r11);
IkReal x7154=(gconst128*r21);
IkReal x7155=((1.0)*sj0);
IkReal x7156=(gconst128*r01);
IkReal x7157=(cj1*cj2);
IkReal x7158=((1.0)*cj0);
IkReal x7159=(sj1*sj2);
IkReal x7160=((1.0)*x7152);
IkReal x7161=(gconst127*x7152);
IkReal x7162=((1.0)*x7151);
evalcond[0]=((((-1.0)*r22*x7160))+(((-1.0)*x7154*x7162))+(((-1.0)*gconst127*r20*x7162)));
evalcond[1]=((((-1.0)*x7156*x7162))+(((-1.0)*r02*x7160))+(((-1.0)*gconst127*r00*x7162))+(((-1.0)*x7158)));
evalcond[2]=((((-1.0)*x7155))+(((-1.0)*r12*x7160))+(((-1.0)*gconst127*r10*x7162))+(((-1.0)*x7153*x7162)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7162))+((cj1*sj2))+((r20*x7161))+((x7152*x7154)));
evalcond[4]=((((-1.0)*r02*x7162))+(((-1.0)*x7155*x7157))+((r00*x7161))+((sj0*x7159))+((x7152*x7156)));
evalcond[5]=((((-1.0)*x7158*x7159))+((cj0*x7157))+(((-1.0)*r12*x7162))+((r10*x7161))+((x7152*x7153)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7165 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7165)==0){
continue;
}
IkReal x7163=pow(x7165,-0.5);
IkReal x7164=((1.0)*x7163);
CheckValue<IkReal> x7166 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x7166.valid){
continue;
}
IkReal gconst129=((3.14159265358979)+(((-1.0)*(x7166.value))));
IkReal gconst130=(r20*x7164);
IkReal gconst131=(r21*x7164);
CheckValue<IkReal> x7167 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x7167.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7167.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x7171 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x7171.valid){
continue;
}
IkReal x7168=((1.0)*(x7171.value));
IkReal x7169=x7163;
IkReal x7170=((1.0)*x7169);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x7168)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x7168)));
IkReal gconst130=(r20*x7170);
IkReal gconst131=(r21*x7170);
IkReal x7172=r22*r22;
IkReal x7173=((1.0)*x7172);
CheckValue<IkReal> x7177=IKPowWithIntegerCheck(((-1.0)+x7172),-1);
if(!x7177.valid){
continue;
}
IkReal x7174=x7177.value;
if((((1.0)+(((-1.0)*x7173)))) < -0.00001)
continue;
IkReal x7175=IKsqrt(((1.0)+(((-1.0)*x7173))));
IkReal x7176=(cj0*x7174*x7175);
j4eval[0]=((IKabs((x7176+(((-1.0)*x7173*x7176)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x7181 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x7181.valid){
continue;
}
IkReal x7178=((1.0)*(x7181.value));
IkReal x7179=x7163;
IkReal x7180=((1.0)*x7179);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x7178)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x7178)));
IkReal gconst130=(r20*x7180);
IkReal gconst131=(r21*x7180);
IkReal x7182=r22*r22;
IkReal x7183=((1.0)*x7182);
CheckValue<IkReal> x7187=IKPowWithIntegerCheck(((-1.0)+x7182),-1);
if(!x7187.valid){
continue;
}
IkReal x7184=x7187.value;
if((((1.0)+(((-1.0)*x7183)))) < -0.00001)
continue;
IkReal x7185=IKsqrt(((1.0)+(((-1.0)*x7183))));
IkReal x7186=(sj0*x7184*x7185);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x7186+(((-1.0)*x7183*x7186))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x7191 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x7191.valid){
continue;
}
IkReal x7188=((1.0)*(x7191.value));
IkReal x7189=x7163;
IkReal x7190=((1.0)*x7189);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x7188)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x7188)));
IkReal gconst130=(r20*x7190);
IkReal gconst131=(r21*x7190);
IkReal x7192=r22*r22;
IkReal x7193=(cj0*r12);
IkReal x7194=(r02*sj0);
CheckValue<IkReal> x7198=IKPowWithIntegerCheck(((-1.0)+x7192),-1);
if(!x7198.valid){
continue;
}
IkReal x7195=x7198.value;
if((((1.0)+(((-1.0)*x7192)))) < -0.00001)
continue;
IkReal x7196=IKsqrt(((1.0)+(((-1.0)*x7192))));
IkReal x7197=(r22*x7195*x7196);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs((x7194+(((-1.0)*x7193)))))+(IKabs(((((-1.0)*x7194*x7197))+((x7193*x7197))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7199=((1.0)*gconst130);
CheckValue<IkReal> x7200 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r12))+((r02*sj0)))),IkReal(((((-1.0)*gconst131*r01*sj0))+(((-1.0)*r00*sj0*x7199))+((cj0*gconst130*r10))+((cj0*gconst131*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7200.valid){
continue;
}
CheckValue<IkReal> x7201=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x7199))+((gconst131*r20)))),-1);
if(!x7201.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7200.value)+(((1.5707963267949)*(x7201.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7202=IKsin(j4);
IkReal x7203=IKcos(j4);
IkReal x7204=(gconst131*r11);
IkReal x7205=((1.0)*cj0);
IkReal x7206=((1.0)*sj0);
IkReal x7207=(cj1*cj2);
IkReal x7208=(sj1*sj2);
IkReal x7209=((1.0)*x7203);
IkReal x7210=((1.0)*x7202);
IkReal x7211=(gconst131*x7203);
IkReal x7212=(gconst130*x7203);
evalcond[0]=((((-1.0)*gconst131*r21*x7210))+(((-1.0)*gconst130*r20*x7210))+(((-1.0)*r22*x7209)));
evalcond[1]=((((-1.0)*gconst131*r01*x7210))+(((-1.0)*x7205))+(((-1.0)*gconst130*r00*x7210))+(((-1.0)*r02*x7209)));
evalcond[2]=((((-1.0)*x7204*x7210))+(((-1.0)*gconst130*r10*x7210))+(((-1.0)*r12*x7209))+(((-1.0)*x7206)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r21*x7211))+((r20*x7212))+(((-1.0)*r22*x7210)));
evalcond[4]=(((r00*x7212))+(((-1.0)*x7206*x7207))+(((-1.0)*r02*x7210))+((sj0*x7208))+((r01*x7211)));
evalcond[5]=(((r10*x7212))+((x7203*x7204))+(((-1.0)*x7205*x7208))+(((-1.0)*r12*x7210))+((cj0*x7207)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7213=((1.0)*gconst131);
CheckValue<IkReal> x7214=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x7213))+((gconst130*r01)))),-1);
if(!x7214.valid){
continue;
}
CheckValue<IkReal> x7215 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst130*r20*sj0))+(((-1.0)*r21*sj0*x7213)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7215.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7214.value)))+(x7215.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7216=IKsin(j4);
IkReal x7217=IKcos(j4);
IkReal x7218=(gconst131*r11);
IkReal x7219=((1.0)*cj0);
IkReal x7220=((1.0)*sj0);
IkReal x7221=(cj1*cj2);
IkReal x7222=(sj1*sj2);
IkReal x7223=((1.0)*x7217);
IkReal x7224=((1.0)*x7216);
IkReal x7225=(gconst131*x7217);
IkReal x7226=(gconst130*x7217);
evalcond[0]=((((-1.0)*gconst131*r21*x7224))+(((-1.0)*gconst130*r20*x7224))+(((-1.0)*r22*x7223)));
evalcond[1]=((((-1.0)*r02*x7223))+(((-1.0)*gconst130*r00*x7224))+(((-1.0)*gconst131*r01*x7224))+(((-1.0)*x7219)));
evalcond[2]=((((-1.0)*x7218*x7224))+(((-1.0)*r12*x7223))+(((-1.0)*x7220))+(((-1.0)*gconst130*r10*x7224)));
evalcond[3]=(((cj2*sj1))+((r21*x7225))+((r20*x7226))+((cj1*sj2))+(((-1.0)*r22*x7224)));
evalcond[4]=(((sj0*x7222))+(((-1.0)*r02*x7224))+((r00*x7226))+((r01*x7225))+(((-1.0)*x7220*x7221)));
evalcond[5]=(((r10*x7226))+(((-1.0)*r12*x7224))+((cj0*x7221))+(((-1.0)*x7219*x7222))+((x7217*x7218)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7227=((1.0)*gconst130);
CheckValue<IkReal> x7228 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst131*r21))+(((-1.0)*cj0*r20*x7227)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7228.valid){
continue;
}
CheckValue<IkReal> x7229=IKPowWithIntegerCheck(IKsign((((gconst131*r10))+(((-1.0)*r11*x7227)))),-1);
if(!x7229.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7228.value)+(((1.5707963267949)*(x7229.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7230=IKsin(j4);
IkReal x7231=IKcos(j4);
IkReal x7232=(gconst131*r11);
IkReal x7233=((1.0)*cj0);
IkReal x7234=((1.0)*sj0);
IkReal x7235=(cj1*cj2);
IkReal x7236=(sj1*sj2);
IkReal x7237=((1.0)*x7231);
IkReal x7238=((1.0)*x7230);
IkReal x7239=(gconst131*x7231);
IkReal x7240=(gconst130*x7231);
evalcond[0]=((((-1.0)*gconst130*r20*x7238))+(((-1.0)*gconst131*r21*x7238))+(((-1.0)*r22*x7237)));
evalcond[1]=((((-1.0)*gconst131*r01*x7238))+(((-1.0)*gconst130*r00*x7238))+(((-1.0)*x7233))+(((-1.0)*r02*x7237)));
evalcond[2]=((((-1.0)*gconst130*r10*x7238))+(((-1.0)*x7232*x7238))+(((-1.0)*x7234))+(((-1.0)*r12*x7237)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r20*x7240))+(((-1.0)*r22*x7238))+((r21*x7239)));
evalcond[4]=(((r01*x7239))+(((-1.0)*x7234*x7235))+((r00*x7240))+((sj0*x7236))+(((-1.0)*r02*x7238)));
evalcond[5]=(((r10*x7240))+((x7231*x7232))+(((-1.0)*x7233*x7236))+((cj0*x7235))+(((-1.0)*r12*x7238)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7242 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x7242)==0){
continue;
}
IkReal x7241=pow(x7242,-0.5);
CheckValue<IkReal> x7243 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x7243.valid){
continue;
}
IkReal gconst132=((-1.0)*(x7243.value));
IkReal gconst133=(r00*x7241);
IkReal gconst134=(r01*x7241);
CheckValue<IkReal> x7244 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x7244.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7244.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x7247 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x7247.valid){
continue;
}
IkReal x7245=((-1.0)*(x7247.value));
IkReal x7246=x7241;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x7245;
IkReal gconst132=x7245;
IkReal gconst133=(r00*x7246);
IkReal gconst134=(r01*x7246);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x7250 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x7250.valid){
continue;
}
IkReal x7248=((-1.0)*(x7250.value));
IkReal x7249=x7241;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x7248;
IkReal gconst132=x7248;
IkReal gconst133=(r00*x7249);
IkReal gconst134=(r01*x7249);
IkReal x7251=r02*r02;
IkReal x7252=(cj0*r12);
IkReal x7253=((1.0)*x7251);
CheckValue<IkReal> x7257=IKPowWithIntegerCheck(((-1.0)+x7251),-1);
if(!x7257.valid){
continue;
}
IkReal x7254=x7257.value;
if((((1.0)+(((-1.0)*x7253)))) < -0.00001)
continue;
IkReal x7255=IKsqrt(((1.0)+(((-1.0)*x7253))));
IkReal x7256=(x7254*x7255);
j4eval[0]=((IKabs((((r02*x7252*x7256))+(((-1.0)*sj0*x7253*x7256))+((sj0*x7256)))))+(IKabs((((r02*sj0))+(((-1.0)*x7252))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x7260 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x7260.valid){
continue;
}
IkReal x7258=((-1.0)*(x7260.value));
IkReal x7259=x7241;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x7258;
IkReal gconst132=x7258;
IkReal gconst133=(r00*x7259);
IkReal gconst134=(r01*x7259);
IkReal x7261=r02*r02;
IkReal x7262=(cj1*r22*sj2);
IkReal x7263=(cj2*r22*sj1);
CheckValue<IkReal> x7267=IKPowWithIntegerCheck(((-1.0)+x7261),-1);
if(!x7267.valid){
continue;
}
IkReal x7264=x7267.value;
if((((1.0)+(((-1.0)*x7261)))) < -0.00001)
continue;
IkReal x7265=IKsqrt(((1.0)+(((-1.0)*x7261))));
IkReal x7266=((1.0)*r02*x7264*x7265);
j4eval[0]=((IKabs((x7263+x7262)))+(IKabs(((((-1.0)*x7263*x7266))+(((-1.0)*x7262*x7266))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7268=(gconst133*r20);
IkReal x7269=(gconst134*r21);
IkReal x7270=((1.0)*cj2*sj1);
IkReal x7271=((1.0)*cj1*sj2);
CheckValue<IkReal> x7272 = IKatan2WithCheck(IkReal((((cj2*r22*sj1))+((cj1*r22*sj2)))),IkReal(((((-1.0)*x7268*x7271))+(((-1.0)*x7268*x7270))+(((-1.0)*x7269*x7271))+(((-1.0)*x7269*x7270)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7272.valid){
continue;
}
CheckValue<IkReal> x7273=IKPowWithIntegerCheck(IKsign(((((2.0)*x7268*x7269))+(r22*r22)+(x7268*x7268)+(x7269*x7269))),-1);
if(!x7273.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7272.value)+(((1.5707963267949)*(x7273.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7274=IKsin(j4);
IkReal x7275=IKcos(j4);
IkReal x7276=(gconst134*r11);
IkReal x7277=(gconst133*r00);
IkReal x7278=(gconst134*r21);
IkReal x7279=(gconst134*r01);
IkReal x7280=((1.0)*sj0);
IkReal x7281=(gconst133*r10);
IkReal x7282=(gconst133*r20);
IkReal x7283=(cj1*cj2);
IkReal x7284=((1.0)*cj0);
IkReal x7285=(sj1*sj2);
IkReal x7286=((1.0)*x7275);
IkReal x7287=((1.0)*x7274);
evalcond[0]=((((-1.0)*x7282*x7287))+(((-1.0)*x7278*x7287))+(((-1.0)*r22*x7286)));
evalcond[1]=((((-1.0)*x7277*x7287))+(((-1.0)*x7284))+(((-1.0)*r02*x7286))+(((-1.0)*x7279*x7287)));
evalcond[2]=((((-1.0)*x7280))+(((-1.0)*x7276*x7287))+(((-1.0)*r12*x7286))+(((-1.0)*x7281*x7287)));
evalcond[3]=(((cj2*sj1))+((x7275*x7278))+((cj1*sj2))+((x7275*x7282))+(((-1.0)*r22*x7287)));
evalcond[4]=(((x7275*x7279))+((x7275*x7277))+((sj0*x7285))+(((-1.0)*x7280*x7283))+(((-1.0)*r02*x7287)));
evalcond[5]=((((-1.0)*x7284*x7285))+((x7275*x7276))+((cj0*x7283))+(((-1.0)*r12*x7287))+((x7275*x7281)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7288=((1.0)*sj0);
CheckValue<IkReal> x7289 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r12))+((r02*sj0)))),IkReal((((cj0*gconst134*r11))+(((-1.0)*gconst134*r01*x7288))+((cj0*gconst133*r10))+(((-1.0)*gconst133*r00*x7288)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7289.valid){
continue;
}
CheckValue<IkReal> x7290=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst133*r21))+((gconst134*r20)))),-1);
if(!x7290.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7289.value)+(((1.5707963267949)*(x7290.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7291=IKsin(j4);
IkReal x7292=IKcos(j4);
IkReal x7293=(gconst134*r11);
IkReal x7294=(gconst133*r00);
IkReal x7295=(gconst134*r21);
IkReal x7296=(gconst134*r01);
IkReal x7297=((1.0)*sj0);
IkReal x7298=(gconst133*r10);
IkReal x7299=(gconst133*r20);
IkReal x7300=(cj1*cj2);
IkReal x7301=((1.0)*cj0);
IkReal x7302=(sj1*sj2);
IkReal x7303=((1.0)*x7292);
IkReal x7304=((1.0)*x7291);
evalcond[0]=((((-1.0)*x7295*x7304))+(((-1.0)*x7299*x7304))+(((-1.0)*r22*x7303)));
evalcond[1]=((((-1.0)*r02*x7303))+(((-1.0)*x7296*x7304))+(((-1.0)*x7294*x7304))+(((-1.0)*x7301)));
evalcond[2]=((((-1.0)*x7297))+(((-1.0)*x7293*x7304))+(((-1.0)*r12*x7303))+(((-1.0)*x7298*x7304)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x7292*x7299))+((x7292*x7295))+(((-1.0)*r22*x7304)));
evalcond[4]=((((-1.0)*r02*x7304))+(((-1.0)*x7297*x7300))+((sj0*x7302))+((x7292*x7296))+((x7292*x7294)));
evalcond[5]=((((-1.0)*x7301*x7302))+(((-1.0)*r12*x7304))+((x7292*x7293))+((x7292*x7298))+((cj0*x7300)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7305=((1.0)*cj0);
CheckValue<IkReal> x7306 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*gconst133*r20*x7305))+(((-1.0)*gconst134*r21*x7305)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7306.valid){
continue;
}
CheckValue<IkReal> x7307=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst133*r11))+((gconst134*r10)))),-1);
if(!x7307.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7306.value)+(((1.5707963267949)*(x7307.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7308=IKsin(j4);
IkReal x7309=IKcos(j4);
IkReal x7310=(gconst134*r11);
IkReal x7311=(gconst133*r00);
IkReal x7312=(gconst134*r21);
IkReal x7313=(gconst134*r01);
IkReal x7314=((1.0)*sj0);
IkReal x7315=(gconst133*r10);
IkReal x7316=(gconst133*r20);
IkReal x7317=(cj1*cj2);
IkReal x7318=((1.0)*cj0);
IkReal x7319=(sj1*sj2);
IkReal x7320=((1.0)*x7309);
IkReal x7321=((1.0)*x7308);
evalcond[0]=((((-1.0)*x7312*x7321))+(((-1.0)*r22*x7320))+(((-1.0)*x7316*x7321)));
evalcond[1]=((((-1.0)*x7311*x7321))+(((-1.0)*x7313*x7321))+(((-1.0)*x7318))+(((-1.0)*r02*x7320)));
evalcond[2]=((((-1.0)*x7315*x7321))+(((-1.0)*x7310*x7321))+(((-1.0)*x7314))+(((-1.0)*r12*x7320)));
evalcond[3]=(((cj2*sj1))+((x7309*x7312))+((x7309*x7316))+(((-1.0)*r22*x7321))+((cj1*sj2)));
evalcond[4]=(((x7309*x7313))+((x7309*x7311))+((sj0*x7319))+(((-1.0)*x7314*x7317))+(((-1.0)*r02*x7321)));
evalcond[5]=(((x7309*x7310))+((x7309*x7315))+(((-1.0)*x7318*x7319))+(((-1.0)*r12*x7321))+((cj0*x7317)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7322=((-1.0)*r00);
IkReal x7324 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x7324)==0){
continue;
}
IkReal x7323=pow(x7324,-0.5);
CheckValue<IkReal> x7325 = IKatan2WithCheck(IkReal(x7322),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x7325.valid){
continue;
}
IkReal gconst135=((3.14159265358979)+(((-1.0)*(x7325.value))));
IkReal gconst136=(x7322*x7323);
IkReal gconst137=((-1.0)*r01*x7323);
CheckValue<IkReal> x7326 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x7326.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7326.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x7327=((-1.0)*r00);
CheckValue<IkReal> x7330 = IKatan2WithCheck(IkReal(x7327),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x7330.valid){
continue;
}
IkReal x7328=((1.0)*(x7330.value));
IkReal x7329=x7323;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7328)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7328)));
IkReal gconst136=(x7327*x7329);
IkReal gconst137=((-1.0)*r01*x7329);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
IkReal x7331=((-1.0)*r00);
CheckValue<IkReal> x7334 = IKatan2WithCheck(IkReal(x7331),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x7334.valid){
continue;
}
IkReal x7332=((1.0)*(x7334.value));
IkReal x7333=x7323;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7332)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7332)));
IkReal gconst136=(x7331*x7333);
IkReal gconst137=((-1.0)*r01*x7333);
j4eval[0]=0;
j4eval[1]=r22;
j4eval[2]=sj0;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7335=((1.0)*gconst136);
CheckValue<IkReal> x7336 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r12))+((r02*sj0)))),IkReal(((((-1.0)*gconst137*r01*sj0))+((cj0*gconst136*r10))+((cj0*gconst137*r11))+(((-1.0)*r00*sj0*x7335)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7336.valid){
continue;
}
CheckValue<IkReal> x7337=IKPowWithIntegerCheck(IKsign((((gconst137*r20))+(((-1.0)*r21*x7335)))),-1);
if(!x7337.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7336.value)+(((1.5707963267949)*(x7337.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7338=IKsin(j4);
IkReal x7339=IKcos(j4);
IkReal x7340=(gconst136*r10);
IkReal x7341=(gconst136*r00);
IkReal x7342=(cj1*cj2);
IkReal x7343=((1.0)*sj0);
IkReal x7344=((1.0)*cj0);
IkReal x7345=(sj1*sj2);
IkReal x7346=(gconst136*r20);
IkReal x7347=((1.0)*x7339);
IkReal x7348=((1.0)*x7338);
IkReal x7349=(gconst137*x7339);
evalcond[0]=((((-1.0)*r22*x7347))+(((-1.0)*gconst137*r21*x7348))+(((-1.0)*x7346*x7348)));
evalcond[1]=((((-1.0)*gconst137*r01*x7348))+(((-1.0)*x7341*x7348))+(((-1.0)*x7344))+(((-1.0)*r02*x7347)));
evalcond[2]=((((-1.0)*gconst137*r11*x7348))+(((-1.0)*r12*x7347))+(((-1.0)*x7340*x7348))+(((-1.0)*x7343)));
evalcond[3]=(((cj2*sj1))+((x7339*x7346))+(((-1.0)*r22*x7348))+((cj1*sj2))+((r21*x7349)));
evalcond[4]=(((x7339*x7341))+(((-1.0)*x7342*x7343))+((r01*x7349))+(((-1.0)*r02*x7348))+((sj0*x7345)));
evalcond[5]=(((x7339*x7340))+(((-1.0)*r12*x7348))+((r11*x7349))+(((-1.0)*x7344*x7345))+((cj0*x7342)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7350=((1.0)*sj0);
CheckValue<IkReal> x7351=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst137*r00))+((gconst136*r01)))),-1);
if(!x7351.valid){
continue;
}
CheckValue<IkReal> x7352 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst137*r21*x7350))+(((-1.0)*gconst136*r20*x7350)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7352.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7351.value)))+(x7352.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7353=IKsin(j4);
IkReal x7354=IKcos(j4);
IkReal x7355=(gconst136*r10);
IkReal x7356=(gconst136*r00);
IkReal x7357=(cj1*cj2);
IkReal x7358=((1.0)*sj0);
IkReal x7359=((1.0)*cj0);
IkReal x7360=(sj1*sj2);
IkReal x7361=(gconst136*r20);
IkReal x7362=((1.0)*x7354);
IkReal x7363=((1.0)*x7353);
IkReal x7364=(gconst137*x7354);
evalcond[0]=((((-1.0)*r22*x7362))+(((-1.0)*gconst137*r21*x7363))+(((-1.0)*x7361*x7363)));
evalcond[1]=((((-1.0)*gconst137*r01*x7363))+(((-1.0)*x7359))+(((-1.0)*x7356*x7363))+(((-1.0)*r02*x7362)));
evalcond[2]=((((-1.0)*x7358))+(((-1.0)*r12*x7362))+(((-1.0)*gconst137*r11*x7363))+(((-1.0)*x7355*x7363)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r21*x7364))+(((-1.0)*r22*x7363))+((x7354*x7361)));
evalcond[4]=(((r01*x7364))+((sj0*x7360))+(((-1.0)*x7357*x7358))+(((-1.0)*r02*x7363))+((x7354*x7356)));
evalcond[5]=(((r11*x7364))+(((-1.0)*r12*x7363))+((cj0*x7357))+(((-1.0)*x7359*x7360))+((x7354*x7355)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7365=((1.0)*gconst136);
CheckValue<IkReal> x7366 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x7365))+(((-1.0)*cj0*gconst137*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7366.valid){
continue;
}
CheckValue<IkReal> x7367=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x7365))+((gconst137*r10)))),-1);
if(!x7367.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7366.value)+(((1.5707963267949)*(x7367.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7368=IKsin(j4);
IkReal x7369=IKcos(j4);
IkReal x7370=(gconst136*r10);
IkReal x7371=(gconst136*r00);
IkReal x7372=(cj1*cj2);
IkReal x7373=((1.0)*sj0);
IkReal x7374=((1.0)*cj0);
IkReal x7375=(sj1*sj2);
IkReal x7376=(gconst136*r20);
IkReal x7377=((1.0)*x7369);
IkReal x7378=((1.0)*x7368);
IkReal x7379=(gconst137*x7369);
evalcond[0]=((((-1.0)*gconst137*r21*x7378))+(((-1.0)*r22*x7377))+(((-1.0)*x7376*x7378)));
evalcond[1]=((((-1.0)*gconst137*r01*x7378))+(((-1.0)*r02*x7377))+(((-1.0)*x7374))+(((-1.0)*x7371*x7378)));
evalcond[2]=((((-1.0)*gconst137*r11*x7378))+(((-1.0)*r12*x7377))+(((-1.0)*x7370*x7378))+(((-1.0)*x7373)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7378))+((cj1*sj2))+((x7369*x7376))+((r21*x7379)));
evalcond[4]=(((r01*x7379))+((sj0*x7375))+((x7369*x7371))+(((-1.0)*r02*x7378))+(((-1.0)*x7372*x7373)));
evalcond[5]=((((-1.0)*x7374*x7375))+((r11*x7379))+(((-1.0)*r12*x7378))+((cj0*x7372))+((x7369*x7370)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7380=((1.0)*sj5);
IkReal x7381=(((cj5*r10))+(((-1.0)*r11*x7380)));
j4eval[0]=x7381;
j4eval[1]=IKsign(x7381);
j4eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x7380))+(((-1.0)*cj5*r21))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7382=((1.0)*cj5);
IkReal x7383=(((r21*sj5))+(((-1.0)*r20*x7382)));
j4eval[0]=x7383;
j4eval[1]=((IKabs(((((-1.0)*r10*sj5))+(((-1.0)*r11*x7382)))))+(IKabs(r12)));
j4eval[2]=IKsign(x7383);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7384=(cj5*r01);
IkReal x7385=(cj1*sj2);
IkReal x7386=(cj2*sj1);
IkReal x7387=(r00*sj5);
IkReal x7388=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[0]=x7388;
j4eval[1]=((IKabs((((x7386*x7387))+((x7385*x7387))+((x7384*x7386))+((x7384*x7385)))))+(IKabs((((r02*x7385))+((r02*x7386))))));
j4eval[2]=IKsign(x7388);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7389=(cj5*r01);
IkReal x7390=(cj1*sj2);
IkReal x7391=(cj2*sj1);
IkReal x7392=(r00*sj5);
CheckValue<IkReal> x7393 = IKatan2WithCheck(IkReal((((x7389*x7391))+((x7389*x7390))+((x7391*x7392))+((x7390*x7392)))),IkReal((((r02*x7391))+((r02*x7390)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7393.valid){
continue;
}
CheckValue<IkReal> x7394=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10))+((r11*sj5)))),-1);
if(!x7394.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7393.value)+(((1.5707963267949)*(x7394.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7395=IKcos(j4);
IkReal x7396=IKsin(j4);
IkReal x7397=(r00*sj5);
IkReal x7398=(cj5*r01);
IkReal x7399=(r20*sj5);
IkReal x7400=(cj5*r21);
IkReal x7401=(cj5*r11);
IkReal x7402=(r10*sj5);
IkReal x7403=((1.0)*x7395);
IkReal x7404=((1.0)*x7396);
evalcond[0]=(((x7395*x7398))+((x7395*x7397))+(((-1.0)*r02*x7404)));
evalcond[1]=((((-1.0)*x7399*x7404))+(((-1.0)*r22*x7403))+(((-1.0)*x7400*x7404)));
evalcond[2]=((((-1.0)*r12*x7403))+(((-1.0)*x7402*x7404))+(((-1.0)*x7401*x7404)));
evalcond[3]=((-1.0)+(((-1.0)*x7397*x7404))+(((-1.0)*x7398*x7404))+(((-1.0)*r02*x7403)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x7395*x7399))+(((-1.0)*r22*x7404))+((x7395*x7400)));
evalcond[5]=((((-1.0)*r12*x7404))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((x7395*x7402))+((x7395*x7401)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7405=((1.0)*cj5);
CheckValue<IkReal> x7406 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r11*x7405))+(((-1.0)*r10*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7406.valid){
continue;
}
CheckValue<IkReal> x7407=IKPowWithIntegerCheck(IKsign((((r21*sj5))+(((-1.0)*r20*x7405)))),-1);
if(!x7407.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7406.value)+(((1.5707963267949)*(x7407.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7408=IKcos(j4);
IkReal x7409=IKsin(j4);
IkReal x7410=(r00*sj5);
IkReal x7411=(cj5*r01);
IkReal x7412=(r20*sj5);
IkReal x7413=(cj5*r21);
IkReal x7414=(cj5*r11);
IkReal x7415=(r10*sj5);
IkReal x7416=((1.0)*x7408);
IkReal x7417=((1.0)*x7409);
evalcond[0]=(((x7408*x7410))+((x7408*x7411))+(((-1.0)*r02*x7417)));
evalcond[1]=((((-1.0)*r22*x7416))+(((-1.0)*x7412*x7417))+(((-1.0)*x7413*x7417)));
evalcond[2]=((((-1.0)*r12*x7416))+(((-1.0)*x7414*x7417))+(((-1.0)*x7415*x7417)));
evalcond[3]=((-1.0)+(((-1.0)*x7411*x7417))+(((-1.0)*x7410*x7417))+(((-1.0)*r02*x7416)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x7408*x7412))+((x7408*x7413))+(((-1.0)*r22*x7417)));
evalcond[5]=((((-1.0)*r12*x7417))+(((-1.0)*sj1*sj2))+((x7408*x7414))+((x7408*x7415))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7418=((1.0)*sj5);
CheckValue<IkReal> x7419 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x7418))+(((-1.0)*cj5*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7419.valid){
continue;
}
CheckValue<IkReal> x7420=IKPowWithIntegerCheck(IKsign((((cj5*r10))+(((-1.0)*r11*x7418)))),-1);
if(!x7420.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7419.value)+(((1.5707963267949)*(x7420.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7421=IKcos(j4);
IkReal x7422=IKsin(j4);
IkReal x7423=(r00*sj5);
IkReal x7424=(cj5*r01);
IkReal x7425=(r20*sj5);
IkReal x7426=(cj5*r21);
IkReal x7427=(cj5*r11);
IkReal x7428=(r10*sj5);
IkReal x7429=((1.0)*x7421);
IkReal x7430=((1.0)*x7422);
evalcond[0]=((((-1.0)*r02*x7430))+((x7421*x7424))+((x7421*x7423)));
evalcond[1]=((((-1.0)*r22*x7429))+(((-1.0)*x7425*x7430))+(((-1.0)*x7426*x7430)));
evalcond[2]=((((-1.0)*r12*x7429))+(((-1.0)*x7427*x7430))+(((-1.0)*x7428*x7430)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x7429))+(((-1.0)*x7424*x7430))+(((-1.0)*x7423*x7430)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x7430))+((cj1*sj2))+((x7421*x7425))+((x7421*x7426)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r12*x7430))+((x7421*x7428))+((x7421*x7427))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7431=((1.0)*cj5);
IkReal x7432=(((r11*sj5))+(((-1.0)*r10*x7431)));
j4eval[0]=x7432;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r21*x7431))+(((-1.0)*r20*sj5))))));
j4eval[2]=IKsign(x7432);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7433=((1.0)*sj5);
IkReal x7434=(((cj5*r20))+(((-1.0)*r21*x7433)));
j4eval[0]=x7434;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*cj5*r11))+(((-1.0)*r10*x7433))))));
j4eval[2]=IKsign(x7434);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7435=cj5*cj5;
IkReal x7436=r00*r00;
IkReal x7437=(r00*sj5);
IkReal x7438=(cj5*r01);
IkReal x7439=((((2.0)*x7437*x7438))+((x7435*(r01*r01)))+(((-1.0)*x7435*x7436))+(r02*r02)+x7436);
j4eval[0]=x7439;
j4eval[1]=((IKabs(r02))+(IKabs((x7437+x7438))));
j4eval[2]=IKsign(x7439);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7440=cj5*cj5;
IkReal x7441=r00*r00;
IkReal x7442=(r00*sj5);
IkReal x7443=(cj5*r01);
CheckValue<IkReal> x7444 = IKatan2WithCheck(IkReal((x7443+x7442)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7444.valid){
continue;
}
CheckValue<IkReal> x7445=IKPowWithIntegerCheck(IKsign((((x7440*(r01*r01)))+(((-1.0)*x7440*x7441))+(r02*r02)+x7441+(((2.0)*x7442*x7443)))),-1);
if(!x7445.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7444.value)+(((1.5707963267949)*(x7445.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7446=IKcos(j4);
IkReal x7447=IKsin(j4);
IkReal x7448=(r00*sj5);
IkReal x7449=(cj5*r01);
IkReal x7450=(r20*sj5);
IkReal x7451=(cj5*r21);
IkReal x7452=(cj5*r11);
IkReal x7453=(r10*sj5);
IkReal x7454=((1.0)*x7446);
IkReal x7455=((1.0)*x7447);
evalcond[0]=(((x7446*x7449))+((x7446*x7448))+(((-1.0)*r02*x7455)));
evalcond[1]=((((-1.0)*x7450*x7455))+(((-1.0)*x7451*x7455))+(((-1.0)*r22*x7454)));
evalcond[2]=((((-1.0)*x7452*x7455))+(((-1.0)*x7453*x7455))+(((-1.0)*r12*x7454)));
evalcond[3]=((1.0)+(((-1.0)*r02*x7454))+(((-1.0)*x7449*x7455))+(((-1.0)*x7448*x7455)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x7446*x7451))+((x7446*x7450))+(((-1.0)*r22*x7455)));
evalcond[5]=(((x7446*x7452))+((x7446*x7453))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x7455)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7456=((1.0)*sj5);
CheckValue<IkReal> x7457 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r11))+(((-1.0)*r10*x7456)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7457.valid){
continue;
}
CheckValue<IkReal> x7458=IKPowWithIntegerCheck(IKsign((((cj5*r20))+(((-1.0)*r21*x7456)))),-1);
if(!x7458.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7457.value)+(((1.5707963267949)*(x7458.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7459=IKcos(j4);
IkReal x7460=IKsin(j4);
IkReal x7461=(r00*sj5);
IkReal x7462=(cj5*r01);
IkReal x7463=(r20*sj5);
IkReal x7464=(cj5*r21);
IkReal x7465=(cj5*r11);
IkReal x7466=(r10*sj5);
IkReal x7467=((1.0)*x7459);
IkReal x7468=((1.0)*x7460);
evalcond[0]=((((-1.0)*r02*x7468))+((x7459*x7461))+((x7459*x7462)));
evalcond[1]=((((-1.0)*x7464*x7468))+(((-1.0)*r22*x7467))+(((-1.0)*x7463*x7468)));
evalcond[2]=((((-1.0)*r12*x7467))+(((-1.0)*x7466*x7468))+(((-1.0)*x7465*x7468)));
evalcond[3]=((1.0)+(((-1.0)*r02*x7467))+(((-1.0)*x7462*x7468))+(((-1.0)*x7461*x7468)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x7468))+((x7459*x7463))+((x7459*x7464)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x7468))+((x7459*x7465))+((x7459*x7466)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7469=((1.0)*cj5);
CheckValue<IkReal> x7470=IKPowWithIntegerCheck(IKsign((((r11*sj5))+(((-1.0)*r10*x7469)))),-1);
if(!x7470.valid){
continue;
}
CheckValue<IkReal> x7471 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x7469))+(((-1.0)*r20*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7471.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7470.value)))+(x7471.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7472=IKcos(j4);
IkReal x7473=IKsin(j4);
IkReal x7474=(r00*sj5);
IkReal x7475=(cj5*r01);
IkReal x7476=(r20*sj5);
IkReal x7477=(cj5*r21);
IkReal x7478=(cj5*r11);
IkReal x7479=(r10*sj5);
IkReal x7480=((1.0)*x7472);
IkReal x7481=((1.0)*x7473);
evalcond[0]=(((x7472*x7474))+((x7472*x7475))+(((-1.0)*r02*x7481)));
evalcond[1]=((((-1.0)*x7476*x7481))+(((-1.0)*r22*x7480))+(((-1.0)*x7477*x7481)));
evalcond[2]=((((-1.0)*x7479*x7481))+(((-1.0)*x7478*x7481))+(((-1.0)*r12*x7480)));
evalcond[3]=((1.0)+(((-1.0)*x7475*x7481))+(((-1.0)*x7474*x7481))+(((-1.0)*r02*x7480)));
evalcond[4]=(((cj2*sj1))+((x7472*x7476))+((x7472*x7477))+((cj1*sj2))+(((-1.0)*r22*x7481)));
evalcond[5]=(((x7472*x7478))+((x7472*x7479))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x7481)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7484 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x7484)==0){
continue;
}
IkReal x7482=pow(x7484,-0.5);
IkReal x7483=((-1.0)*x7482);
CheckValue<IkReal> x7485 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x7485.valid){
continue;
}
IkReal gconst138=((-1.0)*(x7485.value));
IkReal gconst139=(r10*x7483);
IkReal gconst140=(r11*x7483);
CheckValue<IkReal> x7486 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x7486.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j5+(x7486.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x7490 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x7490.valid){
continue;
}
IkReal x7487=((-1.0)*(x7490.value));
IkReal x7488=x7482;
IkReal x7489=((-1.0)*x7488);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst139;
cj5=gconst140;
j5=x7487;
IkReal gconst138=x7487;
IkReal gconst139=(r10*x7489);
IkReal gconst140=(r11*x7489);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x7494 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x7494.valid){
continue;
}
IkReal x7491=((-1.0)*(x7494.value));
IkReal x7492=x7482;
IkReal x7493=((-1.0)*x7492);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst139;
cj5=gconst140;
j5=x7491;
IkReal gconst138=x7491;
IkReal gconst139=(r10*x7493);
IkReal gconst140=(r11*x7493);
IkReal x7495=r12*r12;
IkReal x7496=((1.0)*cj0);
IkReal x7497=(r02*sj0);
CheckValue<IkReal> x7501=IKPowWithIntegerCheck(((-1.0)+x7495),-1);
if(!x7501.valid){
continue;
}
IkReal x7498=x7501.value;
if((((1.0)+(((-1.0)*x7495)))) < -0.00001)
continue;
IkReal x7499=IKsqrt(((1.0)+(((-1.0)*x7495))));
IkReal x7500=(x7498*x7499);
j4eval[0]=((IKabs(((((-1.0)*x7495*x7496*x7500))+((cj0*x7500))+((r12*x7497*x7500)))))+(IKabs(((((-1.0)*r12*x7496))+x7497))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x7505 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x7505.valid){
continue;
}
IkReal x7502=((-1.0)*(x7505.value));
IkReal x7503=x7482;
IkReal x7504=((-1.0)*x7503);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst139;
cj5=gconst140;
j5=x7502;
IkReal gconst138=x7502;
IkReal gconst139=(r10*x7504);
IkReal gconst140=(r11*x7504);
IkReal x7506=(cj1*r22*sj2);
IkReal x7507=(cj2*r22*sj1);
IkReal x7508=x7482;
IkReal x7509=(r12*x7508);
j4eval[0]=((IKabs((x7506+x7507)))+(IKabs((((x7506*x7509))+((x7507*x7509))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7510=(cj2*sj1);
IkReal x7511=(cj1*sj2);
IkReal x7512=(gconst140*r21);
IkReal x7513=((1.0)*gconst139*r20);
CheckValue<IkReal> x7514=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((gconst139*gconst139)*(r20*r20)))+(((2.0)*gconst139*r20*x7512))+(x7512*x7512))),-1);
if(!x7514.valid){
continue;
}
CheckValue<IkReal> x7515 = IKatan2WithCheck(IkReal((((r22*x7511))+((r22*x7510)))),IkReal(((((-1.0)*x7511*x7512))+(((-1.0)*x7510*x7513))+(((-1.0)*x7510*x7512))+(((-1.0)*x7511*x7513)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7515.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7514.value)))+(x7515.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7516=IKsin(j4);
IkReal x7517=IKcos(j4);
IkReal x7518=(gconst140*r11);
IkReal x7519=((1.0)*sj0);
IkReal x7520=(gconst140*r01);
IkReal x7521=(gconst140*r21);
IkReal x7522=(cj1*cj2);
IkReal x7523=((1.0)*cj0);
IkReal x7524=(sj1*sj2);
IkReal x7525=((1.0)*x7517);
IkReal x7526=((1.0)*x7516);
IkReal x7527=(gconst139*x7517);
evalcond[0]=((((-1.0)*x7521*x7526))+(((-1.0)*gconst139*r20*x7526))+(((-1.0)*r22*x7525)));
evalcond[1]=((((-1.0)*gconst139*r00*x7526))+(((-1.0)*r02*x7525))+(((-1.0)*x7520*x7526))+(((-1.0)*x7523)));
evalcond[2]=((((-1.0)*gconst139*r10*x7526))+(((-1.0)*x7518*x7526))+(((-1.0)*x7519))+(((-1.0)*r12*x7525)));
evalcond[3]=(((cj2*sj1))+((r20*x7527))+((cj1*sj2))+((x7517*x7521))+(((-1.0)*r22*x7526)));
evalcond[4]=(((r00*x7527))+((sj0*x7524))+(((-1.0)*r02*x7526))+((x7517*x7520))+(((-1.0)*x7519*x7522)));
evalcond[5]=((((-1.0)*x7523*x7524))+((x7517*x7518))+((r10*x7527))+((cj0*x7522))+(((-1.0)*r12*x7526)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7528=((1.0)*sj0);
CheckValue<IkReal> x7529=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst139*r21))+((gconst140*r20)))),-1);
if(!x7529.valid){
continue;
}
CheckValue<IkReal> x7530 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r12))+((r02*sj0)))),IkReal(((((-1.0)*gconst139*r00*x7528))+(((-1.0)*gconst140*r01*x7528))+((cj0*gconst139*r10))+((cj0*gconst140*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7530.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7529.value)))+(x7530.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7531=IKsin(j4);
IkReal x7532=IKcos(j4);
IkReal x7533=(gconst140*r11);
IkReal x7534=((1.0)*sj0);
IkReal x7535=(gconst140*r01);
IkReal x7536=(gconst140*r21);
IkReal x7537=(cj1*cj2);
IkReal x7538=((1.0)*cj0);
IkReal x7539=(sj1*sj2);
IkReal x7540=((1.0)*x7532);
IkReal x7541=((1.0)*x7531);
IkReal x7542=(gconst139*x7532);
evalcond[0]=((((-1.0)*r22*x7540))+(((-1.0)*x7536*x7541))+(((-1.0)*gconst139*r20*x7541)));
evalcond[1]=((((-1.0)*gconst139*r00*x7541))+(((-1.0)*x7535*x7541))+(((-1.0)*x7538))+(((-1.0)*r02*x7540)));
evalcond[2]=((((-1.0)*x7533*x7541))+(((-1.0)*gconst139*r10*x7541))+(((-1.0)*x7534))+(((-1.0)*r12*x7540)));
evalcond[3]=(((r20*x7542))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x7541))+((x7532*x7536)));
evalcond[4]=((((-1.0)*x7534*x7537))+((sj0*x7539))+((r00*x7542))+((x7532*x7535))+(((-1.0)*r02*x7541)));
evalcond[5]=(((r10*x7542))+((cj0*x7537))+(((-1.0)*x7538*x7539))+(((-1.0)*r12*x7541))+((x7532*x7533)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7543=((1.0)*gconst140);
CheckValue<IkReal> x7544 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x7543))+(((-1.0)*gconst139*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7544.valid){
continue;
}
CheckValue<IkReal> x7545=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x7543))+((gconst139*r01)))),-1);
if(!x7545.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7544.value)+(((1.5707963267949)*(x7545.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7546=IKsin(j4);
IkReal x7547=IKcos(j4);
IkReal x7548=(gconst140*r11);
IkReal x7549=((1.0)*sj0);
IkReal x7550=(gconst140*r01);
IkReal x7551=(gconst140*r21);
IkReal x7552=(cj1*cj2);
IkReal x7553=((1.0)*cj0);
IkReal x7554=(sj1*sj2);
IkReal x7555=((1.0)*x7547);
IkReal x7556=((1.0)*x7546);
IkReal x7557=(gconst139*x7547);
evalcond[0]=((((-1.0)*x7551*x7556))+(((-1.0)*r22*x7555))+(((-1.0)*gconst139*r20*x7556)));
evalcond[1]=((((-1.0)*gconst139*r00*x7556))+(((-1.0)*x7550*x7556))+(((-1.0)*x7553))+(((-1.0)*r02*x7555)));
evalcond[2]=((((-1.0)*gconst139*r10*x7556))+(((-1.0)*x7549))+(((-1.0)*r12*x7555))+(((-1.0)*x7548*x7556)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x7547*x7551))+(((-1.0)*r22*x7556))+((r20*x7557)));
evalcond[4]=(((sj0*x7554))+((x7547*x7550))+((r00*x7557))+(((-1.0)*r02*x7556))+(((-1.0)*x7549*x7552)));
evalcond[5]=(((r10*x7557))+((cj0*x7552))+((x7547*x7548))+(((-1.0)*x7553*x7554))+(((-1.0)*r12*x7556)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7560 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x7560)==0){
continue;
}
IkReal x7558=pow(x7560,-0.5);
IkReal x7559=((1.0)*x7558);
CheckValue<IkReal> x7561 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x7561.valid){
continue;
}
IkReal gconst141=((3.14159265358979)+(((-1.0)*(x7561.value))));
IkReal gconst142=(r10*x7559);
IkReal gconst143=(r11*x7559);
CheckValue<IkReal> x7562 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x7562.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5+(x7562.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
CheckValue<IkReal> x7566 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x7566.valid){
continue;
}
IkReal x7563=((1.0)*(x7566.value));
IkReal x7564=x7558;
IkReal x7565=((1.0)*x7564);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7563)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7563)));
IkReal gconst142=(r10*x7565);
IkReal gconst143=(r11*x7565);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x7570 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x7570.valid){
continue;
}
IkReal x7567=((1.0)*(x7570.value));
IkReal x7568=x7558;
IkReal x7569=((1.0)*x7568);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7567)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7567)));
IkReal gconst142=(r10*x7569);
IkReal gconst143=(r11*x7569);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7571=((1.0)*sj0);
CheckValue<IkReal> x7572 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r12))+((r02*sj0)))),IkReal(((((-1.0)*gconst143*r01*x7571))+((cj0*gconst143*r11))+((cj0*gconst142*r10))+(((-1.0)*gconst142*r00*x7571)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7572.valid){
continue;
}
CheckValue<IkReal> x7573=IKPowWithIntegerCheck(IKsign((((gconst143*r20))+(((-1.0)*gconst142*r21)))),-1);
if(!x7573.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7572.value)+(((1.5707963267949)*(x7573.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7574=IKsin(j4);
IkReal x7575=IKcos(j4);
IkReal x7576=((1.0)*sj0);
IkReal x7577=(cj1*cj2);
IkReal x7578=((1.0)*cj0);
IkReal x7579=(sj1*sj2);
IkReal x7580=((1.0)*x7575);
IkReal x7581=(gconst142*x7575);
IkReal x7582=(gconst143*x7575);
IkReal x7583=((1.0)*x7574);
evalcond[0]=((((-1.0)*r22*x7580))+(((-1.0)*gconst142*r20*x7583))+(((-1.0)*gconst143*r21*x7583)));
evalcond[1]=((((-1.0)*x7578))+(((-1.0)*gconst142*r00*x7583))+(((-1.0)*gconst143*r01*x7583))+(((-1.0)*r02*x7580)));
evalcond[2]=((((-1.0)*gconst143*r11*x7583))+(((-1.0)*x7576))+(((-1.0)*gconst142*r10*x7583))+(((-1.0)*r12*x7580)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x7583))+((r21*x7582))+((r20*x7581)));
evalcond[4]=((((-1.0)*x7576*x7577))+(((-1.0)*r02*x7583))+((r00*x7581))+((r01*x7582))+((sj0*x7579)));
evalcond[5]=((((-1.0)*x7578*x7579))+((r10*x7581))+(((-1.0)*r12*x7583))+((r11*x7582))+((cj0*x7577)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7584=((1.0)*sj0);
CheckValue<IkReal> x7585=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst143*r00))+((gconst142*r01)))),-1);
if(!x7585.valid){
continue;
}
CheckValue<IkReal> x7586 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst142*r20*x7584))+(((-1.0)*gconst143*r21*x7584)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7586.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7585.value)))+(x7586.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7587=IKsin(j4);
IkReal x7588=IKcos(j4);
IkReal x7589=((1.0)*sj0);
IkReal x7590=(cj1*cj2);
IkReal x7591=((1.0)*cj0);
IkReal x7592=(sj1*sj2);
IkReal x7593=((1.0)*x7588);
IkReal x7594=(gconst142*x7588);
IkReal x7595=(gconst143*x7588);
IkReal x7596=((1.0)*x7587);
evalcond[0]=((((-1.0)*gconst143*r21*x7596))+(((-1.0)*gconst142*r20*x7596))+(((-1.0)*r22*x7593)));
evalcond[1]=((((-1.0)*gconst142*r00*x7596))+(((-1.0)*gconst143*r01*x7596))+(((-1.0)*r02*x7593))+(((-1.0)*x7591)));
evalcond[2]=((((-1.0)*gconst143*r11*x7596))+(((-1.0)*r12*x7593))+(((-1.0)*x7589))+(((-1.0)*gconst142*r10*x7596)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r20*x7594))+(((-1.0)*r22*x7596))+((r21*x7595)));
evalcond[4]=((((-1.0)*x7589*x7590))+((sj0*x7592))+(((-1.0)*r02*x7596))+((r00*x7594))+((r01*x7595)));
evalcond[5]=((((-1.0)*x7591*x7592))+(((-1.0)*r12*x7596))+((r10*x7594))+((cj0*x7590))+((r11*x7595)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7597=((1.0)*cj0);
CheckValue<IkReal> x7598=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst142*r11))+((gconst143*r10)))),-1);
if(!x7598.valid){
continue;
}
CheckValue<IkReal> x7599 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*gconst143*r21*x7597))+(((-1.0)*gconst142*r20*x7597)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7599.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7598.value)))+(x7599.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7600=IKsin(j4);
IkReal x7601=IKcos(j4);
IkReal x7602=((1.0)*sj0);
IkReal x7603=(cj1*cj2);
IkReal x7604=((1.0)*cj0);
IkReal x7605=(sj1*sj2);
IkReal x7606=((1.0)*x7601);
IkReal x7607=(gconst142*x7601);
IkReal x7608=(gconst143*x7601);
IkReal x7609=((1.0)*x7600);
evalcond[0]=((((-1.0)*r22*x7606))+(((-1.0)*gconst142*r20*x7609))+(((-1.0)*gconst143*r21*x7609)));
evalcond[1]=((((-1.0)*x7604))+(((-1.0)*gconst142*r00*x7609))+(((-1.0)*r02*x7606))+(((-1.0)*gconst143*r01*x7609)));
evalcond[2]=((((-1.0)*x7602))+(((-1.0)*gconst142*r10*x7609))+(((-1.0)*gconst143*r11*x7609))+(((-1.0)*r12*x7606)));
evalcond[3]=(((r20*x7607))+((cj2*sj1))+(((-1.0)*r22*x7609))+((cj1*sj2))+((r21*x7608)));
evalcond[4]=(((r00*x7607))+((r01*x7608))+(((-1.0)*r02*x7609))+(((-1.0)*x7602*x7603))+((sj0*x7605)));
evalcond[5]=(((r11*x7608))+((r10*x7607))+(((-1.0)*x7604*x7605))+((cj0*x7603))+(((-1.0)*r12*x7609)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x7610=((1.0)*cj5);
IkReal x7611=(((r01*sj5))+(((-1.0)*r00*x7610)));
j4eval[0]=x7611;
j4eval[1]=IKsign(x7611);
j4eval[2]=((IKabs(((((-1.0)*r21*x7610))+(((-1.0)*r20*sj5)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x7612=((1.0)*sj5);
IkReal x7613=(((cj5*r20))+(((-1.0)*r21*x7612)));
j4eval[0]=x7613;
j4eval[1]=IKsign(x7613);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*r00*x7612))+(((-1.0)*cj5*r01))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x7614=(cj2*sj1);
IkReal x7615=(r10*sj5);
IkReal x7616=(cj5*r11);
IkReal x7617=(cj1*sj2);
IkReal x7618=((((-1.0)*r01*sj5))+((cj5*r00)));
j4eval[0]=x7618;
j4eval[1]=IKsign(x7618);
j4eval[2]=((IKabs((((x7615*x7617))+((x7616*x7617))+((x7614*x7615))+((x7614*x7616)))))+(IKabs((((r12*x7614))+((r12*x7617))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7619=(cj2*sj1);
IkReal x7620=(r10*sj5);
IkReal x7621=(cj5*r11);
IkReal x7622=(cj1*sj2);
CheckValue<IkReal> x7623=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj5))+((cj5*r00)))),-1);
if(!x7623.valid){
continue;
}
CheckValue<IkReal> x7624 = IKatan2WithCheck(IkReal((((x7621*x7622))+((x7620*x7622))+((x7619*x7621))+((x7619*x7620)))),IkReal((((r12*x7619))+((r12*x7622)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7624.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7623.value)))+(x7624.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7625=IKcos(j4);
IkReal x7626=IKsin(j4);
IkReal x7627=(r00*sj5);
IkReal x7628=(cj5*r01);
IkReal x7629=(r20*sj5);
IkReal x7630=(cj5*r21);
IkReal x7631=(cj5*r11);
IkReal x7632=(r10*sj5);
IkReal x7633=((1.0)*x7625);
IkReal x7634=((1.0)*x7626);
evalcond[0]=(((x7625*x7632))+((x7625*x7631))+(((-1.0)*r12*x7634)));
evalcond[1]=((((-1.0)*r22*x7633))+(((-1.0)*x7630*x7634))+(((-1.0)*x7629*x7634)));
evalcond[2]=((((-1.0)*x7628*x7634))+(((-1.0)*r02*x7633))+(((-1.0)*x7627*x7634)));
evalcond[3]=((-1.0)+(((-1.0)*x7631*x7634))+(((-1.0)*x7632*x7634))+(((-1.0)*r12*x7633)));
evalcond[4]=(((x7625*x7629))+((cj2*sj1))+(((-1.0)*r22*x7634))+((cj1*sj2))+((x7625*x7630)));
evalcond[5]=(((x7625*x7628))+((x7625*x7627))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x7634)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7635=((1.0)*sj5);
CheckValue<IkReal> x7636 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x7635))+(((-1.0)*cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7636.valid){
continue;
}
CheckValue<IkReal> x7637=IKPowWithIntegerCheck(IKsign((((cj5*r20))+(((-1.0)*r21*x7635)))),-1);
if(!x7637.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7636.value)+(((1.5707963267949)*(x7637.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7638=IKcos(j4);
IkReal x7639=IKsin(j4);
IkReal x7640=(r00*sj5);
IkReal x7641=(cj5*r01);
IkReal x7642=(r20*sj5);
IkReal x7643=(cj5*r21);
IkReal x7644=(cj5*r11);
IkReal x7645=(r10*sj5);
IkReal x7646=((1.0)*x7638);
IkReal x7647=((1.0)*x7639);
evalcond[0]=(((x7638*x7645))+((x7638*x7644))+(((-1.0)*r12*x7647)));
evalcond[1]=((((-1.0)*r22*x7646))+(((-1.0)*x7643*x7647))+(((-1.0)*x7642*x7647)));
evalcond[2]=((((-1.0)*r02*x7646))+(((-1.0)*x7640*x7647))+(((-1.0)*x7641*x7647)));
evalcond[3]=((-1.0)+(((-1.0)*x7644*x7647))+(((-1.0)*r12*x7646))+(((-1.0)*x7645*x7647)));
evalcond[4]=((((-1.0)*r22*x7647))+((cj2*sj1))+((cj1*sj2))+((x7638*x7643))+((x7638*x7642)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x7638*x7641))+((x7638*x7640))+(((-1.0)*r02*x7647)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7648=((1.0)*cj5);
CheckValue<IkReal> x7649 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x7648))+(((-1.0)*r20*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7649.valid){
continue;
}
CheckValue<IkReal> x7650=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x7648))+((r01*sj5)))),-1);
if(!x7650.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7649.value)+(((1.5707963267949)*(x7650.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7651=IKcos(j4);
IkReal x7652=IKsin(j4);
IkReal x7653=(r00*sj5);
IkReal x7654=(cj5*r01);
IkReal x7655=(r20*sj5);
IkReal x7656=(cj5*r21);
IkReal x7657=(cj5*r11);
IkReal x7658=(r10*sj5);
IkReal x7659=((1.0)*x7651);
IkReal x7660=((1.0)*x7652);
evalcond[0]=((((-1.0)*r12*x7660))+((x7651*x7657))+((x7651*x7658)));
evalcond[1]=((((-1.0)*r22*x7659))+(((-1.0)*x7656*x7660))+(((-1.0)*x7655*x7660)));
evalcond[2]=((((-1.0)*r02*x7659))+(((-1.0)*x7653*x7660))+(((-1.0)*x7654*x7660)));
evalcond[3]=((-1.0)+(((-1.0)*x7657*x7660))+(((-1.0)*x7658*x7660))+(((-1.0)*r12*x7659)));
evalcond[4]=(((cj2*sj1))+((x7651*x7656))+((x7651*x7655))+((cj1*sj2))+(((-1.0)*r22*x7660)));
evalcond[5]=(((x7651*x7653))+((x7651*x7654))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x7660)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x7661=((1.0)*sj5);
IkReal x7662=((((-1.0)*r01*x7661))+((cj5*r00)));
j4eval[0]=x7662;
j4eval[1]=IKsign(x7662);
j4eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*cj5*r21))+(((-1.0)*r20*x7661))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x7663=((1.0)*cj5);
IkReal x7664=(((r21*sj5))+(((-1.0)*r20*x7663)));
j4eval[0]=x7664;
j4eval[1]=((IKabs(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7663)))))+(IKabs(r02)));
j4eval[2]=IKsign(x7664);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x7665=cj5*cj5;
IkReal x7666=r10*r10;
IkReal x7667=(cj5*r11);
IkReal x7668=(r10*sj5);
IkReal x7669=((r12*r12)+(((-1.0)*x7665*x7666))+(((2.0)*x7667*x7668))+((x7665*(r11*r11)))+x7666);
j4eval[0]=x7669;
j4eval[1]=((IKabs(r12))+(IKabs((x7668+x7667))));
j4eval[2]=IKsign(x7669);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7670=cj5*cj5;
IkReal x7671=r10*r10;
IkReal x7672=(r10*sj5);
IkReal x7673=(cj5*r11);
CheckValue<IkReal> x7674 = IKatan2WithCheck(IkReal((x7672+x7673)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x7674.valid){
continue;
}
CheckValue<IkReal> x7675=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((2.0)*x7672*x7673))+(((-1.0)*x7670*x7671))+((x7670*(r11*r11)))+x7671)),-1);
if(!x7675.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7674.value)+(((1.5707963267949)*(x7675.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7676=IKcos(j4);
IkReal x7677=IKsin(j4);
IkReal x7678=(r00*sj5);
IkReal x7679=(cj5*r01);
IkReal x7680=(r20*sj5);
IkReal x7681=(cj5*r21);
IkReal x7682=(cj5*r11);
IkReal x7683=(r10*sj5);
IkReal x7684=((1.0)*x7676);
IkReal x7685=((1.0)*x7677);
evalcond[0]=(((x7676*x7683))+((x7676*x7682))+(((-1.0)*r12*x7685)));
evalcond[1]=((((-1.0)*r22*x7684))+(((-1.0)*x7681*x7685))+(((-1.0)*x7680*x7685)));
evalcond[2]=((((-1.0)*x7679*x7685))+(((-1.0)*x7678*x7685))+(((-1.0)*r02*x7684)));
evalcond[3]=((1.0)+(((-1.0)*x7682*x7685))+(((-1.0)*r12*x7684))+(((-1.0)*x7683*x7685)));
evalcond[4]=(((cj2*sj1))+((x7676*x7681))+((x7676*x7680))+((cj1*sj2))+(((-1.0)*r22*x7685)));
evalcond[5]=((((-1.0)*sj1*sj2))+((cj1*cj2))+((x7676*x7679))+((x7676*x7678))+(((-1.0)*r02*x7685)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7686=((1.0)*cj5);
CheckValue<IkReal> x7687 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*x7686))+(((-1.0)*r00*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7687.valid){
continue;
}
CheckValue<IkReal> x7688=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x7686))+((r21*sj5)))),-1);
if(!x7688.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7687.value)+(((1.5707963267949)*(x7688.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7689=IKcos(j4);
IkReal x7690=IKsin(j4);
IkReal x7691=(r00*sj5);
IkReal x7692=(cj5*r01);
IkReal x7693=(r20*sj5);
IkReal x7694=(cj5*r21);
IkReal x7695=(cj5*r11);
IkReal x7696=(r10*sj5);
IkReal x7697=((1.0)*x7689);
IkReal x7698=((1.0)*x7690);
evalcond[0]=(((x7689*x7696))+((x7689*x7695))+(((-1.0)*r12*x7698)));
evalcond[1]=((((-1.0)*x7693*x7698))+(((-1.0)*r22*x7697))+(((-1.0)*x7694*x7698)));
evalcond[2]=((((-1.0)*x7691*x7698))+(((-1.0)*r02*x7697))+(((-1.0)*x7692*x7698)));
evalcond[3]=((1.0)+(((-1.0)*x7695*x7698))+(((-1.0)*x7696*x7698))+(((-1.0)*r12*x7697)));
evalcond[4]=(((x7689*x7694))+((x7689*x7693))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x7698)));
evalcond[5]=(((x7689*x7692))+((x7689*x7691))+(((-1.0)*r02*x7698))+(((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7699=((1.0)*sj5);
CheckValue<IkReal> x7700=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7699))+((cj5*r00)))),-1);
if(!x7700.valid){
continue;
}
CheckValue<IkReal> x7701 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*cj5*r21))+(((-1.0)*r20*x7699)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7701.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7700.value)))+(x7701.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7702=IKcos(j4);
IkReal x7703=IKsin(j4);
IkReal x7704=(r00*sj5);
IkReal x7705=(cj5*r01);
IkReal x7706=(r20*sj5);
IkReal x7707=(cj5*r21);
IkReal x7708=(cj5*r11);
IkReal x7709=(r10*sj5);
IkReal x7710=((1.0)*x7702);
IkReal x7711=((1.0)*x7703);
evalcond[0]=((((-1.0)*r12*x7711))+((x7702*x7709))+((x7702*x7708)));
evalcond[1]=((((-1.0)*r22*x7710))+(((-1.0)*x7707*x7711))+(((-1.0)*x7706*x7711)));
evalcond[2]=((((-1.0)*x7705*x7711))+(((-1.0)*r02*x7710))+(((-1.0)*x7704*x7711)));
evalcond[3]=((1.0)+(((-1.0)*x7708*x7711))+(((-1.0)*r12*x7710))+(((-1.0)*x7709*x7711)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x7711))+((cj1*sj2))+((x7702*x7706))+((x7702*x7707)));
evalcond[5]=((((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*r02*x7711))+((x7702*x7704))+((x7702*x7705)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7712=((-1.0)*py);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x7712);
rxp0_2=(py*r00);
rxp1_0=(r21*x7712);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7713=((-1.0)*py);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x7713);
rxp0_2=(py*r00);
rxp1_0=(r21*x7713);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((cj5*r21))+((r20*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7714=((-1.0)*py);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x7714);
rxp0_2=(py*r00);
rxp1_0=(r21*x7714);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((r00*sj5))+((cj5*r01)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x7717=IKPowWithIntegerCheck((((r00*sj5))+((cj5*r01))),-1);
if(!x7717.valid){
continue;
}
IkReal x7715=x7717.value;
IkReal x7716=(sj0*x7715);
cj4array[0]=((((-1.0)*sj1*sj2*x7716))+((cj1*cj2*x7716)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x7718=IKsin(j4);
IkReal x7719=IKcos(j4);
IkReal x7720=(cj5*r21);
IkReal x7721=(r20*sj5);
IkReal x7722=((1.0)*x7718);
evalcond[0]=((-1.0)*r12*x7718);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r12*x7719)));
evalcond[2]=((((-1.0)*x7720*x7722))+(((-1.0)*x7721*x7722)));
evalcond[3]=((((-1.0)*cj5*r01*x7722))+(((-1.0)*r00*sj5*x7722)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x7719*x7720))+((x7719*x7721)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x7725=IKPowWithIntegerCheck((((cj5*r21))+((r20*sj5))),-1);
if(!x7725.valid){
continue;
}
IkReal x7723=x7725.value;
IkReal x7724=((1.0)*x7723);
cj4array[0]=((((-1.0)*cj2*sj1*x7724))+(((-1.0)*cj1*sj2*x7724)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x7726=IKsin(j4);
IkReal x7727=IKcos(j4);
IkReal x7728=((1.0)*sj0);
IkReal x7729=(r00*sj5);
IkReal x7730=(cj5*r01);
IkReal x7731=((1.0)*x7726);
evalcond[0]=((-1.0)*r12*x7726);
evalcond[1]=((((-1.0)*r12*x7727))+(((-1.0)*x7728)));
evalcond[2]=((((-1.0)*r20*sj5*x7731))+(((-1.0)*cj5*r21*x7731)));
evalcond[3]=((((-1.0)*x7730*x7731))+(((-1.0)*x7729*x7731)));
evalcond[4]=((((-1.0)*cj1*cj2*x7728))+((x7727*x7730))+((sj0*sj1*sj2))+((x7727*x7729)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x7732=IKPowWithIntegerCheck(r12,-1);
if(!x7732.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x7732.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x7733=IKsin(j4);
IkReal x7734=IKcos(j4);
IkReal x7735=(cj5*r21);
IkReal x7736=(r00*sj5);
IkReal x7737=(cj5*r01);
IkReal x7738=(r20*sj5);
IkReal x7739=((1.0)*x7733);
evalcond[0]=((-1.0)*r12*x7733);
evalcond[1]=((((-1.0)*x7735*x7739))+(((-1.0)*x7738*x7739)));
evalcond[2]=((((-1.0)*x7736*x7739))+(((-1.0)*x7737*x7739)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x7734*x7735))+((x7734*x7738)));
evalcond[4]=((((-1.0)*cj1*cj2*sj0))+((x7734*x7737))+((x7734*x7736))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7740=((1.0)*sj0);
CheckValue<IkReal> x7741=IKPowWithIntegerCheck(IKsign((((cj5*r20))+(((-1.0)*r21*sj5)))),-1);
if(!x7741.valid){
continue;
}
CheckValue<IkReal> x7742 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r12))+((r02*sj0)))),IkReal(((((-1.0)*cj5*r01*x7740))+((cj0*cj5*r11))+((cj0*r10*sj5))+(((-1.0)*r00*sj5*x7740)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7742.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7741.value)))+(x7742.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7743=IKsin(j4);
IkReal x7744=IKcos(j4);
IkReal x7745=(r00*sj5);
IkReal x7746=(cj5*r01);
IkReal x7747=(r20*sj5);
IkReal x7748=(cj5*r21);
IkReal x7749=(cj5*r11);
IkReal x7750=((1.0)*sj0);
IkReal x7751=(r10*sj5);
IkReal x7752=(cj1*cj2);
IkReal x7753=((1.0)*cj0);
IkReal x7754=(sj1*sj2);
IkReal x7755=((1.0)*x7744);
IkReal x7756=((1.0)*x7743);
evalcond[0]=((((-1.0)*r22*x7755))+(((-1.0)*x7747*x7756))+(((-1.0)*x7748*x7756)));
evalcond[1]=((((-1.0)*r02*x7755))+(((-1.0)*x7753))+(((-1.0)*x7746*x7756))+(((-1.0)*x7745*x7756)));
evalcond[2]=((((-1.0)*x7750))+(((-1.0)*r12*x7755))+(((-1.0)*x7751*x7756))+(((-1.0)*x7749*x7756)));
evalcond[3]=((((-1.0)*r22*x7756))+((cj2*sj1))+((cj1*sj2))+((x7744*x7747))+((x7744*x7748)));
evalcond[4]=((((-1.0)*r02*x7756))+((sj0*x7754))+(((-1.0)*x7750*x7752))+((x7744*x7746))+((x7744*x7745)));
evalcond[5]=((((-1.0)*r12*x7756))+((cj0*x7752))+(((-1.0)*x7753*x7754))+((x7744*x7751))+((x7744*x7749)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7757=((1.0)*sj0);
CheckValue<IkReal> x7758=IKPowWithIntegerCheck(IKsign((((r01*sj5))+(((-1.0)*cj5*r00)))),-1);
if(!x7758.valid){
continue;
}
CheckValue<IkReal> x7759 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*cj5*r21*x7757))+(((-1.0)*r20*sj5*x7757)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7759.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7758.value)))+(x7759.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7760=IKsin(j4);
IkReal x7761=IKcos(j4);
IkReal x7762=(r00*sj5);
IkReal x7763=(cj5*r01);
IkReal x7764=(r20*sj5);
IkReal x7765=(cj5*r21);
IkReal x7766=(cj5*r11);
IkReal x7767=((1.0)*sj0);
IkReal x7768=(r10*sj5);
IkReal x7769=(cj1*cj2);
IkReal x7770=((1.0)*cj0);
IkReal x7771=(sj1*sj2);
IkReal x7772=((1.0)*x7761);
IkReal x7773=((1.0)*x7760);
evalcond[0]=((((-1.0)*r22*x7772))+(((-1.0)*x7764*x7773))+(((-1.0)*x7765*x7773)));
evalcond[1]=((((-1.0)*r02*x7772))+(((-1.0)*x7770))+(((-1.0)*x7762*x7773))+(((-1.0)*x7763*x7773)));
evalcond[2]=((((-1.0)*x7766*x7773))+(((-1.0)*x7768*x7773))+(((-1.0)*x7767))+(((-1.0)*r12*x7772)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7773))+((cj1*sj2))+((x7761*x7765))+((x7761*x7764)));
evalcond[4]=((((-1.0)*r02*x7773))+(((-1.0)*x7767*x7769))+((sj0*x7771))+((x7761*x7763))+((x7761*x7762)));
evalcond[5]=((((-1.0)*x7770*x7771))+((cj0*x7769))+((x7761*x7768))+((x7761*x7766))+(((-1.0)*r12*x7773)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7774=((1.0)*cj0);
CheckValue<IkReal> x7775 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*r20*sj5*x7774))+(((-1.0)*cj5*r21*x7774)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7775.valid){
continue;
}
CheckValue<IkReal> x7776=IKPowWithIntegerCheck(IKsign((((cj5*r10))+(((-1.0)*r11*sj5)))),-1);
if(!x7776.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7775.value)+(((1.5707963267949)*(x7776.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7777=IKsin(j4);
IkReal x7778=IKcos(j4);
IkReal x7779=(r00*sj5);
IkReal x7780=(cj5*r01);
IkReal x7781=(r20*sj5);
IkReal x7782=(cj5*r21);
IkReal x7783=(cj5*r11);
IkReal x7784=((1.0)*sj0);
IkReal x7785=(r10*sj5);
IkReal x7786=(cj1*cj2);
IkReal x7787=((1.0)*cj0);
IkReal x7788=(sj1*sj2);
IkReal x7789=((1.0)*x7778);
IkReal x7790=((1.0)*x7777);
evalcond[0]=((((-1.0)*r22*x7789))+(((-1.0)*x7782*x7790))+(((-1.0)*x7781*x7790)));
evalcond[1]=((((-1.0)*x7779*x7790))+(((-1.0)*r02*x7789))+(((-1.0)*x7780*x7790))+(((-1.0)*x7787)));
evalcond[2]=((((-1.0)*x7785*x7790))+(((-1.0)*x7783*x7790))+(((-1.0)*x7784))+(((-1.0)*r12*x7789)));
evalcond[3]=((((-1.0)*r22*x7790))+((x7778*x7782))+((x7778*x7781))+((cj2*sj1))+((cj1*sj2)));
evalcond[4]=(((x7778*x7780))+((sj0*x7788))+(((-1.0)*x7784*x7786))+((x7778*x7779))+(((-1.0)*r02*x7790)));
evalcond[5]=(((x7778*x7785))+((x7778*x7783))+(((-1.0)*x7787*x7788))+(((-1.0)*r12*x7790))+((cj0*x7786)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7791=cj5*cj5;
IkReal x7792=r20*r20;
IkReal x7793=(r20*sj5);
IkReal x7794=(cj5*r21);
IkReal x7795=(cj2*sj1);
IkReal x7796=((1.0)*cj1*sj2);
CheckValue<IkReal> x7797=IKPowWithIntegerCheck(IKsign(((((2.0)*x7793*x7794))+(r22*r22)+((x7791*(r21*r21)))+(((-1.0)*x7791*x7792))+x7792)),-1);
if(!x7797.valid){
continue;
}
CheckValue<IkReal> x7798 = IKatan2WithCheck(IkReal((((r22*x7795))+((cj1*r22*sj2)))),IkReal(((((-1.0)*x7793*x7796))+(((-1.0)*x7793*x7795))+(((-1.0)*x7794*x7796))+(((-1.0)*x7794*x7795)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7798.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7797.value)))+(x7798.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x7799=IKsin(j4);
IkReal x7800=IKcos(j4);
IkReal x7801=((1.0)*r22);
IkReal x7802=(cj5*r21);
IkReal x7803=(r20*sj5);
IkReal x7804=((1.0)*x7799);
evalcond[0]=((((-1.0)*x7802*x7804))+(((-1.0)*x7800*x7801))+(((-1.0)*x7803*x7804)));
evalcond[1]=(((cj2*sj1))+((x7800*x7803))+((x7800*x7802))+((cj1*sj2))+(((-1.0)*x7799*x7801)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7805=((1.0)*cj4);
IkReal x7806=((1.0)*sj4*sj5);
IkReal x7807=((1.0)*cj5*sj4);
if( IKabs(((((-1.0)*r10*x7806))+(((-1.0)*r12*x7805))+(((-1.0)*r11*x7807)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r02*x7805))+(((-1.0)*r00*x7806))+(((-1.0)*r01*x7807)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x7806))+(((-1.0)*r12*x7805))+(((-1.0)*r11*x7807))))+IKsqr(((((-1.0)*r02*x7805))+(((-1.0)*r00*x7806))+(((-1.0)*r01*x7807))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r10*x7806))+(((-1.0)*r12*x7805))+(((-1.0)*r11*x7807))), ((((-1.0)*r02*x7805))+(((-1.0)*r00*x7806))+(((-1.0)*r01*x7807))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x7808=IKsin(j0);
IkReal x7809=IKcos(j0);
IkReal x7810=(cj4*sj5);
IkReal x7811=(cj5*r00);
IkReal x7812=(cj1*sj2);
IkReal x7813=(cj5*r01);
IkReal x7814=(cj1*cj2);
IkReal x7815=(cj5*r10);
IkReal x7816=(cj2*sj1);
IkReal x7817=((1.0)*sj5);
IkReal x7818=((1.0)*sj4);
IkReal x7819=((1.0)*cj4);
IkReal x7820=((0.1005)*sj5);
IkReal x7821=(cj5*r11);
IkReal x7822=(sj1*x7809);
IkReal x7823=((0.3495)*x7808);
IkReal x7824=((1.0)*x7809);
IkReal x7825=(sj4*x7817);
IkReal x7826=((1.0)*x7808);
IkReal x7827=(sj1*x7808);
evalcond[0]=((((-1.0)*r00*x7825))+(((-1.0)*r02*x7819))+(((-1.0)*x7824))+(((-1.0)*x7813*x7818)));
evalcond[1]=((((-1.0)*r10*x7825))+(((-1.0)*r12*x7819))+(((-1.0)*x7826))+(((-1.0)*x7818*x7821)));
evalcond[2]=(x7811+(((-1.0)*r01*x7817))+((x7808*x7816))+((x7808*x7812)));
evalcond[3]=((((-1.0)*x7816*x7824))+(((-1.0)*x7812*x7824))+x7815+(((-1.0)*r11*x7817)));
evalcond[4]=(((sj2*x7827))+(((-1.0)*r02*x7818))+((cj4*x7813))+((r00*x7810))+(((-1.0)*x7814*x7826)));
evalcond[5]=(((r10*x7810))+(((-1.0)*r12*x7818))+((x7809*x7814))+((cj4*x7821))+(((-1.0)*sj2*x7822)));
evalcond[6]=((((-0.3484)*x7827))+(((0.1002)*x7809))+(((-1.0)*x7816*x7823))+(((-1.0)*x7812*x7823))+(((-1.0)*px))+((r01*x7820))+(((-0.1005)*x7811)));
evalcond[7]=((((0.3484)*x7822))+((r11*x7820))+(((0.1002)*x7808))+(((-1.0)*py))+(((0.3495)*x7809*x7816))+(((0.3495)*x7809*x7812))+(((-0.1005)*x7815)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x7828=IKPowWithIntegerCheck(IKsign((((cj2*sj1))+((cj1*sj2)))),-1);
if(!x7828.valid){
continue;
}
CheckValue<IkReal> x7829 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal((((cj5*r10))+(((-1.0)*r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7829.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7828.value)))+(x7829.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7830=IKsin(j0);
IkReal x7831=IKcos(j0);
IkReal x7832=((0.1005)*cj5);
IkReal x7833=((1.0)*sj5);
IkReal x7834=((0.1005)*sj5);
IkReal x7835=(sj1*x7830);
IkReal x7836=(cj2*sj1*x7831);
IkReal x7837=(cj1*sj2*x7831);
IkReal x7838=(cj1*sj2*x7830);
evalcond[0]=((((-1.0)*r01*x7833))+x7838+((cj2*x7835))+((cj5*r00)));
evalcond[1]=(((cj5*r10))+(((-1.0)*r11*x7833))+(((-1.0)*x7837))+(((-1.0)*x7836)));
evalcond[2]=((((-0.3495)*cj2*x7835))+(((-1.0)*r00*x7832))+(((-1.0)*px))+(((-0.3484)*x7835))+(((0.1002)*x7831))+((r01*x7834))+(((-0.3495)*x7838)));
evalcond[3]=((((0.3484)*sj1*x7831))+(((-1.0)*py))+(((0.1002)*x7830))+(((-1.0)*r10*x7832))+(((0.3495)*x7836))+(((0.3495)*x7837))+((r11*x7834)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7839=((1.0)*sj5);
IkReal x7840=(((cj5*r10))+(((-1.0)*r11*x7839)));
j4eval[0]=x7840;
j4eval[1]=IKsign(x7840);
j4eval[2]=((IKabs(((((-1.0)*cj0*r20*x7839))+(((-1.0)*cj0*cj5*r21)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7841=((1.0)*cj5);
IkReal x7842=(((r01*sj5))+(((-1.0)*r00*x7841)));
j4eval[0]=x7842;
j4eval[1]=IKsign(x7842);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r21*sj0*x7841))+(((-1.0)*r20*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7843=((1.0)*sj0);
IkReal x7844=(((cj5*r20))+(((-1.0)*r21*sj5)));
j4eval[0]=x7844;
j4eval[1]=((IKabs(((((-1.0)*cj0*r12))+((r02*sj0)))))+(IKabs((((cj0*cj5*r11))+(((-1.0)*cj5*r01*x7843))+(((-1.0)*r00*sj5*x7843))+((cj0*r10*sj5))))));
j4eval[2]=IKsign(x7844);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x7845=((-1.0)*r21);
IkReal x7847 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7847)==0){
continue;
}
IkReal x7846=pow(x7847,-0.5);
CheckValue<IkReal> x7848 = IKatan2WithCheck(IkReal(r20),IkReal(x7845),IKFAST_ATAN2_MAGTHRESH);
if(!x7848.valid){
continue;
}
IkReal gconst126=((-1.0)*(x7848.value));
IkReal gconst127=((-1.0)*r20*x7846);
IkReal gconst128=(x7845*x7846);
CheckValue<IkReal> x7849 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x7849.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7849.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7850=((-1.0)*r21);
CheckValue<IkReal> x7853 = IKatan2WithCheck(IkReal(r20),IkReal(x7850),IKFAST_ATAN2_MAGTHRESH);
if(!x7853.valid){
continue;
}
IkReal x7851=((-1.0)*(x7853.value));
IkReal x7852=x7846;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst127;
cj5=gconst128;
j5=x7851;
IkReal gconst126=x7851;
IkReal gconst127=((-1.0)*r20*x7852);
IkReal gconst128=(x7850*x7852);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7854=((-1.0)*r21);
CheckValue<IkReal> x7857 = IKatan2WithCheck(IkReal(r20),IkReal(x7854),IKFAST_ATAN2_MAGTHRESH);
if(!x7857.valid){
continue;
}
IkReal x7855=((-1.0)*(x7857.value));
IkReal x7856=x7846;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst127;
cj5=gconst128;
j5=x7855;
IkReal gconst126=x7855;
IkReal gconst127=((-1.0)*r20*x7856);
IkReal gconst128=(x7854*x7856);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x7858=((-1.0)*r21);
CheckValue<IkReal> x7861 = IKatan2WithCheck(IkReal(r20),IkReal(x7858),IKFAST_ATAN2_MAGTHRESH);
if(!x7861.valid){
continue;
}
IkReal x7859=((-1.0)*(x7861.value));
IkReal x7860=x7846;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst127;
cj5=gconst128;
j5=x7859;
IkReal gconst126=x7859;
IkReal gconst127=((-1.0)*r20*x7860);
IkReal gconst128=(x7858*x7860);
IkReal x7862=r22*r22;
CheckValue<IkReal> x7865=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x7862))),-1);
if(!x7865.valid){
continue;
}
IkReal x7863=x7865.value;
IkReal x7864=((((2.0)*x7863*(r20*r20)*(r21*r21)))+((x7863*(r20*r20*r20*r20)))+((x7863*(r21*r21*r21*r21)))+x7862);
j4eval[0]=x7864;
j4eval[1]=IKsign(x7864);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7866=(gconst128*r21);
IkReal x7867=(gconst127*r20);
IkReal x7868=(cj2*sj1);
IkReal x7869=(cj1*sj2);
CheckValue<IkReal> x7870 = IKatan2WithCheck(IkReal((((r22*x7868))+((r22*x7869)))),IkReal(((((-1.0)*x7866*x7869))+(((-1.0)*x7866*x7868))+(((-1.0)*x7867*x7868))+(((-1.0)*x7867*x7869)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7870.valid){
continue;
}
CheckValue<IkReal> x7871=IKPowWithIntegerCheck(IKsign(((x7866*x7866)+(x7867*x7867)+(r22*r22)+(((2.0)*x7866*x7867)))),-1);
if(!x7871.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7870.value)+(((1.5707963267949)*(x7871.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7872=IKsin(j4);
IkReal x7873=IKcos(j4);
IkReal x7874=(gconst128*r11);
IkReal x7875=(gconst128*r21);
IkReal x7876=((1.0)*sj0);
IkReal x7877=(gconst128*r01);
IkReal x7878=(cj1*cj2);
IkReal x7879=((1.0)*cj0);
IkReal x7880=(sj1*sj2);
IkReal x7881=((1.0)*x7873);
IkReal x7882=(gconst127*x7873);
IkReal x7883=((1.0)*x7872);
evalcond[0]=((((-1.0)*r22*x7881))+(((-1.0)*gconst127*r20*x7883))+(((-1.0)*x7875*x7883)));
evalcond[1]=((((-1.0)*gconst127*r00*x7883))+(((-1.0)*r02*x7881))+(((-1.0)*x7877*x7883))+(((-1.0)*x7879)));
evalcond[2]=((((-1.0)*x7876))+(((-1.0)*gconst127*r10*x7883))+(((-1.0)*r12*x7881))+(((-1.0)*x7874*x7883)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7883))+((cj1*sj2))+((r20*x7882))+((x7873*x7875)));
evalcond[4]=((((-1.0)*x7876*x7878))+(((-1.0)*r02*x7883))+((sj0*x7880))+((r00*x7882))+((x7873*x7877)));
evalcond[5]=(((cj0*x7878))+((r10*x7882))+(((-1.0)*r12*x7883))+((x7873*x7874))+(((-1.0)*x7879*x7880)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7884=((1.0)*sj0);
CheckValue<IkReal> x7885=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst128*r00))+((gconst127*r01)))),-1);
if(!x7885.valid){
continue;
}
CheckValue<IkReal> x7886 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst128*r21*x7884))+(((-1.0)*gconst127*r20*x7884)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7886.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7885.value)))+(x7886.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7887=IKsin(j4);
IkReal x7888=IKcos(j4);
IkReal x7889=(gconst128*r11);
IkReal x7890=(gconst128*r21);
IkReal x7891=((1.0)*sj0);
IkReal x7892=(gconst128*r01);
IkReal x7893=(cj1*cj2);
IkReal x7894=((1.0)*cj0);
IkReal x7895=(sj1*sj2);
IkReal x7896=((1.0)*x7888);
IkReal x7897=(gconst127*x7888);
IkReal x7898=((1.0)*x7887);
evalcond[0]=((((-1.0)*r22*x7896))+(((-1.0)*x7890*x7898))+(((-1.0)*gconst127*r20*x7898)));
evalcond[1]=((((-1.0)*x7894))+(((-1.0)*gconst127*r00*x7898))+(((-1.0)*x7892*x7898))+(((-1.0)*r02*x7896)));
evalcond[2]=((((-1.0)*x7891))+(((-1.0)*r12*x7896))+(((-1.0)*x7889*x7898))+(((-1.0)*gconst127*r10*x7898)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x7888*x7890))+(((-1.0)*r22*x7898))+((r20*x7897)));
evalcond[4]=((((-1.0)*x7891*x7893))+((x7888*x7892))+((r00*x7897))+((sj0*x7895))+(((-1.0)*r02*x7898)));
evalcond[5]=((((-1.0)*x7894*x7895))+(((-1.0)*r12*x7898))+((cj0*x7893))+((r10*x7897))+((x7888*x7889)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7899=((1.0)*gconst127);
CheckValue<IkReal> x7900 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x7899))+(((-1.0)*cj0*gconst128*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7900.valid){
continue;
}
CheckValue<IkReal> x7901=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x7899))+((gconst128*r10)))),-1);
if(!x7901.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7900.value)+(((1.5707963267949)*(x7901.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7902=IKsin(j4);
IkReal x7903=IKcos(j4);
IkReal x7904=(gconst128*r11);
IkReal x7905=(gconst128*r21);
IkReal x7906=((1.0)*sj0);
IkReal x7907=(gconst128*r01);
IkReal x7908=(cj1*cj2);
IkReal x7909=((1.0)*cj0);
IkReal x7910=(sj1*sj2);
IkReal x7911=((1.0)*x7903);
IkReal x7912=(gconst127*x7903);
IkReal x7913=((1.0)*x7902);
evalcond[0]=((((-1.0)*gconst127*r20*x7913))+(((-1.0)*r22*x7911))+(((-1.0)*x7905*x7913)));
evalcond[1]=((((-1.0)*x7907*x7913))+(((-1.0)*r02*x7911))+(((-1.0)*gconst127*r00*x7913))+(((-1.0)*x7909)));
evalcond[2]=((((-1.0)*x7904*x7913))+(((-1.0)*gconst127*r10*x7913))+(((-1.0)*r12*x7911))+(((-1.0)*x7906)));
evalcond[3]=(((cj2*sj1))+((x7903*x7905))+((cj1*sj2))+(((-1.0)*r22*x7913))+((r20*x7912)));
evalcond[4]=(((sj0*x7910))+((x7903*x7907))+(((-1.0)*r02*x7913))+((r00*x7912))+(((-1.0)*x7906*x7908)));
evalcond[5]=(((x7903*x7904))+((r10*x7912))+(((-1.0)*r12*x7913))+((cj0*x7908))+(((-1.0)*x7909*x7910)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7916 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7916)==0){
continue;
}
IkReal x7914=pow(x7916,-0.5);
IkReal x7915=((1.0)*x7914);
CheckValue<IkReal> x7917 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x7917.valid){
continue;
}
IkReal gconst129=((3.14159265358979)+(((-1.0)*(x7917.value))));
IkReal gconst130=(r20*x7915);
IkReal gconst131=(r21*x7915);
CheckValue<IkReal> x7918 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x7918.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7918.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x7922 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x7922.valid){
continue;
}
IkReal x7919=((1.0)*(x7922.value));
IkReal x7920=x7914;
IkReal x7921=((1.0)*x7920);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x7919)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x7919)));
IkReal gconst130=(r20*x7921);
IkReal gconst131=(r21*x7921);
IkReal x7923=r22*r22;
IkReal x7924=((1.0)*x7923);
CheckValue<IkReal> x7928=IKPowWithIntegerCheck(((-1.0)+x7923),-1);
if(!x7928.valid){
continue;
}
IkReal x7925=x7928.value;
if((((1.0)+(((-1.0)*x7924)))) < -0.00001)
continue;
IkReal x7926=IKsqrt(((1.0)+(((-1.0)*x7924))));
IkReal x7927=(cj0*x7925*x7926);
j4eval[0]=((IKabs(((((-1.0)*x7924*x7927))+x7927)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x7932 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x7932.valid){
continue;
}
IkReal x7929=((1.0)*(x7932.value));
IkReal x7930=x7914;
IkReal x7931=((1.0)*x7930);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x7929)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x7929)));
IkReal gconst130=(r20*x7931);
IkReal gconst131=(r21*x7931);
IkReal x7933=r22*r22;
IkReal x7934=((1.0)*x7933);
CheckValue<IkReal> x7938=IKPowWithIntegerCheck(((-1.0)+x7933),-1);
if(!x7938.valid){
continue;
}
IkReal x7935=x7938.value;
if((((1.0)+(((-1.0)*x7934)))) < -0.00001)
continue;
IkReal x7936=IKsqrt(((1.0)+(((-1.0)*x7934))));
IkReal x7937=(sj0*x7935*x7936);
j4eval[0]=((IKabs(((((-1.0)*x7934*x7937))+x7937)))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x7942 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x7942.valid){
continue;
}
IkReal x7939=((1.0)*(x7942.value));
IkReal x7940=x7914;
IkReal x7941=((1.0)*x7940);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x7939)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x7939)));
IkReal gconst130=(r20*x7941);
IkReal gconst131=(r21*x7941);
IkReal x7943=r22*r22;
IkReal x7944=(cj0*r12);
IkReal x7945=(r02*sj0);
CheckValue<IkReal> x7949=IKPowWithIntegerCheck(((-1.0)+x7943),-1);
if(!x7949.valid){
continue;
}
IkReal x7946=x7949.value;
if((((1.0)+(((-1.0)*x7943)))) < -0.00001)
continue;
IkReal x7947=IKsqrt(((1.0)+(((-1.0)*x7943))));
IkReal x7948=(r22*x7946*x7947);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs((x7945+(((-1.0)*x7944)))))+(IKabs((((x7944*x7948))+(((-1.0)*x7945*x7948))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7950=((1.0)*gconst130);
CheckValue<IkReal> x7951 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r12))+((r02*sj0)))),IkReal(((((-1.0)*gconst131*r01*sj0))+((cj0*gconst130*r10))+(((-1.0)*r00*sj0*x7950))+((cj0*gconst131*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7951.valid){
continue;
}
CheckValue<IkReal> x7952=IKPowWithIntegerCheck(IKsign((((gconst131*r20))+(((-1.0)*r21*x7950)))),-1);
if(!x7952.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7951.value)+(((1.5707963267949)*(x7952.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7953=IKsin(j4);
IkReal x7954=IKcos(j4);
IkReal x7955=(gconst131*r11);
IkReal x7956=((1.0)*cj0);
IkReal x7957=((1.0)*sj0);
IkReal x7958=(cj1*cj2);
IkReal x7959=(sj1*sj2);
IkReal x7960=((1.0)*x7954);
IkReal x7961=((1.0)*x7953);
IkReal x7962=(gconst131*x7954);
IkReal x7963=(gconst130*x7954);
evalcond[0]=((((-1.0)*r22*x7960))+(((-1.0)*gconst130*r20*x7961))+(((-1.0)*gconst131*r21*x7961)));
evalcond[1]=((((-1.0)*gconst131*r01*x7961))+(((-1.0)*x7956))+(((-1.0)*r02*x7960))+(((-1.0)*gconst130*r00*x7961)));
evalcond[2]=((((-1.0)*gconst130*r10*x7961))+(((-1.0)*x7957))+(((-1.0)*x7955*x7961))+(((-1.0)*r12*x7960)));
evalcond[3]=(((cj2*sj1))+((r21*x7962))+(((-1.0)*r22*x7961))+((cj1*sj2))+((r20*x7963)));
evalcond[4]=((((-1.0)*x7957*x7958))+((r00*x7963))+((r01*x7962))+(((-1.0)*r02*x7961))+((sj0*x7959)));
evalcond[5]=((((-1.0)*x7956*x7959))+((cj0*x7958))+((x7954*x7955))+(((-1.0)*r12*x7961))+((r10*x7963)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7964=((1.0)*gconst131);
CheckValue<IkReal> x7965 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst130*r20*sj0))+(((-1.0)*r21*sj0*x7964)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7965.valid){
continue;
}
CheckValue<IkReal> x7966=IKPowWithIntegerCheck(IKsign((((gconst130*r01))+(((-1.0)*r00*x7964)))),-1);
if(!x7966.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7965.value)+(((1.5707963267949)*(x7966.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7967=IKsin(j4);
IkReal x7968=IKcos(j4);
IkReal x7969=(gconst131*r11);
IkReal x7970=((1.0)*cj0);
IkReal x7971=((1.0)*sj0);
IkReal x7972=(cj1*cj2);
IkReal x7973=(sj1*sj2);
IkReal x7974=((1.0)*x7968);
IkReal x7975=((1.0)*x7967);
IkReal x7976=(gconst131*x7968);
IkReal x7977=(gconst130*x7968);
evalcond[0]=((((-1.0)*r22*x7974))+(((-1.0)*gconst130*r20*x7975))+(((-1.0)*gconst131*r21*x7975)));
evalcond[1]=((((-1.0)*x7970))+(((-1.0)*r02*x7974))+(((-1.0)*gconst130*r00*x7975))+(((-1.0)*gconst131*r01*x7975)));
evalcond[2]=((((-1.0)*gconst130*r10*x7975))+(((-1.0)*x7971))+(((-1.0)*r12*x7974))+(((-1.0)*x7969*x7975)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7975))+((cj1*sj2))+((r20*x7977))+((r21*x7976)));
evalcond[4]=(((r01*x7976))+((r00*x7977))+(((-1.0)*r02*x7975))+((sj0*x7973))+(((-1.0)*x7971*x7972)));
evalcond[5]=((((-1.0)*x7970*x7973))+((cj0*x7972))+(((-1.0)*r12*x7975))+((x7968*x7969))+((r10*x7977)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7978=((1.0)*gconst130);
CheckValue<IkReal> x7979=IKPowWithIntegerCheck(IKsign((((gconst131*r10))+(((-1.0)*r11*x7978)))),-1);
if(!x7979.valid){
continue;
}
CheckValue<IkReal> x7980 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst131*r21))+(((-1.0)*cj0*r20*x7978)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7980.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7979.value)))+(x7980.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7981=IKsin(j4);
IkReal x7982=IKcos(j4);
IkReal x7983=(gconst131*r11);
IkReal x7984=((1.0)*cj0);
IkReal x7985=((1.0)*sj0);
IkReal x7986=(cj1*cj2);
IkReal x7987=(sj1*sj2);
IkReal x7988=((1.0)*x7982);
IkReal x7989=((1.0)*x7981);
IkReal x7990=(gconst131*x7982);
IkReal x7991=(gconst130*x7982);
evalcond[0]=((((-1.0)*r22*x7988))+(((-1.0)*gconst131*r21*x7989))+(((-1.0)*gconst130*r20*x7989)));
evalcond[1]=((((-1.0)*gconst130*r00*x7989))+(((-1.0)*gconst131*r01*x7989))+(((-1.0)*x7984))+(((-1.0)*r02*x7988)));
evalcond[2]=((((-1.0)*r12*x7988))+(((-1.0)*x7983*x7989))+(((-1.0)*gconst130*r10*x7989))+(((-1.0)*x7985)));
evalcond[3]=(((r20*x7991))+(((-1.0)*r22*x7989))+((cj2*sj1))+((cj1*sj2))+((r21*x7990)));
evalcond[4]=(((r01*x7990))+((r00*x7991))+(((-1.0)*x7985*x7986))+((sj0*x7987))+(((-1.0)*r02*x7989)));
evalcond[5]=(((r10*x7991))+(((-1.0)*r12*x7989))+((x7982*x7983))+(((-1.0)*x7984*x7987))+((cj0*x7986)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7993 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x7993)==0){
continue;
}
IkReal x7992=pow(x7993,-0.5);
CheckValue<IkReal> x7994 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x7994.valid){
continue;
}
IkReal gconst132=((-1.0)*(x7994.value));
IkReal gconst133=(r00*x7992);
IkReal gconst134=(r01*x7992);
CheckValue<IkReal> x7995 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x7995.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7995.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x7998 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x7998.valid){
continue;
}
IkReal x7996=((-1.0)*(x7998.value));
IkReal x7997=x7992;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x7996;
IkReal gconst132=x7996;
IkReal gconst133=(r00*x7997);
IkReal gconst134=(r01*x7997);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x8001 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x8001.valid){
continue;
}
IkReal x7999=((-1.0)*(x8001.value));
IkReal x8000=x7992;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x7999;
IkReal gconst132=x7999;
IkReal gconst133=(r00*x8000);
IkReal gconst134=(r01*x8000);
IkReal x8002=r02*r02;
IkReal x8003=(cj0*r12);
IkReal x8004=((1.0)*x8002);
CheckValue<IkReal> x8008=IKPowWithIntegerCheck(((-1.0)+x8002),-1);
if(!x8008.valid){
continue;
}
IkReal x8005=x8008.value;
if((((1.0)+(((-1.0)*x8004)))) < -0.00001)
continue;
IkReal x8006=IKsqrt(((1.0)+(((-1.0)*x8004))));
IkReal x8007=(x8005*x8006);
j4eval[0]=((IKabs((((sj0*x8007))+(((-1.0)*sj0*x8004*x8007))+((r02*x8003*x8007)))))+(IKabs((((r02*sj0))+(((-1.0)*x8003))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x8011 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x8011.valid){
continue;
}
IkReal x8009=((-1.0)*(x8011.value));
IkReal x8010=x7992;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x8009;
IkReal gconst132=x8009;
IkReal gconst133=(r00*x8010);
IkReal gconst134=(r01*x8010);
IkReal x8012=r02*r02;
IkReal x8013=(cj1*r22*sj2);
IkReal x8014=(cj2*r22*sj1);
CheckValue<IkReal> x8018=IKPowWithIntegerCheck(((-1.0)+x8012),-1);
if(!x8018.valid){
continue;
}
IkReal x8015=x8018.value;
if((((1.0)+(((-1.0)*x8012)))) < -0.00001)
continue;
IkReal x8016=IKsqrt(((1.0)+(((-1.0)*x8012))));
IkReal x8017=((1.0)*r02*x8015*x8016);
j4eval[0]=((IKabs((x8014+x8013)))+(IKabs(((((-1.0)*x8014*x8017))+(((-1.0)*x8013*x8017))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8019=(gconst133*r20);
IkReal x8020=(gconst134*r21);
IkReal x8021=((1.0)*cj2*sj1);
IkReal x8022=((1.0)*cj1*sj2);
CheckValue<IkReal> x8023=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((2.0)*x8019*x8020))+(x8020*x8020)+(x8019*x8019))),-1);
if(!x8023.valid){
continue;
}
CheckValue<IkReal> x8024 = IKatan2WithCheck(IkReal((((cj2*r22*sj1))+((cj1*r22*sj2)))),IkReal(((((-1.0)*x8019*x8022))+(((-1.0)*x8019*x8021))+(((-1.0)*x8020*x8021))+(((-1.0)*x8020*x8022)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8024.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8023.value)))+(x8024.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8025=IKsin(j4);
IkReal x8026=IKcos(j4);
IkReal x8027=(gconst134*r11);
IkReal x8028=(gconst133*r00);
IkReal x8029=(gconst134*r21);
IkReal x8030=(gconst134*r01);
IkReal x8031=((1.0)*sj0);
IkReal x8032=(gconst133*r10);
IkReal x8033=(gconst133*r20);
IkReal x8034=(cj1*cj2);
IkReal x8035=((1.0)*cj0);
IkReal x8036=(sj1*sj2);
IkReal x8037=((1.0)*x8026);
IkReal x8038=((1.0)*x8025);
evalcond[0]=((((-1.0)*x8033*x8038))+(((-1.0)*r22*x8037))+(((-1.0)*x8029*x8038)));
evalcond[1]=((((-1.0)*x8028*x8038))+(((-1.0)*r02*x8037))+(((-1.0)*x8035))+(((-1.0)*x8030*x8038)));
evalcond[2]=((((-1.0)*r12*x8037))+(((-1.0)*x8031))+(((-1.0)*x8027*x8038))+(((-1.0)*x8032*x8038)));
evalcond[3]=(((x8026*x8029))+((cj2*sj1))+((x8026*x8033))+((cj1*sj2))+(((-1.0)*r22*x8038)));
evalcond[4]=(((x8026*x8028))+((x8026*x8030))+((sj0*x8036))+(((-1.0)*r02*x8038))+(((-1.0)*x8031*x8034)));
evalcond[5]=(((x8026*x8027))+((x8026*x8032))+(((-1.0)*r12*x8038))+(((-1.0)*x8035*x8036))+((cj0*x8034)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8039=((1.0)*sj0);
CheckValue<IkReal> x8040 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r12))+((r02*sj0)))),IkReal((((cj0*gconst134*r11))+(((-1.0)*gconst133*r00*x8039))+((cj0*gconst133*r10))+(((-1.0)*gconst134*r01*x8039)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8040.valid){
continue;
}
CheckValue<IkReal> x8041=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst133*r21))+((gconst134*r20)))),-1);
if(!x8041.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8040.value)+(((1.5707963267949)*(x8041.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8042=IKsin(j4);
IkReal x8043=IKcos(j4);
IkReal x8044=(gconst134*r11);
IkReal x8045=(gconst133*r00);
IkReal x8046=(gconst134*r21);
IkReal x8047=(gconst134*r01);
IkReal x8048=((1.0)*sj0);
IkReal x8049=(gconst133*r10);
IkReal x8050=(gconst133*r20);
IkReal x8051=(cj1*cj2);
IkReal x8052=((1.0)*cj0);
IkReal x8053=(sj1*sj2);
IkReal x8054=((1.0)*x8043);
IkReal x8055=((1.0)*x8042);
evalcond[0]=((((-1.0)*x8046*x8055))+(((-1.0)*x8050*x8055))+(((-1.0)*r22*x8054)));
evalcond[1]=((((-1.0)*x8045*x8055))+(((-1.0)*x8047*x8055))+(((-1.0)*r02*x8054))+(((-1.0)*x8052)));
evalcond[2]=((((-1.0)*r12*x8054))+(((-1.0)*x8044*x8055))+(((-1.0)*x8048))+(((-1.0)*x8049*x8055)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8055))+((x8043*x8046))+((x8043*x8050)));
evalcond[4]=(((sj0*x8053))+(((-1.0)*r02*x8055))+((x8043*x8047))+((x8043*x8045))+(((-1.0)*x8048*x8051)));
evalcond[5]=((((-1.0)*r12*x8055))+((cj0*x8051))+(((-1.0)*x8052*x8053))+((x8043*x8049))+((x8043*x8044)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8056=((1.0)*cj0);
CheckValue<IkReal> x8057 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*gconst133*r20*x8056))+(((-1.0)*gconst134*r21*x8056)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8057.valid){
continue;
}
CheckValue<IkReal> x8058=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst133*r11))+((gconst134*r10)))),-1);
if(!x8058.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8057.value)+(((1.5707963267949)*(x8058.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8059=IKsin(j4);
IkReal x8060=IKcos(j4);
IkReal x8061=(gconst134*r11);
IkReal x8062=(gconst133*r00);
IkReal x8063=(gconst134*r21);
IkReal x8064=(gconst134*r01);
IkReal x8065=((1.0)*sj0);
IkReal x8066=(gconst133*r10);
IkReal x8067=(gconst133*r20);
IkReal x8068=(cj1*cj2);
IkReal x8069=((1.0)*cj0);
IkReal x8070=(sj1*sj2);
IkReal x8071=((1.0)*x8060);
IkReal x8072=((1.0)*x8059);
evalcond[0]=((((-1.0)*x8067*x8072))+(((-1.0)*r22*x8071))+(((-1.0)*x8063*x8072)));
evalcond[1]=((((-1.0)*x8069))+(((-1.0)*r02*x8071))+(((-1.0)*x8064*x8072))+(((-1.0)*x8062*x8072)));
evalcond[2]=((((-1.0)*x8065))+(((-1.0)*x8061*x8072))+(((-1.0)*r12*x8071))+(((-1.0)*x8066*x8072)));
evalcond[3]=(((cj2*sj1))+((x8060*x8067))+((x8060*x8063))+((cj1*sj2))+(((-1.0)*r22*x8072)));
evalcond[4]=((((-1.0)*r02*x8072))+((x8060*x8064))+((x8060*x8062))+((sj0*x8070))+(((-1.0)*x8065*x8068)));
evalcond[5]=(((x8060*x8066))+((x8060*x8061))+((cj0*x8068))+(((-1.0)*x8069*x8070))+(((-1.0)*r12*x8072)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8073=((-1.0)*r00);
IkReal x8075 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x8075)==0){
continue;
}
IkReal x8074=pow(x8075,-0.5);
CheckValue<IkReal> x8076 = IKatan2WithCheck(IkReal(x8073),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x8076.valid){
continue;
}
IkReal gconst135=((3.14159265358979)+(((-1.0)*(x8076.value))));
IkReal gconst136=(x8073*x8074);
IkReal gconst137=((-1.0)*r01*x8074);
CheckValue<IkReal> x8077 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x8077.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x8077.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x8078=((-1.0)*r00);
CheckValue<IkReal> x8081 = IKatan2WithCheck(IkReal(x8078),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x8081.valid){
continue;
}
IkReal x8079=((1.0)*(x8081.value));
IkReal x8080=x8074;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x8079)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x8079)));
IkReal gconst136=(x8078*x8080);
IkReal gconst137=((-1.0)*r01*x8080);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
IkReal x8082=((-1.0)*r00);
CheckValue<IkReal> x8085 = IKatan2WithCheck(IkReal(x8082),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x8085.valid){
continue;
}
IkReal x8083=((1.0)*(x8085.value));
IkReal x8084=x8074;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x8083)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x8083)));
IkReal gconst136=(x8082*x8084);
IkReal gconst137=((-1.0)*r01*x8084);
j4eval[0]=0;
j4eval[1]=r22;
j4eval[2]=sj0;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8086=((1.0)*gconst136);
CheckValue<IkReal> x8087=IKPowWithIntegerCheck(IKsign((((gconst137*r20))+(((-1.0)*r21*x8086)))),-1);
if(!x8087.valid){
continue;
}
CheckValue<IkReal> x8088 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r12))+((r02*sj0)))),IkReal(((((-1.0)*gconst137*r01*sj0))+(((-1.0)*r00*sj0*x8086))+((cj0*gconst136*r10))+((cj0*gconst137*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8088.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8087.value)))+(x8088.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8089=IKsin(j4);
IkReal x8090=IKcos(j4);
IkReal x8091=(gconst136*r10);
IkReal x8092=(gconst136*r00);
IkReal x8093=(cj1*cj2);
IkReal x8094=((1.0)*sj0);
IkReal x8095=((1.0)*cj0);
IkReal x8096=(sj1*sj2);
IkReal x8097=(gconst136*r20);
IkReal x8098=((1.0)*x8090);
IkReal x8099=((1.0)*x8089);
IkReal x8100=(gconst137*x8090);
evalcond[0]=((((-1.0)*gconst137*r21*x8099))+(((-1.0)*x8097*x8099))+(((-1.0)*r22*x8098)));
evalcond[1]=((((-1.0)*x8092*x8099))+(((-1.0)*r02*x8098))+(((-1.0)*x8095))+(((-1.0)*gconst137*r01*x8099)));
evalcond[2]=((((-1.0)*x8094))+(((-1.0)*x8091*x8099))+(((-1.0)*gconst137*r11*x8099))+(((-1.0)*r12*x8098)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x8090*x8097))+(((-1.0)*r22*x8099))+((r21*x8100)));
evalcond[4]=((((-1.0)*x8093*x8094))+(((-1.0)*r02*x8099))+((x8090*x8092))+((sj0*x8096))+((r01*x8100)));
evalcond[5]=((((-1.0)*x8095*x8096))+((x8090*x8091))+((r11*x8100))+(((-1.0)*r12*x8099))+((cj0*x8093)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8101=((1.0)*sj0);
CheckValue<IkReal> x8102 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst136*r20*x8101))+(((-1.0)*gconst137*r21*x8101)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8102.valid){
continue;
}
CheckValue<IkReal> x8103=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst137*r00))+((gconst136*r01)))),-1);
if(!x8103.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8102.value)+(((1.5707963267949)*(x8103.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8104=IKsin(j4);
IkReal x8105=IKcos(j4);
IkReal x8106=(gconst136*r10);
IkReal x8107=(gconst136*r00);
IkReal x8108=(cj1*cj2);
IkReal x8109=((1.0)*sj0);
IkReal x8110=((1.0)*cj0);
IkReal x8111=(sj1*sj2);
IkReal x8112=(gconst136*r20);
IkReal x8113=((1.0)*x8105);
IkReal x8114=((1.0)*x8104);
IkReal x8115=(gconst137*x8105);
evalcond[0]=((((-1.0)*x8112*x8114))+(((-1.0)*gconst137*r21*x8114))+(((-1.0)*r22*x8113)));
evalcond[1]=((((-1.0)*x8110))+(((-1.0)*gconst137*r01*x8114))+(((-1.0)*r02*x8113))+(((-1.0)*x8107*x8114)));
evalcond[2]=((((-1.0)*x8109))+(((-1.0)*gconst137*r11*x8114))+(((-1.0)*r12*x8113))+(((-1.0)*x8106*x8114)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r21*x8115))+((x8105*x8112))+(((-1.0)*r22*x8114)));
evalcond[4]=((((-1.0)*x8108*x8109))+(((-1.0)*r02*x8114))+((r01*x8115))+((x8105*x8107))+((sj0*x8111)));
evalcond[5]=((((-1.0)*r12*x8114))+(((-1.0)*x8110*x8111))+((cj0*x8108))+((r11*x8115))+((x8105*x8106)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8116=((1.0)*gconst136);
CheckValue<IkReal> x8117 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst137*r21))+(((-1.0)*cj0*r20*x8116)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8117.valid){
continue;
}
CheckValue<IkReal> x8118=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8116))+((gconst137*r10)))),-1);
if(!x8118.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8117.value)+(((1.5707963267949)*(x8118.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8119=IKsin(j4);
IkReal x8120=IKcos(j4);
IkReal x8121=(gconst136*r10);
IkReal x8122=(gconst136*r00);
IkReal x8123=(cj1*cj2);
IkReal x8124=((1.0)*sj0);
IkReal x8125=((1.0)*cj0);
IkReal x8126=(sj1*sj2);
IkReal x8127=(gconst136*r20);
IkReal x8128=((1.0)*x8120);
IkReal x8129=((1.0)*x8119);
IkReal x8130=(gconst137*x8120);
evalcond[0]=((((-1.0)*gconst137*r21*x8129))+(((-1.0)*r22*x8128))+(((-1.0)*x8127*x8129)));
evalcond[1]=((((-1.0)*x8122*x8129))+(((-1.0)*x8125))+(((-1.0)*gconst137*r01*x8129))+(((-1.0)*r02*x8128)));
evalcond[2]=((((-1.0)*gconst137*r11*x8129))+(((-1.0)*r12*x8128))+(((-1.0)*x8121*x8129))+(((-1.0)*x8124)));
evalcond[3]=(((cj2*sj1))+((x8120*x8127))+((cj1*sj2))+((r21*x8130))+(((-1.0)*r22*x8129)));
evalcond[4]=(((x8120*x8122))+(((-1.0)*x8123*x8124))+(((-1.0)*r02*x8129))+((r01*x8130))+((sj0*x8126)));
evalcond[5]=((((-1.0)*r12*x8129))+((r11*x8130))+((x8120*x8121))+(((-1.0)*x8125*x8126))+((cj0*x8123)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8131=((1.0)*sj5);
IkReal x8132=(((cj5*r10))+(((-1.0)*r11*x8131)));
j4eval[0]=x8132;
j4eval[1]=IKsign(x8132);
j4eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*cj5*r21))+(((-1.0)*r20*x8131))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8133=((1.0)*cj5);
IkReal x8134=(((r21*sj5))+(((-1.0)*r20*x8133)));
j4eval[0]=x8134;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*sj5))+(((-1.0)*r11*x8133))))));
j4eval[2]=IKsign(x8134);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8135=(cj5*r01);
IkReal x8136=(cj1*sj2);
IkReal x8137=(cj2*sj1);
IkReal x8138=(r00*sj5);
IkReal x8139=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[0]=x8139;
j4eval[1]=((IKabs((((x8136*x8138))+((x8135*x8137))+((x8135*x8136))+((x8137*x8138)))))+(IKabs((((r02*x8136))+((r02*x8137))))));
j4eval[2]=IKsign(x8139);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8140=(cj5*r01);
IkReal x8141=(cj1*sj2);
IkReal x8142=(cj2*sj1);
IkReal x8143=(r00*sj5);
CheckValue<IkReal> x8144 = IKatan2WithCheck(IkReal((((x8141*x8143))+((x8140*x8141))+((x8140*x8142))+((x8142*x8143)))),IkReal((((r02*x8142))+((r02*x8141)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8144.valid){
continue;
}
CheckValue<IkReal> x8145=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10))+((r11*sj5)))),-1);
if(!x8145.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8144.value)+(((1.5707963267949)*(x8145.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8146=IKcos(j4);
IkReal x8147=IKsin(j4);
IkReal x8148=(r00*sj5);
IkReal x8149=(cj5*r01);
IkReal x8150=(r20*sj5);
IkReal x8151=(cj5*r21);
IkReal x8152=(cj5*r11);
IkReal x8153=(r10*sj5);
IkReal x8154=((1.0)*x8146);
IkReal x8155=((1.0)*x8147);
evalcond[0]=((((-1.0)*r02*x8155))+((x8146*x8148))+((x8146*x8149)));
evalcond[1]=((((-1.0)*x8150*x8155))+(((-1.0)*x8151*x8155))+(((-1.0)*r22*x8154)));
evalcond[2]=((((-1.0)*x8153*x8155))+(((-1.0)*r12*x8154))+(((-1.0)*x8152*x8155)));
evalcond[3]=((-1.0)+(((-1.0)*x8148*x8155))+(((-1.0)*r02*x8154))+(((-1.0)*x8149*x8155)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8155))+((x8146*x8150))+((x8146*x8151)));
evalcond[5]=((((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*r12*x8155))+((x8146*x8153))+((x8146*x8152)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8156=((1.0)*cj5);
CheckValue<IkReal> x8157 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*sj5))+(((-1.0)*r11*x8156)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8157.valid){
continue;
}
CheckValue<IkReal> x8158=IKPowWithIntegerCheck(IKsign((((r21*sj5))+(((-1.0)*r20*x8156)))),-1);
if(!x8158.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8157.value)+(((1.5707963267949)*(x8158.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8159=IKcos(j4);
IkReal x8160=IKsin(j4);
IkReal x8161=(r00*sj5);
IkReal x8162=(cj5*r01);
IkReal x8163=(r20*sj5);
IkReal x8164=(cj5*r21);
IkReal x8165=(cj5*r11);
IkReal x8166=(r10*sj5);
IkReal x8167=((1.0)*x8159);
IkReal x8168=((1.0)*x8160);
evalcond[0]=((((-1.0)*r02*x8168))+((x8159*x8161))+((x8159*x8162)));
evalcond[1]=((((-1.0)*x8163*x8168))+(((-1.0)*r22*x8167))+(((-1.0)*x8164*x8168)));
evalcond[2]=((((-1.0)*x8165*x8168))+(((-1.0)*x8166*x8168))+(((-1.0)*r12*x8167)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x8167))+(((-1.0)*x8162*x8168))+(((-1.0)*x8161*x8168)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x8159*x8164))+((x8159*x8163))+(((-1.0)*r22*x8168)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r12*x8168))+((x8159*x8165))+((x8159*x8166))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8169=((1.0)*sj5);
CheckValue<IkReal> x8170=IKPowWithIntegerCheck(IKsign((((cj5*r10))+(((-1.0)*r11*x8169)))),-1);
if(!x8170.valid){
continue;
}
CheckValue<IkReal> x8171 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*cj5*r21))+(((-1.0)*r20*x8169)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8171.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8170.value)))+(x8171.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8172=IKcos(j4);
IkReal x8173=IKsin(j4);
IkReal x8174=(r00*sj5);
IkReal x8175=(cj5*r01);
IkReal x8176=(r20*sj5);
IkReal x8177=(cj5*r21);
IkReal x8178=(cj5*r11);
IkReal x8179=(r10*sj5);
IkReal x8180=((1.0)*x8172);
IkReal x8181=((1.0)*x8173);
evalcond[0]=((((-1.0)*r02*x8181))+((x8172*x8174))+((x8172*x8175)));
evalcond[1]=((((-1.0)*r22*x8180))+(((-1.0)*x8176*x8181))+(((-1.0)*x8177*x8181)));
evalcond[2]=((((-1.0)*x8179*x8181))+(((-1.0)*r12*x8180))+(((-1.0)*x8178*x8181)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x8180))+(((-1.0)*x8174*x8181))+(((-1.0)*x8175*x8181)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x8181))+((cj1*sj2))+((x8172*x8177))+((x8172*x8176)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r12*x8181))+((cj1*cj2))+((x8172*x8178))+((x8172*x8179)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8182=((1.0)*cj5);
IkReal x8183=((((-1.0)*r10*x8182))+((r11*sj5)));
j4eval[0]=x8183;
j4eval[1]=((IKabs(((((-1.0)*r21*x8182))+(((-1.0)*r20*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x8183);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8184=((1.0)*sj5);
IkReal x8185=(((cj5*r20))+(((-1.0)*r21*x8184)));
j4eval[0]=x8185;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*cj5*r11))+(((-1.0)*r10*x8184))))));
j4eval[2]=IKsign(x8185);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8186=cj5*cj5;
IkReal x8187=r00*r00;
IkReal x8188=(r00*sj5);
IkReal x8189=(cj5*r01);
IkReal x8190=((((2.0)*x8188*x8189))+(((-1.0)*x8186*x8187))+((x8186*(r01*r01)))+(r02*r02)+x8187);
j4eval[0]=x8190;
j4eval[1]=((IKabs(r02))+(IKabs((x8189+x8188))));
j4eval[2]=IKsign(x8190);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8191=cj5*cj5;
IkReal x8192=r00*r00;
IkReal x8193=(r00*sj5);
IkReal x8194=(cj5*r01);
CheckValue<IkReal> x8195=IKPowWithIntegerCheck(IKsign(((((2.0)*x8193*x8194))+(((-1.0)*x8191*x8192))+(r02*r02)+x8192+((x8191*(r01*r01))))),-1);
if(!x8195.valid){
continue;
}
CheckValue<IkReal> x8196 = IKatan2WithCheck(IkReal((x8193+x8194)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8196.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8195.value)))+(x8196.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8197=IKcos(j4);
IkReal x8198=IKsin(j4);
IkReal x8199=(r00*sj5);
IkReal x8200=(cj5*r01);
IkReal x8201=(r20*sj5);
IkReal x8202=(cj5*r21);
IkReal x8203=(cj5*r11);
IkReal x8204=(r10*sj5);
IkReal x8205=((1.0)*x8197);
IkReal x8206=((1.0)*x8198);
evalcond[0]=((((-1.0)*r02*x8206))+((x8197*x8199))+((x8197*x8200)));
evalcond[1]=((((-1.0)*x8202*x8206))+(((-1.0)*x8201*x8206))+(((-1.0)*r22*x8205)));
evalcond[2]=((((-1.0)*x8204*x8206))+(((-1.0)*r12*x8205))+(((-1.0)*x8203*x8206)));
evalcond[3]=((1.0)+(((-1.0)*x8200*x8206))+(((-1.0)*r02*x8205))+(((-1.0)*x8199*x8206)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8206))+((x8197*x8201))+((x8197*x8202)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x8206))+((x8197*x8204))+((x8197*x8203)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8207=((1.0)*sj5);
CheckValue<IkReal> x8208 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x8207))+(((-1.0)*cj5*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8208.valid){
continue;
}
CheckValue<IkReal> x8209=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x8207))+((cj5*r20)))),-1);
if(!x8209.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8208.value)+(((1.5707963267949)*(x8209.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8210=IKcos(j4);
IkReal x8211=IKsin(j4);
IkReal x8212=(r00*sj5);
IkReal x8213=(cj5*r01);
IkReal x8214=(r20*sj5);
IkReal x8215=(cj5*r21);
IkReal x8216=(cj5*r11);
IkReal x8217=(r10*sj5);
IkReal x8218=((1.0)*x8210);
IkReal x8219=((1.0)*x8211);
evalcond[0]=((((-1.0)*r02*x8219))+((x8210*x8212))+((x8210*x8213)));
evalcond[1]=((((-1.0)*r22*x8218))+(((-1.0)*x8214*x8219))+(((-1.0)*x8215*x8219)));
evalcond[2]=((((-1.0)*r12*x8218))+(((-1.0)*x8216*x8219))+(((-1.0)*x8217*x8219)));
evalcond[3]=((1.0)+(((-1.0)*r02*x8218))+(((-1.0)*x8212*x8219))+(((-1.0)*x8213*x8219)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x8210*x8214))+((x8210*x8215))+(((-1.0)*r22*x8219)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x8210*x8216))+((x8210*x8217))+(((-1.0)*r12*x8219)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8220=((1.0)*cj5);
CheckValue<IkReal> x8221=IKPowWithIntegerCheck(IKsign((((r11*sj5))+(((-1.0)*r10*x8220)))),-1);
if(!x8221.valid){
continue;
}
CheckValue<IkReal> x8222 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x8220))+(((-1.0)*r20*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8222.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8221.value)))+(x8222.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8223=IKcos(j4);
IkReal x8224=IKsin(j4);
IkReal x8225=(r00*sj5);
IkReal x8226=(cj5*r01);
IkReal x8227=(r20*sj5);
IkReal x8228=(cj5*r21);
IkReal x8229=(cj5*r11);
IkReal x8230=(r10*sj5);
IkReal x8231=((1.0)*x8223);
IkReal x8232=((1.0)*x8224);
evalcond[0]=((((-1.0)*r02*x8232))+((x8223*x8225))+((x8223*x8226)));
evalcond[1]=((((-1.0)*x8228*x8232))+(((-1.0)*r22*x8231))+(((-1.0)*x8227*x8232)));
evalcond[2]=((((-1.0)*x8229*x8232))+(((-1.0)*r12*x8231))+(((-1.0)*x8230*x8232)));
evalcond[3]=((1.0)+(((-1.0)*r02*x8231))+(((-1.0)*x8226*x8232))+(((-1.0)*x8225*x8232)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x8223*x8228))+((x8223*x8227))+(((-1.0)*r22*x8232)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x8223*x8229))+((x8223*x8230))+(((-1.0)*r12*x8232)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8235 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x8235)==0){
continue;
}
IkReal x8233=pow(x8235,-0.5);
IkReal x8234=((-1.0)*x8233);
CheckValue<IkReal> x8236 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x8236.valid){
continue;
}
IkReal gconst138=((-1.0)*(x8236.value));
IkReal gconst139=(r10*x8234);
IkReal gconst140=(r11*x8234);
CheckValue<IkReal> x8237 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x8237.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j5+(x8237.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x8241 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x8241.valid){
continue;
}
IkReal x8238=((-1.0)*(x8241.value));
IkReal x8239=x8233;
IkReal x8240=((-1.0)*x8239);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst139;
cj5=gconst140;
j5=x8238;
IkReal gconst138=x8238;
IkReal gconst139=(r10*x8240);
IkReal gconst140=(r11*x8240);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x8245 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x8245.valid){
continue;
}
IkReal x8242=((-1.0)*(x8245.value));
IkReal x8243=x8233;
IkReal x8244=((-1.0)*x8243);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst139;
cj5=gconst140;
j5=x8242;
IkReal gconst138=x8242;
IkReal gconst139=(r10*x8244);
IkReal gconst140=(r11*x8244);
IkReal x8246=r12*r12;
IkReal x8247=((1.0)*cj0);
IkReal x8248=(r02*sj0);
CheckValue<IkReal> x8252=IKPowWithIntegerCheck(((-1.0)+x8246),-1);
if(!x8252.valid){
continue;
}
IkReal x8249=x8252.value;
if((((1.0)+(((-1.0)*x8246)))) < -0.00001)
continue;
IkReal x8250=IKsqrt(((1.0)+(((-1.0)*x8246))));
IkReal x8251=(x8249*x8250);
j4eval[0]=((IKabs((((r12*x8248*x8251))+((cj0*x8251))+(((-1.0)*x8246*x8247*x8251)))))+(IKabs(((((-1.0)*r12*x8247))+x8248))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x8256 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x8256.valid){
continue;
}
IkReal x8253=((-1.0)*(x8256.value));
IkReal x8254=x8233;
IkReal x8255=((-1.0)*x8254);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst139;
cj5=gconst140;
j5=x8253;
IkReal gconst138=x8253;
IkReal gconst139=(r10*x8255);
IkReal gconst140=(r11*x8255);
IkReal x8257=(cj1*r22*sj2);
IkReal x8258=(cj2*r22*sj1);
IkReal x8259=x8233;
IkReal x8260=(r12*x8259);
j4eval[0]=((IKabs((x8257+x8258)))+(IKabs((((x8257*x8260))+((x8258*x8260))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8261=(cj2*sj1);
IkReal x8262=(cj1*sj2);
IkReal x8263=(gconst140*r21);
IkReal x8264=((1.0)*gconst139*r20);
CheckValue<IkReal> x8265=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((gconst139*gconst139)*(r20*r20)))+(x8263*x8263)+(((2.0)*gconst139*r20*x8263)))),-1);
if(!x8265.valid){
continue;
}
CheckValue<IkReal> x8266 = IKatan2WithCheck(IkReal((((r22*x8261))+((r22*x8262)))),IkReal(((((-1.0)*x8262*x8263))+(((-1.0)*x8261*x8263))+(((-1.0)*x8261*x8264))+(((-1.0)*x8262*x8264)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8266.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8265.value)))+(x8266.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8267=IKsin(j4);
IkReal x8268=IKcos(j4);
IkReal x8269=(gconst140*r11);
IkReal x8270=((1.0)*sj0);
IkReal x8271=(gconst140*r01);
IkReal x8272=(gconst140*r21);
IkReal x8273=(cj1*cj2);
IkReal x8274=((1.0)*cj0);
IkReal x8275=(sj1*sj2);
IkReal x8276=((1.0)*x8268);
IkReal x8277=((1.0)*x8267);
IkReal x8278=(gconst139*x8268);
evalcond[0]=((((-1.0)*x8272*x8277))+(((-1.0)*gconst139*r20*x8277))+(((-1.0)*r22*x8276)));
evalcond[1]=((((-1.0)*x8271*x8277))+(((-1.0)*gconst139*r00*x8277))+(((-1.0)*x8274))+(((-1.0)*r02*x8276)));
evalcond[2]=((((-1.0)*gconst139*r10*x8277))+(((-1.0)*x8270))+(((-1.0)*x8269*x8277))+(((-1.0)*r12*x8276)));
evalcond[3]=(((cj2*sj1))+((x8268*x8272))+((r20*x8278))+((cj1*sj2))+(((-1.0)*r22*x8277)));
evalcond[4]=(((x8268*x8271))+(((-1.0)*r02*x8277))+(((-1.0)*x8270*x8273))+((r00*x8278))+((sj0*x8275)));
evalcond[5]=(((x8268*x8269))+(((-1.0)*x8274*x8275))+((cj0*x8273))+(((-1.0)*r12*x8277))+((r10*x8278)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8279=((1.0)*sj0);
CheckValue<IkReal> x8280=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst139*r21))+((gconst140*r20)))),-1);
if(!x8280.valid){
continue;
}
CheckValue<IkReal> x8281 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r12))+((r02*sj0)))),IkReal(((((-1.0)*gconst140*r01*x8279))+(((-1.0)*gconst139*r00*x8279))+((cj0*gconst139*r10))+((cj0*gconst140*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8281.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8280.value)))+(x8281.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8282=IKsin(j4);
IkReal x8283=IKcos(j4);
IkReal x8284=(gconst140*r11);
IkReal x8285=((1.0)*sj0);
IkReal x8286=(gconst140*r01);
IkReal x8287=(gconst140*r21);
IkReal x8288=(cj1*cj2);
IkReal x8289=((1.0)*cj0);
IkReal x8290=(sj1*sj2);
IkReal x8291=((1.0)*x8283);
IkReal x8292=((1.0)*x8282);
IkReal x8293=(gconst139*x8283);
evalcond[0]=((((-1.0)*gconst139*r20*x8292))+(((-1.0)*r22*x8291))+(((-1.0)*x8287*x8292)));
evalcond[1]=((((-1.0)*x8286*x8292))+(((-1.0)*gconst139*r00*x8292))+(((-1.0)*x8289))+(((-1.0)*r02*x8291)));
evalcond[2]=((((-1.0)*x8284*x8292))+(((-1.0)*r12*x8291))+(((-1.0)*gconst139*r10*x8292))+(((-1.0)*x8285)));
evalcond[3]=(((cj2*sj1))+((r20*x8293))+((cj1*sj2))+(((-1.0)*r22*x8292))+((x8283*x8287)));
evalcond[4]=((((-1.0)*x8285*x8288))+((r00*x8293))+((sj0*x8290))+((x8283*x8286))+(((-1.0)*r02*x8292)));
evalcond[5]=((((-1.0)*r12*x8292))+((r10*x8293))+((cj0*x8288))+(((-1.0)*x8289*x8290))+((x8283*x8284)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8294=((1.0)*gconst140);
CheckValue<IkReal> x8295=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x8294))+((gconst139*r01)))),-1);
if(!x8295.valid){
continue;
}
CheckValue<IkReal> x8296 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x8294))+(((-1.0)*gconst139*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8296.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8295.value)))+(x8296.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8297=IKsin(j4);
IkReal x8298=IKcos(j4);
IkReal x8299=(gconst140*r11);
IkReal x8300=((1.0)*sj0);
IkReal x8301=(gconst140*r01);
IkReal x8302=(gconst140*r21);
IkReal x8303=(cj1*cj2);
IkReal x8304=((1.0)*cj0);
IkReal x8305=(sj1*sj2);
IkReal x8306=((1.0)*x8298);
IkReal x8307=((1.0)*x8297);
IkReal x8308=(gconst139*x8298);
evalcond[0]=((((-1.0)*r22*x8306))+(((-1.0)*gconst139*r20*x8307))+(((-1.0)*x8302*x8307)));
evalcond[1]=((((-1.0)*x8301*x8307))+(((-1.0)*r02*x8306))+(((-1.0)*x8304))+(((-1.0)*gconst139*r00*x8307)));
evalcond[2]=((((-1.0)*r12*x8306))+(((-1.0)*gconst139*r10*x8307))+(((-1.0)*x8300))+(((-1.0)*x8299*x8307)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x8307))+((cj1*sj2))+((r20*x8308))+((x8298*x8302)));
evalcond[4]=(((sj0*x8305))+((r00*x8308))+(((-1.0)*x8300*x8303))+(((-1.0)*r02*x8307))+((x8298*x8301)));
evalcond[5]=(((x8298*x8299))+(((-1.0)*x8304*x8305))+(((-1.0)*r12*x8307))+((r10*x8308))+((cj0*x8303)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8311 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x8311)==0){
continue;
}
IkReal x8309=pow(x8311,-0.5);
IkReal x8310=((1.0)*x8309);
CheckValue<IkReal> x8312 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x8312.valid){
continue;
}
IkReal gconst141=((3.14159265358979)+(((-1.0)*(x8312.value))));
IkReal gconst142=(r10*x8310);
IkReal gconst143=(r11*x8310);
CheckValue<IkReal> x8313 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x8313.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5+(x8313.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
CheckValue<IkReal> x8317 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x8317.valid){
continue;
}
IkReal x8314=((1.0)*(x8317.value));
IkReal x8315=x8309;
IkReal x8316=((1.0)*x8315);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x8314)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x8314)));
IkReal gconst142=(r10*x8316);
IkReal gconst143=(r11*x8316);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x8321 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x8321.valid){
continue;
}
IkReal x8318=((1.0)*(x8321.value));
IkReal x8319=x8309;
IkReal x8320=((1.0)*x8319);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x8318)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x8318)));
IkReal gconst142=(r10*x8320);
IkReal gconst143=(r11*x8320);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8322=((1.0)*sj0);
CheckValue<IkReal> x8323=IKPowWithIntegerCheck(IKsign((((gconst143*r20))+(((-1.0)*gconst142*r21)))),-1);
if(!x8323.valid){
continue;
}
CheckValue<IkReal> x8324 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r12))+((r02*sj0)))),IkReal(((((-1.0)*gconst143*r01*x8322))+((cj0*gconst143*r11))+((cj0*gconst142*r10))+(((-1.0)*gconst142*r00*x8322)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8324.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8323.value)))+(x8324.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8325=IKsin(j4);
IkReal x8326=IKcos(j4);
IkReal x8327=((1.0)*sj0);
IkReal x8328=(cj1*cj2);
IkReal x8329=((1.0)*cj0);
IkReal x8330=(sj1*sj2);
IkReal x8331=((1.0)*x8326);
IkReal x8332=(gconst142*x8326);
IkReal x8333=(gconst143*x8326);
IkReal x8334=((1.0)*x8325);
evalcond[0]=((((-1.0)*r22*x8331))+(((-1.0)*gconst142*r20*x8334))+(((-1.0)*gconst143*r21*x8334)));
evalcond[1]=((((-1.0)*x8329))+(((-1.0)*gconst142*r00*x8334))+(((-1.0)*r02*x8331))+(((-1.0)*gconst143*r01*x8334)));
evalcond[2]=((((-1.0)*x8327))+(((-1.0)*gconst143*r11*x8334))+(((-1.0)*r12*x8331))+(((-1.0)*gconst142*r10*x8334)));
evalcond[3]=(((cj2*sj1))+((r21*x8333))+(((-1.0)*r22*x8334))+((cj1*sj2))+((r20*x8332)));
evalcond[4]=(((r01*x8333))+((r00*x8332))+(((-1.0)*r02*x8334))+(((-1.0)*x8327*x8328))+((sj0*x8330)));
evalcond[5]=(((cj0*x8328))+(((-1.0)*r12*x8334))+((r10*x8332))+((r11*x8333))+(((-1.0)*x8329*x8330)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8335=((1.0)*sj0);
CheckValue<IkReal> x8336=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst143*r00))+((gconst142*r01)))),-1);
if(!x8336.valid){
continue;
}
CheckValue<IkReal> x8337 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst142*r20*x8335))+(((-1.0)*gconst143*r21*x8335)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8337.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8336.value)))+(x8337.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8338=IKsin(j4);
IkReal x8339=IKcos(j4);
IkReal x8340=((1.0)*sj0);
IkReal x8341=(cj1*cj2);
IkReal x8342=((1.0)*cj0);
IkReal x8343=(sj1*sj2);
IkReal x8344=((1.0)*x8339);
IkReal x8345=(gconst142*x8339);
IkReal x8346=(gconst143*x8339);
IkReal x8347=((1.0)*x8338);
evalcond[0]=((((-1.0)*gconst142*r20*x8347))+(((-1.0)*r22*x8344))+(((-1.0)*gconst143*r21*x8347)));
evalcond[1]=((((-1.0)*gconst143*r01*x8347))+(((-1.0)*r02*x8344))+(((-1.0)*x8342))+(((-1.0)*gconst142*r00*x8347)));
evalcond[2]=((((-1.0)*gconst143*r11*x8347))+(((-1.0)*x8340))+(((-1.0)*gconst142*r10*x8347))+(((-1.0)*r12*x8344)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r20*x8345))+((r21*x8346))+(((-1.0)*r22*x8347)));
evalcond[4]=(((r01*x8346))+((sj0*x8343))+(((-1.0)*r02*x8347))+(((-1.0)*x8340*x8341))+((r00*x8345)));
evalcond[5]=((((-1.0)*x8342*x8343))+((cj0*x8341))+((r11*x8346))+(((-1.0)*r12*x8347))+((r10*x8345)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8348=((1.0)*cj0);
CheckValue<IkReal> x8349=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst142*r11))+((gconst143*r10)))),-1);
if(!x8349.valid){
continue;
}
CheckValue<IkReal> x8350 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*gconst142*r20*x8348))+(((-1.0)*gconst143*r21*x8348)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8350.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8349.value)))+(x8350.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8351=IKsin(j4);
IkReal x8352=IKcos(j4);
IkReal x8353=((1.0)*sj0);
IkReal x8354=(cj1*cj2);
IkReal x8355=((1.0)*cj0);
IkReal x8356=(sj1*sj2);
IkReal x8357=((1.0)*x8352);
IkReal x8358=(gconst142*x8352);
IkReal x8359=(gconst143*x8352);
IkReal x8360=((1.0)*x8351);
evalcond[0]=((((-1.0)*r22*x8357))+(((-1.0)*gconst142*r20*x8360))+(((-1.0)*gconst143*r21*x8360)));
evalcond[1]=((((-1.0)*x8355))+(((-1.0)*gconst142*r00*x8360))+(((-1.0)*r02*x8357))+(((-1.0)*gconst143*r01*x8360)));
evalcond[2]=((((-1.0)*x8353))+(((-1.0)*gconst143*r11*x8360))+(((-1.0)*r12*x8357))+(((-1.0)*gconst142*r10*x8360)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8360))+((r21*x8359))+((r20*x8358)));
evalcond[4]=(((sj0*x8356))+(((-1.0)*x8353*x8354))+(((-1.0)*r02*x8360))+((r00*x8358))+((r01*x8359)));
evalcond[5]=(((r10*x8358))+((r11*x8359))+(((-1.0)*r12*x8360))+((cj0*x8354))+(((-1.0)*x8355*x8356)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8361=((1.0)*cj5);
IkReal x8362=(((r01*sj5))+(((-1.0)*r00*x8361)));
j4eval[0]=x8362;
j4eval[1]=IKsign(x8362);
j4eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*r21*x8361))+(((-1.0)*r20*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8363=((1.0)*sj5);
IkReal x8364=(((cj5*r20))+(((-1.0)*r21*x8363)));
j4eval[0]=x8364;
j4eval[1]=IKsign(x8364);
j4eval[2]=((IKabs(((((-1.0)*r00*x8363))+(((-1.0)*cj5*r01)))))+(IKabs(r02)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8365=(cj2*sj1);
IkReal x8366=(r10*sj5);
IkReal x8367=(cj5*r11);
IkReal x8368=(cj1*sj2);
IkReal x8369=((((-1.0)*r01*sj5))+((cj5*r00)));
j4eval[0]=x8369;
j4eval[1]=IKsign(x8369);
j4eval[2]=((IKabs((((x8367*x8368))+((x8366*x8368))+((x8365*x8366))+((x8365*x8367)))))+(IKabs((((r12*x8368))+((r12*x8365))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8370=(cj2*sj1);
IkReal x8371=(r10*sj5);
IkReal x8372=(cj5*r11);
IkReal x8373=(cj1*sj2);
CheckValue<IkReal> x8374=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj5))+((cj5*r00)))),-1);
if(!x8374.valid){
continue;
}
CheckValue<IkReal> x8375 = IKatan2WithCheck(IkReal((((x8372*x8373))+((x8371*x8373))+((x8370*x8372))+((x8370*x8371)))),IkReal((((r12*x8373))+((r12*x8370)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8375.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8374.value)))+(x8375.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8376=IKcos(j4);
IkReal x8377=IKsin(j4);
IkReal x8378=(r00*sj5);
IkReal x8379=(cj5*r01);
IkReal x8380=(r20*sj5);
IkReal x8381=(cj5*r21);
IkReal x8382=(cj5*r11);
IkReal x8383=(r10*sj5);
IkReal x8384=((1.0)*x8376);
IkReal x8385=((1.0)*x8377);
evalcond[0]=(((x8376*x8382))+((x8376*x8383))+(((-1.0)*r12*x8385)));
evalcond[1]=((((-1.0)*x8381*x8385))+(((-1.0)*x8380*x8385))+(((-1.0)*r22*x8384)));
evalcond[2]=((((-1.0)*x8379*x8385))+(((-1.0)*r02*x8384))+(((-1.0)*x8378*x8385)));
evalcond[3]=((-1.0)+(((-1.0)*x8382*x8385))+(((-1.0)*x8383*x8385))+(((-1.0)*r12*x8384)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x8376*x8381))+((x8376*x8380))+(((-1.0)*r22*x8385)));
evalcond[5]=((((-1.0)*r02*x8385))+((x8376*x8378))+((x8376*x8379))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8386=((1.0)*sj5);
CheckValue<IkReal> x8387 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x8386))+(((-1.0)*cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8387.valid){
continue;
}
CheckValue<IkReal> x8388=IKPowWithIntegerCheck(IKsign((((cj5*r20))+(((-1.0)*r21*x8386)))),-1);
if(!x8388.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8387.value)+(((1.5707963267949)*(x8388.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8389=IKcos(j4);
IkReal x8390=IKsin(j4);
IkReal x8391=(r00*sj5);
IkReal x8392=(cj5*r01);
IkReal x8393=(r20*sj5);
IkReal x8394=(cj5*r21);
IkReal x8395=(cj5*r11);
IkReal x8396=(r10*sj5);
IkReal x8397=((1.0)*x8389);
IkReal x8398=((1.0)*x8390);
evalcond[0]=(((x8389*x8396))+((x8389*x8395))+(((-1.0)*r12*x8398)));
evalcond[1]=((((-1.0)*x8393*x8398))+(((-1.0)*x8394*x8398))+(((-1.0)*r22*x8397)));
evalcond[2]=((((-1.0)*r02*x8397))+(((-1.0)*x8392*x8398))+(((-1.0)*x8391*x8398)));
evalcond[3]=((-1.0)+(((-1.0)*x8395*x8398))+(((-1.0)*x8396*x8398))+(((-1.0)*r12*x8397)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x8389*x8393))+((x8389*x8394))+(((-1.0)*r22*x8398)));
evalcond[5]=((((-1.0)*r02*x8398))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x8389*x8392))+((x8389*x8391)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8399=((1.0)*cj5);
CheckValue<IkReal> x8400=IKPowWithIntegerCheck(IKsign((((r01*sj5))+(((-1.0)*r00*x8399)))),-1);
if(!x8400.valid){
continue;
}
CheckValue<IkReal> x8401 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x8399))+(((-1.0)*r20*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8401.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8400.value)))+(x8401.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8402=IKcos(j4);
IkReal x8403=IKsin(j4);
IkReal x8404=(r00*sj5);
IkReal x8405=(cj5*r01);
IkReal x8406=(r20*sj5);
IkReal x8407=(cj5*r21);
IkReal x8408=(cj5*r11);
IkReal x8409=(r10*sj5);
IkReal x8410=((1.0)*x8402);
IkReal x8411=((1.0)*x8403);
evalcond[0]=((((-1.0)*r12*x8411))+((x8402*x8408))+((x8402*x8409)));
evalcond[1]=((((-1.0)*x8406*x8411))+(((-1.0)*x8407*x8411))+(((-1.0)*r22*x8410)));
evalcond[2]=((((-1.0)*x8404*x8411))+(((-1.0)*x8405*x8411))+(((-1.0)*r02*x8410)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x8410))+(((-1.0)*x8408*x8411))+(((-1.0)*x8409*x8411)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x8402*x8406))+((x8402*x8407))+(((-1.0)*r22*x8411)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x8411))+((x8402*x8404))+((x8402*x8405)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8412=((1.0)*sj5);
IkReal x8413=((((-1.0)*r01*x8412))+((cj5*r00)));
j4eval[0]=x8413;
j4eval[1]=IKsign(x8413);
j4eval[2]=((IKabs(((((-1.0)*r20*x8412))+(((-1.0)*cj5*r21)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8414=((1.0)*cj5);
IkReal x8415=(((r21*sj5))+(((-1.0)*r20*x8414)));
j4eval[0]=x8415;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r00*sj5))+(((-1.0)*r01*x8414))))));
j4eval[2]=IKsign(x8415);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8416=cj5*cj5;
IkReal x8417=r10*r10;
IkReal x8418=(cj5*r11);
IkReal x8419=(r10*sj5);
IkReal x8420=(((x8416*(r11*r11)))+(r12*r12)+x8417+(((-1.0)*x8416*x8417))+(((2.0)*x8418*x8419)));
j4eval[0]=x8420;
j4eval[1]=((IKabs((x8419+x8418)))+(IKabs(r12)));
j4eval[2]=IKsign(x8420);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8421=cj5*cj5;
IkReal x8422=r10*r10;
IkReal x8423=(r10*sj5);
IkReal x8424=(cj5*r11);
CheckValue<IkReal> x8425 = IKatan2WithCheck(IkReal((x8424+x8423)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x8425.valid){
continue;
}
CheckValue<IkReal> x8426=IKPowWithIntegerCheck(IKsign(((r12*r12)+x8422+(((2.0)*x8423*x8424))+((x8421*(r11*r11)))+(((-1.0)*x8421*x8422)))),-1);
if(!x8426.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8425.value)+(((1.5707963267949)*(x8426.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8427=IKcos(j4);
IkReal x8428=IKsin(j4);
IkReal x8429=(r00*sj5);
IkReal x8430=(cj5*r01);
IkReal x8431=(r20*sj5);
IkReal x8432=(cj5*r21);
IkReal x8433=(cj5*r11);
IkReal x8434=(r10*sj5);
IkReal x8435=((1.0)*x8427);
IkReal x8436=((1.0)*x8428);
evalcond[0]=(((x8427*x8434))+((x8427*x8433))+(((-1.0)*r12*x8436)));
evalcond[1]=((((-1.0)*x8432*x8436))+(((-1.0)*x8431*x8436))+(((-1.0)*r22*x8435)));
evalcond[2]=((((-1.0)*x8429*x8436))+(((-1.0)*x8430*x8436))+(((-1.0)*r02*x8435)));
evalcond[3]=((1.0)+(((-1.0)*r12*x8435))+(((-1.0)*x8434*x8436))+(((-1.0)*x8433*x8436)));
evalcond[4]=(((cj2*sj1))+((x8427*x8432))+((x8427*x8431))+((cj1*sj2))+(((-1.0)*r22*x8436)));
evalcond[5]=(((x8427*x8430))+(((-1.0)*sj1*sj2))+((x8427*x8429))+((cj1*cj2))+(((-1.0)*r02*x8436)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8437=((1.0)*cj5);
CheckValue<IkReal> x8438 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*x8437))+(((-1.0)*r00*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8438.valid){
continue;
}
CheckValue<IkReal> x8439=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x8437))+((r21*sj5)))),-1);
if(!x8439.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8438.value)+(((1.5707963267949)*(x8439.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8440=IKcos(j4);
IkReal x8441=IKsin(j4);
IkReal x8442=(r00*sj5);
IkReal x8443=(cj5*r01);
IkReal x8444=(r20*sj5);
IkReal x8445=(cj5*r21);
IkReal x8446=(cj5*r11);
IkReal x8447=(r10*sj5);
IkReal x8448=((1.0)*x8440);
IkReal x8449=((1.0)*x8441);
evalcond[0]=((((-1.0)*r12*x8449))+((x8440*x8447))+((x8440*x8446)));
evalcond[1]=((((-1.0)*x8444*x8449))+(((-1.0)*x8445*x8449))+(((-1.0)*r22*x8448)));
evalcond[2]=((((-1.0)*x8442*x8449))+(((-1.0)*x8443*x8449))+(((-1.0)*r02*x8448)));
evalcond[3]=((1.0)+(((-1.0)*x8447*x8449))+(((-1.0)*r12*x8448))+(((-1.0)*x8446*x8449)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8449))+((x8440*x8444))+((x8440*x8445)));
evalcond[5]=((((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*r02*x8449))+((x8440*x8443))+((x8440*x8442)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8450=((1.0)*sj5);
CheckValue<IkReal> x8451=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x8450))+((cj5*r00)))),-1);
if(!x8451.valid){
continue;
}
CheckValue<IkReal> x8452 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*cj5*r21))+(((-1.0)*r20*x8450)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8452.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8451.value)))+(x8452.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8453=IKcos(j4);
IkReal x8454=IKsin(j4);
IkReal x8455=(r00*sj5);
IkReal x8456=(cj5*r01);
IkReal x8457=(r20*sj5);
IkReal x8458=(cj5*r21);
IkReal x8459=(cj5*r11);
IkReal x8460=(r10*sj5);
IkReal x8461=((1.0)*x8453);
IkReal x8462=((1.0)*x8454);
evalcond[0]=(((x8453*x8460))+((x8453*x8459))+(((-1.0)*r12*x8462)));
evalcond[1]=((((-1.0)*x8457*x8462))+(((-1.0)*r22*x8461))+(((-1.0)*x8458*x8462)));
evalcond[2]=((((-1.0)*r02*x8461))+(((-1.0)*x8455*x8462))+(((-1.0)*x8456*x8462)));
evalcond[3]=((1.0)+(((-1.0)*x8459*x8462))+(((-1.0)*r12*x8461))+(((-1.0)*x8460*x8462)));
evalcond[4]=(((cj2*sj1))+((x8453*x8458))+((x8453*x8457))+((cj1*sj2))+(((-1.0)*r22*x8462)));
evalcond[5]=(((x8453*x8456))+((x8453*x8455))+(((-1.0)*r02*x8462))+(((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8463=((-1.0)*py);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x8463);
rxp0_2=(py*r00);
rxp1_0=(r21*x8463);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8464=((-1.0)*py);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x8464);
rxp0_2=(py*r00);
rxp1_0=(r21*x8464);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((cj5*r21))+((r20*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8465=((-1.0)*py);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x8465);
rxp0_2=(py*r00);
rxp1_0=(r21*x8465);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=(((r00*sj5))+((cj5*r01)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8468=IKPowWithIntegerCheck((((r00*sj5))+((cj5*r01))),-1);
if(!x8468.valid){
continue;
}
IkReal x8466=x8468.value;
IkReal x8467=(sj0*x8466);
cj4array[0]=(((cj1*cj2*x8467))+(((-1.0)*sj1*sj2*x8467)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8469=IKsin(j4);
IkReal x8470=IKcos(j4);
IkReal x8471=(cj5*r21);
IkReal x8472=(r20*sj5);
IkReal x8473=((1.0)*x8469);
evalcond[0]=((-1.0)*r12*x8469);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r12*x8470)));
evalcond[2]=((((-1.0)*x8471*x8473))+(((-1.0)*x8472*x8473)));
evalcond[3]=((((-1.0)*cj5*r01*x8473))+(((-1.0)*r00*sj5*x8473)));
evalcond[4]=(((cj2*sj1))+((x8470*x8471))+((x8470*x8472))+((cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8476=IKPowWithIntegerCheck((((cj5*r21))+((r20*sj5))),-1);
if(!x8476.valid){
continue;
}
IkReal x8474=x8476.value;
IkReal x8475=((1.0)*x8474);
cj4array[0]=((((-1.0)*cj1*sj2*x8475))+(((-1.0)*cj2*sj1*x8475)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8477=IKsin(j4);
IkReal x8478=IKcos(j4);
IkReal x8479=((1.0)*sj0);
IkReal x8480=(r00*sj5);
IkReal x8481=(cj5*r01);
IkReal x8482=((1.0)*x8477);
evalcond[0]=((-1.0)*r12*x8477);
evalcond[1]=((((-1.0)*x8479))+(((-1.0)*r12*x8478)));
evalcond[2]=((((-1.0)*cj5*r21*x8482))+(((-1.0)*r20*sj5*x8482)));
evalcond[3]=((((-1.0)*x8480*x8482))+(((-1.0)*x8481*x8482)));
evalcond[4]=((((-1.0)*cj1*cj2*x8479))+((x8478*x8481))+((x8478*x8480))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8483=IKPowWithIntegerCheck(r12,-1);
if(!x8483.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x8483.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8484=IKsin(j4);
IkReal x8485=IKcos(j4);
IkReal x8486=(cj5*r21);
IkReal x8487=(r00*sj5);
IkReal x8488=(cj5*r01);
IkReal x8489=(r20*sj5);
IkReal x8490=((1.0)*x8484);
evalcond[0]=((-1.0)*r12*x8484);
evalcond[1]=((((-1.0)*x8486*x8490))+(((-1.0)*x8489*x8490)));
evalcond[2]=((((-1.0)*x8487*x8490))+(((-1.0)*x8488*x8490)));
evalcond[3]=(((cj2*sj1))+((x8485*x8489))+((x8485*x8486))+((cj1*sj2)));
evalcond[4]=(((x8485*x8488))+((x8485*x8487))+(((-1.0)*cj1*cj2*sj0))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8491=((1.0)*sj0);
CheckValue<IkReal> x8492 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r12))+((r02*sj0)))),IkReal(((((-1.0)*r00*sj5*x8491))+((cj0*cj5*r11))+((cj0*r10*sj5))+(((-1.0)*cj5*r01*x8491)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8492.valid){
continue;
}
CheckValue<IkReal> x8493=IKPowWithIntegerCheck(IKsign((((cj5*r20))+(((-1.0)*r21*sj5)))),-1);
if(!x8493.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8492.value)+(((1.5707963267949)*(x8493.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8494=IKsin(j4);
IkReal x8495=IKcos(j4);
IkReal x8496=(r00*sj5);
IkReal x8497=(cj5*r01);
IkReal x8498=(r20*sj5);
IkReal x8499=(cj5*r21);
IkReal x8500=(cj5*r11);
IkReal x8501=((1.0)*sj0);
IkReal x8502=(r10*sj5);
IkReal x8503=(cj1*cj2);
IkReal x8504=((1.0)*cj0);
IkReal x8505=(sj1*sj2);
IkReal x8506=((1.0)*x8495);
IkReal x8507=((1.0)*x8494);
evalcond[0]=((((-1.0)*x8498*x8507))+(((-1.0)*x8499*x8507))+(((-1.0)*r22*x8506)));
evalcond[1]=((((-1.0)*x8497*x8507))+(((-1.0)*x8504))+(((-1.0)*r02*x8506))+(((-1.0)*x8496*x8507)));
evalcond[2]=((((-1.0)*x8501))+(((-1.0)*r12*x8506))+(((-1.0)*x8500*x8507))+(((-1.0)*x8502*x8507)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8507))+((x8495*x8499))+((x8495*x8498)));
evalcond[4]=((((-1.0)*x8501*x8503))+((sj0*x8505))+((x8495*x8497))+((x8495*x8496))+(((-1.0)*r02*x8507)));
evalcond[5]=(((cj0*x8503))+(((-1.0)*r12*x8507))+(((-1.0)*x8504*x8505))+((x8495*x8500))+((x8495*x8502)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8508=((1.0)*sj0);
CheckValue<IkReal> x8509 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj5*x8508))+(((-1.0)*cj5*r21*x8508)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8509.valid){
continue;
}
CheckValue<IkReal> x8510=IKPowWithIntegerCheck(IKsign((((r01*sj5))+(((-1.0)*cj5*r00)))),-1);
if(!x8510.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8509.value)+(((1.5707963267949)*(x8510.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8511=IKsin(j4);
IkReal x8512=IKcos(j4);
IkReal x8513=(r00*sj5);
IkReal x8514=(cj5*r01);
IkReal x8515=(r20*sj5);
IkReal x8516=(cj5*r21);
IkReal x8517=(cj5*r11);
IkReal x8518=((1.0)*sj0);
IkReal x8519=(r10*sj5);
IkReal x8520=(cj1*cj2);
IkReal x8521=((1.0)*cj0);
IkReal x8522=(sj1*sj2);
IkReal x8523=((1.0)*x8512);
IkReal x8524=((1.0)*x8511);
evalcond[0]=((((-1.0)*x8515*x8524))+(((-1.0)*r22*x8523))+(((-1.0)*x8516*x8524)));
evalcond[1]=((((-1.0)*x8514*x8524))+(((-1.0)*r02*x8523))+(((-1.0)*x8521))+(((-1.0)*x8513*x8524)));
evalcond[2]=((((-1.0)*x8519*x8524))+(((-1.0)*x8517*x8524))+(((-1.0)*x8518))+(((-1.0)*r12*x8523)));
evalcond[3]=(((cj2*sj1))+((x8512*x8515))+((x8512*x8516))+((cj1*sj2))+(((-1.0)*r22*x8524)));
evalcond[4]=(((x8512*x8514))+((x8512*x8513))+((sj0*x8522))+(((-1.0)*r02*x8524))+(((-1.0)*x8518*x8520)));
evalcond[5]=(((x8512*x8519))+((x8512*x8517))+((cj0*x8520))+(((-1.0)*r12*x8524))+(((-1.0)*x8521*x8522)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8525=((1.0)*cj0);
CheckValue<IkReal> x8526=IKPowWithIntegerCheck(IKsign((((cj5*r10))+(((-1.0)*r11*sj5)))),-1);
if(!x8526.valid){
continue;
}
CheckValue<IkReal> x8527 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj5*r21*x8525))+(((-1.0)*r20*sj5*x8525)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8527.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8526.value)))+(x8527.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8528=IKsin(j4);
IkReal x8529=IKcos(j4);
IkReal x8530=(r00*sj5);
IkReal x8531=(cj5*r01);
IkReal x8532=(r20*sj5);
IkReal x8533=(cj5*r21);
IkReal x8534=(cj5*r11);
IkReal x8535=((1.0)*sj0);
IkReal x8536=(r10*sj5);
IkReal x8537=(cj1*cj2);
IkReal x8538=((1.0)*cj0);
IkReal x8539=(sj1*sj2);
IkReal x8540=((1.0)*x8529);
IkReal x8541=((1.0)*x8528);
evalcond[0]=((((-1.0)*x8532*x8541))+(((-1.0)*x8533*x8541))+(((-1.0)*r22*x8540)));
evalcond[1]=((((-1.0)*x8531*x8541))+(((-1.0)*x8538))+(((-1.0)*r02*x8540))+(((-1.0)*x8530*x8541)));
evalcond[2]=((((-1.0)*x8535))+(((-1.0)*x8536*x8541))+(((-1.0)*r12*x8540))+(((-1.0)*x8534*x8541)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8541))+((x8529*x8532))+((x8529*x8533)));
evalcond[4]=((((-1.0)*r02*x8541))+((x8529*x8531))+((x8529*x8530))+((sj0*x8539))+(((-1.0)*x8535*x8537)));
evalcond[5]=(((cj0*x8537))+(((-1.0)*r12*x8541))+((x8529*x8534))+((x8529*x8536))+(((-1.0)*x8538*x8539)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x8542=cj1*cj1;
IkReal x8543=cj2*cj2;
IkReal x8544=(cj5*r10);
IkReal x8545=((875355.0)*sj1);
IkReal x8546=(r01*sj5);
IkReal x8547=(r11*sj5);
IkReal x8548=(cj1*sj2);
IkReal x8549=((8737500.0)*py);
IkReal x8550=(cj2*sj1);
IkReal x8551=((8737500.0)*px);
IkReal x8552=(cj5*r00);
IkReal x8553=((6088290.0)*cj2);
IkReal x8554=((8710000.0)*sj1);
IkReal x8555=((878118.75)*x8548);
CheckValue<IkReal> x8556 = IKatan2WithCheck(IkReal((((px*x8554))+(((-1.0)*x8546*x8555))+((x8550*x8551))+(((-878118.75)*x8546*x8550))+(((-2505000.0)*py))+(((878118.75)*x8550*x8552))+(((-251752.5)*x8544))+((x8548*x8551))+((x8545*x8552))+((x8552*x8555))+(((-1.0)*x8545*x8546))+(((251752.5)*x8547)))),IkReal(((((-878118.75)*x8544*x8550))+(((-2505000.0)*px))+(((-1.0)*py*x8554))+((x8547*x8555))+(((878118.75)*x8547*x8550))+(((-1.0)*x8544*x8555))+(((-251752.5)*x8552))+(((-1.0)*x8548*x8549))+(((-1.0)*x8549*x8550))+(((-1.0)*x8544*x8545))+((x8545*x8547))+(((251752.5)*x8546)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8556.valid){
continue;
}
CheckValue<IkReal> x8557=IKPowWithIntegerCheck(IKsign(((-3285565.0)+(((6107512.5)*x8542*x8543))+((x8542*x8553))+(((-19192.25)*x8542))+(((-6107512.5)*x8548*x8550))+(((-1.0)*x8553))+(((-3053756.25)*x8543))+(((-6088290.0)*sj1*x8548)))),-1);
if(!x8557.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x8556.value)+(((1.5707963267949)*(x8557.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x8558=IKsin(j0);
IkReal x8559=IKcos(j0);
IkReal x8560=(cj1*sj2);
IkReal x8561=((0.1005)*cj5);
IkReal x8562=((0.1005)*sj5);
IkReal x8563=((0.3495)*x8559);
IkReal x8564=(sj1*x8558);
evalcond[0]=((((0.1002)*x8559))+(((-0.3484)*x8564))+(((-1.0)*r00*x8561))+(((-0.3495)*x8558*x8560))+(((-1.0)*px))+(((-0.3495)*cj2*x8564))+((r01*x8562)));
evalcond[1]=(((r11*x8562))+(((0.1002)*x8558))+(((-1.0)*r10*x8561))+(((0.3484)*sj1*x8559))+(((-1.0)*py))+((x8560*x8563))+((cj2*sj1*x8563)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
IkReal x8565=((1.0)*sj5);
IkReal x8566=(((cj5*r10))+(((-1.0)*r11*x8565)));
j4eval[0]=x8566;
j4eval[1]=IKsign(x8566);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*cj5*r21))+(((-1.0)*cj0*r20*x8565))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8567=((1.0)*cj5);
IkReal x8568=(((r01*sj5))+(((-1.0)*r00*x8567)));
j4eval[0]=x8568;
j4eval[1]=IKsign(x8568);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r21*sj0*x8567))+(((-1.0)*r20*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8569=((1.0)*sj0);
IkReal x8570=(((cj5*r20))+(((-1.0)*r21*sj5)));
j4eval[0]=x8570;
j4eval[1]=((IKabs(((((-1.0)*r00*sj5*x8569))+((cj0*cj5*r11))+((cj0*r10*sj5))+(((-1.0)*cj5*r01*x8569)))))+(IKabs(((((-1.0)*cj0*r12))+((r02*sj0))))));
j4eval[2]=IKsign(x8570);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x8571=((-1.0)*r21);
IkReal x8573 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x8573)==0){
continue;
}
IkReal x8572=pow(x8573,-0.5);
CheckValue<IkReal> x8574 = IKatan2WithCheck(IkReal(r20),IkReal(x8571),IKFAST_ATAN2_MAGTHRESH);
if(!x8574.valid){
continue;
}
IkReal gconst0=((-1.0)*(x8574.value));
IkReal gconst1=((-1.0)*r20*x8572);
IkReal gconst2=(x8571*x8572);
CheckValue<IkReal> x8575 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x8575.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8575.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8576=((-1.0)*r21);
CheckValue<IkReal> x8579 = IKatan2WithCheck(IkReal(r20),IkReal(x8576),IKFAST_ATAN2_MAGTHRESH);
if(!x8579.valid){
continue;
}
IkReal x8577=((-1.0)*(x8579.value));
IkReal x8578=x8572;
sj5=gconst1;
cj5=gconst2;
j5=x8577;
IkReal gconst0=x8577;
IkReal gconst1=((-1.0)*r20*x8578);
IkReal gconst2=(x8576*x8578);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8580=((-1.0)*r21);
CheckValue<IkReal> x8583 = IKatan2WithCheck(IkReal(r20),IkReal(x8580),IKFAST_ATAN2_MAGTHRESH);
if(!x8583.valid){
continue;
}
IkReal x8581=((-1.0)*(x8583.value));
IkReal x8582=x8572;
sj5=gconst1;
cj5=gconst2;
j5=x8581;
IkReal gconst0=x8581;
IkReal gconst1=((-1.0)*r20*x8582);
IkReal gconst2=(x8580*x8582);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8584=((-1.0)*r21);
CheckValue<IkReal> x8587 = IKatan2WithCheck(IkReal(r20),IkReal(x8584),IKFAST_ATAN2_MAGTHRESH);
if(!x8587.valid){
continue;
}
IkReal x8585=((-1.0)*(x8587.value));
IkReal x8586=x8572;
sj5=gconst1;
cj5=gconst2;
j5=x8585;
IkReal gconst0=x8585;
IkReal gconst1=((-1.0)*r20*x8586);
IkReal gconst2=(x8584*x8586);
IkReal x8588=r22*r22;
CheckValue<IkReal> x8592=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8588))),-1);
if(!x8592.valid){
continue;
}
IkReal x8589=x8592.value;
IkReal x8590=(sj3*x8589);
IkReal x8591=(((sj3*x8588))+(((2.0)*x8590*(r20*r20)*(r21*r21)))+((x8590*(r20*r20*r20*r20)))+((x8590*(r21*r21*r21*r21))));
j4eval[0]=x8591;
j4eval[1]=IKsign(x8591);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8593=((-1.0)*r21);
CheckValue<IkReal> x8596 = IKatan2WithCheck(IkReal(r20),IkReal(x8593),IKFAST_ATAN2_MAGTHRESH);
if(!x8596.valid){
continue;
}
IkReal x8594=((-1.0)*(x8596.value));
IkReal x8595=x8572;
sj5=gconst1;
cj5=gconst2;
j5=x8594;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x8594;
IkReal gconst1=((-1.0)*r20*x8595);
IkReal gconst2=(x8593*x8595);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8597=((-1.0)*r21);
CheckValue<IkReal> x8600 = IKatan2WithCheck(IkReal(r20),IkReal(x8597),IKFAST_ATAN2_MAGTHRESH);
if(!x8600.valid){
continue;
}
IkReal x8598=((-1.0)*(x8600.value));
IkReal x8599=x8572;
sj5=gconst1;
cj5=gconst2;
j5=x8598;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x8598;
IkReal gconst1=((-1.0)*r20*x8599);
IkReal gconst2=(x8597*x8599);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8601=((-1.0)*r21);
CheckValue<IkReal> x8604 = IKatan2WithCheck(IkReal(r20),IkReal(x8601),IKFAST_ATAN2_MAGTHRESH);
if(!x8604.valid){
continue;
}
IkReal x8602=((-1.0)*(x8604.value));
IkReal x8603=x8572;
sj5=gconst1;
cj5=gconst2;
j5=x8602;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x8602;
IkReal gconst1=((-1.0)*r20*x8603);
IkReal gconst2=(x8601*x8603);
IkReal x8605=((1.0)*(r22*r22));
CheckValue<IkReal> x8609=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8605))),-1);
if(!x8609.valid){
continue;
}
IkReal x8606=x8609.value;
IkReal x8607=((1.0)*x8606);
IkReal x8608=((((-1.0)*x8607*(r21*r21*r21*r21)))+(((-2.0)*x8606*(r20*r20)*(r21*r21)))+(((-1.0)*x8605))+(((-1.0)*x8607*(r20*r20*r20*r20))));
j4eval[0]=x8608;
j4eval[1]=IKsign(x8608);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8610=((-1.0)*r21);
CheckValue<IkReal> x8613 = IKatan2WithCheck(IkReal(r20),IkReal(x8610),IKFAST_ATAN2_MAGTHRESH);
if(!x8613.valid){
continue;
}
IkReal x8611=((-1.0)*(x8613.value));
IkReal x8612=x8572;
sj5=gconst1;
cj5=gconst2;
j5=x8611;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8611;
IkReal gconst1=((-1.0)*r20*x8612);
IkReal gconst2=(x8610*x8612);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8614=((-1.0)*r21);
CheckValue<IkReal> x8617 = IKatan2WithCheck(IkReal(r20),IkReal(x8614),IKFAST_ATAN2_MAGTHRESH);
if(!x8617.valid){
continue;
}
IkReal x8615=((-1.0)*(x8617.value));
IkReal x8616=x8572;
sj5=gconst1;
cj5=gconst2;
j5=x8615;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8615;
IkReal gconst1=((-1.0)*r20*x8616);
IkReal gconst2=(x8614*x8616);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8618=((-1.0)*r21);
CheckValue<IkReal> x8621 = IKatan2WithCheck(IkReal(r20),IkReal(x8618),IKFAST_ATAN2_MAGTHRESH);
if(!x8621.valid){
continue;
}
IkReal x8619=((-1.0)*(x8621.value));
IkReal x8620=x8572;
sj5=gconst1;
cj5=gconst2;
j5=x8619;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8619;
IkReal gconst1=((-1.0)*r20*x8620);
IkReal gconst2=(x8618*x8620);
IkReal x8622=r22*r22;
IkReal x8623=((1.0)*r02);
IkReal x8624=(cj1*sj2);
IkReal x8625=(cj2*sj1);
CheckValue<IkReal> x8629=IKPowWithIntegerCheck(((-1.0)+x8622),-1);
if(!x8629.valid){
continue;
}
IkReal x8626=x8629.value;
if((((1.0)+(((-1.0)*x8622)))) < -0.00001)
continue;
IkReal x8627=IKsqrt(((1.0)+(((-1.0)*x8622))));
IkReal x8628=(r02*r22*x8626*x8627);
j4eval[0]=((IKabs((((x8624*x8628))+((x8625*x8628)))))+(IKabs(((((-1.0)*x8623*x8625))+(((-1.0)*x8623*x8624))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8630=(gconst2*r01);
IkReal x8631=(gconst1*r00);
IkReal x8632=((1.0)*cj1*sj2);
IkReal x8633=((1.0)*cj2*sj1);
CheckValue<IkReal> x8634 = IKatan2WithCheck(IkReal(((((-1.0)*x8630*x8633))+(((-1.0)*x8630*x8632))+(((-1.0)*x8631*x8632))+(((-1.0)*x8631*x8633)))),IkReal(((((-1.0)*r02*x8632))+(((-1.0)*r02*x8633)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8634.valid){
continue;
}
CheckValue<IkReal> x8635=IKPowWithIntegerCheck(IKsign((((gconst1*r11))+(((-1.0)*gconst2*r10)))),-1);
if(!x8635.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8634.value)+(((1.5707963267949)*(x8635.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8636=IKcos(j4);
IkReal x8637=IKsin(j4);
IkReal x8638=(gconst2*r21);
IkReal x8639=(gconst1*r00);
IkReal x8640=(gconst1*r20);
IkReal x8641=(gconst2*r01);
IkReal x8642=(gconst1*r10);
IkReal x8643=(gconst2*r11);
IkReal x8644=((1.0)*x8636);
IkReal x8645=((1.0)*x8637);
evalcond[0]=((((-1.0)*x8639*x8644))+((r02*x8637))+(((-1.0)*x8641*x8644)));
evalcond[1]=((((-1.0)*x8638*x8645))+(((-1.0)*r22*x8644))+(((-1.0)*x8640*x8645)));
evalcond[2]=((((-1.0)*x8642*x8645))+(((-1.0)*x8643*x8645))+(((-1.0)*r12*x8644)));
evalcond[3]=((-1.0)+(((-1.0)*x8639*x8645))+(((-1.0)*r02*x8644))+(((-1.0)*x8641*x8645)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x8638*x8644))+((cj1*sj2))+(((-1.0)*x8640*x8644))+((r22*x8637)));
evalcond[5]=((((-1.0)*x8642*x8644))+(((-1.0)*x8643*x8644))+(((-1.0)*sj1*sj2))+((r12*x8637))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8646=(gconst1*r00);
IkReal x8647=(gconst2*r01);
CheckValue<IkReal> x8648=IKPowWithIntegerCheck(IKsign(((x8647*x8647)+(x8646*x8646)+(r02*r02)+(((2.0)*x8646*x8647)))),-1);
if(!x8648.valid){
continue;
}
CheckValue<IkReal> x8649 = IKatan2WithCheck(IkReal(((((-1.0)*x8646))+(((-1.0)*x8647)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x8649.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8648.value)))+(x8649.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8650=IKcos(j4);
IkReal x8651=IKsin(j4);
IkReal x8652=(gconst2*r21);
IkReal x8653=(gconst1*r00);
IkReal x8654=(gconst1*r20);
IkReal x8655=(gconst2*r01);
IkReal x8656=(gconst1*r10);
IkReal x8657=(gconst2*r11);
IkReal x8658=((1.0)*x8650);
IkReal x8659=((1.0)*x8651);
evalcond[0]=((((-1.0)*x8655*x8658))+((r02*x8651))+(((-1.0)*x8653*x8658)));
evalcond[1]=((((-1.0)*x8652*x8659))+(((-1.0)*x8654*x8659))+(((-1.0)*r22*x8658)));
evalcond[2]=((((-1.0)*r12*x8658))+(((-1.0)*x8656*x8659))+(((-1.0)*x8657*x8659)));
evalcond[3]=((-1.0)+(((-1.0)*x8655*x8659))+(((-1.0)*x8653*x8659))+(((-1.0)*r02*x8658)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x8652*x8658))+((r22*x8651))+((cj1*sj2))+(((-1.0)*x8654*x8658)));
evalcond[5]=((((-1.0)*x8656*x8658))+(((-1.0)*sj1*sj2))+(((-1.0)*x8657*x8658))+((r12*x8651))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8660=((1.0)*gconst1);
CheckValue<IkReal> x8661=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8660))+((gconst2*r10)))),-1);
if(!x8661.valid){
continue;
}
CheckValue<IkReal> x8662 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r21))+(((-1.0)*r20*x8660)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8662.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8661.value)))+(x8662.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8663=IKcos(j4);
IkReal x8664=IKsin(j4);
IkReal x8665=(gconst2*r21);
IkReal x8666=(gconst1*r00);
IkReal x8667=(gconst1*r20);
IkReal x8668=(gconst2*r01);
IkReal x8669=(gconst1*r10);
IkReal x8670=(gconst2*r11);
IkReal x8671=((1.0)*x8663);
IkReal x8672=((1.0)*x8664);
evalcond[0]=((((-1.0)*x8668*x8671))+(((-1.0)*x8666*x8671))+((r02*x8664)));
evalcond[1]=((((-1.0)*r22*x8671))+(((-1.0)*x8667*x8672))+(((-1.0)*x8665*x8672)));
evalcond[2]=((((-1.0)*r12*x8671))+(((-1.0)*x8669*x8672))+(((-1.0)*x8670*x8672)));
evalcond[3]=((-1.0)+(((-1.0)*x8668*x8672))+(((-1.0)*r02*x8671))+(((-1.0)*x8666*x8672)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x8664))+(((-1.0)*x8667*x8671))+(((-1.0)*x8665*x8671)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r12*x8664))+(((-1.0)*x8669*x8671))+((cj1*cj2))+(((-1.0)*x8670*x8671)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8673=((-1.0)*r21);
CheckValue<IkReal> x8676 = IKatan2WithCheck(IkReal(r20),IkReal(x8673),IKFAST_ATAN2_MAGTHRESH);
if(!x8676.valid){
continue;
}
IkReal x8674=((-1.0)*(x8676.value));
IkReal x8675=x8572;
sj5=gconst1;
cj5=gconst2;
j5=x8674;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x8674;
IkReal gconst1=((-1.0)*r20*x8675);
IkReal gconst2=(x8673*x8675);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x8677=((-1.0)*r21);
CheckValue<IkReal> x8680 = IKatan2WithCheck(IkReal(r20),IkReal(x8677),IKFAST_ATAN2_MAGTHRESH);
if(!x8680.valid){
continue;
}
IkReal x8678=((-1.0)*(x8680.value));
IkReal x8679=x8572;
sj5=gconst1;
cj5=gconst2;
j5=x8678;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x8678;
IkReal gconst1=((-1.0)*r20*x8679);
IkReal gconst2=(x8677*x8679);
IkReal x8681=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x8685=IKPowWithIntegerCheck(x8681,-1);
if(!x8685.valid){
continue;
}
IkReal x8682=x8685.value;
IkReal x8683=((1.0)*x8682);
IkReal x8684=((((-1.0)*x8683*(r00*r00)*(r20*r20)))+(((-2.0)*r00*r01*r20*r21*x8682))+(((-1.0)*(r02*r02)))+(((-1.0)*x8683*(r01*r01)*(r21*r21))));
j4eval[0]=x8684;
j4eval[1]=IKsign(x8684);
j4eval[2]=r02;
j4eval[3]=x8681;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8686=((-1.0)*r21);
CheckValue<IkReal> x8689 = IKatan2WithCheck(IkReal(r20),IkReal(x8686),IKFAST_ATAN2_MAGTHRESH);
if(!x8689.valid){
continue;
}
IkReal x8687=((-1.0)*(x8689.value));
IkReal x8688=x8572;
sj5=gconst1;
cj5=gconst2;
j5=x8687;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x8687;
IkReal gconst1=((-1.0)*r20*x8688);
IkReal gconst2=(x8686*x8688);
IkReal x8690=r22*r22;
IkReal x8691=((1.0)*r02);
IkReal x8692=(cj1*sj2);
IkReal x8693=(cj2*sj1);
CheckValue<IkReal> x8697=IKPowWithIntegerCheck(((-1.0)+x8690),-1);
if(!x8697.valid){
continue;
}
IkReal x8694=x8697.value;
if((((1.0)+(((-1.0)*x8690)))) < -0.00001)
continue;
IkReal x8695=IKsqrt(((1.0)+(((-1.0)*x8690))));
IkReal x8696=(r02*r22*x8694*x8695);
j4eval[0]=((IKabs(((((-1.0)*x8691*x8693))+(((-1.0)*x8691*x8692)))))+(IKabs((((x8693*x8696))+((x8692*x8696))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8698=(gconst2*r01);
IkReal x8699=(gconst1*r00);
IkReal x8700=((1.0)*cj1*sj2);
IkReal x8701=((1.0)*cj2*sj1);
CheckValue<IkReal> x8702 = IKatan2WithCheck(IkReal(((((-1.0)*x8698*x8700))+(((-1.0)*x8698*x8701))+(((-1.0)*x8699*x8701))+(((-1.0)*x8699*x8700)))),IkReal(((((-1.0)*r02*x8700))+(((-1.0)*r02*x8701)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8702.valid){
continue;
}
CheckValue<IkReal> x8703=IKPowWithIntegerCheck(IKsign((((gconst1*r11))+(((-1.0)*gconst2*r10)))),-1);
if(!x8703.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8702.value)+(((1.5707963267949)*(x8703.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8704=IKcos(j4);
IkReal x8705=IKsin(j4);
IkReal x8706=(gconst2*r21);
IkReal x8707=(gconst1*r00);
IkReal x8708=(gconst1*r20);
IkReal x8709=(gconst2*r01);
IkReal x8710=(gconst1*r10);
IkReal x8711=(gconst2*r11);
IkReal x8712=((1.0)*x8704);
IkReal x8713=((1.0)*x8705);
evalcond[0]=((((-1.0)*x8709*x8712))+(((-1.0)*x8707*x8712))+((r02*x8705)));
evalcond[1]=((((-1.0)*x8706*x8713))+(((-1.0)*x8708*x8713))+(((-1.0)*r22*x8712)));
evalcond[2]=((((-1.0)*x8711*x8713))+(((-1.0)*r12*x8712))+(((-1.0)*x8710*x8713)));
evalcond[3]=((1.0)+(((-1.0)*x8709*x8713))+(((-1.0)*x8707*x8713))+(((-1.0)*r02*x8712)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x8706*x8712))+((cj1*sj2))+(((-1.0)*x8708*x8712))+((r22*x8705)));
evalcond[5]=(((r12*x8705))+(((-1.0)*x8711*x8712))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x8710*x8712)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8714=(gconst1*r00);
IkReal x8715=(gconst2*r01);
CheckValue<IkReal> x8716 = IKatan2WithCheck(IkReal(((((-1.0)*x8714))+(((-1.0)*x8715)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x8716.valid){
continue;
}
CheckValue<IkReal> x8717=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x8714*x8714)))+(((-1.0)*(r02*r02)))+(((-2.0)*x8714*x8715))+(((-1.0)*(x8715*x8715))))),-1);
if(!x8717.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8716.value)+(((1.5707963267949)*(x8717.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8718=IKcos(j4);
IkReal x8719=IKsin(j4);
IkReal x8720=(gconst2*r21);
IkReal x8721=(gconst1*r00);
IkReal x8722=(gconst1*r20);
IkReal x8723=(gconst2*r01);
IkReal x8724=(gconst1*r10);
IkReal x8725=(gconst2*r11);
IkReal x8726=((1.0)*x8718);
IkReal x8727=((1.0)*x8719);
evalcond[0]=((((-1.0)*x8723*x8726))+(((-1.0)*x8721*x8726))+((r02*x8719)));
evalcond[1]=((((-1.0)*x8720*x8727))+(((-1.0)*r22*x8726))+(((-1.0)*x8722*x8727)));
evalcond[2]=((((-1.0)*x8724*x8727))+(((-1.0)*x8725*x8727))+(((-1.0)*r12*x8726)));
evalcond[3]=((1.0)+(((-1.0)*x8723*x8727))+(((-1.0)*x8721*x8727))+(((-1.0)*r02*x8726)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x8720*x8726))+((cj1*sj2))+((r22*x8719))+(((-1.0)*x8722*x8726)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x8724*x8726))+(((-1.0)*x8725*x8726))+((r12*x8719)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8728=((1.0)*gconst2);
CheckValue<IkReal> x8729 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x8728))+(((-1.0)*gconst1*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8729.valid){
continue;
}
CheckValue<IkReal> x8730=IKPowWithIntegerCheck(IKsign((((gconst1*r11))+(((-1.0)*r10*x8728)))),-1);
if(!x8730.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8729.value)+(((1.5707963267949)*(x8730.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8731=IKcos(j4);
IkReal x8732=IKsin(j4);
IkReal x8733=(gconst2*r21);
IkReal x8734=(gconst1*r00);
IkReal x8735=(gconst1*r20);
IkReal x8736=(gconst2*r01);
IkReal x8737=(gconst1*r10);
IkReal x8738=(gconst2*r11);
IkReal x8739=((1.0)*x8731);
IkReal x8740=((1.0)*x8732);
evalcond[0]=(((r02*x8732))+(((-1.0)*x8736*x8739))+(((-1.0)*x8734*x8739)));
evalcond[1]=((((-1.0)*x8733*x8740))+(((-1.0)*x8735*x8740))+(((-1.0)*r22*x8739)));
evalcond[2]=((((-1.0)*x8737*x8740))+(((-1.0)*x8738*x8740))+(((-1.0)*r12*x8739)));
evalcond[3]=((1.0)+(((-1.0)*x8736*x8740))+(((-1.0)*r02*x8739))+(((-1.0)*x8734*x8740)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x8733*x8739))+((r22*x8732))+(((-1.0)*x8735*x8739)));
evalcond[5]=((((-1.0)*x8738*x8739))+((r12*x8732))+(((-1.0)*x8737*x8739))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8741=((-1.0)*r21);
CheckValue<IkReal> x8744 = IKatan2WithCheck(IkReal(r20),IkReal(x8741),IKFAST_ATAN2_MAGTHRESH);
if(!x8744.valid){
continue;
}
IkReal x8742=((-1.0)*(x8744.value));
IkReal x8743=x8572;
sj5=gconst1;
cj5=gconst2;
j5=x8742;
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x8742;
IkReal gconst1=((-1.0)*r20*x8743);
IkReal gconst2=(x8741*x8743);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8745=((-1.0)*r21);
CheckValue<IkReal> x8748 = IKatan2WithCheck(IkReal(r20),IkReal(x8745),IKFAST_ATAN2_MAGTHRESH);
if(!x8748.valid){
continue;
}
IkReal x8746=((-1.0)*(x8748.value));
IkReal x8747=x8572;
sj5=gconst1;
cj5=gconst2;
j5=x8746;
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x8746;
IkReal gconst1=((-1.0)*r20*x8747);
IkReal gconst2=(x8745*x8747);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8749=((-1.0)*r21);
CheckValue<IkReal> x8752 = IKatan2WithCheck(IkReal(r20),IkReal(x8749),IKFAST_ATAN2_MAGTHRESH);
if(!x8752.valid){
continue;
}
IkReal x8750=((-1.0)*(x8752.value));
IkReal x8751=x8572;
sj5=gconst1;
cj5=gconst2;
j5=x8750;
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x8750;
IkReal gconst1=((-1.0)*r20*x8751);
IkReal gconst2=(x8749*x8751);
IkReal x8753=r22*r22;
IkReal x8754=(cj1*r12*sj2);
IkReal x8755=(cj2*r12*sj1);
CheckValue<IkReal> x8759=IKPowWithIntegerCheck(((-1.0)+x8753),-1);
if(!x8759.valid){
continue;
}
IkReal x8756=x8759.value;
if((((1.0)+(((-1.0)*x8753)))) < -0.00001)
continue;
IkReal x8757=IKsqrt(((1.0)+(((-1.0)*x8753))));
IkReal x8758=(r22*x8756*x8757);
j4eval[0]=((IKabs((((x8755*x8758))+((x8754*x8758)))))+(IKabs(((((-1.0)*x8755))+(((-1.0)*x8754))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8760=(gconst2*r11);
IkReal x8761=(gconst1*r10);
IkReal x8762=((1.0)*cj2*sj1);
IkReal x8763=((1.0)*cj1*sj2);
CheckValue<IkReal> x8764=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r01))+((gconst2*r00)))),-1);
if(!x8764.valid){
continue;
}
CheckValue<IkReal> x8765 = IKatan2WithCheck(IkReal(((((-1.0)*x8761*x8763))+(((-1.0)*x8761*x8762))+(((-1.0)*x8760*x8763))+(((-1.0)*x8760*x8762)))),IkReal(((((-1.0)*r12*x8762))+(((-1.0)*r12*x8763)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8765.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8764.value)))+(x8765.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8766=IKcos(j4);
IkReal x8767=IKsin(j4);
IkReal x8768=(gconst2*r21);
IkReal x8769=(gconst1*r00);
IkReal x8770=(gconst1*r20);
IkReal x8771=(gconst2*r01);
IkReal x8772=(gconst1*r10);
IkReal x8773=(gconst2*r11);
IkReal x8774=((1.0)*x8766);
IkReal x8775=((1.0)*x8767);
evalcond[0]=((((-1.0)*x8772*x8774))+(((-1.0)*x8773*x8774))+((r12*x8767)));
evalcond[1]=((((-1.0)*x8768*x8775))+(((-1.0)*r22*x8774))+(((-1.0)*x8770*x8775)));
evalcond[2]=((((-1.0)*r02*x8774))+(((-1.0)*x8769*x8775))+(((-1.0)*x8771*x8775)));
evalcond[3]=((-1.0)+(((-1.0)*x8772*x8775))+(((-1.0)*x8773*x8775))+(((-1.0)*r12*x8774)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x8768*x8774))+(((-1.0)*x8770*x8774))+((r22*x8767)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x8769*x8774))+((r02*x8767))+(((-1.0)*x8771*x8774)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8776=(gconst1*r10);
IkReal x8777=(gconst2*r11);
CheckValue<IkReal> x8778=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x8776*x8776)+(x8777*x8777)+(((2.0)*x8776*x8777)))),-1);
if(!x8778.valid){
continue;
}
CheckValue<IkReal> x8779 = IKatan2WithCheck(IkReal(((((-1.0)*x8776))+(((-1.0)*x8777)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x8779.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8778.value)))+(x8779.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8780=IKcos(j4);
IkReal x8781=IKsin(j4);
IkReal x8782=(gconst2*r21);
IkReal x8783=(gconst1*r00);
IkReal x8784=(gconst1*r20);
IkReal x8785=(gconst2*r01);
IkReal x8786=(gconst1*r10);
IkReal x8787=(gconst2*r11);
IkReal x8788=((1.0)*x8780);
IkReal x8789=((1.0)*x8781);
evalcond[0]=((((-1.0)*x8786*x8788))+((r12*x8781))+(((-1.0)*x8787*x8788)));
evalcond[1]=((((-1.0)*x8784*x8789))+(((-1.0)*x8782*x8789))+(((-1.0)*r22*x8788)));
evalcond[2]=((((-1.0)*x8785*x8789))+(((-1.0)*x8783*x8789))+(((-1.0)*r02*x8788)));
evalcond[3]=((-1.0)+(((-1.0)*x8786*x8789))+(((-1.0)*x8787*x8789))+(((-1.0)*r12*x8788)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x8784*x8788))+((r22*x8781))+(((-1.0)*x8782*x8788)));
evalcond[5]=((((-1.0)*x8785*x8788))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x8781))+(((-1.0)*x8783*x8788)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8790=((1.0)*gconst2);
CheckValue<IkReal> x8791 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x8790))+(((-1.0)*gconst1*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8791.valid){
continue;
}
CheckValue<IkReal> x8792=IKPowWithIntegerCheck(IKsign((((gconst1*r01))+(((-1.0)*r00*x8790)))),-1);
if(!x8792.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8791.value)+(((1.5707963267949)*(x8792.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8793=IKcos(j4);
IkReal x8794=IKsin(j4);
IkReal x8795=(gconst2*r21);
IkReal x8796=(gconst1*r00);
IkReal x8797=(gconst1*r20);
IkReal x8798=(gconst2*r01);
IkReal x8799=(gconst1*r10);
IkReal x8800=(gconst2*r11);
IkReal x8801=((1.0)*x8793);
IkReal x8802=((1.0)*x8794);
evalcond[0]=(((r12*x8794))+(((-1.0)*x8800*x8801))+(((-1.0)*x8799*x8801)));
evalcond[1]=((((-1.0)*r22*x8801))+(((-1.0)*x8795*x8802))+(((-1.0)*x8797*x8802)));
evalcond[2]=((((-1.0)*r02*x8801))+(((-1.0)*x8798*x8802))+(((-1.0)*x8796*x8802)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x8801))+(((-1.0)*x8800*x8802))+(((-1.0)*x8799*x8802)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x8795*x8801))+(((-1.0)*x8797*x8801))+((r22*x8794)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x8798*x8801))+(((-1.0)*x8796*x8801))+((r02*x8794)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8803=((-1.0)*r21);
CheckValue<IkReal> x8806 = IKatan2WithCheck(IkReal(r20),IkReal(x8803),IKFAST_ATAN2_MAGTHRESH);
if(!x8806.valid){
continue;
}
IkReal x8804=((-1.0)*(x8806.value));
IkReal x8805=x8572;
sj5=gconst1;
cj5=gconst2;
j5=x8804;
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x8804;
IkReal gconst1=((-1.0)*r20*x8805);
IkReal gconst2=(x8803*x8805);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x8807=((-1.0)*r21);
CheckValue<IkReal> x8810 = IKatan2WithCheck(IkReal(r20),IkReal(x8807),IKFAST_ATAN2_MAGTHRESH);
if(!x8810.valid){
continue;
}
IkReal x8808=((-1.0)*(x8810.value));
IkReal x8809=x8572;
sj5=gconst1;
cj5=gconst2;
j5=x8808;
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x8808;
IkReal gconst1=((-1.0)*r20*x8809);
IkReal gconst2=(x8807*x8809);
IkReal x8811=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x8815=IKPowWithIntegerCheck(x8811,-1);
if(!x8815.valid){
continue;
}
IkReal x8812=x8815.value;
IkReal x8813=((1.0)*x8812);
IkReal x8814=((((-1.0)*x8813*(r10*r10)*(r20*r20)))+(((-1.0)*x8813*(r11*r11)*(r21*r21)))+(((-1.0)*(r12*r12)))+(((-2.0)*r10*r11*r20*r21*x8812)));
j4eval[0]=x8814;
j4eval[1]=IKsign(x8814);
j4eval[2]=r12;
j4eval[3]=x8811;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8816=((-1.0)*r21);
CheckValue<IkReal> x8819 = IKatan2WithCheck(IkReal(r20),IkReal(x8816),IKFAST_ATAN2_MAGTHRESH);
if(!x8819.valid){
continue;
}
IkReal x8817=((-1.0)*(x8819.value));
IkReal x8818=x8572;
sj5=gconst1;
cj5=gconst2;
j5=x8817;
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x8817;
IkReal gconst1=((-1.0)*r20*x8818);
IkReal gconst2=(x8816*x8818);
IkReal x8820=r22*r22;
IkReal x8821=(cj1*r12*sj2);
IkReal x8822=(cj2*r12*sj1);
CheckValue<IkReal> x8826=IKPowWithIntegerCheck(((-1.0)+x8820),-1);
if(!x8826.valid){
continue;
}
IkReal x8823=x8826.value;
if((((1.0)+(((-1.0)*x8820)))) < -0.00001)
continue;
IkReal x8824=IKsqrt(((1.0)+(((-1.0)*x8820))));
IkReal x8825=(r22*x8823*x8824);
j4eval[0]=((IKabs(((((-1.0)*x8821))+(((-1.0)*x8822)))))+(IKabs((((x8822*x8825))+((x8821*x8825))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8827=(gconst2*r11);
IkReal x8828=(gconst1*r10);
IkReal x8829=((1.0)*cj2*sj1);
IkReal x8830=((1.0)*cj1*sj2);
CheckValue<IkReal> x8831 = IKatan2WithCheck(IkReal(((((-1.0)*x8827*x8829))+(((-1.0)*x8827*x8830))+(((-1.0)*x8828*x8830))+(((-1.0)*x8828*x8829)))),IkReal(((((-1.0)*r12*x8829))+(((-1.0)*r12*x8830)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8831.valid){
continue;
}
CheckValue<IkReal> x8832=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r01))+((gconst2*r00)))),-1);
if(!x8832.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8831.value)+(((1.5707963267949)*(x8832.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8833=IKcos(j4);
IkReal x8834=IKsin(j4);
IkReal x8835=(gconst2*r21);
IkReal x8836=(gconst1*r00);
IkReal x8837=(gconst1*r20);
IkReal x8838=(gconst2*r01);
IkReal x8839=(gconst1*r10);
IkReal x8840=(gconst2*r11);
IkReal x8841=((1.0)*x8833);
IkReal x8842=((1.0)*x8834);
evalcond[0]=((((-1.0)*x8840*x8841))+((r12*x8834))+(((-1.0)*x8839*x8841)));
evalcond[1]=((((-1.0)*x8835*x8842))+(((-1.0)*r22*x8841))+(((-1.0)*x8837*x8842)));
evalcond[2]=((((-1.0)*x8838*x8842))+(((-1.0)*r02*x8841))+(((-1.0)*x8836*x8842)));
evalcond[3]=((1.0)+(((-1.0)*x8840*x8842))+(((-1.0)*x8839*x8842))+(((-1.0)*r12*x8841)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x8835*x8841))+((cj1*sj2))+(((-1.0)*x8837*x8841))+((r22*x8834)));
evalcond[5]=(((r02*x8834))+(((-1.0)*sj1*sj2))+(((-1.0)*x8838*x8841))+((cj1*cj2))+(((-1.0)*x8836*x8841)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8843=(gconst1*r10);
IkReal x8844=(gconst2*r11);
CheckValue<IkReal> x8845 = IKatan2WithCheck(IkReal(((((-1.0)*x8843))+(((-1.0)*x8844)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x8845.valid){
continue;
}
CheckValue<IkReal> x8846=IKPowWithIntegerCheck(IKsign(((((-2.0)*x8843*x8844))+(((-1.0)*(r12*r12)))+(((-1.0)*(x8844*x8844)))+(((-1.0)*(x8843*x8843))))),-1);
if(!x8846.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8845.value)+(((1.5707963267949)*(x8846.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8847=IKcos(j4);
IkReal x8848=IKsin(j4);
IkReal x8849=(gconst2*r21);
IkReal x8850=(gconst1*r00);
IkReal x8851=(gconst1*r20);
IkReal x8852=(gconst2*r01);
IkReal x8853=(gconst1*r10);
IkReal x8854=(gconst2*r11);
IkReal x8855=((1.0)*x8847);
IkReal x8856=((1.0)*x8848);
evalcond[0]=((((-1.0)*x8853*x8855))+((r12*x8848))+(((-1.0)*x8854*x8855)));
evalcond[1]=((((-1.0)*x8851*x8856))+(((-1.0)*x8849*x8856))+(((-1.0)*r22*x8855)));
evalcond[2]=((((-1.0)*x8852*x8856))+(((-1.0)*x8850*x8856))+(((-1.0)*r02*x8855)));
evalcond[3]=((1.0)+(((-1.0)*x8853*x8856))+(((-1.0)*r12*x8855))+(((-1.0)*x8854*x8856)));
evalcond[4]=(((r22*x8848))+((cj2*sj1))+(((-1.0)*x8851*x8855))+(((-1.0)*x8849*x8855))+((cj1*sj2)));
evalcond[5]=(((r02*x8848))+(((-1.0)*x8852*x8855))+(((-1.0)*x8850*x8855))+(((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8857=((1.0)*gconst1);
CheckValue<IkReal> x8858 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r21))+(((-1.0)*r20*x8857)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8858.valid){
continue;
}
CheckValue<IkReal> x8859=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x8857))+((gconst2*r00)))),-1);
if(!x8859.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8858.value)+(((1.5707963267949)*(x8859.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8860=IKcos(j4);
IkReal x8861=IKsin(j4);
IkReal x8862=(gconst2*r21);
IkReal x8863=(gconst1*r00);
IkReal x8864=(gconst1*r20);
IkReal x8865=(gconst2*r01);
IkReal x8866=(gconst1*r10);
IkReal x8867=(gconst2*r11);
IkReal x8868=((1.0)*x8860);
IkReal x8869=((1.0)*x8861);
evalcond[0]=((((-1.0)*x8866*x8868))+(((-1.0)*x8867*x8868))+((r12*x8861)));
evalcond[1]=((((-1.0)*r22*x8868))+(((-1.0)*x8864*x8869))+(((-1.0)*x8862*x8869)));
evalcond[2]=((((-1.0)*x8863*x8869))+(((-1.0)*x8865*x8869))+(((-1.0)*r02*x8868)));
evalcond[3]=((1.0)+(((-1.0)*x8866*x8869))+(((-1.0)*x8867*x8869))+(((-1.0)*r12*x8868)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x8864*x8868))+((r22*x8861))+(((-1.0)*x8862*x8868)));
evalcond[5]=((((-1.0)*x8863*x8868))+((r02*x8861))+(((-1.0)*x8865*x8868))+(((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8870=((-1.0)*r21);
IkReal x8871=((-1.0)*r20);
CheckValue<IkReal> x8873 = IKatan2WithCheck(IkReal(r20),IkReal(x8870),IKFAST_ATAN2_MAGTHRESH);
if(!x8873.valid){
continue;
}
IkReal x8872=((-1.0)*(x8873.value));
sj5=gconst1;
cj5=gconst2;
j5=x8872;
sj3=0;
cj3=1.0;
j3=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x8871);
rxp0_2=(py*r00);
rxp1_0=(py*x8870);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x8872;
IkReal gconst1=x8871;
IkReal gconst2=x8870;
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8874=((-1.0)*r21);
IkReal x8875=((-1.0)*r20);
CheckValue<IkReal> x8877 = IKatan2WithCheck(IkReal(r20),IkReal(x8874),IKFAST_ATAN2_MAGTHRESH);
if(!x8877.valid){
continue;
}
IkReal x8876=((-1.0)*(x8877.value));
sj5=gconst1;
cj5=gconst2;
j5=x8876;
sj3=0;
cj3=1.0;
j3=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x8875);
rxp0_2=(py*r00);
rxp1_0=(py*x8874);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x8876;
IkReal gconst1=x8875;
IkReal gconst2=x8874;
j4eval[0]=((1.0)+(((-1.0)*(r00*r00)))+(r21*r21));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8878=((-1.0)*r21);
IkReal x8879=((-1.0)*r20);
CheckValue<IkReal> x8881 = IKatan2WithCheck(IkReal(r20),IkReal(x8878),IKFAST_ATAN2_MAGTHRESH);
if(!x8881.valid){
continue;
}
IkReal x8880=((-1.0)*(x8881.value));
sj5=gconst1;
cj5=gconst2;
j5=x8880;
sj3=0;
cj3=1.0;
j3=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x8879);
rxp0_2=(py*r00);
rxp1_0=(py*x8878);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x8880;
IkReal gconst1=x8879;
IkReal gconst2=x8878;
j4eval[0]=(((r00*r20))+((r01*r21)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8884=IKPowWithIntegerCheck(((((-1.0)*gconst1*r00))+(((-1.0)*gconst2*r01))),-1);
if(!x8884.valid){
continue;
}
IkReal x8882=x8884.value;
IkReal x8883=(sj0*x8882);
cj4array[0]=(((cj1*cj2*x8883))+(((-1.0)*sj1*sj2*x8883)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8885=IKsin(j4);
IkReal x8886=IKcos(j4);
IkReal x8887=(gconst2*r21);
IkReal x8888=((1.0)*x8886);
IkReal x8889=((1.0)*x8885);
IkReal x8890=(gconst1*x8889);
evalcond[0]=(r12*x8885);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r12*x8888)));
evalcond[2]=((((-1.0)*r20*x8890))+(((-1.0)*x8887*x8889)));
evalcond[3]=((((-1.0)*r00*x8890))+(((-1.0)*gconst2*r01*x8889)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst1*r20*x8888))+(((-1.0)*x8887*x8888)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8893=IKPowWithIntegerCheck(((((-1.0)*gconst2*r21))+(((-1.0)*gconst1*r20))),-1);
if(!x8893.valid){
continue;
}
IkReal x8891=x8893.value;
IkReal x8892=((1.0)*x8891);
cj4array[0]=((((-1.0)*cj1*sj2*x8892))+(((-1.0)*cj2*sj1*x8892)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8894=IKsin(j4);
IkReal x8895=IKcos(j4);
IkReal x8896=(gconst1*r00);
IkReal x8897=((1.0)*sj0);
IkReal x8898=(gconst2*r01);
IkReal x8899=((1.0)*x8895);
IkReal x8900=((1.0)*x8894);
evalcond[0]=(r12*x8894);
evalcond[1]=((((-1.0)*r12*x8899))+(((-1.0)*x8897)));
evalcond[2]=((((-1.0)*gconst1*r20*x8900))+(((-1.0)*gconst2*r21*x8900)));
evalcond[3]=((((-1.0)*x8898*x8900))+(((-1.0)*x8896*x8900)));
evalcond[4]=((((-1.0)*x8896*x8899))+((sj0*sj1*sj2))+(((-1.0)*cj1*cj2*x8897))+(((-1.0)*x8898*x8899)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8901=IKPowWithIntegerCheck(r12,-1);
if(!x8901.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x8901.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8902=IKsin(j4);
IkReal x8903=IKcos(j4);
IkReal x8904=(gconst1*r00);
IkReal x8905=(gconst2*r01);
IkReal x8906=(gconst1*r20);
IkReal x8907=(gconst2*r21);
IkReal x8908=((1.0)*x8903);
IkReal x8909=((1.0)*x8902);
evalcond[0]=(r12*x8902);
evalcond[1]=((((-1.0)*x8906*x8909))+(((-1.0)*x8907*x8909)));
evalcond[2]=((((-1.0)*x8904*x8909))+(((-1.0)*x8905*x8909)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x8906*x8908))+(((-1.0)*x8907*x8908)));
evalcond[4]=((((-1.0)*cj1*cj2*sj0))+(((-1.0)*x8904*x8908))+(((-1.0)*x8905*x8908))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8910=(cj2*sj1);
IkReal x8911=(cj1*sj2);
IkReal x8912=((1.0)*gconst2*r21);
IkReal x8913=((1.0)*gconst1*r20);
CheckValue<IkReal> x8914 = IKatan2WithCheck(IkReal((((r22*x8910))+((r22*x8911)))),IkReal(((((-1.0)*x8910*x8913))+(((-1.0)*x8910*x8912))+(((-1.0)*x8911*x8913))+(((-1.0)*x8911*x8912)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8914.valid){
continue;
}
CheckValue<IkReal> x8915=IKPowWithIntegerCheck(IKsign(((((-2.0)*gconst1*gconst2*r20*r21))+(((-1.0)*gconst2*r21*x8912))+(((-1.0)*(r22*r22)))+(((-1.0)*gconst1*r20*x8913)))),-1);
if(!x8915.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8914.value)+(((1.5707963267949)*(x8915.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8916=IKsin(j4);
IkReal x8917=IKcos(j4);
IkReal x8918=(gconst2*r21);
IkReal x8919=(gconst1*r00);
IkReal x8920=(gconst1*r20);
IkReal x8921=((1.0)*sj0);
IkReal x8922=(gconst2*r01);
IkReal x8923=(gconst1*r10);
IkReal x8924=(gconst2*r11);
IkReal x8925=(cj1*cj2);
IkReal x8926=((1.0)*cj0);
IkReal x8927=(sj1*sj2);
IkReal x8928=((1.0)*x8917);
IkReal x8929=((1.0)*x8916);
evalcond[0]=((((-1.0)*r22*x8928))+(((-1.0)*x8918*x8929))+(((-1.0)*x8920*x8929)));
evalcond[1]=((((-1.0)*x8922*x8929))+(((-1.0)*r02*x8928))+(((-1.0)*x8919*x8929))+(((-1.0)*x8926)));
evalcond[2]=((((-1.0)*x8921))+(((-1.0)*r12*x8928))+(((-1.0)*x8924*x8929))+(((-1.0)*x8923*x8929)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x8918*x8928))+(((-1.0)*x8920*x8928))+((r22*x8916))+((cj1*sj2)));
evalcond[4]=((((-1.0)*x8922*x8928))+(((-1.0)*x8919*x8928))+((r02*x8916))+((sj0*x8927))+(((-1.0)*x8921*x8925)));
evalcond[5]=(((cj0*x8925))+(((-1.0)*x8926*x8927))+((r12*x8916))+(((-1.0)*x8924*x8928))+(((-1.0)*x8923*x8928)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8930=((1.0)*gconst2);
CheckValue<IkReal> x8931=IKPowWithIntegerCheck(IKsign((((gconst1*r01))+(((-1.0)*r00*x8930)))),-1);
if(!x8931.valid){
continue;
}
CheckValue<IkReal> x8932 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst1*r20*sj0))+(((-1.0)*r21*sj0*x8930)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8932.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8931.value)))+(x8932.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8933=IKsin(j4);
IkReal x8934=IKcos(j4);
IkReal x8935=(gconst2*r21);
IkReal x8936=(gconst1*r00);
IkReal x8937=(gconst1*r20);
IkReal x8938=((1.0)*sj0);
IkReal x8939=(gconst2*r01);
IkReal x8940=(gconst1*r10);
IkReal x8941=(gconst2*r11);
IkReal x8942=(cj1*cj2);
IkReal x8943=((1.0)*cj0);
IkReal x8944=(sj1*sj2);
IkReal x8945=((1.0)*x8934);
IkReal x8946=((1.0)*x8933);
evalcond[0]=((((-1.0)*r22*x8945))+(((-1.0)*x8935*x8946))+(((-1.0)*x8937*x8946)));
evalcond[1]=((((-1.0)*x8936*x8946))+(((-1.0)*x8939*x8946))+(((-1.0)*r02*x8945))+(((-1.0)*x8943)));
evalcond[2]=((((-1.0)*r12*x8945))+(((-1.0)*x8940*x8946))+(((-1.0)*x8941*x8946))+(((-1.0)*x8938)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x8935*x8945))+(((-1.0)*x8937*x8945))+((r22*x8933)));
evalcond[4]=((((-1.0)*x8936*x8945))+(((-1.0)*x8939*x8945))+(((-1.0)*x8938*x8942))+((sj0*x8944))+((r02*x8933)));
evalcond[5]=(((r12*x8933))+(((-1.0)*x8940*x8945))+(((-1.0)*x8943*x8944))+(((-1.0)*x8941*x8945))+((cj0*x8942)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8947=((1.0)*gconst1);
CheckValue<IkReal> x8948 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst2*r21))+(((-1.0)*cj0*r20*x8947)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8948.valid){
continue;
}
CheckValue<IkReal> x8949=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8947))+((gconst2*r10)))),-1);
if(!x8949.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8948.value)+(((1.5707963267949)*(x8949.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8950=IKsin(j4);
IkReal x8951=IKcos(j4);
IkReal x8952=(gconst2*r21);
IkReal x8953=(gconst1*r00);
IkReal x8954=(gconst1*r20);
IkReal x8955=((1.0)*sj0);
IkReal x8956=(gconst2*r01);
IkReal x8957=(gconst1*r10);
IkReal x8958=(gconst2*r11);
IkReal x8959=(cj1*cj2);
IkReal x8960=((1.0)*cj0);
IkReal x8961=(sj1*sj2);
IkReal x8962=((1.0)*x8951);
IkReal x8963=((1.0)*x8950);
evalcond[0]=((((-1.0)*r22*x8962))+(((-1.0)*x8952*x8963))+(((-1.0)*x8954*x8963)));
evalcond[1]=((((-1.0)*x8953*x8963))+(((-1.0)*r02*x8962))+(((-1.0)*x8956*x8963))+(((-1.0)*x8960)));
evalcond[2]=((((-1.0)*r12*x8962))+(((-1.0)*x8958*x8963))+(((-1.0)*x8957*x8963))+(((-1.0)*x8955)));
evalcond[3]=(((r22*x8950))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x8952*x8962))+(((-1.0)*x8954*x8962)));
evalcond[4]=(((r02*x8950))+(((-1.0)*x8955*x8959))+(((-1.0)*x8953*x8962))+(((-1.0)*x8956*x8962))+((sj0*x8961)));
evalcond[5]=((((-1.0)*x8958*x8962))+(((-1.0)*x8957*x8962))+((cj0*x8959))+(((-1.0)*x8960*x8961))+((r12*x8950)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8964=((-1.0)*r21);
CheckValue<IkReal> x8967 = IKatan2WithCheck(IkReal(r20),IkReal(x8964),IKFAST_ATAN2_MAGTHRESH);
if(!x8967.valid){
continue;
}
IkReal x8965=((-1.0)*(x8967.value));
IkReal x8966=x8572;
sj5=gconst1;
cj5=gconst2;
j5=x8965;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x8965;
IkReal gconst1=((-1.0)*r20*x8966);
IkReal gconst2=(x8964*x8966);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8968=((-1.0)*r21);
CheckValue<IkReal> x8971 = IKatan2WithCheck(IkReal(r20),IkReal(x8968),IKFAST_ATAN2_MAGTHRESH);
if(!x8971.valid){
continue;
}
IkReal x8969=((-1.0)*(x8971.value));
IkReal x8970=x8572;
sj5=gconst1;
cj5=gconst2;
j5=x8969;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x8969;
IkReal gconst1=((-1.0)*r20*x8970);
IkReal gconst2=(x8968*x8970);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8972=((-1.0)*r21);
CheckValue<IkReal> x8975 = IKatan2WithCheck(IkReal(r20),IkReal(x8972),IKFAST_ATAN2_MAGTHRESH);
if(!x8975.valid){
continue;
}
IkReal x8973=((-1.0)*(x8975.value));
IkReal x8974=x8572;
sj5=gconst1;
cj5=gconst2;
j5=x8973;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x8973;
IkReal gconst1=((-1.0)*r20*x8974);
IkReal gconst2=(x8972*x8974);
IkReal x8976=r22*r22;
CheckValue<IkReal> x8979=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8976))),-1);
if(!x8979.valid){
continue;
}
IkReal x8977=x8979.value;
IkReal x8978=(x8976+((x8977*(r21*r21*r21*r21)))+((x8977*(r20*r20*r20*r20)))+(((2.0)*x8977*(r20*r20)*(r21*r21))));
j4eval[0]=x8978;
j4eval[1]=IKsign(x8978);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8980=((-1.0)*r21);
CheckValue<IkReal> x8983 = IKatan2WithCheck(IkReal(r20),IkReal(x8980),IKFAST_ATAN2_MAGTHRESH);
if(!x8983.valid){
continue;
}
IkReal x8981=((-1.0)*(x8983.value));
IkReal x8982=x8572;
sj5=gconst1;
cj5=gconst2;
j5=x8981;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8981;
IkReal gconst1=((-1.0)*r20*x8982);
IkReal gconst2=(x8980*x8982);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x8984=((-1.0)*r21);
CheckValue<IkReal> x8987 = IKatan2WithCheck(IkReal(r20),IkReal(x8984),IKFAST_ATAN2_MAGTHRESH);
if(!x8987.valid){
continue;
}
IkReal x8985=((-1.0)*(x8987.value));
IkReal x8986=x8572;
sj5=gconst1;
cj5=gconst2;
j5=x8985;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8985;
IkReal gconst1=((-1.0)*r20*x8986);
IkReal gconst2=(x8984*x8986);
IkReal x8988=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x8992=IKPowWithIntegerCheck(x8988,-1);
if(!x8992.valid){
continue;
}
IkReal x8989=x8992.value;
IkReal x8990=((1.0)*x8989);
IkReal x8991=((((-1.0)*x8990*(r01*r01)*(r21*r21)))+(((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r20*r21*x8989))+(((-1.0)*x8990*(r00*r00)*(r20*r20))));
j4eval[0]=x8991;
j4eval[1]=r02;
j4eval[2]=x8988;
j4eval[3]=IKsign(x8991);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8993=((-1.0)*r21);
CheckValue<IkReal> x8996 = IKatan2WithCheck(IkReal(r20),IkReal(x8993),IKFAST_ATAN2_MAGTHRESH);
if(!x8996.valid){
continue;
}
IkReal x8994=((-1.0)*(x8996.value));
IkReal x8995=x8572;
sj5=gconst1;
cj5=gconst2;
j5=x8994;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8994;
IkReal gconst1=((-1.0)*r20*x8995);
IkReal gconst2=(x8993*x8995);
IkReal x8997=r22*r22;
IkReal x8998=(cj1*r02*sj2);
IkReal x8999=(cj2*r02*sj1);
CheckValue<IkReal> x9003=IKPowWithIntegerCheck(((-1.0)+x8997),-1);
if(!x9003.valid){
continue;
}
IkReal x9000=x9003.value;
if((((1.0)+(((-1.0)*x8997)))) < -0.00001)
continue;
IkReal x9001=IKsqrt(((1.0)+(((-1.0)*x8997))));
IkReal x9002=((1.0)*r22*x9000*x9001);
j4eval[0]=((IKabs(((((-1.0)*x8999*x9002))+(((-1.0)*x8998*x9002)))))+(IKabs((x8998+x8999))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9004=(cj2*sj1);
IkReal x9005=(gconst2*r01);
IkReal x9006=(gconst1*r00);
IkReal x9007=(cj1*sj2);
CheckValue<IkReal> x9008=IKPowWithIntegerCheck(IKsign((((gconst1*r11))+(((-1.0)*gconst2*r10)))),-1);
if(!x9008.valid){
continue;
}
CheckValue<IkReal> x9009 = IKatan2WithCheck(IkReal((((x9006*x9007))+((x9005*x9007))+((x9004*x9005))+((x9004*x9006)))),IkReal((((r02*x9007))+((r02*x9004)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9009.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9008.value)))+(x9009.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9010=IKcos(j4);
IkReal x9011=IKsin(j4);
IkReal x9012=(gconst1*r10);
IkReal x9013=(gconst1*r20);
IkReal x9014=(gconst1*r00);
IkReal x9015=((1.0)*x9010);
IkReal x9016=(gconst2*x9010);
IkReal x9017=((1.0)*x9011);
evalcond[0]=(((x9010*x9014))+(((-1.0)*r02*x9017))+((r01*x9016)));
evalcond[1]=((((-1.0)*r22*x9015))+(((-1.0)*gconst2*r21*x9017))+(((-1.0)*x9013*x9017)));
evalcond[2]=((((-1.0)*r12*x9015))+(((-1.0)*x9012*x9017))+(((-1.0)*gconst2*r11*x9017)));
evalcond[3]=((-1.0)+(((-1.0)*x9014*x9017))+(((-1.0)*gconst2*r01*x9017))+(((-1.0)*r02*x9015)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x9017))+((cj1*sj2))+((x9010*x9013))+((r21*x9016)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r12*x9017))+((x9010*x9012))+((cj1*cj2))+((r11*x9016)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9018=(gconst2*r01);
IkReal x9019=(gconst1*r00);
CheckValue<IkReal> x9020=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x9018*x9018)))+(((-1.0)*(r02*r02)))+(((-1.0)*(x9019*x9019)))+(((-2.0)*x9018*x9019)))),-1);
if(!x9020.valid){
continue;
}
CheckValue<IkReal> x9021 = IKatan2WithCheck(IkReal((x9018+x9019)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x9021.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9020.value)))+(x9021.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9022=IKcos(j4);
IkReal x9023=IKsin(j4);
IkReal x9024=(gconst1*r10);
IkReal x9025=(gconst1*r20);
IkReal x9026=(gconst1*r00);
IkReal x9027=((1.0)*x9022);
IkReal x9028=(gconst2*x9022);
IkReal x9029=((1.0)*x9023);
evalcond[0]=(((r01*x9028))+((x9022*x9026))+(((-1.0)*r02*x9029)));
evalcond[1]=((((-1.0)*gconst2*r21*x9029))+(((-1.0)*r22*x9027))+(((-1.0)*x9025*x9029)));
evalcond[2]=((((-1.0)*gconst2*r11*x9029))+(((-1.0)*r12*x9027))+(((-1.0)*x9024*x9029)));
evalcond[3]=((-1.0)+(((-1.0)*gconst2*r01*x9029))+(((-1.0)*x9026*x9029))+(((-1.0)*r02*x9027)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r21*x9028))+(((-1.0)*r22*x9029))+((x9022*x9025)));
evalcond[5]=((((-1.0)*r12*x9029))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((r11*x9028))+((x9022*x9024)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9030=((1.0)*gconst1);
CheckValue<IkReal> x9031 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r21))+(((-1.0)*r20*x9030)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9031.valid){
continue;
}
CheckValue<IkReal> x9032=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x9030))+((gconst2*r10)))),-1);
if(!x9032.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9031.value)+(((1.5707963267949)*(x9032.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9033=IKcos(j4);
IkReal x9034=IKsin(j4);
IkReal x9035=(gconst1*r10);
IkReal x9036=(gconst1*r20);
IkReal x9037=(gconst1*r00);
IkReal x9038=((1.0)*x9033);
IkReal x9039=(gconst2*x9033);
IkReal x9040=((1.0)*x9034);
evalcond[0]=(((r01*x9039))+((x9033*x9037))+(((-1.0)*r02*x9040)));
evalcond[1]=((((-1.0)*gconst2*r21*x9040))+(((-1.0)*x9036*x9040))+(((-1.0)*r22*x9038)));
evalcond[2]=((((-1.0)*r12*x9038))+(((-1.0)*gconst2*r11*x9040))+(((-1.0)*x9035*x9040)));
evalcond[3]=((-1.0)+(((-1.0)*x9037*x9040))+(((-1.0)*gconst2*r01*x9040))+(((-1.0)*r02*x9038)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r21*x9039))+(((-1.0)*r22*x9040))+((x9033*x9036)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r12*x9040))+((r11*x9039))+((x9033*x9035))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9041=((-1.0)*r21);
CheckValue<IkReal> x9044 = IKatan2WithCheck(IkReal(r20),IkReal(x9041),IKFAST_ATAN2_MAGTHRESH);
if(!x9044.valid){
continue;
}
IkReal x9042=((-1.0)*(x9044.value));
IkReal x9043=x8572;
sj5=gconst1;
cj5=gconst2;
j5=x9042;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9042;
IkReal gconst1=((-1.0)*r20*x9043);
IkReal gconst2=(x9041*x9043);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9045=((-1.0)*r21);
CheckValue<IkReal> x9048 = IKatan2WithCheck(IkReal(r20),IkReal(x9045),IKFAST_ATAN2_MAGTHRESH);
if(!x9048.valid){
continue;
}
IkReal x9046=((-1.0)*(x9048.value));
IkReal x9047=x8572;
sj5=gconst1;
cj5=gconst2;
j5=x9046;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9046;
IkReal gconst1=((-1.0)*r20*x9047);
IkReal gconst2=(x9045*x9047);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9049=((-1.0)*r21);
CheckValue<IkReal> x9052 = IKatan2WithCheck(IkReal(r20),IkReal(x9049),IKFAST_ATAN2_MAGTHRESH);
if(!x9052.valid){
continue;
}
IkReal x9050=((-1.0)*(x9052.value));
IkReal x9051=x8572;
sj5=gconst1;
cj5=gconst2;
j5=x9050;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9050;
IkReal gconst1=((-1.0)*r20*x9051);
IkReal gconst2=(x9049*x9051);
IkReal x9053=r22*r22;
IkReal x9054=(cj1*r02*sj2);
IkReal x9055=(cj2*r02*sj1);
CheckValue<IkReal> x9059=IKPowWithIntegerCheck(((-1.0)+x9053),-1);
if(!x9059.valid){
continue;
}
IkReal x9056=x9059.value;
if((((1.0)+(((-1.0)*x9053)))) < -0.00001)
continue;
IkReal x9057=IKsqrt(((1.0)+(((-1.0)*x9053))));
IkReal x9058=((1.0)*r22*x9056*x9057);
j4eval[0]=((IKabs(((((-1.0)*x9055*x9058))+(((-1.0)*x9054*x9058)))))+(IKabs((x9054+x9055))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9060=(cj2*sj1);
IkReal x9061=(gconst2*r01);
IkReal x9062=(gconst1*r00);
IkReal x9063=(cj1*sj2);
CheckValue<IkReal> x9064 = IKatan2WithCheck(IkReal((((x9060*x9061))+((x9060*x9062))+((x9061*x9063))+((x9062*x9063)))),IkReal((((r02*x9060))+((r02*x9063)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9064.valid){
continue;
}
CheckValue<IkReal> x9065=IKPowWithIntegerCheck(IKsign((((gconst1*r11))+(((-1.0)*gconst2*r10)))),-1);
if(!x9065.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9064.value)+(((1.5707963267949)*(x9065.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9066=IKcos(j4);
IkReal x9067=IKsin(j4);
IkReal x9068=(gconst1*r10);
IkReal x9069=(gconst1*r20);
IkReal x9070=(gconst1*r00);
IkReal x9071=((1.0)*x9066);
IkReal x9072=(gconst2*x9066);
IkReal x9073=((1.0)*x9067);
evalcond[0]=(((x9066*x9070))+(((-1.0)*r02*x9073))+((r01*x9072)));
evalcond[1]=((((-1.0)*gconst2*r21*x9073))+(((-1.0)*r22*x9071))+(((-1.0)*x9069*x9073)));
evalcond[2]=((((-1.0)*gconst2*r11*x9073))+(((-1.0)*r12*x9071))+(((-1.0)*x9068*x9073)));
evalcond[3]=((1.0)+(((-1.0)*r02*x9071))+(((-1.0)*gconst2*r01*x9073))+(((-1.0)*x9070*x9073)));
evalcond[4]=(((cj2*sj1))+((r21*x9072))+((cj1*sj2))+(((-1.0)*r22*x9073))+((x9066*x9069)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x9073))+((r11*x9072))+((x9066*x9068)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9074=(gconst2*r01);
IkReal x9075=(gconst1*r00);
CheckValue<IkReal> x9076 = IKatan2WithCheck(IkReal((x9074+x9075)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x9076.valid){
continue;
}
CheckValue<IkReal> x9077=IKPowWithIntegerCheck(IKsign(((x9074*x9074)+(x9075*x9075)+(r02*r02)+(((2.0)*x9074*x9075)))),-1);
if(!x9077.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9076.value)+(((1.5707963267949)*(x9077.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9078=IKcos(j4);
IkReal x9079=IKsin(j4);
IkReal x9080=(gconst1*r10);
IkReal x9081=(gconst1*r20);
IkReal x9082=(gconst1*r00);
IkReal x9083=((1.0)*x9078);
IkReal x9084=(gconst2*x9078);
IkReal x9085=((1.0)*x9079);
evalcond[0]=(((x9078*x9082))+((r01*x9084))+(((-1.0)*r02*x9085)));
evalcond[1]=((((-1.0)*x9081*x9085))+(((-1.0)*r22*x9083))+(((-1.0)*gconst2*r21*x9085)));
evalcond[2]=((((-1.0)*gconst2*r11*x9085))+(((-1.0)*x9080*x9085))+(((-1.0)*r12*x9083)));
evalcond[3]=((1.0)+(((-1.0)*gconst2*r01*x9085))+(((-1.0)*x9082*x9085))+(((-1.0)*r02*x9083)));
evalcond[4]=(((cj2*sj1))+((x9078*x9081))+((cj1*sj2))+((r21*x9084))+(((-1.0)*r22*x9085)));
evalcond[5]=(((x9078*x9080))+((r11*x9084))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x9085)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9086=((1.0)*gconst2);
CheckValue<IkReal> x9087 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x9086))+(((-1.0)*gconst1*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9087.valid){
continue;
}
CheckValue<IkReal> x9088=IKPowWithIntegerCheck(IKsign((((gconst1*r11))+(((-1.0)*r10*x9086)))),-1);
if(!x9088.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9087.value)+(((1.5707963267949)*(x9088.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9089=IKcos(j4);
IkReal x9090=IKsin(j4);
IkReal x9091=(gconst1*r10);
IkReal x9092=(gconst1*r20);
IkReal x9093=(gconst1*r00);
IkReal x9094=((1.0)*x9089);
IkReal x9095=(gconst2*x9089);
IkReal x9096=((1.0)*x9090);
evalcond[0]=(((r01*x9095))+(((-1.0)*r02*x9096))+((x9089*x9093)));
evalcond[1]=((((-1.0)*x9092*x9096))+(((-1.0)*r22*x9094))+(((-1.0)*gconst2*r21*x9096)));
evalcond[2]=((((-1.0)*gconst2*r11*x9096))+(((-1.0)*x9091*x9096))+(((-1.0)*r12*x9094)));
evalcond[3]=((1.0)+(((-1.0)*gconst2*r01*x9096))+(((-1.0)*x9093*x9096))+(((-1.0)*r02*x9094)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r21*x9095))+(((-1.0)*r22*x9096))+((x9089*x9092)));
evalcond[5]=(((r11*x9095))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x9089*x9091))+(((-1.0)*r12*x9096)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9097=((-1.0)*r21);
CheckValue<IkReal> x9100 = IKatan2WithCheck(IkReal(r20),IkReal(x9097),IKFAST_ATAN2_MAGTHRESH);
if(!x9100.valid){
continue;
}
IkReal x9098=((-1.0)*(x9100.value));
IkReal x9099=x8572;
sj5=gconst1;
cj5=gconst2;
j5=x9098;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9098;
IkReal gconst1=((-1.0)*r20*x9099);
IkReal gconst2=(x9097*x9099);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9101=((-1.0)*r21);
CheckValue<IkReal> x9104 = IKatan2WithCheck(IkReal(r20),IkReal(x9101),IKFAST_ATAN2_MAGTHRESH);
if(!x9104.valid){
continue;
}
IkReal x9102=((-1.0)*(x9104.value));
IkReal x9103=x8572;
sj5=gconst1;
cj5=gconst2;
j5=x9102;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9102;
IkReal gconst1=((-1.0)*r20*x9103);
IkReal gconst2=(x9101*x9103);
IkReal x9105=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9109=IKPowWithIntegerCheck(x9105,-1);
if(!x9109.valid){
continue;
}
IkReal x9106=x9109.value;
IkReal x9107=((1.0)*x9106);
IkReal x9108=((((-1.0)*x9107*(r11*r11)*(r21*r21)))+(((-1.0)*(r12*r12)))+(((-1.0)*x9107*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x9106)));
j4eval[0]=x9108;
j4eval[1]=IKsign(x9108);
j4eval[2]=r12;
j4eval[3]=x9105;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9110=((-1.0)*r21);
CheckValue<IkReal> x9113 = IKatan2WithCheck(IkReal(r20),IkReal(x9110),IKFAST_ATAN2_MAGTHRESH);
if(!x9113.valid){
continue;
}
IkReal x9111=((-1.0)*(x9113.value));
IkReal x9112=x8572;
sj5=gconst1;
cj5=gconst2;
j5=x9111;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9111;
IkReal gconst1=((-1.0)*r20*x9112);
IkReal gconst2=(x9110*x9112);
IkReal x9114=r22*r22;
IkReal x9115=(cj1*r12*sj2);
IkReal x9116=(cj2*r12*sj1);
CheckValue<IkReal> x9120=IKPowWithIntegerCheck(((-1.0)+x9114),-1);
if(!x9120.valid){
continue;
}
IkReal x9117=x9120.value;
if((((1.0)+(((-1.0)*x9114)))) < -0.00001)
continue;
IkReal x9118=IKsqrt(((1.0)+(((-1.0)*x9114))));
IkReal x9119=((1.0)*r22*x9117*x9118);
j4eval[0]=((IKabs(((((-1.0)*x9115*x9119))+(((-1.0)*x9116*x9119)))))+(IKabs((x9115+x9116))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9121=(gconst1*r10);
IkReal x9122=(cj1*sj2);
IkReal x9123=(cj2*sj1);
IkReal x9124=(gconst2*r11);
CheckValue<IkReal> x9125 = IKatan2WithCheck(IkReal((((x9122*x9124))+((x9123*x9124))+((x9121*x9123))+((x9121*x9122)))),IkReal((((r12*x9123))+((r12*x9122)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9125.valid){
continue;
}
CheckValue<IkReal> x9126=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r01))+((gconst2*r00)))),-1);
if(!x9126.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9125.value)+(((1.5707963267949)*(x9126.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9127=IKcos(j4);
IkReal x9128=IKsin(j4);
IkReal x9129=(gconst1*r10);
IkReal x9130=(gconst1*r20);
IkReal x9131=(gconst1*r00);
IkReal x9132=((1.0)*x9127);
IkReal x9133=(gconst2*x9127);
IkReal x9134=((1.0)*x9128);
evalcond[0]=((((-1.0)*r12*x9134))+((x9127*x9129))+((r11*x9133)));
evalcond[1]=((((-1.0)*x9130*x9134))+(((-1.0)*r22*x9132))+(((-1.0)*gconst2*r21*x9134)));
evalcond[2]=((((-1.0)*x9131*x9134))+(((-1.0)*r02*x9132))+(((-1.0)*gconst2*r01*x9134)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x9132))+(((-1.0)*x9129*x9134))+(((-1.0)*gconst2*r11*x9134)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x9134))+((r21*x9133))+((x9127*x9130)));
evalcond[5]=((((-1.0)*r02*x9134))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x9127*x9131))+((r01*x9133)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9135=(gconst1*r10);
IkReal x9136=(gconst2*r11);
CheckValue<IkReal> x9137 = IKatan2WithCheck(IkReal((x9136+x9135)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x9137.valid){
continue;
}
CheckValue<IkReal> x9138=IKPowWithIntegerCheck(IKsign(((((-2.0)*x9135*x9136))+(((-1.0)*(r12*r12)))+(((-1.0)*(x9135*x9135)))+(((-1.0)*(x9136*x9136))))),-1);
if(!x9138.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9137.value)+(((1.5707963267949)*(x9138.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9139=IKcos(j4);
IkReal x9140=IKsin(j4);
IkReal x9141=(gconst1*r10);
IkReal x9142=(gconst1*r20);
IkReal x9143=(gconst1*r00);
IkReal x9144=((1.0)*x9139);
IkReal x9145=(gconst2*x9139);
IkReal x9146=((1.0)*x9140);
evalcond[0]=(((x9139*x9141))+(((-1.0)*r12*x9146))+((r11*x9145)));
evalcond[1]=((((-1.0)*x9142*x9146))+(((-1.0)*gconst2*r21*x9146))+(((-1.0)*r22*x9144)));
evalcond[2]=((((-1.0)*x9143*x9146))+(((-1.0)*r02*x9144))+(((-1.0)*gconst2*r01*x9146)));
evalcond[3]=((-1.0)+(((-1.0)*x9141*x9146))+(((-1.0)*r12*x9144))+(((-1.0)*gconst2*r11*x9146)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r21*x9145))+(((-1.0)*r22*x9146))+((x9139*x9142)));
evalcond[5]=(((r01*x9145))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x9139*x9143))+(((-1.0)*r02*x9146)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9147=((1.0)*gconst2);
CheckValue<IkReal> x9148 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst1*r20))+(((-1.0)*r21*x9147)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9148.valid){
continue;
}
CheckValue<IkReal> x9149=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x9147))+((gconst1*r01)))),-1);
if(!x9149.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9148.value)+(((1.5707963267949)*(x9149.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9150=IKcos(j4);
IkReal x9151=IKsin(j4);
IkReal x9152=(gconst1*r10);
IkReal x9153=(gconst1*r20);
IkReal x9154=(gconst1*r00);
IkReal x9155=((1.0)*x9150);
IkReal x9156=(gconst2*x9150);
IkReal x9157=((1.0)*x9151);
evalcond[0]=(((r11*x9156))+((x9150*x9152))+(((-1.0)*r12*x9157)));
evalcond[1]=((((-1.0)*x9153*x9157))+(((-1.0)*gconst2*r21*x9157))+(((-1.0)*r22*x9155)));
evalcond[2]=((((-1.0)*gconst2*r01*x9157))+(((-1.0)*r02*x9155))+(((-1.0)*x9154*x9157)));
evalcond[3]=((-1.0)+(((-1.0)*x9152*x9157))+(((-1.0)*r12*x9155))+(((-1.0)*gconst2*r11*x9157)));
evalcond[4]=(((cj2*sj1))+((x9150*x9153))+((cj1*sj2))+(((-1.0)*r22*x9157))+((r21*x9156)));
evalcond[5]=((((-1.0)*r02*x9157))+((x9150*x9154))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x9156)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9158=((-1.0)*r21);
CheckValue<IkReal> x9161 = IKatan2WithCheck(IkReal(r20),IkReal(x9158),IKFAST_ATAN2_MAGTHRESH);
if(!x9161.valid){
continue;
}
IkReal x9159=((-1.0)*(x9161.value));
IkReal x9160=x8572;
sj5=gconst1;
cj5=gconst2;
j5=x9159;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9159;
IkReal gconst1=((-1.0)*r20*x9160);
IkReal gconst2=(x9158*x9160);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9162=((-1.0)*r21);
CheckValue<IkReal> x9165 = IKatan2WithCheck(IkReal(r20),IkReal(x9162),IKFAST_ATAN2_MAGTHRESH);
if(!x9165.valid){
continue;
}
IkReal x9163=((-1.0)*(x9165.value));
IkReal x9164=x8572;
sj5=gconst1;
cj5=gconst2;
j5=x9163;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9163;
IkReal gconst1=((-1.0)*r20*x9164);
IkReal gconst2=(x9162*x9164);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9166=((-1.0)*r21);
CheckValue<IkReal> x9169 = IKatan2WithCheck(IkReal(r20),IkReal(x9166),IKFAST_ATAN2_MAGTHRESH);
if(!x9169.valid){
continue;
}
IkReal x9167=((-1.0)*(x9169.value));
IkReal x9168=x8572;
sj5=gconst1;
cj5=gconst2;
j5=x9167;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9167;
IkReal gconst1=((-1.0)*r20*x9168);
IkReal gconst2=(x9166*x9168);
IkReal x9170=r22*r22;
IkReal x9171=(cj1*r12*sj2);
IkReal x9172=(cj2*r12*sj1);
CheckValue<IkReal> x9176=IKPowWithIntegerCheck(((-1.0)+x9170),-1);
if(!x9176.valid){
continue;
}
IkReal x9173=x9176.value;
if((((1.0)+(((-1.0)*x9170)))) < -0.00001)
continue;
IkReal x9174=IKsqrt(((1.0)+(((-1.0)*x9170))));
IkReal x9175=((1.0)*r22*x9173*x9174);
j4eval[0]=((IKabs(((((-1.0)*x9172*x9175))+(((-1.0)*x9171*x9175)))))+(IKabs((x9172+x9171))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9177=(gconst1*r10);
IkReal x9178=(cj1*sj2);
IkReal x9179=(cj2*sj1);
IkReal x9180=(gconst2*r11);
CheckValue<IkReal> x9181 = IKatan2WithCheck(IkReal((((x9177*x9178))+((x9177*x9179))+((x9178*x9180))+((x9179*x9180)))),IkReal((((r12*x9179))+((r12*x9178)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9181.valid){
continue;
}
CheckValue<IkReal> x9182=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r01))+((gconst2*r00)))),-1);
if(!x9182.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9181.value)+(((1.5707963267949)*(x9182.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9183=IKcos(j4);
IkReal x9184=IKsin(j4);
IkReal x9185=(gconst1*r10);
IkReal x9186=(gconst1*r20);
IkReal x9187=(gconst1*r00);
IkReal x9188=((1.0)*x9183);
IkReal x9189=(gconst2*x9183);
IkReal x9190=((1.0)*x9184);
evalcond[0]=(((r11*x9189))+((x9183*x9185))+(((-1.0)*r12*x9190)));
evalcond[1]=((((-1.0)*r22*x9188))+(((-1.0)*gconst2*r21*x9190))+(((-1.0)*x9186*x9190)));
evalcond[2]=((((-1.0)*r02*x9188))+(((-1.0)*gconst2*r01*x9190))+(((-1.0)*x9187*x9190)));
evalcond[3]=((1.0)+(((-1.0)*r12*x9188))+(((-1.0)*x9185*x9190))+(((-1.0)*gconst2*r11*x9190)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x9190))+((cj1*sj2))+((x9183*x9186))+((r21*x9189)));
evalcond[5]=((((-1.0)*r02*x9190))+(((-1.0)*sj1*sj2))+((x9183*x9187))+((cj1*cj2))+((r01*x9189)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9191=(gconst1*r10);
IkReal x9192=(gconst2*r11);
CheckValue<IkReal> x9193 = IKatan2WithCheck(IkReal((x9191+x9192)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x9193.valid){
continue;
}
CheckValue<IkReal> x9194=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x9192*x9192)+(((2.0)*x9191*x9192))+(x9191*x9191))),-1);
if(!x9194.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9193.value)+(((1.5707963267949)*(x9194.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9195=IKcos(j4);
IkReal x9196=IKsin(j4);
IkReal x9197=(gconst1*r10);
IkReal x9198=(gconst1*r20);
IkReal x9199=(gconst1*r00);
IkReal x9200=((1.0)*x9195);
IkReal x9201=(gconst2*x9195);
IkReal x9202=((1.0)*x9196);
evalcond[0]=(((x9195*x9197))+((r11*x9201))+(((-1.0)*r12*x9202)));
evalcond[1]=((((-1.0)*x9198*x9202))+(((-1.0)*gconst2*r21*x9202))+(((-1.0)*r22*x9200)));
evalcond[2]=((((-1.0)*gconst2*r01*x9202))+(((-1.0)*r02*x9200))+(((-1.0)*x9199*x9202)));
evalcond[3]=((1.0)+(((-1.0)*x9197*x9202))+(((-1.0)*r12*x9200))+(((-1.0)*gconst2*r11*x9202)));
evalcond[4]=(((cj2*sj1))+((x9195*x9198))+((cj1*sj2))+((r21*x9201))+(((-1.0)*r22*x9202)));
evalcond[5]=(((r01*x9201))+((x9195*x9199))+(((-1.0)*r02*x9202))+(((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9203=((1.0)*gconst1);
CheckValue<IkReal> x9204 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r21))+(((-1.0)*r20*x9203)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9204.valid){
continue;
}
CheckValue<IkReal> x9205=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x9203))+((gconst2*r00)))),-1);
if(!x9205.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9204.value)+(((1.5707963267949)*(x9205.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9206=IKcos(j4);
IkReal x9207=IKsin(j4);
IkReal x9208=(gconst1*r10);
IkReal x9209=(gconst1*r20);
IkReal x9210=(gconst1*r00);
IkReal x9211=((1.0)*x9206);
IkReal x9212=(gconst2*x9206);
IkReal x9213=((1.0)*x9207);
evalcond[0]=(((r11*x9212))+(((-1.0)*r12*x9213))+((x9206*x9208)));
evalcond[1]=((((-1.0)*x9209*x9213))+(((-1.0)*gconst2*r21*x9213))+(((-1.0)*r22*x9211)));
evalcond[2]=((((-1.0)*r02*x9211))+(((-1.0)*x9210*x9213))+(((-1.0)*gconst2*r01*x9213)));
evalcond[3]=((1.0)+(((-1.0)*x9208*x9213))+(((-1.0)*gconst2*r11*x9213))+(((-1.0)*r12*x9211)));
evalcond[4]=(((cj2*sj1))+((r21*x9212))+((cj1*sj2))+((x9206*x9209))+(((-1.0)*r22*x9213)));
evalcond[5]=(((x9206*x9210))+(((-1.0)*r02*x9213))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((r01*x9212)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9214=((-1.0)*r21);
IkReal x9215=((-1.0)*r20);
CheckValue<IkReal> x9217 = IKatan2WithCheck(IkReal(r20),IkReal(x9214),IKFAST_ATAN2_MAGTHRESH);
if(!x9217.valid){
continue;
}
IkReal x9216=((-1.0)*(x9217.value));
sj5=gconst1;
cj5=gconst2;
j5=x9216;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x9215);
rxp0_2=(py*r00);
rxp1_0=(py*x9214);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x9216;
IkReal gconst1=x9215;
IkReal gconst2=x9214;
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9218=((-1.0)*r21);
IkReal x9219=((-1.0)*r20);
CheckValue<IkReal> x9221 = IKatan2WithCheck(IkReal(r20),IkReal(x9218),IKFAST_ATAN2_MAGTHRESH);
if(!x9221.valid){
continue;
}
IkReal x9220=((-1.0)*(x9221.value));
sj5=gconst1;
cj5=gconst2;
j5=x9220;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x9219);
rxp0_2=(py*r00);
rxp1_0=(py*x9218);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x9220;
IkReal gconst1=x9219;
IkReal gconst2=x9218;
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(r00*r00));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9222=((-1.0)*r21);
IkReal x9223=((-1.0)*r20);
CheckValue<IkReal> x9225 = IKatan2WithCheck(IkReal(r20),IkReal(x9222),IKFAST_ATAN2_MAGTHRESH);
if(!x9225.valid){
continue;
}
IkReal x9224=((-1.0)*(x9225.value));
sj5=gconst1;
cj5=gconst2;
j5=x9224;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x9223);
rxp0_2=(py*r00);
rxp1_0=(py*x9222);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x9224;
IkReal gconst1=x9223;
IkReal gconst2=x9222;
j4eval[0]=((((-1.0)*r01*r21))+(((-1.0)*r00*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9228=IKPowWithIntegerCheck((((gconst1*r00))+((gconst2*r01))),-1);
if(!x9228.valid){
continue;
}
IkReal x9226=x9228.value;
IkReal x9227=(sj0*x9226);
cj4array[0]=((((-1.0)*sj1*sj2*x9227))+((cj1*cj2*x9227)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9229=IKsin(j4);
IkReal x9230=IKcos(j4);
IkReal x9231=(gconst1*r20);
IkReal x9232=(gconst2*r21);
IkReal x9233=((1.0)*x9229);
evalcond[0]=((-1.0)*r12*x9229);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r12*x9230)));
evalcond[2]=((((-1.0)*x9232*x9233))+(((-1.0)*x9231*x9233)));
evalcond[3]=((((-1.0)*gconst1*r00*x9233))+(((-1.0)*gconst2*r01*x9233)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x9230*x9231))+((x9230*x9232)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9236=IKPowWithIntegerCheck((((gconst2*r21))+((gconst1*r20))),-1);
if(!x9236.valid){
continue;
}
IkReal x9234=x9236.value;
IkReal x9235=((1.0)*x9234);
cj4array[0]=((((-1.0)*cj2*sj1*x9235))+(((-1.0)*cj1*sj2*x9235)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9237=IKsin(j4);
IkReal x9238=IKcos(j4);
IkReal x9239=(gconst2*r01);
IkReal x9240=((1.0)*sj0);
IkReal x9241=((1.0)*x9237);
IkReal x9242=(gconst1*x9241);
evalcond[0]=((-1.0)*r12*x9237);
evalcond[1]=((((-1.0)*x9240))+(((-1.0)*r12*x9238)));
evalcond[2]=((((-1.0)*gconst2*r21*x9241))+(((-1.0)*r20*x9242)));
evalcond[3]=((((-1.0)*r00*x9242))+(((-1.0)*x9239*x9241)));
evalcond[4]=(((gconst1*r00*x9238))+((sj0*sj1*sj2))+((x9238*x9239))+(((-1.0)*cj1*cj2*x9240)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9243=IKPowWithIntegerCheck(r12,-1);
if(!x9243.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x9243.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9244=IKsin(j4);
IkReal x9245=IKcos(j4);
IkReal x9246=(gconst1*r20);
IkReal x9247=(gconst1*r00);
IkReal x9248=(gconst2*x9245);
IkReal x9249=((1.0)*x9244);
evalcond[0]=((-1.0)*r12*x9244);
evalcond[1]=((((-1.0)*gconst2*r21*x9249))+(((-1.0)*x9246*x9249)));
evalcond[2]=((((-1.0)*x9247*x9249))+(((-1.0)*gconst2*r01*x9249)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r21*x9248))+((x9245*x9246)));
evalcond[4]=((((-1.0)*cj1*cj2*sj0))+((x9245*x9247))+((r01*x9248))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9250=(cj2*sj1);
IkReal x9251=(cj1*sj2);
IkReal x9252=(gconst1*r20);
IkReal x9253=((1.0)*gconst2*r21);
CheckValue<IkReal> x9254=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x9252*x9252)+(((gconst2*gconst2)*(r21*r21)))+(((2.0)*gconst2*r21*x9252)))),-1);
if(!x9254.valid){
continue;
}
CheckValue<IkReal> x9255 = IKatan2WithCheck(IkReal((((r22*x9250))+((r22*x9251)))),IkReal(((((-1.0)*x9250*x9253))+(((-1.0)*x9251*x9253))+(((-1.0)*x9250*x9252))+(((-1.0)*x9251*x9252)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9255.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9254.value)))+(x9255.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9256=IKsin(j4);
IkReal x9257=IKcos(j4);
IkReal x9258=(gconst1*r10);
IkReal x9259=(gconst1*r20);
IkReal x9260=((1.0)*sj0);
IkReal x9261=(gconst1*r00);
IkReal x9262=(cj1*cj2);
IkReal x9263=((1.0)*cj0);
IkReal x9264=(sj1*sj2);
IkReal x9265=((1.0)*x9257);
IkReal x9266=(gconst2*x9257);
IkReal x9267=((1.0)*x9256);
evalcond[0]=((((-1.0)*x9259*x9267))+(((-1.0)*r22*x9265))+(((-1.0)*gconst2*r21*x9267)));
evalcond[1]=((((-1.0)*x9263))+(((-1.0)*gconst2*r01*x9267))+(((-1.0)*x9261*x9267))+(((-1.0)*r02*x9265)));
evalcond[2]=((((-1.0)*x9260))+(((-1.0)*x9258*x9267))+(((-1.0)*gconst2*r11*x9267))+(((-1.0)*r12*x9265)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x9267))+((cj1*sj2))+((x9257*x9259))+((r21*x9266)));
evalcond[4]=(((sj0*x9264))+(((-1.0)*x9260*x9262))+((x9257*x9261))+((r01*x9266))+(((-1.0)*r02*x9267)));
evalcond[5]=(((cj0*x9262))+((x9257*x9258))+(((-1.0)*x9263*x9264))+(((-1.0)*r12*x9267))+((r11*x9266)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9268=((1.0)*gconst2);
CheckValue<IkReal> x9269 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst1*r20*sj0))+(((-1.0)*r21*sj0*x9268)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9269.valid){
continue;
}
CheckValue<IkReal> x9270=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x9268))+((gconst1*r01)))),-1);
if(!x9270.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9269.value)+(((1.5707963267949)*(x9270.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9271=IKsin(j4);
IkReal x9272=IKcos(j4);
IkReal x9273=(gconst1*r10);
IkReal x9274=(gconst1*r20);
IkReal x9275=((1.0)*sj0);
IkReal x9276=(gconst1*r00);
IkReal x9277=(cj1*cj2);
IkReal x9278=((1.0)*cj0);
IkReal x9279=(sj1*sj2);
IkReal x9280=((1.0)*x9272);
IkReal x9281=(gconst2*x9272);
IkReal x9282=((1.0)*x9271);
evalcond[0]=((((-1.0)*r22*x9280))+(((-1.0)*x9274*x9282))+(((-1.0)*gconst2*r21*x9282)));
evalcond[1]=((((-1.0)*gconst2*r01*x9282))+(((-1.0)*x9276*x9282))+(((-1.0)*x9278))+(((-1.0)*r02*x9280)));
evalcond[2]=((((-1.0)*r12*x9280))+(((-1.0)*x9273*x9282))+(((-1.0)*x9275))+(((-1.0)*gconst2*r11*x9282)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x9282))+((r21*x9281))+((x9272*x9274)));
evalcond[4]=(((sj0*x9279))+(((-1.0)*x9275*x9277))+((r01*x9281))+(((-1.0)*r02*x9282))+((x9272*x9276)));
evalcond[5]=(((cj0*x9277))+(((-1.0)*r12*x9282))+((r11*x9281))+(((-1.0)*x9278*x9279))+((x9272*x9273)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9283=((1.0)*gconst1);
CheckValue<IkReal> x9284 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst2*r21))+(((-1.0)*cj0*r20*x9283)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9284.valid){
continue;
}
CheckValue<IkReal> x9285=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x9283))+((gconst2*r10)))),-1);
if(!x9285.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9284.value)+(((1.5707963267949)*(x9285.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9286=IKsin(j4);
IkReal x9287=IKcos(j4);
IkReal x9288=(gconst1*r10);
IkReal x9289=(gconst1*r20);
IkReal x9290=((1.0)*sj0);
IkReal x9291=(gconst1*r00);
IkReal x9292=(cj1*cj2);
IkReal x9293=((1.0)*cj0);
IkReal x9294=(sj1*sj2);
IkReal x9295=((1.0)*x9287);
IkReal x9296=(gconst2*x9287);
IkReal x9297=((1.0)*x9286);
evalcond[0]=((((-1.0)*r22*x9295))+(((-1.0)*x9289*x9297))+(((-1.0)*gconst2*r21*x9297)));
evalcond[1]=((((-1.0)*x9291*x9297))+(((-1.0)*gconst2*r01*x9297))+(((-1.0)*x9293))+(((-1.0)*r02*x9295)));
evalcond[2]=((((-1.0)*x9290))+(((-1.0)*gconst2*r11*x9297))+(((-1.0)*x9288*x9297))+(((-1.0)*r12*x9295)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x9297))+((x9287*x9289))+((r21*x9296)));
evalcond[4]=(((r01*x9296))+(((-1.0)*r02*x9297))+(((-1.0)*x9290*x9292))+((x9287*x9291))+((sj0*x9294)));
evalcond[5]=(((r11*x9296))+(((-1.0)*x9293*x9294))+((x9287*x9288))+((cj0*x9292))+(((-1.0)*r12*x9297)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9298=((-1.0)*r21);
CheckValue<IkReal> x9301 = IKatan2WithCheck(IkReal(r20),IkReal(x9298),IKFAST_ATAN2_MAGTHRESH);
if(!x9301.valid){
continue;
}
IkReal x9299=((-1.0)*(x9301.value));
IkReal x9300=x8572;
sj5=gconst1;
cj5=gconst2;
j5=x9299;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9299;
IkReal gconst1=((-1.0)*r20*x9300);
IkReal gconst2=(x9298*x9300);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9302=gconst2*gconst2;
IkReal x9303=gconst1*gconst1;
IkReal x9304=(r01*sj3);
IkReal x9305=(cj3*r00);
IkReal x9306=(gconst1*gconst2);
IkReal x9307=(cj3*r01);
IkReal x9308=(r00*sj3);
IkReal x9309=(r11*x9302);
IkReal x9310=(r10*x9303);
CheckValue<IkReal> x9311=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+((r10*x9304*x9306))+((r11*x9306*x9308))+((x9304*x9309))+((x9308*x9310)))),-1);
if(!x9311.valid){
continue;
}
CheckValue<IkReal> x9312 = IKatan2WithCheck(IkReal(((((-1.0)*gconst2*r12*x9305))+((gconst1*r12*x9307)))),IkReal((((x9305*x9309))+(((-1.0)*r11*x9306*x9307))+((r10*x9305*x9306))+(((-1.0)*x9307*x9310)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9312.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9311.value)))+(x9312.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9313=IKsin(j4);
IkReal x9314=IKcos(j4);
IkReal x9315=(cj1*cj2);
IkReal x9316=(cj1*sj2);
IkReal x9317=(gconst1*sj3);
IkReal x9318=(cj3*r01);
IkReal x9319=(gconst2*r21);
IkReal x9320=(cj3*gconst1);
IkReal x9321=(cj2*sj1);
IkReal x9322=((1.0)*gconst2);
IkReal x9323=(gconst2*r11);
IkReal x9324=(gconst2*r01);
IkReal x9325=((1.0)*sj1*sj2);
IkReal x9326=((1.0)*x9314);
IkReal x9327=((1.0)*x9313);
IkReal x9328=(cj3*x9313);
IkReal x9329=(r00*x9322);
IkReal x9330=(sj3*x9314);
evalcond[0]=((((-1.0)*r22*x9326))+(((-1.0)*gconst1*r20*x9327))+(((-1.0)*x9319*x9327)));
evalcond[1]=((((-1.0)*r12*x9326))+(((-1.0)*gconst1*r10*x9327))+(((-1.0)*r11*x9313*x9322)));
evalcond[2]=((-1.0)+(((-1.0)*r01*x9313*x9322))+(((-1.0)*r02*x9326))+(((-1.0)*gconst1*r00*x9327)));
evalcond[3]=((((-1.0)*cj3*x9329))+(((-1.0)*r02*sj3*x9327))+((r00*x9314*x9317))+((gconst1*x9318))+((x9324*x9330)));
evalcond[4]=((((-1.0)*x9314*x9318*x9322))+(((-1.0)*r00*x9320*x9326))+((r02*x9328))+((r01*x9317))+(((-1.0)*sj3*x9329)));
evalcond[5]=((((-1.0)*x9325))+x9315+((x9319*x9330))+(((-1.0)*r22*sj3*x9327))+(((-1.0)*cj3*r20*x9322))+((r20*x9314*x9317))+((r21*x9320)));
evalcond[6]=((((-1.0)*cj3*x9319*x9326))+x9321+x9316+((r21*x9317))+((r22*x9328))+(((-1.0)*r20*x9320*x9326))+(((-1.0)*r20*sj3*x9322)));
evalcond[7]=(((r10*x9314*x9317))+(((-1.0)*x9321))+((r11*x9320))+(((-1.0)*r12*sj3*x9327))+(((-1.0)*cj3*r10*x9322))+(((-1.0)*x9316))+((x9323*x9330)));
evalcond[8]=((((-1.0)*x9325))+x9315+(((-1.0)*r10*x9320*x9326))+(((-1.0)*cj3*r11*x9314*x9322))+((r12*x9328))+(((-1.0)*r10*sj3*x9322))+((r11*x9317)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9331=((1.0)*gconst1);
CheckValue<IkReal> x9332 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r21))+(((-1.0)*r20*x9331)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9332.valid){
continue;
}
CheckValue<IkReal> x9333=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x9331))+((gconst2*r10)))),-1);
if(!x9333.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9332.value)+(((1.5707963267949)*(x9333.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9334=IKsin(j4);
IkReal x9335=IKcos(j4);
IkReal x9336=(cj1*cj2);
IkReal x9337=(cj1*sj2);
IkReal x9338=(gconst1*sj3);
IkReal x9339=(cj3*r01);
IkReal x9340=(gconst2*r21);
IkReal x9341=(cj3*gconst1);
IkReal x9342=(cj2*sj1);
IkReal x9343=((1.0)*gconst2);
IkReal x9344=(gconst2*r11);
IkReal x9345=(gconst2*r01);
IkReal x9346=((1.0)*sj1*sj2);
IkReal x9347=((1.0)*x9335);
IkReal x9348=((1.0)*x9334);
IkReal x9349=(cj3*x9334);
IkReal x9350=(r00*x9343);
IkReal x9351=(sj3*x9335);
evalcond[0]=((((-1.0)*gconst1*r20*x9348))+(((-1.0)*r22*x9347))+(((-1.0)*x9340*x9348)));
evalcond[1]=((((-1.0)*gconst1*r10*x9348))+(((-1.0)*r12*x9347))+(((-1.0)*r11*x9334*x9343)));
evalcond[2]=((-1.0)+(((-1.0)*gconst1*r00*x9348))+(((-1.0)*r02*x9347))+(((-1.0)*r01*x9334*x9343)));
evalcond[3]=(((x9345*x9351))+((gconst1*x9339))+((r00*x9335*x9338))+(((-1.0)*r02*sj3*x9348))+(((-1.0)*cj3*x9350)));
evalcond[4]=(((r01*x9338))+(((-1.0)*r00*x9341*x9347))+(((-1.0)*sj3*x9350))+(((-1.0)*x9335*x9339*x9343))+((r02*x9349)));
evalcond[5]=((((-1.0)*cj3*r20*x9343))+x9336+(((-1.0)*x9346))+(((-1.0)*r22*sj3*x9348))+((r21*x9341))+((r20*x9335*x9338))+((x9340*x9351)));
evalcond[6]=(x9337+x9342+(((-1.0)*cj3*x9340*x9347))+((r22*x9349))+((r21*x9338))+(((-1.0)*r20*sj3*x9343))+(((-1.0)*r20*x9341*x9347)));
evalcond[7]=(((r11*x9341))+(((-1.0)*r12*sj3*x9348))+(((-1.0)*x9337))+(((-1.0)*x9342))+((x9344*x9351))+(((-1.0)*cj3*r10*x9343))+((r10*x9335*x9338)));
evalcond[8]=((((-1.0)*r10*x9341*x9347))+((r12*x9349))+x9336+((r11*x9338))+(((-1.0)*x9346))+(((-1.0)*r10*sj3*x9343))+(((-1.0)*cj3*r11*x9335*x9343)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9352=((-1.0)*r21);
CheckValue<IkReal> x9355 = IKatan2WithCheck(IkReal(r20),IkReal(x9352),IKFAST_ATAN2_MAGTHRESH);
if(!x9355.valid){
continue;
}
IkReal x9353=((-1.0)*(x9355.value));
IkReal x9354=x8572;
sj5=gconst1;
cj5=gconst2;
j5=x9353;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9353;
IkReal gconst1=((-1.0)*r20*x9354);
IkReal gconst2=(x9352*x9354);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9356=gconst2*gconst2;
IkReal x9357=gconst1*gconst1;
IkReal x9358=(r01*sj3);
IkReal x9359=(cj3*r00);
IkReal x9360=(gconst1*gconst2);
IkReal x9361=(cj3*r01);
IkReal x9362=(r00*sj3);
IkReal x9363=(r11*x9356);
IkReal x9364=(r10*x9357);
CheckValue<IkReal> x9365 = IKatan2WithCheck(IkReal((((gconst1*r12*x9361))+(((-1.0)*gconst2*r12*x9359)))),IkReal(((((-1.0)*x9361*x9364))+((r10*x9359*x9360))+(((-1.0)*r11*x9360*x9361))+((x9359*x9363)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9365.valid){
continue;
}
CheckValue<IkReal> x9366=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+((r11*x9360*x9362))+((r10*x9358*x9360))+((x9362*x9364))+((x9358*x9363)))),-1);
if(!x9366.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9365.value)+(((1.5707963267949)*(x9366.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9367=IKsin(j4);
IkReal x9368=IKcos(j4);
IkReal x9369=(cj2*sj1);
IkReal x9370=(cj1*sj2);
IkReal x9371=(gconst1*sj3);
IkReal x9372=(cj3*r01);
IkReal x9373=(sj1*sj2);
IkReal x9374=(gconst2*r21);
IkReal x9375=(cj3*gconst1);
IkReal x9376=((1.0)*gconst2);
IkReal x9377=(gconst2*r11);
IkReal x9378=(cj1*cj2);
IkReal x9379=(gconst2*r01);
IkReal x9380=((1.0)*x9368);
IkReal x9381=((1.0)*x9367);
IkReal x9382=(cj3*x9367);
IkReal x9383=(r00*x9376);
IkReal x9384=(sj3*x9368);
IkReal x9385=(x9369+x9370);
evalcond[0]=((((-1.0)*gconst1*r20*x9381))+(((-1.0)*r22*x9380))+(((-1.0)*x9374*x9381)));
evalcond[1]=((((-1.0)*gconst1*r10*x9381))+(((-1.0)*r11*x9367*x9376))+(((-1.0)*r12*x9380)));
evalcond[2]=((1.0)+(((-1.0)*r01*x9367*x9376))+(((-1.0)*r02*x9380))+(((-1.0)*gconst1*r00*x9381)));
evalcond[3]=(((x9379*x9384))+((gconst1*x9372))+(((-1.0)*cj3*x9383))+((r00*x9368*x9371))+(((-1.0)*r02*sj3*x9381)));
evalcond[4]=((((-1.0)*r00*x9375*x9380))+((r02*x9382))+(((-1.0)*x9368*x9372*x9376))+(((-1.0)*sj3*x9383))+((r01*x9371)));
evalcond[5]=(x9385+(((-1.0)*cj3*r10*x9376))+((r11*x9375))+((r10*x9368*x9371))+(((-1.0)*r12*sj3*x9381))+((x9377*x9384)));
evalcond[6]=((((-1.0)*r22*sj3*x9381))+x9378+((r21*x9375))+((r20*x9368*x9371))+(((-1.0)*cj3*r20*x9376))+(((-1.0)*x9373))+((x9374*x9384)));
evalcond[7]=((((-1.0)*cj3*x9374*x9380))+x9385+((r21*x9371))+((r22*x9382))+(((-1.0)*r20*sj3*x9376))+(((-1.0)*r20*x9375*x9380)));
evalcond[8]=(x9373+((r11*x9371))+((r12*x9382))+(((-1.0)*x9378))+(((-1.0)*cj3*r11*x9368*x9376))+(((-1.0)*r10*sj3*x9376))+(((-1.0)*r10*x9375*x9380)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9386=((1.0)*gconst2);
CheckValue<IkReal> x9387=IKPowWithIntegerCheck(IKsign((((gconst1*r11))+(((-1.0)*r10*x9386)))),-1);
if(!x9387.valid){
continue;
}
CheckValue<IkReal> x9388 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x9386))+(((-1.0)*gconst1*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9388.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9387.value)))+(x9388.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9389=IKsin(j4);
IkReal x9390=IKcos(j4);
IkReal x9391=(cj2*sj1);
IkReal x9392=(cj1*sj2);
IkReal x9393=(gconst1*sj3);
IkReal x9394=(cj3*r01);
IkReal x9395=(sj1*sj2);
IkReal x9396=(gconst2*r21);
IkReal x9397=(cj3*gconst1);
IkReal x9398=((1.0)*gconst2);
IkReal x9399=(gconst2*r11);
IkReal x9400=(cj1*cj2);
IkReal x9401=(gconst2*r01);
IkReal x9402=((1.0)*x9390);
IkReal x9403=((1.0)*x9389);
IkReal x9404=(cj3*x9389);
IkReal x9405=(r00*x9398);
IkReal x9406=(sj3*x9390);
IkReal x9407=(x9392+x9391);
evalcond[0]=((((-1.0)*r22*x9402))+(((-1.0)*x9396*x9403))+(((-1.0)*gconst1*r20*x9403)));
evalcond[1]=((((-1.0)*r11*x9389*x9398))+(((-1.0)*r12*x9402))+(((-1.0)*gconst1*r10*x9403)));
evalcond[2]=((1.0)+(((-1.0)*r01*x9389*x9398))+(((-1.0)*r02*x9402))+(((-1.0)*gconst1*r00*x9403)));
evalcond[3]=(((r00*x9390*x9393))+((x9401*x9406))+(((-1.0)*cj3*x9405))+((gconst1*x9394))+(((-1.0)*r02*sj3*x9403)));
evalcond[4]=(((r01*x9393))+(((-1.0)*r00*x9397*x9402))+(((-1.0)*x9390*x9394*x9398))+(((-1.0)*sj3*x9405))+((r02*x9404)));
evalcond[5]=((((-1.0)*r12*sj3*x9403))+((r11*x9397))+((r10*x9390*x9393))+(((-1.0)*cj3*r10*x9398))+x9407+((x9399*x9406)));
evalcond[6]=(((r20*x9390*x9393))+(((-1.0)*cj3*r20*x9398))+((x9396*x9406))+(((-1.0)*x9395))+x9400+((r21*x9397))+(((-1.0)*r22*sj3*x9403)));
evalcond[7]=(((r22*x9404))+(((-1.0)*r20*sj3*x9398))+(((-1.0)*cj3*x9396*x9402))+(((-1.0)*r20*x9397*x9402))+x9407+((r21*x9393)));
evalcond[8]=(((r12*x9404))+(((-1.0)*r10*sj3*x9398))+((r11*x9393))+(((-1.0)*r10*x9397*x9402))+x9395+(((-1.0)*x9400))+(((-1.0)*cj3*r11*x9390*x9398)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9408=((-1.0)*r21);
CheckValue<IkReal> x9411 = IKatan2WithCheck(IkReal(r20),IkReal(x9408),IKFAST_ATAN2_MAGTHRESH);
if(!x9411.valid){
continue;
}
IkReal x9409=((-1.0)*(x9411.value));
IkReal x9410=x8572;
sj5=gconst1;
cj5=gconst2;
j5=x9409;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9409;
IkReal gconst1=((-1.0)*r20*x9410);
IkReal gconst2=(x9408*x9410);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9412=gconst2*gconst2;
IkReal x9413=gconst1*gconst1;
IkReal x9414=(r01*r11);
IkReal x9415=(r00*r10);
IkReal x9416=(cj3*r02);
IkReal x9417=(gconst1*r11);
IkReal x9418=(r01*r10);
IkReal x9419=(gconst2*sj3);
IkReal x9420=(cj3*gconst1*gconst2);
CheckValue<IkReal> x9421 = IKatan2WithCheck(IkReal(((((-1.0)*gconst2*r10*x9416))+((x9416*x9417)))),IkReal(((((-1.0)*cj3*r00*r11*x9413))+((cj3*x9412*x9418))+((x9415*x9420))+(((-1.0)*x9414*x9420)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9421.valid){
continue;
}
CheckValue<IkReal> x9422=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+((gconst1*x9418*x9419))+((sj3*x9412*x9414))+((r00*x9417*x9419))+((sj3*x9413*x9415)))),-1);
if(!x9422.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9421.value)+(((1.5707963267949)*(x9422.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9423=IKsin(j4);
IkReal x9424=IKcos(j4);
IkReal x9425=(cj2*sj1);
IkReal x9426=(cj1*sj2);
IkReal x9427=(gconst1*sj3);
IkReal x9428=(cj3*gconst1);
IkReal x9429=(sj1*sj2);
IkReal x9430=(gconst2*r21);
IkReal x9431=(cj3*gconst2);
IkReal x9432=(cj1*cj2);
IkReal x9433=((1.0)*x9424);
IkReal x9434=((1.0)*x9423);
IkReal x9435=(cj3*x9423);
IkReal x9436=((1.0)*x9431);
IkReal x9437=((1.0)*gconst2*sj3);
IkReal x9438=(x9425+x9426);
IkReal x9439=(gconst2*sj3*x9424);
evalcond[0]=((((-1.0)*gconst1*r20*x9434))+(((-1.0)*r22*x9433))+(((-1.0)*x9430*x9434)));
evalcond[1]=((((-1.0)*r02*x9433))+(((-1.0)*gconst2*r01*x9434))+(((-1.0)*gconst1*r00*x9434)));
evalcond[2]=((-1.0)+(((-1.0)*gconst2*r11*x9434))+(((-1.0)*gconst1*r10*x9434))+(((-1.0)*r12*x9433)));
evalcond[3]=(((r11*x9439))+(((-1.0)*r12*sj3*x9434))+(((-1.0)*r10*x9436))+((r10*x9424*x9427))+((r11*x9428)));
evalcond[4]=((((-1.0)*r11*x9431*x9433))+(((-1.0)*r10*x9437))+(((-1.0)*r10*x9428*x9433))+((r12*x9435))+((r11*x9427)));
evalcond[5]=(((r01*x9428))+x9438+(((-1.0)*r00*x9436))+(((-1.0)*r02*sj3*x9434))+((r00*x9424*x9427))+((r01*x9439)));
evalcond[6]=(((r20*x9424*x9427))+((sj3*x9424*x9430))+(((-1.0)*x9429))+(((-1.0)*r20*x9436))+x9432+((r21*x9428))+(((-1.0)*r22*sj3*x9434)));
evalcond[7]=(((r22*x9435))+(((-1.0)*r20*x9428*x9433))+(((-1.0)*cj3*x9430*x9433))+(((-1.0)*r20*x9437))+x9438+((r21*x9427)));
evalcond[8]=(((r01*x9427))+(((-1.0)*r01*x9431*x9433))+(((-1.0)*x9432))+((r02*x9435))+x9429+(((-1.0)*r00*x9437))+(((-1.0)*r00*x9428*x9433)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9440=((1.0)*gconst2);
CheckValue<IkReal> x9441 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x9440))+(((-1.0)*gconst1*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9441.valid){
continue;
}
CheckValue<IkReal> x9442=IKPowWithIntegerCheck(IKsign((((gconst1*r01))+(((-1.0)*r00*x9440)))),-1);
if(!x9442.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9441.value)+(((1.5707963267949)*(x9442.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9443=IKsin(j4);
IkReal x9444=IKcos(j4);
IkReal x9445=(cj2*sj1);
IkReal x9446=(cj1*sj2);
IkReal x9447=(gconst1*sj3);
IkReal x9448=(cj3*gconst1);
IkReal x9449=(sj1*sj2);
IkReal x9450=(gconst2*r21);
IkReal x9451=(cj3*gconst2);
IkReal x9452=(cj1*cj2);
IkReal x9453=((1.0)*x9444);
IkReal x9454=((1.0)*x9443);
IkReal x9455=(cj3*x9443);
IkReal x9456=((1.0)*x9451);
IkReal x9457=((1.0)*gconst2*sj3);
IkReal x9458=(x9446+x9445);
IkReal x9459=(gconst2*sj3*x9444);
evalcond[0]=((((-1.0)*x9450*x9454))+(((-1.0)*gconst1*r20*x9454))+(((-1.0)*r22*x9453)));
evalcond[1]=((((-1.0)*gconst1*r00*x9454))+(((-1.0)*gconst2*r01*x9454))+(((-1.0)*r02*x9453)));
evalcond[2]=((-1.0)+(((-1.0)*gconst2*r11*x9454))+(((-1.0)*r12*x9453))+(((-1.0)*gconst1*r10*x9454)));
evalcond[3]=(((r10*x9444*x9447))+(((-1.0)*r10*x9456))+(((-1.0)*r12*sj3*x9454))+((r11*x9459))+((r11*x9448)));
evalcond[4]=((((-1.0)*r10*x9448*x9453))+(((-1.0)*r10*x9457))+((r12*x9455))+((r11*x9447))+(((-1.0)*r11*x9451*x9453)));
evalcond[5]=(((r00*x9444*x9447))+((r01*x9459))+((r01*x9448))+(((-1.0)*r00*x9456))+(((-1.0)*r02*sj3*x9454))+x9458);
evalcond[6]=((((-1.0)*r22*sj3*x9454))+((r21*x9448))+(((-1.0)*x9449))+((r20*x9444*x9447))+x9452+(((-1.0)*r20*x9456))+((sj3*x9444*x9450)));
evalcond[7]=(((r22*x9455))+((r21*x9447))+(((-1.0)*cj3*x9450*x9453))+x9458+(((-1.0)*r20*x9457))+(((-1.0)*r20*x9448*x9453)));
evalcond[8]=((((-1.0)*r01*x9451*x9453))+((r01*x9447))+(((-1.0)*r00*x9448*x9453))+(((-1.0)*r00*x9457))+(((-1.0)*x9452))+x9449+((r02*x9455)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9460=((-1.0)*r21);
CheckValue<IkReal> x9463 = IKatan2WithCheck(IkReal(r20),IkReal(x9460),IKFAST_ATAN2_MAGTHRESH);
if(!x9463.valid){
continue;
}
IkReal x9461=((-1.0)*(x9463.value));
IkReal x9462=x8572;
sj5=gconst1;
cj5=gconst2;
j5=x9461;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9461;
IkReal gconst1=((-1.0)*r20*x9462);
IkReal gconst2=(x9460*x9462);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9464=gconst2*gconst2;
IkReal x9465=gconst1*gconst1;
IkReal x9466=(r01*r11);
IkReal x9467=(r00*r10);
IkReal x9468=(cj3*r02);
IkReal x9469=(gconst1*r11);
IkReal x9470=(r01*r10);
IkReal x9471=(gconst2*sj3);
IkReal x9472=(cj3*gconst1*gconst2);
CheckValue<IkReal> x9473=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+((sj3*x9464*x9466))+((sj3*x9465*x9467))+((r00*x9469*x9471))+((gconst1*x9470*x9471)))),-1);
if(!x9473.valid){
continue;
}
CheckValue<IkReal> x9474 = IKatan2WithCheck(IkReal(((((-1.0)*gconst2*r10*x9468))+((x9468*x9469)))),IkReal(((((-1.0)*cj3*r00*r11*x9465))+((cj3*x9464*x9470))+(((-1.0)*x9466*x9472))+((x9467*x9472)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9474.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9473.value)))+(x9474.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9475=IKsin(j4);
IkReal x9476=IKcos(j4);
IkReal x9477=(cj1*cj2);
IkReal x9478=((1.0)*sj2);
IkReal x9479=(gconst1*sj3);
IkReal x9480=(cj3*gconst1);
IkReal x9481=(gconst2*r21);
IkReal x9482=(cj2*sj1);
IkReal x9483=(gconst2*sj3);
IkReal x9484=((1.0)*r10);
IkReal x9485=((1.0)*r00);
IkReal x9486=((1.0)*r20);
IkReal x9487=(cj3*gconst2);
IkReal x9488=(sj1*x9478);
IkReal x9489=((1.0)*x9476);
IkReal x9490=((1.0)*x9475);
IkReal x9491=(cj3*x9475);
evalcond[0]=((((-1.0)*r22*x9489))+(((-1.0)*x9481*x9490))+(((-1.0)*gconst1*x9475*x9486)));
evalcond[1]=((((-1.0)*r02*x9489))+(((-1.0)*gconst2*r01*x9490))+(((-1.0)*gconst1*x9475*x9485)));
evalcond[2]=((1.0)+(((-1.0)*gconst2*r11*x9490))+(((-1.0)*gconst1*x9475*x9484))+(((-1.0)*r12*x9489)));
evalcond[3]=((((-1.0)*r12*sj3*x9490))+(((-1.0)*x9484*x9487))+((r10*x9476*x9479))+((r11*x9480))+((r11*x9476*x9483)));
evalcond[4]=(((r12*x9491))+(((-1.0)*r11*x9487*x9489))+(((-1.0)*x9476*x9480*x9484))+((r11*x9479))+(((-1.0)*x9483*x9484)));
evalcond[5]=(((sj3*x9476*x9481))+((r21*x9480))+(((-1.0)*x9488))+((r20*x9476*x9479))+(((-1.0)*x9486*x9487))+(((-1.0)*r22*sj3*x9490))+x9477);
evalcond[6]=(((r22*x9491))+(((-1.0)*cj3*x9481*x9489))+((cj1*sj2))+((r21*x9479))+(((-1.0)*x9476*x9480*x9486))+x9482+(((-1.0)*x9483*x9486)));
evalcond[7]=((((-1.0)*cj1*x9478))+((r01*x9480))+(((-1.0)*x9485*x9487))+(((-1.0)*x9482))+((r01*x9476*x9483))+((r00*x9476*x9479))+(((-1.0)*r02*sj3*x9490)));
evalcond[8]=(((r02*x9491))+(((-1.0)*x9488))+((r01*x9479))+(((-1.0)*r01*x9487*x9489))+(((-1.0)*x9476*x9480*x9485))+x9477+(((-1.0)*x9483*x9485)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9492=((1.0)*gconst1);
CheckValue<IkReal> x9493=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x9492))+((gconst2*r00)))),-1);
if(!x9493.valid){
continue;
}
CheckValue<IkReal> x9494 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r21))+(((-1.0)*r20*x9492)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9494.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9493.value)))+(x9494.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9495=IKsin(j4);
IkReal x9496=IKcos(j4);
IkReal x9497=(cj1*cj2);
IkReal x9498=((1.0)*sj2);
IkReal x9499=(gconst1*sj3);
IkReal x9500=(cj3*gconst1);
IkReal x9501=(gconst2*r21);
IkReal x9502=(cj2*sj1);
IkReal x9503=(gconst2*sj3);
IkReal x9504=((1.0)*r10);
IkReal x9505=((1.0)*r00);
IkReal x9506=((1.0)*r20);
IkReal x9507=(cj3*gconst2);
IkReal x9508=(sj1*x9498);
IkReal x9509=((1.0)*x9496);
IkReal x9510=((1.0)*x9495);
IkReal x9511=(cj3*x9495);
evalcond[0]=((((-1.0)*r22*x9509))+(((-1.0)*gconst1*x9495*x9506))+(((-1.0)*x9501*x9510)));
evalcond[1]=((((-1.0)*gconst1*x9495*x9505))+(((-1.0)*r02*x9509))+(((-1.0)*gconst2*r01*x9510)));
evalcond[2]=((1.0)+(((-1.0)*gconst2*r11*x9510))+(((-1.0)*r12*x9509))+(((-1.0)*gconst1*x9495*x9504)));
evalcond[3]=((((-1.0)*x9504*x9507))+((r10*x9496*x9499))+((r11*x9500))+((r11*x9496*x9503))+(((-1.0)*r12*sj3*x9510)));
evalcond[4]=((((-1.0)*r11*x9507*x9509))+((r12*x9511))+(((-1.0)*x9503*x9504))+(((-1.0)*x9496*x9500*x9504))+((r11*x9499)));
evalcond[5]=(((r21*x9500))+((r20*x9496*x9499))+((sj3*x9496*x9501))+(((-1.0)*x9506*x9507))+(((-1.0)*r22*sj3*x9510))+x9497+(((-1.0)*x9508)));
evalcond[6]=((((-1.0)*cj3*x9501*x9509))+((cj1*sj2))+((r22*x9511))+x9502+(((-1.0)*x9503*x9506))+((r21*x9499))+(((-1.0)*x9496*x9500*x9506)));
evalcond[7]=((((-1.0)*x9505*x9507))+(((-1.0)*cj1*x9498))+(((-1.0)*x9502))+((r01*x9496*x9503))+((r00*x9496*x9499))+((r01*x9500))+(((-1.0)*r02*sj3*x9510)));
evalcond[8]=((((-1.0)*r01*x9507*x9509))+(((-1.0)*x9503*x9505))+x9497+((r01*x9499))+(((-1.0)*x9496*x9500*x9505))+(((-1.0)*x9508))+((r02*x9511)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x9512=((-1.0)*r21);
IkReal x9513=((-1.0)*r20);
CheckValue<IkReal> x9515 = IKatan2WithCheck(IkReal(r20),IkReal(x9512),IKFAST_ATAN2_MAGTHRESH);
if(!x9515.valid){
continue;
}
IkReal x9514=((-1.0)*(x9515.value));
sj5=gconst1;
cj5=gconst2;
j5=x9514;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x9513);
rxp0_2=(py*r00);
rxp1_0=(py*x9512);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x9514;
IkReal gconst1=x9513;
IkReal gconst2=x9512;
j4eval[0]=(((r00*r20))+((r01*r21)));
j4eval[1]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9516=((-1.0)*r21);
IkReal x9517=((-1.0)*r20);
CheckValue<IkReal> x9519 = IKatan2WithCheck(IkReal(r20),IkReal(x9516),IKFAST_ATAN2_MAGTHRESH);
if(!x9519.valid){
continue;
}
IkReal x9518=((-1.0)*(x9519.value));
sj5=gconst1;
cj5=gconst2;
j5=x9518;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x9517);
rxp0_2=(py*r00);
rxp1_0=(py*x9516);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x9518;
IkReal gconst1=x9517;
IkReal gconst2=x9516;
j4eval[0]=cj3;
j4eval[1]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9520=((-1.0)*r21);
IkReal x9521=((-1.0)*r20);
CheckValue<IkReal> x9523 = IKatan2WithCheck(IkReal(r20),IkReal(x9520),IKFAST_ATAN2_MAGTHRESH);
if(!x9523.valid){
continue;
}
IkReal x9522=((-1.0)*(x9523.value));
sj5=gconst1;
cj5=gconst2;
j5=x9522;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x9521);
rxp0_2=(py*r00);
rxp1_0=(py*x9520);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x9522;
IkReal gconst1=x9521;
IkReal gconst2=x9520;
j4eval[0]=r12;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9524=((-1.0)*r21);
IkReal x9525=((-1.0)*r20);
CheckValue<IkReal> x9527 = IKatan2WithCheck(IkReal(r20),IkReal(x9524),IKFAST_ATAN2_MAGTHRESH);
if(!x9527.valid){
continue;
}
IkReal x9526=((-1.0)*(x9527.value));
sj5=gconst1;
cj5=gconst2;
j5=x9526;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x9525);
rxp0_2=(py*r00);
rxp1_0=(py*x9524);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x9526;
IkReal gconst1=x9525;
IkReal gconst2=x9524;
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9528=((-1.0)*r21);
IkReal x9529=((-1.0)*r20);
CheckValue<IkReal> x9531 = IKatan2WithCheck(IkReal(r20),IkReal(x9528),IKFAST_ATAN2_MAGTHRESH);
if(!x9531.valid){
continue;
}
IkReal x9530=((-1.0)*(x9531.value));
sj5=gconst1;
cj5=gconst2;
j5=x9530;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x9529);
rxp0_2=(py*r00);
rxp1_0=(py*x9528);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x9530;
IkReal gconst1=x9529;
IkReal gconst2=x9528;
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(r00*r00));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9532=((-1.0)*r21);
IkReal x9533=((-1.0)*r20);
CheckValue<IkReal> x9535 = IKatan2WithCheck(IkReal(r20),IkReal(x9532),IKFAST_ATAN2_MAGTHRESH);
if(!x9535.valid){
continue;
}
IkReal x9534=((-1.0)*(x9535.value));
sj5=gconst1;
cj5=gconst2;
j5=x9534;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x9533);
rxp0_2=(py*r00);
rxp1_0=(py*x9532);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x9534;
IkReal gconst1=x9533;
IkReal gconst2=x9532;
j4eval[0]=((((-1.0)*r01*r21))+(((-1.0)*r00*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9538=IKPowWithIntegerCheck((((gconst1*r00))+((gconst2*r01))),-1);
if(!x9538.valid){
continue;
}
IkReal x9536=x9538.value;
IkReal x9537=((1.0)*sj0*x9536);
cj4array[0]=((((-1.0)*cj2*sj1*x9537))+(((-1.0)*cj1*sj2*x9537)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9539=IKsin(j4);
IkReal x9540=IKcos(j4);
IkReal x9541=(gconst1*r20);
IkReal x9542=(gconst2*r21);
IkReal x9543=((1.0)*x9539);
evalcond[0]=((-1.0)*r12*x9539);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r12*x9540)));
evalcond[2]=((((-1.0)*x9541*x9543))+(((-1.0)*x9542*x9543)));
evalcond[3]=((((-1.0)*gconst1*r00*x9543))+(((-1.0)*gconst2*r01*x9543)));
evalcond[4]=((((-1.0)*sj1*sj2))+((cj1*cj2))+((x9540*x9542))+((x9540*x9541)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9545=IKPowWithIntegerCheck((((gconst2*r21))+((gconst1*r20))),-1);
if(!x9545.valid){
continue;
}
IkReal x9544=x9545.value;
cj4array[0]=(((sj1*sj2*x9544))+(((-1.0)*cj1*cj2*x9544)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9546=IKsin(j4);
IkReal x9547=IKcos(j4);
IkReal x9548=(gconst2*r01);
IkReal x9549=((1.0)*x9546);
IkReal x9550=(gconst1*x9549);
evalcond[0]=((-1.0)*r12*x9546);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r12*x9547)));
evalcond[2]=((((-1.0)*r20*x9550))+(((-1.0)*gconst2*r21*x9549)));
evalcond[3]=((((-1.0)*r00*x9550))+(((-1.0)*x9548*x9549)));
evalcond[4]=(((gconst1*r00*x9547))+((x9547*x9548))+((cj1*sj0*sj2))+((cj2*sj0*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9551=IKPowWithIntegerCheck(r12,-1);
if(!x9551.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x9551.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9552=IKsin(j4);
IkReal x9553=IKcos(j4);
IkReal x9554=(gconst1*r20);
IkReal x9555=(gconst1*r00);
IkReal x9556=(gconst2*x9553);
IkReal x9557=((1.0)*x9552);
evalcond[0]=((-1.0)*r12*x9552);
evalcond[1]=((((-1.0)*x9554*x9557))+(((-1.0)*gconst2*r21*x9557)));
evalcond[2]=((((-1.0)*x9555*x9557))+(((-1.0)*gconst2*r01*x9557)));
evalcond[3]=((((-1.0)*sj1*sj2))+((x9553*x9554))+((cj1*cj2))+((r21*x9556)));
evalcond[4]=(((cj1*sj0*sj2))+((cj2*sj0*sj1))+((x9553*x9555))+((r01*x9556)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9558=((-1.0)*r21);
IkReal x9559=((-1.0)*r20);
CheckValue<IkReal> x9561 = IKatan2WithCheck(IkReal(r20),IkReal(x9558),IKFAST_ATAN2_MAGTHRESH);
if(!x9561.valid){
continue;
}
IkReal x9560=((-1.0)*(x9561.value));
sj5=gconst1;
cj5=gconst2;
j5=x9560;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x9559);
rxp0_2=(py*r00);
rxp1_0=(py*x9558);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x9560;
IkReal gconst1=x9559;
IkReal gconst2=x9558;
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9562=((-1.0)*r21);
IkReal x9563=((-1.0)*r20);
CheckValue<IkReal> x9565 = IKatan2WithCheck(IkReal(r20),IkReal(x9562),IKFAST_ATAN2_MAGTHRESH);
if(!x9565.valid){
continue;
}
IkReal x9564=((-1.0)*(x9565.value));
sj5=gconst1;
cj5=gconst2;
j5=x9564;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x9563);
rxp0_2=(py*r00);
rxp1_0=(py*x9562);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x9564;
IkReal gconst1=x9563;
IkReal gconst2=x9562;
j4eval[0]=((1.0)+(((-1.0)*(r00*r00)))+(r21*r21));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9566=((-1.0)*r21);
IkReal x9567=((-1.0)*r20);
CheckValue<IkReal> x9569 = IKatan2WithCheck(IkReal(r20),IkReal(x9566),IKFAST_ATAN2_MAGTHRESH);
if(!x9569.valid){
continue;
}
IkReal x9568=((-1.0)*(x9569.value));
sj5=gconst1;
cj5=gconst2;
j5=x9568;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x9567);
rxp0_2=(py*r00);
rxp1_0=(py*x9566);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x9568;
IkReal gconst1=x9567;
IkReal gconst2=x9566;
j4eval[0]=(((r00*r20))+((r01*r21)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9572=IKPowWithIntegerCheck(((((-1.0)*gconst1*r00))+(((-1.0)*gconst2*r01))),-1);
if(!x9572.valid){
continue;
}
IkReal x9570=x9572.value;
IkReal x9571=((1.0)*sj0*x9570);
cj4array[0]=((((-1.0)*cj1*sj2*x9571))+(((-1.0)*cj2*sj1*x9571)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9573=IKsin(j4);
IkReal x9574=IKcos(j4);
IkReal x9575=(gconst2*r21);
IkReal x9576=((1.0)*x9574);
IkReal x9577=((1.0)*x9573);
IkReal x9578=(gconst1*x9577);
evalcond[0]=(r12*x9573);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r12*x9576)));
evalcond[2]=((((-1.0)*r20*x9578))+(((-1.0)*x9575*x9577)));
evalcond[3]=((((-1.0)*gconst2*r01*x9577))+(((-1.0)*r00*x9578)));
evalcond[4]=((((-1.0)*sj1*sj2))+(((-1.0)*gconst1*r20*x9576))+((cj1*cj2))+(((-1.0)*x9575*x9576)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9580=IKPowWithIntegerCheck(((((-1.0)*gconst2*r21))+(((-1.0)*gconst1*r20))),-1);
if(!x9580.valid){
continue;
}
IkReal x9579=x9580.value;
cj4array[0]=((((-1.0)*cj1*cj2*x9579))+((sj1*sj2*x9579)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9581=IKsin(j4);
IkReal x9582=IKcos(j4);
IkReal x9583=(gconst1*r00);
IkReal x9584=(gconst2*r01);
IkReal x9585=((1.0)*x9582);
IkReal x9586=((1.0)*x9581);
evalcond[0]=(r12*x9581);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r12*x9585)));
evalcond[2]=((((-1.0)*gconst1*r20*x9586))+(((-1.0)*gconst2*r21*x9586)));
evalcond[3]=((((-1.0)*x9584*x9586))+(((-1.0)*x9583*x9586)));
evalcond[4]=((((-1.0)*x9584*x9585))+((cj1*sj0*sj2))+((cj2*sj0*sj1))+(((-1.0)*x9583*x9585)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9587=IKPowWithIntegerCheck(r12,-1);
if(!x9587.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x9587.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9588=IKsin(j4);
IkReal x9589=IKcos(j4);
IkReal x9590=(gconst1*r00);
IkReal x9591=(gconst2*r01);
IkReal x9592=(gconst1*r20);
IkReal x9593=(gconst2*r21);
IkReal x9594=((1.0)*x9589);
IkReal x9595=((1.0)*x9588);
evalcond[0]=(r12*x9588);
evalcond[1]=((((-1.0)*x9593*x9595))+(((-1.0)*x9592*x9595)));
evalcond[2]=((((-1.0)*x9590*x9595))+(((-1.0)*x9591*x9595)));
evalcond[3]=((((-1.0)*x9593*x9594))+(((-1.0)*x9592*x9594))+(((-1.0)*sj1*sj2))+((cj1*cj2)));
evalcond[4]=((((-1.0)*x9590*x9594))+((cj1*sj0*sj2))+((cj2*sj0*sj1))+(((-1.0)*x9591*x9594)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9598=IKPowWithIntegerCheck(r12,-1);
if(!x9598.valid){
continue;
}
IkReal x9596=x9598.value;
IkReal x9597=((1.0)*cj0);
CheckValue<IkReal> x9599=IKPowWithIntegerCheck(sj3,-1);
if(!x9599.valid){
continue;
}
if( IKabs((x9596*(x9599.value)*(((((-1.0)*cj1*sj2*x9597))+(((-1.0)*cj2*sj1*x9597)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x9596)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x9596*(x9599.value)*(((((-1.0)*cj1*sj2*x9597))+(((-1.0)*cj2*sj1*x9597))))))+IKsqr(((-1.0)*sj0*x9596))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x9596*(x9599.value)*(((((-1.0)*cj1*sj2*x9597))+(((-1.0)*cj2*sj1*x9597))))), ((-1.0)*sj0*x9596));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9600=IKsin(j4);
IkReal x9601=IKcos(j4);
IkReal x9602=(cj3*r01);
IkReal x9603=(cj2*sj1);
IkReal x9604=((1.0)*cj3);
IkReal x9605=(gconst2*r21);
IkReal x9606=(gconst2*r00);
IkReal x9607=(gconst1*sj3);
IkReal x9608=(gconst1*r00);
IkReal x9609=((1.0)*cj0);
IkReal x9610=(gconst2*sj3);
IkReal x9611=((1.0)*sj0);
IkReal x9612=(cj1*sj2);
IkReal x9613=(cj1*cj2);
IkReal x9614=((1.0)*x9600);
IkReal x9615=((1.0)*sj1*sj2);
IkReal x9616=((1.0)*x9601);
IkReal x9617=(gconst1*r20*x9601);
evalcond[0]=((((-1.0)*r12*x9616))+(((-1.0)*x9611)));
evalcond[1]=((((-1.0)*x9605*x9614))+(((-1.0)*gconst1*r20*x9614)));
evalcond[2]=(((cj0*x9613))+(((-1.0)*sj1*sj2*x9609))+((cj3*r12*x9600)));
evalcond[3]=((((-1.0)*gconst2*r01*x9614))+(((-1.0)*x9609))+(((-1.0)*x9608*x9614)));
evalcond[4]=((((-1.0)*x9609*x9612))+(((-1.0)*r12*sj3*x9614))+(((-1.0)*x9603*x9609)));
evalcond[5]=(((cj3*gconst1*r21))+(((-1.0)*gconst2*r20*x9604))+((r20*x9601*x9607))+((sj3*x9601*x9605))+x9613+(((-1.0)*x9615)));
evalcond[6]=(((r21*x9607))+(((-1.0)*x9601*x9604*x9605))+(((-1.0)*r20*x9610))+x9612+x9603+(((-1.0)*x9604*x9617)));
evalcond[7]=(((gconst1*x9602))+((sj0*x9612))+((r01*x9601*x9610))+(((-1.0)*x9604*x9606))+((sj0*x9603))+((r00*x9601*x9607)));
evalcond[8]=((((-1.0)*gconst2*x9602*x9616))+(((-1.0)*sj3*x9606))+(((-1.0)*x9601*x9604*x9608))+((r01*x9607))+(((-1.0)*x9611*x9613))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9619=IKPowWithIntegerCheck(r12,-1);
if(!x9619.valid){
continue;
}
IkReal x9618=x9619.value;
CheckValue<IkReal> x9620=IKPowWithIntegerCheck(cj3,-1);
if(!x9620.valid){
continue;
}
if( IKabs((x9618*(x9620.value)*(((((-1.0)*cj0*cj1*cj2))+((cj0*sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x9618)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x9618*(x9620.value)*(((((-1.0)*cj0*cj1*cj2))+((cj0*sj1*sj2))))))+IKsqr(((-1.0)*sj0*x9618))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x9618*(x9620.value)*(((((-1.0)*cj0*cj1*cj2))+((cj0*sj1*sj2))))), ((-1.0)*sj0*x9618));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9621=IKsin(j4);
IkReal x9622=IKcos(j4);
IkReal x9623=(cj3*r01);
IkReal x9624=(cj2*sj1);
IkReal x9625=((1.0)*cj3);
IkReal x9626=(gconst2*r21);
IkReal x9627=(gconst2*r00);
IkReal x9628=(gconst1*sj3);
IkReal x9629=(gconst1*r00);
IkReal x9630=((1.0)*cj0);
IkReal x9631=(gconst2*sj3);
IkReal x9632=((1.0)*sj0);
IkReal x9633=(cj1*sj2);
IkReal x9634=(cj1*cj2);
IkReal x9635=((1.0)*x9621);
IkReal x9636=((1.0)*sj1*sj2);
IkReal x9637=((1.0)*x9622);
IkReal x9638=(gconst1*r20*x9622);
evalcond[0]=((((-1.0)*r12*x9637))+(((-1.0)*x9632)));
evalcond[1]=((((-1.0)*x9626*x9635))+(((-1.0)*gconst1*r20*x9635)));
evalcond[2]=(((cj3*r12*x9621))+((cj0*x9634))+(((-1.0)*sj1*sj2*x9630)));
evalcond[3]=((((-1.0)*gconst2*r01*x9635))+(((-1.0)*x9629*x9635))+(((-1.0)*x9630)));
evalcond[4]=((((-1.0)*r12*sj3*x9635))+(((-1.0)*x9624*x9630))+(((-1.0)*x9630*x9633)));
evalcond[5]=(((cj3*gconst1*r21))+((r20*x9622*x9628))+((sj3*x9622*x9626))+x9634+(((-1.0)*gconst2*r20*x9625))+(((-1.0)*x9636)));
evalcond[6]=(((r21*x9628))+(((-1.0)*x9625*x9638))+x9633+x9624+(((-1.0)*r20*x9631))+(((-1.0)*x9622*x9625*x9626)));
evalcond[7]=(((r00*x9622*x9628))+((sj0*x9624))+((sj0*x9633))+(((-1.0)*x9625*x9627))+((gconst1*x9623))+((r01*x9622*x9631)));
evalcond[8]=((((-1.0)*gconst2*x9623*x9637))+((r01*x9628))+(((-1.0)*sj3*x9627))+(((-1.0)*x9622*x9625*x9629))+(((-1.0)*x9632*x9634))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9639=IKPowWithIntegerCheck(((((-1.0)*gconst1*r00))+(((-1.0)*gconst2*r01))),-1);
if(!x9639.valid){
continue;
}
CheckValue<IkReal> x9640=IKPowWithIntegerCheck(r12,-1);
if(!x9640.valid){
continue;
}
if( IKabs((cj0*(x9639.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x9640.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj0*(x9639.value)))+IKsqr(((-1.0)*sj0*(x9640.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((cj0*(x9639.value)), ((-1.0)*sj0*(x9640.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9641=IKsin(j4);
IkReal x9642=IKcos(j4);
IkReal x9643=(cj3*r01);
IkReal x9644=(cj2*sj1);
IkReal x9645=((1.0)*cj3);
IkReal x9646=(gconst2*r21);
IkReal x9647=(gconst2*r00);
IkReal x9648=(gconst1*sj3);
IkReal x9649=(gconst1*r00);
IkReal x9650=((1.0)*cj0);
IkReal x9651=(gconst2*sj3);
IkReal x9652=((1.0)*sj0);
IkReal x9653=(cj1*sj2);
IkReal x9654=(cj1*cj2);
IkReal x9655=((1.0)*x9641);
IkReal x9656=((1.0)*sj1*sj2);
IkReal x9657=((1.0)*x9642);
IkReal x9658=(gconst1*r20*x9642);
evalcond[0]=((((-1.0)*r12*x9657))+(((-1.0)*x9652)));
evalcond[1]=((((-1.0)*gconst1*r20*x9655))+(((-1.0)*x9646*x9655)));
evalcond[2]=(((cj0*x9654))+((cj3*r12*x9641))+(((-1.0)*sj1*sj2*x9650)));
evalcond[3]=((((-1.0)*x9649*x9655))+(((-1.0)*gconst2*r01*x9655))+(((-1.0)*x9650)));
evalcond[4]=((((-1.0)*x9650*x9653))+(((-1.0)*x9644*x9650))+(((-1.0)*r12*sj3*x9655)));
evalcond[5]=((((-1.0)*gconst2*r20*x9645))+((cj3*gconst1*r21))+((r20*x9642*x9648))+x9654+((sj3*x9642*x9646))+(((-1.0)*x9656)));
evalcond[6]=((((-1.0)*r20*x9651))+(((-1.0)*x9642*x9645*x9646))+x9653+x9644+(((-1.0)*x9645*x9658))+((r21*x9648)));
evalcond[7]=(((gconst1*x9643))+((r01*x9642*x9651))+((r00*x9642*x9648))+((sj0*x9644))+(((-1.0)*x9645*x9647))+((sj0*x9653)));
evalcond[8]=((((-1.0)*sj3*x9647))+(((-1.0)*x9652*x9654))+((r01*x9648))+(((-1.0)*x9642*x9645*x9649))+(((-1.0)*gconst2*x9643*x9657))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9659=r20*r20;
IkReal x9660=gconst2*gconst2;
IkReal x9661=gconst1*gconst1;
IkReal x9662=r21*r21;
IkReal x9663=(cj3*r22);
IkReal x9664=(gconst1*r21);
IkReal x9665=((1.0)*r20);
IkReal x9666=(cj1*cj2);
IkReal x9667=(gconst2*r21);
IkReal x9668=(cj3*r21);
IkReal x9669=(sj1*sj2);
IkReal x9670=(cj3*gconst1*gconst2);
CheckValue<IkReal> x9671 = IKatan2WithCheck(IkReal((((x9663*x9664))+((r22*x9666))+(((-1.0)*gconst2*x9663*x9665))+(((-1.0)*r22*x9669)))),IkReal(((((-1.0)*x9666*x9667))+((x9667*x9669))+((gconst1*r20*x9669))+((r20*x9660*x9668))+(((-1.0)*gconst1*x9665*x9666))+(((-1.0)*x9661*x9665*x9668))+((x9659*x9670))+(((-1.0)*x9662*x9670)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9671.valid){
continue;
}
CheckValue<IkReal> x9672=IKPowWithIntegerCheck(IKsign((((sj3*(r22*r22)))+((sj3*x9660*x9662))+((sj3*x9659*x9661))+(((2.0)*gconst2*r20*sj3*x9664)))),-1);
if(!x9672.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9671.value)+(((1.5707963267949)*(x9672.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9673=IKsin(j4);
IkReal x9674=IKcos(j4);
IkReal x9675=(gconst1*sj3);
IkReal x9676=(cj3*gconst1);
IkReal x9677=(cj2*sj1);
IkReal x9678=(gconst2*r21);
IkReal x9679=(cj1*cj2);
IkReal x9680=((1.0)*gconst2);
IkReal x9681=(gconst2*r01);
IkReal x9682=((1.0)*sj0);
IkReal x9683=((1.0)*cj0);
IkReal x9684=(gconst2*r11);
IkReal x9685=(cj1*sj2);
IkReal x9686=((1.0)*x9674);
IkReal x9687=((1.0)*x9673);
IkReal x9688=(cj3*x9673);
IkReal x9689=((1.0)*sj1*sj2);
IkReal x9690=(sj3*x9674);
evalcond[0]=((((-1.0)*r22*x9686))+(((-1.0)*x9678*x9687))+(((-1.0)*gconst1*r20*x9687)));
evalcond[1]=((((-1.0)*r01*x9673*x9680))+(((-1.0)*r02*x9686))+(((-1.0)*gconst1*r00*x9687))+(((-1.0)*x9683)));
evalcond[2]=((((-1.0)*r12*x9686))+(((-1.0)*r11*x9673*x9680))+(((-1.0)*x9682))+(((-1.0)*gconst1*r10*x9687)));
evalcond[3]=(((r21*x9676))+(((-1.0)*r22*sj3*x9687))+x9679+(((-1.0)*x9689))+(((-1.0)*cj3*r20*x9680))+((x9678*x9690))+((r20*x9674*x9675)));
evalcond[4]=(((r21*x9675))+(((-1.0)*cj3*x9678*x9686))+(((-1.0)*r20*sj3*x9680))+((r22*x9688))+(((-1.0)*r20*x9676*x9686))+x9677+x9685);
evalcond[5]=(((r00*x9674*x9675))+(((-1.0)*cj3*r00*x9680))+((r01*x9676))+((x9681*x9690))+((sj0*x9685))+(((-1.0)*r02*sj3*x9687))+((sj0*x9677)));
evalcond[6]=((((-1.0)*r00*x9676*x9686))+((r01*x9675))+((r02*x9688))+(((-1.0)*r00*sj3*x9680))+(((-1.0)*x9679*x9682))+((sj0*sj1*sj2))+(((-1.0)*cj3*r01*x9674*x9680)));
evalcond[7]=((((-1.0)*x9677*x9683))+(((-1.0)*cj3*r10*x9680))+((r11*x9676))+((x9684*x9690))+(((-1.0)*x9683*x9685))+((r10*x9674*x9675))+(((-1.0)*r12*sj3*x9687)));
evalcond[8]=((((-1.0)*cj3*r11*x9674*x9680))+((cj0*x9679))+(((-1.0)*r10*x9676*x9686))+((r11*x9675))+((r12*x9688))+(((-1.0)*r10*sj3*x9680))+(((-1.0)*sj1*sj2*x9683)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9691=((1.0)*gconst2);
CheckValue<IkReal> x9692 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x9691))+(((-1.0)*gconst1*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9692.valid){
continue;
}
CheckValue<IkReal> x9693=IKPowWithIntegerCheck(IKsign((((gconst1*r01))+(((-1.0)*r00*x9691)))),-1);
if(!x9693.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9692.value)+(((1.5707963267949)*(x9693.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9694=IKsin(j4);
IkReal x9695=IKcos(j4);
IkReal x9696=(gconst1*sj3);
IkReal x9697=(cj3*gconst1);
IkReal x9698=(cj2*sj1);
IkReal x9699=(gconst2*r21);
IkReal x9700=(cj1*cj2);
IkReal x9701=((1.0)*gconst2);
IkReal x9702=(gconst2*r01);
IkReal x9703=((1.0)*sj0);
IkReal x9704=((1.0)*cj0);
IkReal x9705=(gconst2*r11);
IkReal x9706=(cj1*sj2);
IkReal x9707=((1.0)*x9695);
IkReal x9708=((1.0)*x9694);
IkReal x9709=(cj3*x9694);
IkReal x9710=((1.0)*sj1*sj2);
IkReal x9711=(sj3*x9695);
evalcond[0]=((((-1.0)*r22*x9707))+(((-1.0)*gconst1*r20*x9708))+(((-1.0)*x9699*x9708)));
evalcond[1]=((((-1.0)*r02*x9707))+(((-1.0)*r01*x9694*x9701))+(((-1.0)*x9704))+(((-1.0)*gconst1*r00*x9708)));
evalcond[2]=((((-1.0)*r11*x9694*x9701))+(((-1.0)*x9703))+(((-1.0)*r12*x9707))+(((-1.0)*gconst1*r10*x9708)));
evalcond[3]=((((-1.0)*cj3*r20*x9701))+x9700+((r21*x9697))+(((-1.0)*r22*sj3*x9708))+((x9699*x9711))+(((-1.0)*x9710))+((r20*x9695*x9696)));
evalcond[4]=((((-1.0)*r20*x9697*x9707))+x9706+((r21*x9696))+x9698+(((-1.0)*cj3*x9699*x9707))+(((-1.0)*r20*sj3*x9701))+((r22*x9709)));
evalcond[5]=(((x9702*x9711))+(((-1.0)*cj3*r00*x9701))+((sj0*x9706))+((sj0*x9698))+(((-1.0)*r02*sj3*x9708))+((r01*x9697))+((r00*x9695*x9696)));
evalcond[6]=(((r02*x9709))+(((-1.0)*cj3*r01*x9695*x9701))+(((-1.0)*x9700*x9703))+(((-1.0)*r00*x9697*x9707))+((sj0*sj1*sj2))+((r01*x9696))+(((-1.0)*r00*sj3*x9701)));
evalcond[7]=((((-1.0)*r12*sj3*x9708))+((x9705*x9711))+((r10*x9695*x9696))+(((-1.0)*cj3*r10*x9701))+(((-1.0)*x9698*x9704))+(((-1.0)*x9704*x9706))+((r11*x9697)));
evalcond[8]=(((r12*x9709))+(((-1.0)*cj3*r11*x9695*x9701))+((cj0*x9700))+(((-1.0)*r10*x9697*x9707))+((r11*x9696))+(((-1.0)*r10*sj3*x9701))+(((-1.0)*sj1*sj2*x9704)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9712=((1.0)*gconst1);
CheckValue<IkReal> x9713 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst2*r21))+(((-1.0)*cj0*r20*x9712)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9713.valid){
continue;
}
CheckValue<IkReal> x9714=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x9712))+((gconst2*r10)))),-1);
if(!x9714.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9713.value)+(((1.5707963267949)*(x9714.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9715=IKsin(j4);
IkReal x9716=IKcos(j4);
IkReal x9717=(gconst1*sj3);
IkReal x9718=(cj3*gconst1);
IkReal x9719=(cj2*sj1);
IkReal x9720=(gconst2*r21);
IkReal x9721=(cj1*cj2);
IkReal x9722=((1.0)*gconst2);
IkReal x9723=(gconst2*r01);
IkReal x9724=((1.0)*sj0);
IkReal x9725=((1.0)*cj0);
IkReal x9726=(gconst2*r11);
IkReal x9727=(cj1*sj2);
IkReal x9728=((1.0)*x9716);
IkReal x9729=((1.0)*x9715);
IkReal x9730=(cj3*x9715);
IkReal x9731=((1.0)*sj1*sj2);
IkReal x9732=(sj3*x9716);
evalcond[0]=((((-1.0)*r22*x9728))+(((-1.0)*gconst1*r20*x9729))+(((-1.0)*x9720*x9729)));
evalcond[1]=((((-1.0)*r02*x9728))+(((-1.0)*x9725))+(((-1.0)*r01*x9715*x9722))+(((-1.0)*gconst1*r00*x9729)));
evalcond[2]=((((-1.0)*r12*x9728))+(((-1.0)*x9724))+(((-1.0)*r11*x9715*x9722))+(((-1.0)*gconst1*r10*x9729)));
evalcond[3]=((((-1.0)*cj3*r20*x9722))+x9721+((x9720*x9732))+(((-1.0)*x9731))+((r20*x9716*x9717))+(((-1.0)*r22*sj3*x9729))+((r21*x9718)));
evalcond[4]=((((-1.0)*cj3*x9720*x9728))+(((-1.0)*r20*x9718*x9728))+x9719+x9727+(((-1.0)*r20*sj3*x9722))+((r21*x9717))+((r22*x9730)));
evalcond[5]=((((-1.0)*r02*sj3*x9729))+(((-1.0)*cj3*r00*x9722))+((x9723*x9732))+((sj0*x9719))+((r00*x9716*x9717))+((r01*x9718))+((sj0*x9727)));
evalcond[6]=((((-1.0)*r00*x9718*x9728))+((r02*x9730))+(((-1.0)*cj3*r01*x9716*x9722))+(((-1.0)*r00*sj3*x9722))+((sj0*sj1*sj2))+(((-1.0)*x9721*x9724))+((r01*x9717)));
evalcond[7]=((((-1.0)*cj3*r10*x9722))+(((-1.0)*r12*sj3*x9729))+((x9726*x9732))+(((-1.0)*x9725*x9727))+((r11*x9718))+((r10*x9716*x9717))+(((-1.0)*x9719*x9725)));
evalcond[8]=((((-1.0)*r10*sj3*x9722))+(((-1.0)*sj1*sj2*x9725))+((r12*x9730))+((r11*x9717))+(((-1.0)*cj3*r11*x9716*x9722))+((cj0*x9721))+(((-1.0)*r10*x9718*x9728)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x9735 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x9735)==0){
continue;
}
IkReal x9733=pow(x9735,-0.5);
IkReal x9734=((1.0)*x9733);
CheckValue<IkReal> x9736 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x9736.valid){
continue;
}
IkReal gconst3=((3.14159265358979)+(((-1.0)*(x9736.value))));
IkReal gconst4=(r20*x9734);
IkReal gconst5=(r21*x9734);
CheckValue<IkReal> x9737 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x9737.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x9737.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x9741 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x9741.valid){
continue;
}
IkReal x9738=((1.0)*(x9741.value));
IkReal x9739=x9733;
IkReal x9740=((1.0)*x9739);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9738)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9738)));
IkReal gconst4=(r20*x9740);
IkReal gconst5=(r21*x9740);
IkReal x9742=r22*r22;
IkReal x9743=((1.0)*x9742);
CheckValue<IkReal> x9747=IKPowWithIntegerCheck(((-1.0)+x9742),-1);
if(!x9747.valid){
continue;
}
IkReal x9744=x9747.value;
if((((1.0)+(((-1.0)*x9743)))) < -0.00001)
continue;
IkReal x9745=IKsqrt(((1.0)+(((-1.0)*x9743))));
IkReal x9746=(cj0*x9744*x9745);
j4eval[0]=((IKabs((x9746+(((-1.0)*x9743*x9746)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x9751 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x9751.valid){
continue;
}
IkReal x9748=((1.0)*(x9751.value));
IkReal x9749=x9733;
IkReal x9750=((1.0)*x9749);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9748)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9748)));
IkReal gconst4=(r20*x9750);
IkReal gconst5=(r21*x9750);
IkReal x9752=r22*r22;
IkReal x9753=((1.0)*x9752);
CheckValue<IkReal> x9757=IKPowWithIntegerCheck(((-1.0)+x9752),-1);
if(!x9757.valid){
continue;
}
IkReal x9754=x9757.value;
if((((1.0)+(((-1.0)*x9753)))) < -0.00001)
continue;
IkReal x9755=IKsqrt(((1.0)+(((-1.0)*x9753))));
IkReal x9756=(sj0*x9754*x9755);
j4eval[0]=((IKabs((x9756+(((-1.0)*x9753*x9756)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x9761 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x9761.valid){
continue;
}
IkReal x9758=((1.0)*(x9761.value));
IkReal x9759=x9733;
IkReal x9760=((1.0)*x9759);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9758)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9758)));
IkReal gconst4=(r20*x9760);
IkReal gconst5=(r21*x9760);
IkReal x9762=r22*r22;
IkReal x9763=(cj0*r12);
IkReal x9764=(r02*sj0);
CheckValue<IkReal> x9768=IKPowWithIntegerCheck(((-1.0)+x9762),-1);
if(!x9768.valid){
continue;
}
IkReal x9765=x9768.value;
if((((1.0)+(((-1.0)*x9762)))) < -0.00001)
continue;
IkReal x9766=IKsqrt(((1.0)+(((-1.0)*x9762))));
IkReal x9767=(r22*x9765*x9766);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x9763))+x9764)))+(IKabs((((x9763*x9767))+(((-1.0)*x9764*x9767))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x9772 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x9772.valid){
continue;
}
IkReal x9769=((1.0)*(x9772.value));
IkReal x9770=x9733;
IkReal x9771=((1.0)*x9770);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9769)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9769)));
IkReal gconst4=(r20*x9771);
IkReal gconst5=(r21*x9771);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x9776 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x9776.valid){
continue;
}
IkReal x9773=((1.0)*(x9776.value));
IkReal x9774=x9733;
IkReal x9775=((1.0)*x9774);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9773)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9773)));
IkReal gconst4=(r20*x9775);
IkReal gconst5=(r21*x9775);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x9780 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x9780.valid){
continue;
}
IkReal x9777=((1.0)*(x9780.value));
IkReal x9778=x9733;
IkReal x9779=((1.0)*x9778);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9777)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9777)));
IkReal gconst4=(r20*x9779);
IkReal gconst5=(r21*x9779);
j4eval[0]=cj3;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x9784 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x9784.valid){
continue;
}
IkReal x9781=((1.0)*(x9784.value));
IkReal x9782=x9733;
IkReal x9783=((1.0)*x9782);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9781)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9781)));
IkReal gconst4=(r20*x9783);
IkReal gconst5=(r21*x9783);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x9788 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x9788.valid){
continue;
}
IkReal x9785=((1.0)*(x9788.value));
IkReal x9786=x9733;
IkReal x9787=((1.0)*x9786);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9785)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9785)));
IkReal gconst4=(r20*x9787);
IkReal gconst5=(r21*x9787);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x9792 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x9792.valid){
continue;
}
IkReal x9789=((1.0)*(x9792.value));
IkReal x9790=x9733;
IkReal x9791=((1.0)*x9790);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9789)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9789)));
IkReal gconst4=(r20*x9791);
IkReal gconst5=(r21*x9791);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9793=(gconst4*r00);
IkReal x9794=(gconst5*r01);
CheckValue<IkReal> x9795 = IKatan2WithCheck(IkReal(((((-1.0)*x9793))+(((-1.0)*x9794)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9795.valid){
continue;
}
CheckValue<IkReal> x9796=IKPowWithIntegerCheck(IKsign(((x9793*x9793)+(x9794*x9794)+(((2.0)*x9793*x9794))+(r02*r02))),-1);
if(!x9796.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9795.value)+(((1.5707963267949)*(x9796.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9797=IKcos(j4);
IkReal x9798=IKsin(j4);
IkReal x9799=(gconst5*r11);
IkReal x9800=(gconst5*r21);
IkReal x9801=(gconst5*r01);
IkReal x9802=((1.0)*x9797);
IkReal x9803=((1.0)*x9798);
IkReal x9804=(gconst4*x9803);
evalcond[0]=(((r02*x9798))+(((-1.0)*x9801*x9802))+(((-1.0)*gconst4*r00*x9802)));
evalcond[1]=((((-1.0)*r20*x9804))+(((-1.0)*x9800*x9803))+(((-1.0)*r22*x9802)));
evalcond[2]=((((-1.0)*r10*x9804))+(((-1.0)*x9799*x9803))+(((-1.0)*r12*x9802)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x9802))+(((-1.0)*x9801*x9803))+(((-1.0)*r00*x9804)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x9800*x9802))+((cj1*sj2))+(((-1.0)*gconst4*r20*x9802))+((r22*x9798)));
evalcond[5]=((((-1.0)*gconst4*r10*x9802))+(((-1.0)*sj1*sj2))+((r12*x9798))+(((-1.0)*x9799*x9802))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9805=((1.0)*gconst5);
CheckValue<IkReal> x9806 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r11*x9805))+(((-1.0)*gconst4*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9806.valid){
continue;
}
CheckValue<IkReal> x9807=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x9805))+((gconst4*r21)))),-1);
if(!x9807.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9806.value)+(((1.5707963267949)*(x9807.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9808=IKcos(j4);
IkReal x9809=IKsin(j4);
IkReal x9810=(gconst5*r11);
IkReal x9811=(gconst5*r21);
IkReal x9812=(gconst5*r01);
IkReal x9813=((1.0)*x9808);
IkReal x9814=((1.0)*x9809);
IkReal x9815=(gconst4*x9814);
evalcond[0]=(((r02*x9809))+(((-1.0)*x9812*x9813))+(((-1.0)*gconst4*r00*x9813)));
evalcond[1]=((((-1.0)*r22*x9813))+(((-1.0)*x9811*x9814))+(((-1.0)*r20*x9815)));
evalcond[2]=((((-1.0)*r10*x9815))+(((-1.0)*r12*x9813))+(((-1.0)*x9810*x9814)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x9813))+(((-1.0)*r00*x9815))+(((-1.0)*x9812*x9814)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst4*r20*x9813))+((r22*x9809))+(((-1.0)*x9811*x9813)));
evalcond[5]=(((r12*x9809))+(((-1.0)*gconst4*r10*x9813))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*x9810*x9813)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9816=((1.0)*gconst4);
CheckValue<IkReal> x9817 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst5*r21))+(((-1.0)*r20*x9816)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9817.valid){
continue;
}
CheckValue<IkReal> x9818=IKPowWithIntegerCheck(IKsign((((gconst5*r10))+(((-1.0)*r11*x9816)))),-1);
if(!x9818.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9817.value)+(((1.5707963267949)*(x9818.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9819=IKcos(j4);
IkReal x9820=IKsin(j4);
IkReal x9821=(gconst5*r11);
IkReal x9822=(gconst5*r21);
IkReal x9823=(gconst5*r01);
IkReal x9824=((1.0)*x9819);
IkReal x9825=((1.0)*x9820);
IkReal x9826=(gconst4*x9825);
evalcond[0]=((((-1.0)*x9823*x9824))+(((-1.0)*gconst4*r00*x9824))+((r02*x9820)));
evalcond[1]=((((-1.0)*x9822*x9825))+(((-1.0)*r20*x9826))+(((-1.0)*r22*x9824)));
evalcond[2]=((((-1.0)*x9821*x9825))+(((-1.0)*r10*x9826))+(((-1.0)*r12*x9824)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x9826))+(((-1.0)*x9823*x9825))+(((-1.0)*r02*x9824)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x9822*x9824))+(((-1.0)*gconst4*r20*x9824))+((cj1*sj2))+((r22*x9820)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r12*x9820))+(((-1.0)*x9821*x9824))+(((-1.0)*gconst4*r10*x9824))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x9830 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x9830.valid){
continue;
}
IkReal x9827=((1.0)*(x9830.value));
IkReal x9828=x9733;
IkReal x9829=((1.0)*x9828);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9827)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9827)));
IkReal gconst4=(r20*x9829);
IkReal gconst5=(r21*x9829);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x9834 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x9834.valid){
continue;
}
IkReal x9831=((1.0)*(x9834.value));
IkReal x9832=x9733;
IkReal x9833=((1.0)*x9832);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9831)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9831)));
IkReal gconst4=(r20*x9833);
IkReal gconst5=(r21*x9833);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x9838 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x9838.valid){
continue;
}
IkReal x9835=((1.0)*(x9838.value));
IkReal x9836=x9733;
IkReal x9837=((1.0)*x9836);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9835)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9835)));
IkReal gconst4=(r20*x9837);
IkReal gconst5=(r21*x9837);
IkReal x9839=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9843=IKPowWithIntegerCheck(x9839,-1);
if(!x9843.valid){
continue;
}
IkReal x9840=x9843.value;
IkReal x9841=((1.0)*x9840);
IkReal x9842=((((-2.0)*r00*r01*r20*r21*x9840))+(((-1.0)*x9841*(r00*r00)*(r20*r20)))+(((-1.0)*(r02*r02)))+(((-1.0)*x9841*(r01*r01)*(r21*r21))));
j4eval[0]=x9842;
j4eval[1]=IKsign(x9842);
j4eval[2]=r02;
j4eval[3]=x9839;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9844=(gconst5*r01);
IkReal x9845=(gconst4*r00);
CheckValue<IkReal> x9846=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x9844*x9844)))+(((-1.0)*(r02*r02)))+(((-1.0)*(x9845*x9845)))+(((-2.0)*x9844*x9845)))),-1);
if(!x9846.valid){
continue;
}
CheckValue<IkReal> x9847 = IKatan2WithCheck(IkReal((x9845+x9844)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x9847.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9846.value)))+(x9847.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9848=IKcos(j4);
IkReal x9849=IKsin(j4);
IkReal x9850=(gconst5*r21);
IkReal x9851=(gconst5*r11);
IkReal x9852=(gconst5*r01);
IkReal x9853=((1.0)*x9848);
IkReal x9854=(gconst4*x9848);
IkReal x9855=((1.0)*x9849);
IkReal x9856=(gconst4*x9855);
evalcond[0]=((((-1.0)*r02*x9855))+((x9848*x9852))+((r00*x9854)));
evalcond[1]=((((-1.0)*x9850*x9855))+(((-1.0)*r22*x9853))+(((-1.0)*r20*x9856)));
evalcond[2]=((((-1.0)*r10*x9856))+(((-1.0)*x9851*x9855))+(((-1.0)*r12*x9853)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x9853))+(((-1.0)*r00*x9856))+(((-1.0)*x9852*x9855)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x9848*x9850))+((r20*x9854))+(((-1.0)*r22*x9855)));
evalcond[5]=(((r10*x9854))+(((-1.0)*sj1*sj2))+((x9848*x9851))+((cj1*cj2))+(((-1.0)*r12*x9855)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9857=((1.0)*gconst5);
CheckValue<IkReal> x9858=IKPowWithIntegerCheck(IKsign((((gconst4*r21))+(((-1.0)*r20*x9857)))),-1);
if(!x9858.valid){
continue;
}
CheckValue<IkReal> x9859 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r11*x9857))+(((-1.0)*gconst4*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9859.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9858.value)))+(x9859.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9860=IKcos(j4);
IkReal x9861=IKsin(j4);
IkReal x9862=(gconst5*r21);
IkReal x9863=(gconst5*r11);
IkReal x9864=(gconst5*r01);
IkReal x9865=((1.0)*x9860);
IkReal x9866=(gconst4*x9860);
IkReal x9867=((1.0)*x9861);
IkReal x9868=(gconst4*x9867);
evalcond[0]=(((x9860*x9864))+((r00*x9866))+(((-1.0)*r02*x9867)));
evalcond[1]=((((-1.0)*r22*x9865))+(((-1.0)*r20*x9868))+(((-1.0)*x9862*x9867)));
evalcond[2]=((((-1.0)*r12*x9865))+(((-1.0)*x9863*x9867))+(((-1.0)*r10*x9868)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x9868))+(((-1.0)*x9864*x9867))+(((-1.0)*r02*x9865)));
evalcond[4]=((((-1.0)*r22*x9867))+((cj2*sj1))+((x9860*x9862))+((cj1*sj2))+((r20*x9866)));
evalcond[5]=(((x9860*x9863))+(((-1.0)*r12*x9867))+(((-1.0)*sj1*sj2))+((r10*x9866))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9869=((1.0)*gconst4);
CheckValue<IkReal> x9870 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x9869))+(((-1.0)*gconst5*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9870.valid){
continue;
}
CheckValue<IkReal> x9871=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x9869))+((gconst5*r10)))),-1);
if(!x9871.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9870.value)+(((1.5707963267949)*(x9871.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9872=IKcos(j4);
IkReal x9873=IKsin(j4);
IkReal x9874=(gconst5*r21);
IkReal x9875=(gconst5*r11);
IkReal x9876=(gconst5*r01);
IkReal x9877=((1.0)*x9872);
IkReal x9878=(gconst4*x9872);
IkReal x9879=((1.0)*x9873);
IkReal x9880=(gconst4*x9879);
evalcond[0]=((((-1.0)*r02*x9879))+((x9872*x9876))+((r00*x9878)));
evalcond[1]=((((-1.0)*x9874*x9879))+(((-1.0)*r20*x9880))+(((-1.0)*r22*x9877)));
evalcond[2]=((((-1.0)*r10*x9880))+(((-1.0)*x9875*x9879))+(((-1.0)*r12*x9877)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x9880))+(((-1.0)*x9876*x9879))+(((-1.0)*r02*x9877)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r20*x9878))+((x9872*x9874))+(((-1.0)*r22*x9879)));
evalcond[5]=(((r10*x9878))+(((-1.0)*sj1*sj2))+((x9872*x9875))+((cj1*cj2))+(((-1.0)*r12*x9879)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x9884 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x9884.valid){
continue;
}
IkReal x9881=((1.0)*(x9884.value));
IkReal x9882=x9733;
IkReal x9883=((1.0)*x9882);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9881)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9881)));
IkReal gconst4=(r20*x9883);
IkReal gconst5=(r21*x9883);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x9888 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x9888.valid){
continue;
}
IkReal x9885=((1.0)*(x9888.value));
IkReal x9886=x9733;
IkReal x9887=((1.0)*x9886);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9885)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9885)));
IkReal gconst4=(r20*x9887);
IkReal gconst5=(r21*x9887);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x9892 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x9892.valid){
continue;
}
IkReal x9889=((1.0)*(x9892.value));
IkReal x9890=x9733;
IkReal x9891=((1.0)*x9890);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9889)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9889)));
IkReal gconst4=(r20*x9891);
IkReal gconst5=(r21*x9891);
IkReal x9893=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9897=IKPowWithIntegerCheck(x9893,-1);
if(!x9897.valid){
continue;
}
IkReal x9894=x9897.value;
IkReal x9895=((1.0)*x9894);
IkReal x9896=((((-1.0)*(r02*r02)))+(((-1.0)*x9895*(r00*r00)*(r20*r20)))+(((-1.0)*x9895*(r01*r01)*(r21*r21)))+(((-2.0)*r00*r01*r20*r21*x9894)));
j4eval[0]=x9896;
j4eval[1]=IKsign(x9896);
j4eval[2]=r02;
j4eval[3]=x9893;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9898=(gconst5*r01);
IkReal x9899=(gconst4*r00);
CheckValue<IkReal> x9900 = IKatan2WithCheck(IkReal((x9898+x9899)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x9900.valid){
continue;
}
CheckValue<IkReal> x9901=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x9899*x9899)))+(((-1.0)*(x9898*x9898)))+(((-1.0)*(r02*r02)))+(((-2.0)*x9898*x9899)))),-1);
if(!x9901.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9900.value)+(((1.5707963267949)*(x9901.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9902=IKcos(j4);
IkReal x9903=IKsin(j4);
IkReal x9904=((1.0)*sj1);
IkReal x9905=(gconst5*r21);
IkReal x9906=(gconst5*r11);
IkReal x9907=(gconst5*r01);
IkReal x9908=((1.0)*x9902);
IkReal x9909=(gconst4*x9902);
IkReal x9910=((1.0)*x9903);
IkReal x9911=(gconst4*x9910);
evalcond[0]=(((x9902*x9907))+((r00*x9909))+(((-1.0)*r02*x9910)));
evalcond[1]=((((-1.0)*x9905*x9910))+(((-1.0)*r22*x9908))+(((-1.0)*r20*x9911)));
evalcond[2]=((((-1.0)*r10*x9911))+(((-1.0)*r12*x9908))+(((-1.0)*x9906*x9910)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x9908))+(((-1.0)*r00*x9911))+(((-1.0)*x9907*x9910)));
evalcond[4]=(((r20*x9909))+((x9902*x9905))+(((-1.0)*r22*x9910))+((cj1*cj2))+(((-1.0)*sj2*x9904)));
evalcond[5]=(((x9902*x9906))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x9910))+(((-1.0)*cj2*x9904))+((r10*x9909)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9912=((1.0)*gconst5);
CheckValue<IkReal> x9913=IKPowWithIntegerCheck(IKsign((((gconst4*r21))+(((-1.0)*r20*x9912)))),-1);
if(!x9913.valid){
continue;
}
CheckValue<IkReal> x9914 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r11*x9912))+(((-1.0)*gconst4*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9914.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9913.value)))+(x9914.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9915=IKcos(j4);
IkReal x9916=IKsin(j4);
IkReal x9917=((1.0)*sj1);
IkReal x9918=(gconst5*r21);
IkReal x9919=(gconst5*r11);
IkReal x9920=(gconst5*r01);
IkReal x9921=((1.0)*x9915);
IkReal x9922=(gconst4*x9915);
IkReal x9923=((1.0)*x9916);
IkReal x9924=(gconst4*x9923);
evalcond[0]=((((-1.0)*r02*x9923))+((x9915*x9920))+((r00*x9922)));
evalcond[1]=((((-1.0)*x9918*x9923))+(((-1.0)*r20*x9924))+(((-1.0)*r22*x9921)));
evalcond[2]=((((-1.0)*x9919*x9923))+(((-1.0)*r12*x9921))+(((-1.0)*r10*x9924)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x9921))+(((-1.0)*x9920*x9923))+(((-1.0)*r00*x9924)));
evalcond[4]=(((r20*x9922))+(((-1.0)*r22*x9923))+((cj1*cj2))+(((-1.0)*sj2*x9917))+((x9915*x9918)));
evalcond[5]=(((r10*x9922))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x9917))+(((-1.0)*r12*x9923))+((x9915*x9919)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9925=((1.0)*gconst4);
CheckValue<IkReal> x9926 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x9925))+(((-1.0)*gconst5*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9926.valid){
continue;
}
CheckValue<IkReal> x9927=IKPowWithIntegerCheck(IKsign((((gconst5*r10))+(((-1.0)*r11*x9925)))),-1);
if(!x9927.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9926.value)+(((1.5707963267949)*(x9927.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9928=IKcos(j4);
IkReal x9929=IKsin(j4);
IkReal x9930=((1.0)*sj1);
IkReal x9931=(gconst5*r21);
IkReal x9932=(gconst5*r11);
IkReal x9933=(gconst5*r01);
IkReal x9934=((1.0)*x9928);
IkReal x9935=(gconst4*x9928);
IkReal x9936=((1.0)*x9929);
IkReal x9937=(gconst4*x9936);
evalcond[0]=(((r00*x9935))+(((-1.0)*r02*x9936))+((x9928*x9933)));
evalcond[1]=((((-1.0)*r22*x9934))+(((-1.0)*r20*x9937))+(((-1.0)*x9931*x9936)));
evalcond[2]=((((-1.0)*r10*x9937))+(((-1.0)*r12*x9934))+(((-1.0)*x9932*x9936)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x9937))+(((-1.0)*r02*x9934))+(((-1.0)*x9933*x9936)));
evalcond[4]=((((-1.0)*r22*x9936))+((cj1*cj2))+((r20*x9935))+((x9928*x9931))+(((-1.0)*sj2*x9930)));
evalcond[5]=(((r10*x9935))+(((-1.0)*cj2*x9930))+(((-1.0)*cj1*sj2))+((x9928*x9932))+(((-1.0)*r12*x9936)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x9941 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x9941.valid){
continue;
}
IkReal x9938=((1.0)*(x9941.value));
IkReal x9939=x9733;
IkReal x9940=((1.0)*x9939);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9938)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9938)));
IkReal gconst4=(r20*x9940);
IkReal gconst5=(r21*x9940);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x9945 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x9945.valid){
continue;
}
IkReal x9942=((1.0)*(x9945.value));
IkReal x9943=x9733;
IkReal x9944=((1.0)*x9943);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9942)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9942)));
IkReal gconst4=(r20*x9944);
IkReal gconst5=(r21*x9944);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x9949 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x9949.valid){
continue;
}
IkReal x9946=((1.0)*(x9949.value));
IkReal x9947=x9733;
IkReal x9948=((1.0)*x9947);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9946)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9946)));
IkReal gconst4=(r20*x9948);
IkReal gconst5=(r21*x9948);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9950=(gconst4*r00);
IkReal x9951=(gconst5*r01);
CheckValue<IkReal> x9952=IKPowWithIntegerCheck(IKsign(((x9950*x9950)+(x9951*x9951)+(r02*r02)+(((2.0)*x9950*x9951)))),-1);
if(!x9952.valid){
continue;
}
CheckValue<IkReal> x9953 = IKatan2WithCheck(IkReal(((((-1.0)*x9950))+(((-1.0)*x9951)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9953.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9952.value)))+(x9953.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9954=IKcos(j4);
IkReal x9955=IKsin(j4);
IkReal x9956=((1.0)*sj2);
IkReal x9957=(gconst5*r21);
IkReal x9958=(gconst5*r01);
IkReal x9959=(gconst5*r11);
IkReal x9960=((1.0)*x9954);
IkReal x9961=((1.0)*x9955);
IkReal x9962=(gconst4*x9961);
evalcond[0]=(((r02*x9955))+(((-1.0)*gconst4*r00*x9960))+(((-1.0)*x9958*x9960)));
evalcond[1]=((((-1.0)*x9957*x9961))+(((-1.0)*r22*x9960))+(((-1.0)*r20*x9962)));
evalcond[2]=((((-1.0)*r12*x9960))+(((-1.0)*x9959*x9961))+(((-1.0)*r10*x9962)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x9960))+(((-1.0)*x9958*x9961))+(((-1.0)*r00*x9962)));
evalcond[4]=((((-1.0)*x9957*x9960))+(((-1.0)*gconst4*r20*x9960))+(((-1.0)*sj1*x9956))+((cj1*cj2))+((r22*x9955)));
evalcond[5]=((((-1.0)*cj2*sj1))+((r12*x9955))+(((-1.0)*x9959*x9960))+(((-1.0)*cj1*x9956))+(((-1.0)*gconst4*r10*x9960)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9963=((1.0)*gconst5);
CheckValue<IkReal> x9964=IKPowWithIntegerCheck(IKsign((((gconst4*r21))+(((-1.0)*r20*x9963)))),-1);
if(!x9964.valid){
continue;
}
CheckValue<IkReal> x9965 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r11*x9963))+(((-1.0)*gconst4*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9965.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9964.value)))+(x9965.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9966=IKcos(j4);
IkReal x9967=IKsin(j4);
IkReal x9968=((1.0)*sj2);
IkReal x9969=(gconst5*r21);
IkReal x9970=(gconst5*r01);
IkReal x9971=(gconst5*r11);
IkReal x9972=((1.0)*x9966);
IkReal x9973=((1.0)*x9967);
IkReal x9974=(gconst4*x9973);
evalcond[0]=(((r02*x9967))+(((-1.0)*x9970*x9972))+(((-1.0)*gconst4*r00*x9972)));
evalcond[1]=((((-1.0)*r20*x9974))+(((-1.0)*x9969*x9973))+(((-1.0)*r22*x9972)));
evalcond[2]=((((-1.0)*r10*x9974))+(((-1.0)*x9971*x9973))+(((-1.0)*r12*x9972)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x9972))+(((-1.0)*r00*x9974))+(((-1.0)*x9970*x9973)));
evalcond[4]=((((-1.0)*sj1*x9968))+(((-1.0)*x9969*x9972))+((r22*x9967))+(((-1.0)*gconst4*r20*x9972))+((cj1*cj2)));
evalcond[5]=((((-1.0)*cj1*x9968))+(((-1.0)*cj2*sj1))+(((-1.0)*x9971*x9972))+(((-1.0)*gconst4*r10*x9972))+((r12*x9967)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9975=((1.0)*gconst4);
CheckValue<IkReal> x9976 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x9975))+(((-1.0)*gconst5*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9976.valid){
continue;
}
CheckValue<IkReal> x9977=IKPowWithIntegerCheck(IKsign((((gconst5*r10))+(((-1.0)*r11*x9975)))),-1);
if(!x9977.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9976.value)+(((1.5707963267949)*(x9977.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9978=IKcos(j4);
IkReal x9979=IKsin(j4);
IkReal x9980=((1.0)*sj2);
IkReal x9981=(gconst5*r21);
IkReal x9982=(gconst5*r01);
IkReal x9983=(gconst5*r11);
IkReal x9984=((1.0)*x9978);
IkReal x9985=((1.0)*x9979);
IkReal x9986=(gconst4*x9985);
evalcond[0]=(((r02*x9979))+(((-1.0)*gconst4*r00*x9984))+(((-1.0)*x9982*x9984)));
evalcond[1]=((((-1.0)*r22*x9984))+(((-1.0)*x9981*x9985))+(((-1.0)*r20*x9986)));
evalcond[2]=((((-1.0)*r10*x9986))+(((-1.0)*r12*x9984))+(((-1.0)*x9983*x9985)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x9986))+(((-1.0)*r02*x9984))+(((-1.0)*x9982*x9985)));
evalcond[4]=(((r22*x9979))+(((-1.0)*gconst4*r20*x9984))+(((-1.0)*x9981*x9984))+((cj1*cj2))+(((-1.0)*sj1*x9980)));
evalcond[5]=((((-1.0)*cj1*x9980))+(((-1.0)*cj2*sj1))+((r12*x9979))+(((-1.0)*gconst4*r10*x9984))+(((-1.0)*x9983*x9984)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x9987=((-1.0)*r21);
CheckValue<IkReal> x9989 = IKatan2WithCheck(IkReal(r20),IkReal(x9987),IKFAST_ATAN2_MAGTHRESH);
if(!x9989.valid){
continue;
}
IkReal x9988=((1.0)*(x9989.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9988)));
sj0=0;
cj0=1.0;
j0=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=((-1.0)*py*r20);
rxp0_2=(py*r00);
rxp1_0=(py*x9987);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9988)));
IkReal gconst4=((1.0)*r20);
IkReal gconst5=((1.0)*r21);
IkReal x9990=((1.0)*r01*r21);
IkReal x9991=((1.0)*r00*r20);
j4eval[0]=((((-1.0)*x9990))+(((-1.0)*x9991)));
j4eval[1]=(((sj3*x9990))+((sj3*x9991)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9992=((-1.0)*r21);
CheckValue<IkReal> x9994 = IKatan2WithCheck(IkReal(r20),IkReal(x9992),IKFAST_ATAN2_MAGTHRESH);
if(!x9994.valid){
continue;
}
IkReal x9993=((1.0)*(x9994.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9993)));
sj0=0;
cj0=1.0;
j0=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=((-1.0)*py*r20);
rxp0_2=(py*r00);
rxp1_0=(py*x9992);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9993)));
IkReal gconst4=((1.0)*r20);
IkReal gconst5=((1.0)*r21);
IkReal x9995=((1.0)*r01*r21);
IkReal x9996=((1.0)*r00*r20);
j4eval[0]=((((-1.0)*x9996))+(((-1.0)*x9995)));
j4eval[1]=((((-1.0)*cj3*x9995))+(((-1.0)*cj3*x9996)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x9997=((-1.0)*r21);
CheckValue<IkReal> x9999 = IKatan2WithCheck(IkReal(r20),IkReal(x9997),IKFAST_ATAN2_MAGTHRESH);
if(!x9999.valid){
continue;
}
IkReal x9998=((1.0)*(x9999.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9998)));
sj0=0;
cj0=1.0;
j0=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=((-1.0)*py*r20);
rxp0_2=(py*r00);
rxp1_0=(py*x9997);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9998)));
IkReal gconst4=((1.0)*r20);
IkReal gconst5=((1.0)*r21);
IkReal x10000=((1.0)*sj3);
j4eval[0]=cj3;
j4eval[1]=r12;
j4eval[2]=(((r00*r20*x10000))+((r01*r21*x10000)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10001=IKPowWithIntegerCheck(cj3,-1);
if(!x10001.valid){
continue;
}
CheckValue<IkReal> x10002=IKPowWithIntegerCheck(r12,-1);
if(!x10002.valid){
continue;
}
CheckValue<IkReal> x10003=IKPowWithIntegerCheck((((gconst5*r01*sj3))+((gconst4*r00*sj3))),-1);
if(!x10003.valid){
continue;
}
if( IKabs(((x10001.value)*(x10002.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10003.value)*(((((-1.0)*cj3*gconst4*r01))+((cj3*gconst5*r00)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x10001.value)*(x10002.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x10003.value)*(((((-1.0)*cj3*gconst4*r01))+((cj3*gconst5*r00))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x10001.value)*(x10002.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x10003.value)*(((((-1.0)*cj3*gconst4*r01))+((cj3*gconst5*r00))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10004=IKsin(j4);
IkReal x10005=IKcos(j4);
IkReal x10006=(cj1*cj2);
IkReal x10007=(gconst4*r20);
IkReal x10008=((1.0)*sj1);
IkReal x10009=(cj3*gconst4);
IkReal x10010=(gconst4*r00);
IkReal x10011=((1.0)*gconst5);
IkReal x10012=(cj1*sj2);
IkReal x10013=(gconst5*r21);
IkReal x10014=(gconst5*r01);
IkReal x10015=(gconst4*sj3);
IkReal x10016=(sj2*x10008);
IkReal x10017=((1.0)*x10004);
IkReal x10018=(sj3*x10005);
IkReal x10019=(cj3*x10005);
evalcond[0]=((-1.0)*r12*x10005);
evalcond[1]=(((cj3*r12*x10004))+x10006+(((-1.0)*x10016)));
evalcond[2]=((((-1.0)*x10007*x10017))+(((-1.0)*r21*x10004*x10011)));
evalcond[3]=((-1.0)+(((-1.0)*r01*x10004*x10011))+(((-1.0)*x10010*x10017)));
evalcond[4]=((((-1.0)*r12*sj3*x10017))+(((-1.0)*x10012))+(((-1.0)*cj2*x10008)));
evalcond[5]=(((x10014*x10018))+((x10010*x10018))+((r01*x10009))+(((-1.0)*cj3*r00*x10011)));
evalcond[6]=((((-1.0)*r00*x10005*x10009))+(((-1.0)*r00*sj3*x10011))+((r01*x10015))+(((-1.0)*r01*x10011*x10019)));
evalcond[7]=(((x10013*x10018))+(((-1.0)*cj3*r20*x10011))+((x10007*x10018))+x10006+((r21*x10009))+(((-1.0)*x10016)));
evalcond[8]=(((r21*x10015))+((cj2*sj1))+(((-1.0)*x10007*x10019))+(((-1.0)*r21*x10011*x10019))+x10012+(((-1.0)*r20*sj3*x10011)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10020=((1.0)*gconst4);
IkReal x10021=((1.0)*gconst5*r01);
CheckValue<IkReal> x10022=IKPowWithIntegerCheck(((((-1.0)*r00*x10020))+(((-1.0)*x10021))),-1);
if(!x10022.valid){
continue;
}
CheckValue<IkReal> x10023=IKPowWithIntegerCheck(((((-1.0)*cj3*r00*x10020))+(((-1.0)*cj3*x10021))),-1);
if(!x10023.valid){
continue;
}
if( IKabs(x10022.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10023.value)*(((((-1.0)*r01*sj3*x10020))+((gconst5*r00*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x10022.value)+IKsqr(((x10023.value)*(((((-1.0)*r01*sj3*x10020))+((gconst5*r00*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x10022.value, ((x10023.value)*(((((-1.0)*r01*sj3*x10020))+((gconst5*r00*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10024=IKsin(j4);
IkReal x10025=IKcos(j4);
IkReal x10026=(cj1*cj2);
IkReal x10027=(gconst4*r20);
IkReal x10028=((1.0)*sj1);
IkReal x10029=(cj3*gconst4);
IkReal x10030=(gconst4*r00);
IkReal x10031=((1.0)*gconst5);
IkReal x10032=(cj1*sj2);
IkReal x10033=(gconst5*r21);
IkReal x10034=(gconst5*r01);
IkReal x10035=(gconst4*sj3);
IkReal x10036=(sj2*x10028);
IkReal x10037=((1.0)*x10024);
IkReal x10038=(sj3*x10025);
IkReal x10039=(cj3*x10025);
evalcond[0]=((-1.0)*r12*x10025);
evalcond[1]=(((cj3*r12*x10024))+x10026+(((-1.0)*x10036)));
evalcond[2]=((((-1.0)*r21*x10024*x10031))+(((-1.0)*x10027*x10037)));
evalcond[3]=((-1.0)+(((-1.0)*r01*x10024*x10031))+(((-1.0)*x10030*x10037)));
evalcond[4]=((((-1.0)*x10032))+(((-1.0)*r12*sj3*x10037))+(((-1.0)*cj2*x10028)));
evalcond[5]=(((x10034*x10038))+(((-1.0)*cj3*r00*x10031))+((r01*x10029))+((x10030*x10038)));
evalcond[6]=(((r01*x10035))+(((-1.0)*r00*sj3*x10031))+(((-1.0)*r00*x10025*x10029))+(((-1.0)*r01*x10031*x10039)));
evalcond[7]=(((x10027*x10038))+((x10033*x10038))+((r21*x10029))+(((-1.0)*cj3*r20*x10031))+x10026+(((-1.0)*x10036)));
evalcond[8]=(((cj2*sj1))+(((-1.0)*x10027*x10039))+((r21*x10035))+x10032+(((-1.0)*r20*sj3*x10031))+(((-1.0)*r21*x10031*x10039)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10040=((1.0)*gconst4);
IkReal x10041=(gconst5*r01);
CheckValue<IkReal> x10042=IKPowWithIntegerCheck(((((-1.0)*r00*x10040))+(((-1.0)*x10041))),-1);
if(!x10042.valid){
continue;
}
CheckValue<IkReal> x10043=IKPowWithIntegerCheck((((gconst4*r00*sj3))+((sj3*x10041))),-1);
if(!x10043.valid){
continue;
}
if( IKabs(x10042.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10043.value)*((((cj3*gconst5*r00))+(((-1.0)*cj3*r01*x10040)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x10042.value)+IKsqr(((x10043.value)*((((cj3*gconst5*r00))+(((-1.0)*cj3*r01*x10040))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x10042.value, ((x10043.value)*((((cj3*gconst5*r00))+(((-1.0)*cj3*r01*x10040))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10044=IKsin(j4);
IkReal x10045=IKcos(j4);
IkReal x10046=(cj1*cj2);
IkReal x10047=(gconst4*r20);
IkReal x10048=((1.0)*sj1);
IkReal x10049=(cj3*gconst4);
IkReal x10050=(gconst4*r00);
IkReal x10051=((1.0)*gconst5);
IkReal x10052=(cj1*sj2);
IkReal x10053=(gconst5*r21);
IkReal x10054=(gconst5*r01);
IkReal x10055=(gconst4*sj3);
IkReal x10056=(sj2*x10048);
IkReal x10057=((1.0)*x10044);
IkReal x10058=(sj3*x10045);
IkReal x10059=(cj3*x10045);
evalcond[0]=((-1.0)*r12*x10045);
evalcond[1]=((((-1.0)*x10056))+x10046+((cj3*r12*x10044)));
evalcond[2]=((((-1.0)*x10047*x10057))+(((-1.0)*r21*x10044*x10051)));
evalcond[3]=((-1.0)+(((-1.0)*r01*x10044*x10051))+(((-1.0)*x10050*x10057)));
evalcond[4]=((((-1.0)*x10052))+(((-1.0)*cj2*x10048))+(((-1.0)*r12*sj3*x10057)));
evalcond[5]=(((r01*x10049))+((x10054*x10058))+(((-1.0)*cj3*r00*x10051))+((x10050*x10058)));
evalcond[6]=((((-1.0)*r00*x10045*x10049))+(((-1.0)*r01*x10051*x10059))+((r01*x10055))+(((-1.0)*r00*sj3*x10051)));
evalcond[7]=(((r21*x10049))+(((-1.0)*x10056))+x10046+(((-1.0)*cj3*r20*x10051))+((x10053*x10058))+((x10047*x10058)));
evalcond[8]=(((cj2*sj1))+(((-1.0)*x10047*x10059))+(((-1.0)*r21*x10051*x10059))+x10052+((r21*x10055))+(((-1.0)*r20*sj3*x10051)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10060=gconst5*gconst5;
IkReal x10061=gconst4*gconst4;
IkReal x10062=(r20*sj3);
IkReal x10063=((1.0)*cj3);
IkReal x10064=(gconst5*r00);
IkReal x10065=(cj3*gconst4);
IkReal x10066=(gconst4*gconst5*r01);
IkReal x10067=(r21*x10060);
CheckValue<IkReal> x10068=IKPowWithIntegerCheck(IKsign((((x10062*x10066))+((r01*sj3*x10067))+((gconst4*r21*sj3*x10064))+((r00*x10061*x10062))+((r02*r22*sj3)))),-1);
if(!x10068.valid){
continue;
}
CheckValue<IkReal> x10069 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x10063*x10064))+((r01*r22*x10065)))),IkReal(((((-1.0)*r21*x10063*x10066))+((r20*x10064*x10065))+(((-1.0)*r01*r20*x10061*x10063))+((cj3*r00*x10067)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10069.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10068.value)))+(x10069.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10070=IKsin(j4);
IkReal x10071=IKcos(j4);
IkReal x10072=(cj1*cj2);
IkReal x10073=((1.0)*r20);
IkReal x10074=(gconst5*sj3);
IkReal x10075=(cj3*r11);
IkReal x10076=((1.0)*sj1);
IkReal x10077=(cj3*gconst4);
IkReal x10078=(gconst4*sj3);
IkReal x10079=((1.0)*r10);
IkReal x10080=((1.0)*gconst5);
IkReal x10081=(cj1*sj2);
IkReal x10082=(cj3*gconst5);
IkReal x10083=((1.0)*r00);
IkReal x10084=(sj2*x10076);
IkReal x10085=((1.0)*x10071);
IkReal x10086=(gconst4*x10070);
IkReal x10087=(cj3*x10070);
IkReal x10088=((1.0)*sj3*x10070);
evalcond[0]=((((-1.0)*r21*x10070*x10080))+(((-1.0)*x10073*x10086))+(((-1.0)*r22*x10085)));
evalcond[1]=((((-1.0)*x10079*x10086))+(((-1.0)*r11*x10070*x10080))+(((-1.0)*r12*x10085)));
evalcond[2]=((-1.0)+(((-1.0)*r01*x10070*x10080))+(((-1.0)*r02*x10085))+(((-1.0)*x10083*x10086)));
evalcond[3]=(((r00*x10071*x10078))+((r01*x10077))+(((-1.0)*cj3*r00*x10080))+(((-1.0)*r02*x10088))+((r01*x10071*x10074)));
evalcond[4]=((((-1.0)*x10074*x10083))+((r01*x10078))+((r02*x10087))+(((-1.0)*cj3*r01*x10071*x10080))+(((-1.0)*x10071*x10077*x10083)));
evalcond[5]=(((r20*x10071*x10078))+(((-1.0)*x10084))+((r21*x10071*x10074))+x10072+((r21*x10077))+(((-1.0)*x10073*x10082))+(((-1.0)*r22*x10088)));
evalcond[6]=(((cj2*sj1))+x10081+((r21*x10078))+((r22*x10087))+(((-1.0)*cj3*r21*x10071*x10080))+(((-1.0)*x10071*x10073*x10077))+(((-1.0)*x10073*x10074)));
evalcond[7]=(((r10*x10071*x10078))+(((-1.0)*cj2*x10076))+((r11*x10071*x10074))+(((-1.0)*x10079*x10082))+(((-1.0)*r12*x10088))+((gconst4*x10075))+(((-1.0)*x10081)));
evalcond[8]=((((-1.0)*x10071*x10077*x10079))+(((-1.0)*x10071*x10075*x10080))+(((-1.0)*x10074*x10079))+(((-1.0)*x10084))+x10072+((r11*x10078))+((r12*x10087)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10089=((1.0)*gconst5);
CheckValue<IkReal> x10090=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x10089))+((gconst4*r21)))),-1);
if(!x10090.valid){
continue;
}
CheckValue<IkReal> x10091 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r11*x10089))+(((-1.0)*gconst4*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10091.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10090.value)))+(x10091.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10092=IKsin(j4);
IkReal x10093=IKcos(j4);
IkReal x10094=(cj1*cj2);
IkReal x10095=((1.0)*r20);
IkReal x10096=(gconst5*sj3);
IkReal x10097=(cj3*r11);
IkReal x10098=((1.0)*sj1);
IkReal x10099=(cj3*gconst4);
IkReal x10100=(gconst4*sj3);
IkReal x10101=((1.0)*r10);
IkReal x10102=((1.0)*gconst5);
IkReal x10103=(cj1*sj2);
IkReal x10104=(cj3*gconst5);
IkReal x10105=((1.0)*r00);
IkReal x10106=(sj2*x10098);
IkReal x10107=((1.0)*x10093);
IkReal x10108=(gconst4*x10092);
IkReal x10109=(cj3*x10092);
IkReal x10110=((1.0)*sj3*x10092);
evalcond[0]=((((-1.0)*r21*x10092*x10102))+(((-1.0)*r22*x10107))+(((-1.0)*x10095*x10108)));
evalcond[1]=((((-1.0)*r12*x10107))+(((-1.0)*x10101*x10108))+(((-1.0)*r11*x10092*x10102)));
evalcond[2]=((-1.0)+(((-1.0)*x10105*x10108))+(((-1.0)*r02*x10107))+(((-1.0)*r01*x10092*x10102)));
evalcond[3]=(((r00*x10093*x10100))+((r01*x10093*x10096))+(((-1.0)*r02*x10110))+(((-1.0)*cj3*r00*x10102))+((r01*x10099)));
evalcond[4]=((((-1.0)*x10093*x10099*x10105))+((r01*x10100))+(((-1.0)*cj3*r01*x10093*x10102))+((r02*x10109))+(((-1.0)*x10096*x10105)));
evalcond[5]=(((r20*x10093*x10100))+(((-1.0)*r22*x10110))+(((-1.0)*x10095*x10104))+x10094+((r21*x10099))+((r21*x10093*x10096))+(((-1.0)*x10106)));
evalcond[6]=((((-1.0)*x10095*x10096))+((r21*x10100))+(((-1.0)*x10093*x10095*x10099))+((cj2*sj1))+x10103+(((-1.0)*cj3*r21*x10093*x10102))+((r22*x10109)));
evalcond[7]=((((-1.0)*x10103))+(((-1.0)*r12*x10110))+((r11*x10093*x10096))+((r10*x10093*x10100))+(((-1.0)*cj2*x10098))+(((-1.0)*x10101*x10104))+((gconst4*x10097)));
evalcond[8]=((((-1.0)*x10093*x10099*x10101))+x10094+((r11*x10100))+((r12*x10109))+(((-1.0)*x10096*x10101))+(((-1.0)*x10106))+(((-1.0)*x10093*x10097*x10102)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10111=((1.0)*gconst4);
CheckValue<IkReal> x10112=IKPowWithIntegerCheck(IKsign((((gconst5*r10))+(((-1.0)*r11*x10111)))),-1);
if(!x10112.valid){
continue;
}
CheckValue<IkReal> x10113 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst5*r21))+(((-1.0)*r20*x10111)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10113.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10112.value)))+(x10113.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10114=IKsin(j4);
IkReal x10115=IKcos(j4);
IkReal x10116=(cj1*cj2);
IkReal x10117=((1.0)*r20);
IkReal x10118=(gconst5*sj3);
IkReal x10119=(cj3*r11);
IkReal x10120=((1.0)*sj1);
IkReal x10121=(cj3*gconst4);
IkReal x10122=(gconst4*sj3);
IkReal x10123=((1.0)*r10);
IkReal x10124=((1.0)*gconst5);
IkReal x10125=(cj1*sj2);
IkReal x10126=(cj3*gconst5);
IkReal x10127=((1.0)*r00);
IkReal x10128=(sj2*x10120);
IkReal x10129=((1.0)*x10115);
IkReal x10130=(gconst4*x10114);
IkReal x10131=(cj3*x10114);
IkReal x10132=((1.0)*sj3*x10114);
evalcond[0]=((((-1.0)*x10117*x10130))+(((-1.0)*r21*x10114*x10124))+(((-1.0)*r22*x10129)));
evalcond[1]=((((-1.0)*x10123*x10130))+(((-1.0)*r11*x10114*x10124))+(((-1.0)*r12*x10129)));
evalcond[2]=((-1.0)+(((-1.0)*x10127*x10130))+(((-1.0)*r02*x10129))+(((-1.0)*r01*x10114*x10124)));
evalcond[3]=((((-1.0)*r02*x10132))+((r00*x10115*x10122))+((r01*x10121))+((r01*x10115*x10118))+(((-1.0)*cj3*r00*x10124)));
evalcond[4]=(((r02*x10131))+(((-1.0)*cj3*r01*x10115*x10124))+(((-1.0)*x10115*x10121*x10127))+((r01*x10122))+(((-1.0)*x10118*x10127)));
evalcond[5]=(((r20*x10115*x10122))+((r21*x10121))+x10116+(((-1.0)*x10117*x10126))+(((-1.0)*x10128))+(((-1.0)*r22*x10132))+((r21*x10115*x10118)));
evalcond[6]=(((cj2*sj1))+(((-1.0)*x10117*x10118))+((r21*x10122))+x10125+(((-1.0)*cj3*r21*x10115*x10124))+((r22*x10131))+(((-1.0)*x10115*x10117*x10121)));
evalcond[7]=((((-1.0)*x10123*x10126))+((r11*x10115*x10118))+(((-1.0)*cj2*x10120))+((r10*x10115*x10122))+((gconst4*x10119))+(((-1.0)*x10125))+(((-1.0)*r12*x10132)));
evalcond[8]=(x10116+(((-1.0)*x10115*x10121*x10123))+(((-1.0)*x10115*x10119*x10124))+(((-1.0)*x10128))+((r12*x10131))+((r11*x10122))+(((-1.0)*x10118*x10123)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x10136 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x10136.valid){
continue;
}
IkReal x10133=((1.0)*(x10136.value));
IkReal x10134=x9733;
IkReal x10135=((1.0)*x10134);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10133)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10133)));
IkReal gconst4=(r20*x10135);
IkReal gconst5=(r21*x10135);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x10140 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x10140.valid){
continue;
}
IkReal x10137=((1.0)*(x10140.value));
IkReal x10138=x9733;
IkReal x10139=((1.0)*x10138);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10137)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10137)));
IkReal gconst4=(r20*x10139);
IkReal gconst5=(r21*x10139);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x10144 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x10144.valid){
continue;
}
IkReal x10141=((1.0)*(x10144.value));
IkReal x10142=x9733;
IkReal x10143=((1.0)*x10142);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10141)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10141)));
IkReal gconst4=(r20*x10143);
IkReal gconst5=(r21*x10143);
j4eval[0]=cj3;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x10148 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x10148.valid){
continue;
}
IkReal x10145=((1.0)*(x10148.value));
IkReal x10146=x9733;
IkReal x10147=((1.0)*x10146);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10145)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10145)));
IkReal gconst4=(r20*x10147);
IkReal gconst5=(r21*x10147);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x10152 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x10152.valid){
continue;
}
IkReal x10149=((1.0)*(x10152.value));
IkReal x10150=x9733;
IkReal x10151=((1.0)*x10150);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10149)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10149)));
IkReal gconst4=(r20*x10151);
IkReal gconst5=(r21*x10151);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x10156 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x10156.valid){
continue;
}
IkReal x10153=((1.0)*(x10156.value));
IkReal x10154=x9733;
IkReal x10155=((1.0)*x10154);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10153)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10153)));
IkReal gconst4=(r20*x10155);
IkReal gconst5=(r21*x10155);
IkReal x10157=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10161=IKPowWithIntegerCheck(x10157,-1);
if(!x10161.valid){
continue;
}
IkReal x10158=x10161.value;
IkReal x10159=((1.0)*x10158);
IkReal x10160=((((-1.0)*x10159*(r00*r00)*(r20*r20)))+(((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r20*r21*x10158))+(((-1.0)*x10159*(r01*r01)*(r21*r21))));
j4eval[0]=x10160;
j4eval[1]=IKsign(x10160);
j4eval[2]=r02;
j4eval[3]=x10157;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10162=(gconst4*r00);
IkReal x10163=(gconst5*r01);
CheckValue<IkReal> x10164 = IKatan2WithCheck(IkReal(((((-1.0)*x10163))+(((-1.0)*x10162)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x10164.valid){
continue;
}
CheckValue<IkReal> x10165=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10162*x10162)))+(((-1.0)*(r02*r02)))+(((-2.0)*x10162*x10163))+(((-1.0)*(x10163*x10163))))),-1);
if(!x10165.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10164.value)+(((1.5707963267949)*(x10165.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10166=IKcos(j4);
IkReal x10167=IKsin(j4);
IkReal x10168=((1.0)*x10166);
IkReal x10169=((1.0)*gconst4*x10167);
IkReal x10170=((1.0)*gconst5*x10167);
evalcond[0]=((((-1.0)*gconst5*r01*x10168))+(((-1.0)*gconst4*r00*x10168))+((r02*x10167)));
evalcond[1]=((((-1.0)*r20*x10169))+(((-1.0)*r22*x10168))+(((-1.0)*r21*x10170)));
evalcond[2]=((((-1.0)*r10*x10169))+(((-1.0)*r12*x10168))+(((-1.0)*r11*x10170)));
evalcond[3]=((1.0)+(((-1.0)*r00*x10169))+(((-1.0)*r01*x10170))+(((-1.0)*r02*x10168)));
evalcond[4]=(((cj2*sj1))+((r22*x10167))+((cj1*sj2))+(((-1.0)*gconst5*r21*x10168))+(((-1.0)*gconst4*r20*x10168)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst4*r10*x10168))+(((-1.0)*gconst5*r11*x10168))+((r12*x10167)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10171=((1.0)*gconst4);
CheckValue<IkReal> x10172=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10171))+((gconst5*r20)))),-1);
if(!x10172.valid){
continue;
}
CheckValue<IkReal> x10173 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x10171))+(((-1.0)*gconst5*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10173.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10172.value)))+(x10173.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10174=IKcos(j4);
IkReal x10175=IKsin(j4);
IkReal x10176=((1.0)*x10174);
IkReal x10177=((1.0)*gconst4*x10175);
IkReal x10178=((1.0)*gconst5*x10175);
evalcond[0]=(((r02*x10175))+(((-1.0)*gconst5*r01*x10176))+(((-1.0)*gconst4*r00*x10176)));
evalcond[1]=((((-1.0)*r22*x10176))+(((-1.0)*r20*x10177))+(((-1.0)*r21*x10178)));
evalcond[2]=((((-1.0)*r12*x10176))+(((-1.0)*r11*x10178))+(((-1.0)*r10*x10177)));
evalcond[3]=((1.0)+(((-1.0)*r00*x10177))+(((-1.0)*r01*x10178))+(((-1.0)*r02*x10176)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x10175))+(((-1.0)*gconst4*r20*x10176))+(((-1.0)*gconst5*r21*x10176)));
evalcond[5]=((((-1.0)*gconst4*r10*x10176))+((r12*x10175))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst5*r11*x10176)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10179=((1.0)*gconst5);
CheckValue<IkReal> x10180 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x10179))+(((-1.0)*gconst4*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10180.valid){
continue;
}
CheckValue<IkReal> x10181=IKPowWithIntegerCheck(IKsign((((gconst4*r11))+(((-1.0)*r10*x10179)))),-1);
if(!x10181.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10180.value)+(((1.5707963267949)*(x10181.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10182=IKcos(j4);
IkReal x10183=IKsin(j4);
IkReal x10184=((1.0)*x10182);
IkReal x10185=((1.0)*gconst4*x10183);
IkReal x10186=((1.0)*gconst5*x10183);
evalcond[0]=(((r02*x10183))+(((-1.0)*gconst4*r00*x10184))+(((-1.0)*gconst5*r01*x10184)));
evalcond[1]=((((-1.0)*r20*x10185))+(((-1.0)*r21*x10186))+(((-1.0)*r22*x10184)));
evalcond[2]=((((-1.0)*r12*x10184))+(((-1.0)*r11*x10186))+(((-1.0)*r10*x10185)));
evalcond[3]=((1.0)+(((-1.0)*r02*x10184))+(((-1.0)*r00*x10185))+(((-1.0)*r01*x10186)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst5*r21*x10184))+((cj1*sj2))+((r22*x10183))+(((-1.0)*gconst4*r20*x10184)));
evalcond[5]=(((r12*x10183))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst5*r11*x10184))+(((-1.0)*gconst4*r10*x10184)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x10190 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x10190.valid){
continue;
}
IkReal x10187=((1.0)*(x10190.value));
IkReal x10188=x9733;
IkReal x10189=((1.0)*x10188);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10187)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10187)));
IkReal gconst4=(r20*x10189);
IkReal gconst5=(r21*x10189);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x10194 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x10194.valid){
continue;
}
IkReal x10191=((1.0)*(x10194.value));
IkReal x10192=x9733;
IkReal x10193=((1.0)*x10192);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10191)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10191)));
IkReal gconst4=(r20*x10193);
IkReal gconst5=(r21*x10193);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x10198 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x10198.valid){
continue;
}
IkReal x10195=((1.0)*(x10198.value));
IkReal x10196=x9733;
IkReal x10197=((1.0)*x10196);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10195)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10195)));
IkReal gconst4=(r20*x10197);
IkReal gconst5=(r21*x10197);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10199=(gconst5*r01);
IkReal x10200=(gconst4*r00);
CheckValue<IkReal> x10201=IKPowWithIntegerCheck(IKsign(((x10200*x10200)+(((2.0)*x10199*x10200))+(x10199*x10199)+(r02*r02))),-1);
if(!x10201.valid){
continue;
}
CheckValue<IkReal> x10202 = IKatan2WithCheck(IkReal((x10199+x10200)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x10202.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10201.value)))+(x10202.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10203=IKcos(j4);
IkReal x10204=IKsin(j4);
IkReal x10205=(gconst5*r21);
IkReal x10206=(gconst5*r11);
IkReal x10207=(gconst5*r01);
IkReal x10208=((1.0)*x10203);
IkReal x10209=(gconst4*x10203);
IkReal x10210=((1.0)*x10204);
IkReal x10211=(gconst4*x10210);
evalcond[0]=(((r00*x10209))+((x10203*x10207))+(((-1.0)*r02*x10210)));
evalcond[1]=((((-1.0)*x10205*x10210))+(((-1.0)*r22*x10208))+(((-1.0)*r20*x10211)));
evalcond[2]=((((-1.0)*r10*x10211))+(((-1.0)*r12*x10208))+(((-1.0)*x10206*x10210)));
evalcond[3]=((1.0)+(((-1.0)*r02*x10208))+(((-1.0)*r00*x10211))+(((-1.0)*x10207*x10210)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x10210))+((cj1*sj2))+((x10203*x10205))+((r20*x10209)));
evalcond[5]=(((r10*x10209))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x10203*x10206))+(((-1.0)*r12*x10210)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10212=((1.0)*gconst4);
CheckValue<IkReal> x10213=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10212))+((gconst5*r20)))),-1);
if(!x10213.valid){
continue;
}
CheckValue<IkReal> x10214 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x10212))+(((-1.0)*gconst5*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10214.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10213.value)))+(x10214.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10215=IKcos(j4);
IkReal x10216=IKsin(j4);
IkReal x10217=(gconst5*r21);
IkReal x10218=(gconst5*r11);
IkReal x10219=(gconst5*r01);
IkReal x10220=((1.0)*x10215);
IkReal x10221=(gconst4*x10215);
IkReal x10222=((1.0)*x10216);
IkReal x10223=(gconst4*x10222);
evalcond[0]=((((-1.0)*r02*x10222))+((x10215*x10219))+((r00*x10221)));
evalcond[1]=((((-1.0)*r20*x10223))+(((-1.0)*x10217*x10222))+(((-1.0)*r22*x10220)));
evalcond[2]=((((-1.0)*r10*x10223))+(((-1.0)*r12*x10220))+(((-1.0)*x10218*x10222)));
evalcond[3]=((1.0)+(((-1.0)*r02*x10220))+(((-1.0)*r00*x10223))+(((-1.0)*x10219*x10222)));
evalcond[4]=(((cj2*sj1))+((x10215*x10217))+((cj1*sj2))+(((-1.0)*r22*x10222))+((r20*x10221)));
evalcond[5]=(((r10*x10221))+((x10215*x10218))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x10222)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10224=((1.0)*gconst5);
CheckValue<IkReal> x10225=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x10224))+((gconst4*r11)))),-1);
if(!x10225.valid){
continue;
}
CheckValue<IkReal> x10226 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x10224))+(((-1.0)*gconst4*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10226.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10225.value)))+(x10226.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10227=IKcos(j4);
IkReal x10228=IKsin(j4);
IkReal x10229=(gconst5*r21);
IkReal x10230=(gconst5*r11);
IkReal x10231=(gconst5*r01);
IkReal x10232=((1.0)*x10227);
IkReal x10233=(gconst4*x10227);
IkReal x10234=((1.0)*x10228);
IkReal x10235=(gconst4*x10234);
evalcond[0]=(((r00*x10233))+((x10227*x10231))+(((-1.0)*r02*x10234)));
evalcond[1]=((((-1.0)*r22*x10232))+(((-1.0)*x10229*x10234))+(((-1.0)*r20*x10235)));
evalcond[2]=((((-1.0)*x10230*x10234))+(((-1.0)*r12*x10232))+(((-1.0)*r10*x10235)));
evalcond[3]=((1.0)+(((-1.0)*r00*x10235))+(((-1.0)*x10231*x10234))+(((-1.0)*r02*x10232)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x10234))+((r20*x10233))+((x10227*x10229)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x10227*x10230))+(((-1.0)*r12*x10234))+((r10*x10233)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x10239 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x10239.valid){
continue;
}
IkReal x10236=((1.0)*(x10239.value));
IkReal x10237=x9733;
IkReal x10238=((1.0)*x10237);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10236)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10236)));
IkReal gconst4=(r20*x10238);
IkReal gconst5=(r21*x10238);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x10243 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x10243.valid){
continue;
}
IkReal x10240=((1.0)*(x10243.value));
IkReal x10241=x9733;
IkReal x10242=((1.0)*x10241);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10240)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10240)));
IkReal gconst4=(r20*x10242);
IkReal gconst5=(r21*x10242);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x10247 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x10247.valid){
continue;
}
IkReal x10244=((1.0)*(x10247.value));
IkReal x10245=x9733;
IkReal x10246=((1.0)*x10245);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10244)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10244)));
IkReal gconst4=(r20*x10246);
IkReal gconst5=(r21*x10246);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10248=(gconst5*r01);
IkReal x10249=(gconst4*r00);
CheckValue<IkReal> x10250 = IKatan2WithCheck(IkReal((x10248+x10249)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x10250.valid){
continue;
}
CheckValue<IkReal> x10251=IKPowWithIntegerCheck(IKsign(((((2.0)*x10248*x10249))+(x10249*x10249)+(x10248*x10248)+(r02*r02))),-1);
if(!x10251.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10250.value)+(((1.5707963267949)*(x10251.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10252=IKcos(j4);
IkReal x10253=IKsin(j4);
IkReal x10254=(gconst5*r21);
IkReal x10255=(gconst5*r11);
IkReal x10256=(gconst5*r01);
IkReal x10257=((1.0)*x10252);
IkReal x10258=(gconst4*x10252);
IkReal x10259=((1.0)*x10253);
IkReal x10260=(gconst4*x10259);
evalcond[0]=((((-1.0)*r02*x10259))+((r00*x10258))+((x10252*x10256)));
evalcond[1]=((((-1.0)*x10254*x10259))+(((-1.0)*r20*x10260))+(((-1.0)*r22*x10257)));
evalcond[2]=((((-1.0)*r10*x10260))+(((-1.0)*x10255*x10259))+(((-1.0)*r12*x10257)));
evalcond[3]=((1.0)+(((-1.0)*r02*x10257))+(((-1.0)*x10256*x10259))+(((-1.0)*r00*x10260)));
evalcond[4]=(((cj2*sj1))+((r10*x10258))+((cj1*sj2))+(((-1.0)*r12*x10259))+((x10252*x10255)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r22*x10259))+((cj1*cj2))+((r20*x10258))+((x10252*x10254)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10261=((1.0)*gconst4);
CheckValue<IkReal> x10262 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x10261))+(((-1.0)*gconst5*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10262.valid){
continue;
}
CheckValue<IkReal> x10263=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10261))+((gconst5*r20)))),-1);
if(!x10263.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10262.value)+(((1.5707963267949)*(x10263.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10264=IKcos(j4);
IkReal x10265=IKsin(j4);
IkReal x10266=(gconst5*r21);
IkReal x10267=(gconst5*r11);
IkReal x10268=(gconst5*r01);
IkReal x10269=((1.0)*x10264);
IkReal x10270=(gconst4*x10264);
IkReal x10271=((1.0)*x10265);
IkReal x10272=(gconst4*x10271);
evalcond[0]=(((r00*x10270))+((x10264*x10268))+(((-1.0)*r02*x10271)));
evalcond[1]=((((-1.0)*r22*x10269))+(((-1.0)*x10266*x10271))+(((-1.0)*r20*x10272)));
evalcond[2]=((((-1.0)*r10*x10272))+(((-1.0)*r12*x10269))+(((-1.0)*x10267*x10271)));
evalcond[3]=((1.0)+(((-1.0)*r00*x10272))+(((-1.0)*x10268*x10271))+(((-1.0)*r02*x10269)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x10264*x10267))+(((-1.0)*r12*x10271))+((r10*x10270)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r20*x10270))+(((-1.0)*r22*x10271))+((x10264*x10266))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10273=((1.0)*gconst5);
CheckValue<IkReal> x10274=IKPowWithIntegerCheck(IKsign((((gconst4*r11))+(((-1.0)*r10*x10273)))),-1);
if(!x10274.valid){
continue;
}
CheckValue<IkReal> x10275 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x10273))+(((-1.0)*gconst4*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10275.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10274.value)))+(x10275.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10276=IKcos(j4);
IkReal x10277=IKsin(j4);
IkReal x10278=(gconst5*r21);
IkReal x10279=(gconst5*r11);
IkReal x10280=(gconst5*r01);
IkReal x10281=((1.0)*x10276);
IkReal x10282=(gconst4*x10276);
IkReal x10283=((1.0)*x10277);
IkReal x10284=(gconst4*x10283);
evalcond[0]=((((-1.0)*r02*x10283))+((x10276*x10280))+((r00*x10282)));
evalcond[1]=((((-1.0)*x10278*x10283))+(((-1.0)*r22*x10281))+(((-1.0)*r20*x10284)));
evalcond[2]=((((-1.0)*r12*x10281))+(((-1.0)*x10279*x10283))+(((-1.0)*r10*x10284)));
evalcond[3]=((1.0)+(((-1.0)*r00*x10284))+(((-1.0)*r02*x10281))+(((-1.0)*x10280*x10283)));
evalcond[4]=(((cj2*sj1))+((x10276*x10279))+((cj1*sj2))+(((-1.0)*r12*x10283))+((r10*x10282)));
evalcond[5]=(((r20*x10282))+((x10276*x10278))+(((-1.0)*sj1*sj2))+(((-1.0)*r22*x10283))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x10288 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x10288.valid){
continue;
}
IkReal x10285=((1.0)*(x10288.value));
IkReal x10286=x9733;
IkReal x10287=((1.0)*x10286);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10285)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10285)));
IkReal gconst4=(r20*x10287);
IkReal gconst5=(r21*x10287);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x10292 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x10292.valid){
continue;
}
IkReal x10289=((1.0)*(x10292.value));
IkReal x10290=x9733;
IkReal x10291=((1.0)*x10290);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10289)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10289)));
IkReal gconst4=(r20*x10291);
IkReal gconst5=(r21*x10291);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x10296 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x10296.valid){
continue;
}
IkReal x10293=((1.0)*(x10296.value));
IkReal x10294=x9733;
IkReal x10295=((1.0)*x10294);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10293)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10293)));
IkReal gconst4=(r20*x10295);
IkReal gconst5=(r21*x10295);
IkReal x10297=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10301=IKPowWithIntegerCheck(x10297,-1);
if(!x10301.valid){
continue;
}
IkReal x10298=x10301.value;
IkReal x10299=((1.0)*x10298);
IkReal x10300=((((-2.0)*r00*r01*r20*r21*x10298))+(((-1.0)*(r02*r02)))+(((-1.0)*x10299*(r00*r00)*(r20*r20)))+(((-1.0)*x10299*(r01*r01)*(r21*r21))));
j4eval[0]=x10300;
j4eval[1]=IKsign(x10300);
j4eval[2]=r02;
j4eval[3]=x10297;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10302=(gconst4*r00);
IkReal x10303=(gconst5*r01);
CheckValue<IkReal> x10304 = IKatan2WithCheck(IkReal(((((-1.0)*x10303))+(((-1.0)*x10302)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x10304.valid){
continue;
}
CheckValue<IkReal> x10305=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*(x10302*x10302)))+(((-1.0)*(x10303*x10303)))+(((-2.0)*x10302*x10303)))),-1);
if(!x10305.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10304.value)+(((1.5707963267949)*(x10305.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10306=IKcos(j4);
IkReal x10307=IKsin(j4);
IkReal x10308=(gconst5*r21);
IkReal x10309=(gconst5*r01);
IkReal x10310=(gconst5*r11);
IkReal x10311=((1.0)*x10306);
IkReal x10312=((1.0)*x10307);
IkReal x10313=(gconst4*x10312);
evalcond[0]=(((r02*x10307))+(((-1.0)*gconst4*r00*x10311))+(((-1.0)*x10309*x10311)));
evalcond[1]=((((-1.0)*r20*x10313))+(((-1.0)*x10308*x10312))+(((-1.0)*r22*x10311)));
evalcond[2]=((((-1.0)*x10310*x10312))+(((-1.0)*r12*x10311))+(((-1.0)*r10*x10313)));
evalcond[3]=((1.0)+(((-1.0)*x10309*x10312))+(((-1.0)*r02*x10311))+(((-1.0)*r00*x10313)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x10310*x10311))+((cj1*sj2))+(((-1.0)*gconst4*r10*x10311))+((r12*x10307)));
evalcond[5]=((((-1.0)*gconst4*r20*x10311))+(((-1.0)*sj1*sj2))+(((-1.0)*x10308*x10311))+((cj1*cj2))+((r22*x10307)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10314=((1.0)*gconst4);
CheckValue<IkReal> x10315 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x10314))+(((-1.0)*gconst5*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10315.valid){
continue;
}
CheckValue<IkReal> x10316=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10314))+((gconst5*r20)))),-1);
if(!x10316.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10315.value)+(((1.5707963267949)*(x10316.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10317=IKcos(j4);
IkReal x10318=IKsin(j4);
IkReal x10319=(gconst5*r21);
IkReal x10320=(gconst5*r01);
IkReal x10321=(gconst5*r11);
IkReal x10322=((1.0)*x10317);
IkReal x10323=((1.0)*x10318);
IkReal x10324=(gconst4*x10323);
evalcond[0]=((((-1.0)*gconst4*r00*x10322))+((r02*x10318))+(((-1.0)*x10320*x10322)));
evalcond[1]=((((-1.0)*r22*x10322))+(((-1.0)*x10319*x10323))+(((-1.0)*r20*x10324)));
evalcond[2]=((((-1.0)*x10321*x10323))+(((-1.0)*r12*x10322))+(((-1.0)*r10*x10324)));
evalcond[3]=((1.0)+(((-1.0)*r02*x10322))+(((-1.0)*r00*x10324))+(((-1.0)*x10320*x10323)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x10321*x10322))+((cj1*sj2))+((r12*x10318))+(((-1.0)*gconst4*r10*x10322)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r22*x10318))+(((-1.0)*x10319*x10322))+((cj1*cj2))+(((-1.0)*gconst4*r20*x10322)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10325=((1.0)*gconst5);
CheckValue<IkReal> x10326=IKPowWithIntegerCheck(IKsign((((gconst4*r11))+(((-1.0)*r10*x10325)))),-1);
if(!x10326.valid){
continue;
}
CheckValue<IkReal> x10327 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x10325))+(((-1.0)*gconst4*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10327.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10326.value)))+(x10327.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10328=IKcos(j4);
IkReal x10329=IKsin(j4);
IkReal x10330=(gconst5*r21);
IkReal x10331=(gconst5*r01);
IkReal x10332=(gconst5*r11);
IkReal x10333=((1.0)*x10328);
IkReal x10334=((1.0)*x10329);
IkReal x10335=(gconst4*x10334);
evalcond[0]=(((r02*x10329))+(((-1.0)*x10331*x10333))+(((-1.0)*gconst4*r00*x10333)));
evalcond[1]=((((-1.0)*r22*x10333))+(((-1.0)*x10330*x10334))+(((-1.0)*r20*x10335)));
evalcond[2]=((((-1.0)*r12*x10333))+(((-1.0)*r10*x10335))+(((-1.0)*x10332*x10334)));
evalcond[3]=((1.0)+(((-1.0)*r00*x10335))+(((-1.0)*x10331*x10334))+(((-1.0)*r02*x10333)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r12*x10329))+(((-1.0)*gconst4*r10*x10333))+(((-1.0)*x10332*x10333)));
evalcond[5]=(((r22*x10329))+(((-1.0)*sj1*sj2))+(((-1.0)*x10330*x10333))+((cj1*cj2))+(((-1.0)*gconst4*r20*x10333)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x10336=((-1.0)*r21);
CheckValue<IkReal> x10338 = IKatan2WithCheck(IkReal(r20),IkReal(x10336),IKFAST_ATAN2_MAGTHRESH);
if(!x10338.valid){
continue;
}
IkReal x10337=((1.0)*(x10338.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10337)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=((-1.0)*py*r20);
rxp0_2=(py*r00);
rxp1_0=(py*x10336);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10337)));
IkReal gconst4=((1.0)*r20);
IkReal gconst5=((1.0)*r21);
IkReal x10339=((1.0)*r01*r21);
IkReal x10340=((1.0)*r00*r20);
j4eval[0]=((((-1.0)*x10340))+(((-1.0)*x10339)));
j4eval[1]=(((sj3*x10339))+((sj3*x10340)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10341=((-1.0)*r21);
CheckValue<IkReal> x10343 = IKatan2WithCheck(IkReal(r20),IkReal(x10341),IKFAST_ATAN2_MAGTHRESH);
if(!x10343.valid){
continue;
}
IkReal x10342=((1.0)*(x10343.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10342)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=((-1.0)*py*r20);
rxp0_2=(py*r00);
rxp1_0=(py*x10341);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10342)));
IkReal gconst4=((1.0)*r20);
IkReal gconst5=((1.0)*r21);
IkReal x10344=((1.0)*sj3);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=(((r01*r21*x10344))+((r00*r20*x10344)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10345=((-1.0)*r21);
CheckValue<IkReal> x10347 = IKatan2WithCheck(IkReal(r20),IkReal(x10345),IKFAST_ATAN2_MAGTHRESH);
if(!x10347.valid){
continue;
}
IkReal x10346=((1.0)*(x10347.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10346)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=((-1.0)*py*r20);
rxp0_2=(py*r00);
rxp1_0=(py*x10345);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10346)));
IkReal gconst4=((1.0)*r20);
IkReal gconst5=((1.0)*r21);
IkReal x10348=((1.0)*sj3);
j4eval[0]=cj3;
j4eval[1]=r12;
j4eval[2]=(((r01*r21*x10348))+((r00*r20*x10348)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10349=IKPowWithIntegerCheck(cj3,-1);
if(!x10349.valid){
continue;
}
CheckValue<IkReal> x10350=IKPowWithIntegerCheck(r12,-1);
if(!x10350.valid){
continue;
}
CheckValue<IkReal> x10351=IKPowWithIntegerCheck((((gconst5*r01*sj3))+((gconst4*r00*sj3))),-1);
if(!x10351.valid){
continue;
}
if( IKabs(((x10349.value)*(x10350.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10351.value)*(((((-1.0)*cj3*gconst4*r01))+((cj3*gconst5*r00)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x10349.value)*(x10350.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))+IKsqr(((x10351.value)*(((((-1.0)*cj3*gconst4*r01))+((cj3*gconst5*r00))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x10349.value)*(x10350.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))), ((x10351.value)*(((((-1.0)*cj3*gconst4*r01))+((cj3*gconst5*r00))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10352=IKsin(j4);
IkReal x10353=IKcos(j4);
IkReal x10354=(cj2*sj1);
IkReal x10355=(cj1*sj2);
IkReal x10356=(gconst4*r20);
IkReal x10357=(sj1*sj2);
IkReal x10358=(cj1*cj2);
IkReal x10359=(cj3*gconst4);
IkReal x10360=(gconst4*r00);
IkReal x10361=((1.0)*gconst5);
IkReal x10362=(gconst5*r21);
IkReal x10363=(gconst5*r01);
IkReal x10364=(gconst4*sj3);
IkReal x10365=((1.0)*x10352);
IkReal x10366=(sj3*x10353);
IkReal x10367=(cj3*x10353);
IkReal x10368=(x10354+x10355);
evalcond[0]=((-1.0)*r12*x10353);
evalcond[1]=((((-1.0)*r12*sj3*x10365))+x10368);
evalcond[2]=(((cj3*r12*x10352))+x10357+(((-1.0)*x10358)));
evalcond[3]=((((-1.0)*r21*x10352*x10361))+(((-1.0)*x10356*x10365)));
evalcond[4]=((1.0)+(((-1.0)*x10360*x10365))+(((-1.0)*r01*x10352*x10361)));
evalcond[5]=(((x10363*x10366))+(((-1.0)*cj3*r00*x10361))+((r01*x10359))+((x10360*x10366)));
evalcond[6]=(((r01*x10364))+(((-1.0)*r00*sj3*x10361))+(((-1.0)*r01*x10361*x10367))+(((-1.0)*r00*x10353*x10359)));
evalcond[7]=(((r21*x10359))+((x10362*x10366))+(((-1.0)*cj3*r20*x10361))+((x10356*x10366))+x10358+(((-1.0)*x10357)));
evalcond[8]=(((r21*x10364))+(((-1.0)*r21*x10361*x10367))+(((-1.0)*r20*sj3*x10361))+(((-1.0)*x10356*x10367))+x10368);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10369=IKPowWithIntegerCheck(r12,-1);
if(!x10369.valid){
continue;
}
CheckValue<IkReal> x10370=IKPowWithIntegerCheck(sj3,-1);
if(!x10370.valid){
continue;
}
CheckValue<IkReal> x10371=IKPowWithIntegerCheck((((gconst5*r01*sj3))+((gconst4*r00*sj3))),-1);
if(!x10371.valid){
continue;
}
if( IKabs(((x10369.value)*(x10370.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10371.value)*(((((-1.0)*cj3*gconst4*r01))+((cj3*gconst5*r00)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x10369.value)*(x10370.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x10371.value)*(((((-1.0)*cj3*gconst4*r01))+((cj3*gconst5*r00))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x10369.value)*(x10370.value)*((((cj2*sj1))+((cj1*sj2))))), ((x10371.value)*(((((-1.0)*cj3*gconst4*r01))+((cj3*gconst5*r00))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10372=IKsin(j4);
IkReal x10373=IKcos(j4);
IkReal x10374=(cj2*sj1);
IkReal x10375=(cj1*sj2);
IkReal x10376=(gconst4*r20);
IkReal x10377=(sj1*sj2);
IkReal x10378=(cj1*cj2);
IkReal x10379=(cj3*gconst4);
IkReal x10380=(gconst4*r00);
IkReal x10381=((1.0)*gconst5);
IkReal x10382=(gconst5*r21);
IkReal x10383=(gconst5*r01);
IkReal x10384=(gconst4*sj3);
IkReal x10385=((1.0)*x10372);
IkReal x10386=(sj3*x10373);
IkReal x10387=(cj3*x10373);
IkReal x10388=(x10374+x10375);
evalcond[0]=((-1.0)*r12*x10373);
evalcond[1]=((((-1.0)*r12*sj3*x10385))+x10388);
evalcond[2]=(((cj3*r12*x10372))+x10377+(((-1.0)*x10378)));
evalcond[3]=((((-1.0)*x10376*x10385))+(((-1.0)*r21*x10372*x10381)));
evalcond[4]=((1.0)+(((-1.0)*x10380*x10385))+(((-1.0)*r01*x10372*x10381)));
evalcond[5]=(((r01*x10379))+((x10383*x10386))+(((-1.0)*cj3*r00*x10381))+((x10380*x10386)));
evalcond[6]=((((-1.0)*r00*sj3*x10381))+(((-1.0)*r01*x10381*x10387))+((r01*x10384))+(((-1.0)*r00*x10373*x10379)));
evalcond[7]=(((x10376*x10386))+(((-1.0)*cj3*r20*x10381))+x10378+(((-1.0)*x10377))+((x10382*x10386))+((r21*x10379)));
evalcond[8]=((((-1.0)*r21*x10381*x10387))+((r21*x10384))+(((-1.0)*x10376*x10387))+(((-1.0)*r20*sj3*x10381))+x10388);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10389=((1.0)*gconst4);
IkReal x10390=(gconst5*r01);
CheckValue<IkReal> x10391=IKPowWithIntegerCheck(((((-1.0)*x10390))+(((-1.0)*r00*x10389))),-1);
if(!x10391.valid){
continue;
}
CheckValue<IkReal> x10392=IKPowWithIntegerCheck((((gconst4*r00*sj3))+((sj3*x10390))),-1);
if(!x10392.valid){
continue;
}
if( IKabs(((-1.0)*(x10391.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10392.value)*(((((-1.0)*cj3*r01*x10389))+((cj3*gconst5*r00)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x10391.value)))+IKsqr(((x10392.value)*(((((-1.0)*cj3*r01*x10389))+((cj3*gconst5*r00))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x10391.value)), ((x10392.value)*(((((-1.0)*cj3*r01*x10389))+((cj3*gconst5*r00))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10393=IKsin(j4);
IkReal x10394=IKcos(j4);
IkReal x10395=(cj2*sj1);
IkReal x10396=(cj1*sj2);
IkReal x10397=(gconst4*r20);
IkReal x10398=(sj1*sj2);
IkReal x10399=(cj1*cj2);
IkReal x10400=(cj3*gconst4);
IkReal x10401=(gconst4*r00);
IkReal x10402=((1.0)*gconst5);
IkReal x10403=(gconst5*r21);
IkReal x10404=(gconst5*r01);
IkReal x10405=(gconst4*sj3);
IkReal x10406=((1.0)*x10393);
IkReal x10407=(sj3*x10394);
IkReal x10408=(cj3*x10394);
IkReal x10409=(x10396+x10395);
evalcond[0]=((-1.0)*r12*x10394);
evalcond[1]=((((-1.0)*r12*sj3*x10406))+x10409);
evalcond[2]=(x10398+(((-1.0)*x10399))+((cj3*r12*x10393)));
evalcond[3]=((((-1.0)*r21*x10393*x10402))+(((-1.0)*x10397*x10406)));
evalcond[4]=((1.0)+(((-1.0)*r01*x10393*x10402))+(((-1.0)*x10401*x10406)));
evalcond[5]=(((x10401*x10407))+((r01*x10400))+(((-1.0)*cj3*r00*x10402))+((x10404*x10407)));
evalcond[6]=((((-1.0)*r00*x10394*x10400))+((r01*x10405))+(((-1.0)*r01*x10402*x10408))+(((-1.0)*r00*sj3*x10402)));
evalcond[7]=(((r21*x10400))+x10399+(((-1.0)*x10398))+((x10403*x10407))+((x10397*x10407))+(((-1.0)*cj3*r20*x10402)));
evalcond[8]=(((r21*x10405))+(((-1.0)*r20*sj3*x10402))+(((-1.0)*x10397*x10408))+(((-1.0)*r21*x10402*x10408))+x10409);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10410=gconst5*gconst5;
IkReal x10411=gconst4*gconst4;
IkReal x10412=(r20*sj3);
IkReal x10413=((1.0)*cj3);
IkReal x10414=(gconst5*r00);
IkReal x10415=(cj3*gconst4);
IkReal x10416=(gconst4*gconst5*r01);
IkReal x10417=(r21*x10410);
CheckValue<IkReal> x10418=IKPowWithIntegerCheck(IKsign((((r01*sj3*x10417))+((r00*x10411*x10412))+((gconst4*r21*sj3*x10414))+((x10412*x10416))+((r02*r22*sj3)))),-1);
if(!x10418.valid){
continue;
}
CheckValue<IkReal> x10419 = IKatan2WithCheck(IkReal((((r01*r22*x10415))+(((-1.0)*r22*x10413*x10414)))),IkReal(((((-1.0)*r21*x10413*x10416))+((cj3*r00*x10417))+(((-1.0)*r01*r20*x10411*x10413))+((r20*x10414*x10415)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10419.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10418.value)))+(x10419.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10420=IKsin(j4);
IkReal x10421=IKcos(j4);
IkReal x10422=(cj2*sj1);
IkReal x10423=(cj1*sj2);
IkReal x10424=(gconst4*r20);
IkReal x10425=(cj3*r11);
IkReal x10426=(sj1*sj2);
IkReal x10427=(gconst4*r21);
IkReal x10428=(gconst4*r00);
IkReal x10429=(gconst4*r10);
IkReal x10430=(cj1*cj2);
IkReal x10431=((1.0)*gconst5);
IkReal x10432=(gconst5*r21);
IkReal x10433=(gconst5*r11);
IkReal x10434=(gconst5*r01);
IkReal x10435=(gconst4*r01);
IkReal x10436=((1.0)*x10421);
IkReal x10437=((1.0)*x10420);
IkReal x10438=(cj3*x10420);
IkReal x10439=(sj3*x10421);
IkReal x10440=(x10422+x10423);
evalcond[0]=((((-1.0)*r21*x10420*x10431))+(((-1.0)*r22*x10436))+(((-1.0)*x10424*x10437)));
evalcond[1]=((((-1.0)*r11*x10420*x10431))+(((-1.0)*r12*x10436))+(((-1.0)*x10429*x10437)));
evalcond[2]=((1.0)+(((-1.0)*x10428*x10437))+(((-1.0)*r01*x10420*x10431))+(((-1.0)*r02*x10436)));
evalcond[3]=((((-1.0)*cj3*r00*x10431))+((cj3*x10435))+((x10428*x10439))+(((-1.0)*r02*sj3*x10437))+((x10434*x10439)));
evalcond[4]=(((sj3*x10435))+((r02*x10438))+(((-1.0)*cj3*x10428*x10436))+(((-1.0)*r00*sj3*x10431))+(((-1.0)*cj3*r01*x10421*x10431)));
evalcond[5]=(((gconst4*x10425))+(((-1.0)*r12*sj3*x10437))+((x10433*x10439))+(((-1.0)*cj3*r10*x10431))+((x10429*x10439))+x10440);
evalcond[6]=((((-1.0)*r22*sj3*x10437))+((cj3*x10427))+((x10432*x10439))+x10430+(((-1.0)*x10426))+((x10424*x10439))+(((-1.0)*cj3*r20*x10431)));
evalcond[7]=(((r22*x10438))+((sj3*x10427))+(((-1.0)*r20*sj3*x10431))+x10440+(((-1.0)*cj3*r21*x10421*x10431))+(((-1.0)*cj3*x10424*x10436)));
evalcond[8]=((((-1.0)*cj3*x10429*x10436))+(((-1.0)*r10*sj3*x10431))+(((-1.0)*x10421*x10425*x10431))+((r12*x10438))+(((-1.0)*x10430))+x10426+((gconst4*r11*sj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10441=((1.0)*gconst4);
CheckValue<IkReal> x10442=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10441))+((gconst5*r20)))),-1);
if(!x10442.valid){
continue;
}
CheckValue<IkReal> x10443 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x10441))+(((-1.0)*gconst5*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10443.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10442.value)))+(x10443.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10444=IKsin(j4);
IkReal x10445=IKcos(j4);
IkReal x10446=(cj2*sj1);
IkReal x10447=(cj1*sj2);
IkReal x10448=(gconst4*r20);
IkReal x10449=(cj3*r11);
IkReal x10450=(sj1*sj2);
IkReal x10451=(gconst4*r21);
IkReal x10452=(gconst4*r00);
IkReal x10453=(gconst4*r10);
IkReal x10454=(cj1*cj2);
IkReal x10455=((1.0)*gconst5);
IkReal x10456=(gconst5*r21);
IkReal x10457=(gconst5*r11);
IkReal x10458=(gconst5*r01);
IkReal x10459=(gconst4*r01);
IkReal x10460=((1.0)*x10445);
IkReal x10461=((1.0)*x10444);
IkReal x10462=(cj3*x10444);
IkReal x10463=(sj3*x10445);
IkReal x10464=(x10446+x10447);
evalcond[0]=((((-1.0)*x10448*x10461))+(((-1.0)*r22*x10460))+(((-1.0)*r21*x10444*x10455)));
evalcond[1]=((((-1.0)*x10453*x10461))+(((-1.0)*r11*x10444*x10455))+(((-1.0)*r12*x10460)));
evalcond[2]=((1.0)+(((-1.0)*r02*x10460))+(((-1.0)*x10452*x10461))+(((-1.0)*r01*x10444*x10455)));
evalcond[3]=((((-1.0)*cj3*r00*x10455))+((cj3*x10459))+((x10452*x10463))+(((-1.0)*r02*sj3*x10461))+((x10458*x10463)));
evalcond[4]=((((-1.0)*cj3*x10452*x10460))+(((-1.0)*r00*sj3*x10455))+((sj3*x10459))+((r02*x10462))+(((-1.0)*cj3*r01*x10445*x10455)));
evalcond[5]=(((x10453*x10463))+((gconst4*x10449))+((x10457*x10463))+x10464+(((-1.0)*cj3*r10*x10455))+(((-1.0)*r12*sj3*x10461)));
evalcond[6]=(((cj3*x10451))+(((-1.0)*x10450))+(((-1.0)*r22*sj3*x10461))+(((-1.0)*cj3*r20*x10455))+((x10448*x10463))+((x10456*x10463))+x10454);
evalcond[7]=((((-1.0)*r20*sj3*x10455))+(((-1.0)*cj3*x10448*x10460))+(((-1.0)*cj3*r21*x10445*x10455))+((r22*x10462))+((sj3*x10451))+x10464);
evalcond[8]=((((-1.0)*x10445*x10449*x10455))+(((-1.0)*x10454))+(((-1.0)*cj3*x10453*x10460))+((r12*x10462))+x10450+((gconst4*r11*sj3))+(((-1.0)*r10*sj3*x10455)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10465=((1.0)*gconst5);
CheckValue<IkReal> x10466 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x10465))+(((-1.0)*gconst4*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10466.valid){
continue;
}
CheckValue<IkReal> x10467=IKPowWithIntegerCheck(IKsign((((gconst4*r11))+(((-1.0)*r10*x10465)))),-1);
if(!x10467.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10466.value)+(((1.5707963267949)*(x10467.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10468=IKsin(j4);
IkReal x10469=IKcos(j4);
IkReal x10470=(cj2*sj1);
IkReal x10471=(cj1*sj2);
IkReal x10472=(gconst4*r20);
IkReal x10473=(cj3*r11);
IkReal x10474=(sj1*sj2);
IkReal x10475=(gconst4*r21);
IkReal x10476=(gconst4*r00);
IkReal x10477=(gconst4*r10);
IkReal x10478=(cj1*cj2);
IkReal x10479=((1.0)*gconst5);
IkReal x10480=(gconst5*r21);
IkReal x10481=(gconst5*r11);
IkReal x10482=(gconst5*r01);
IkReal x10483=(gconst4*r01);
IkReal x10484=((1.0)*x10469);
IkReal x10485=((1.0)*x10468);
IkReal x10486=(cj3*x10468);
IkReal x10487=(sj3*x10469);
IkReal x10488=(x10471+x10470);
evalcond[0]=((((-1.0)*r22*x10484))+(((-1.0)*x10472*x10485))+(((-1.0)*r21*x10468*x10479)));
evalcond[1]=((((-1.0)*r11*x10468*x10479))+(((-1.0)*x10477*x10485))+(((-1.0)*r12*x10484)));
evalcond[2]=((1.0)+(((-1.0)*x10476*x10485))+(((-1.0)*r01*x10468*x10479))+(((-1.0)*r02*x10484)));
evalcond[3]=(((x10482*x10487))+((cj3*x10483))+((x10476*x10487))+(((-1.0)*cj3*r00*x10479))+(((-1.0)*r02*sj3*x10485)));
evalcond[4]=(((sj3*x10483))+(((-1.0)*r00*sj3*x10479))+((r02*x10486))+(((-1.0)*cj3*x10476*x10484))+(((-1.0)*cj3*r01*x10469*x10479)));
evalcond[5]=(((x10477*x10487))+((gconst4*x10473))+(((-1.0)*r12*sj3*x10485))+x10488+(((-1.0)*cj3*r10*x10479))+((x10481*x10487)));
evalcond[6]=((((-1.0)*x10474))+((cj3*x10475))+((x10472*x10487))+(((-1.0)*r22*sj3*x10485))+((x10480*x10487))+(((-1.0)*cj3*r20*x10479))+x10478);
evalcond[7]=((((-1.0)*cj3*r21*x10469*x10479))+((r22*x10486))+(((-1.0)*r20*sj3*x10479))+x10488+(((-1.0)*cj3*x10472*x10484))+((sj3*x10475)));
evalcond[8]=((((-1.0)*x10478))+((r12*x10486))+(((-1.0)*x10469*x10473*x10479))+x10474+(((-1.0)*cj3*x10477*x10484))+(((-1.0)*r10*sj3*x10479))+((gconst4*r11*sj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x10492 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x10492.valid){
continue;
}
IkReal x10489=((1.0)*(x10492.value));
IkReal x10490=x9733;
IkReal x10491=((1.0)*x10490);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10489)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10489)));
IkReal gconst4=(r20*x10491);
IkReal gconst5=(r21*x10491);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x10496 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x10496.valid){
continue;
}
IkReal x10493=((1.0)*(x10496.value));
IkReal x10494=x9733;
IkReal x10495=((1.0)*x10494);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10493)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10493)));
IkReal gconst4=(r20*x10495);
IkReal gconst5=(r21*x10495);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x10500 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x10500.valid){
continue;
}
IkReal x10497=((1.0)*(x10500.value));
IkReal x10498=x9733;
IkReal x10499=((1.0)*x10498);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10497)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10497)));
IkReal gconst4=(r20*x10499);
IkReal gconst5=(r21*x10499);
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x10504 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x10504.valid){
continue;
}
IkReal x10501=((1.0)*(x10504.value));
IkReal x10502=x9733;
IkReal x10503=((1.0)*x10502);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10501)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10501)));
IkReal gconst4=(r20*x10503);
IkReal gconst5=(r21*x10503);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x10508 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x10508.valid){
continue;
}
IkReal x10505=((1.0)*(x10508.value));
IkReal x10506=x9733;
IkReal x10507=((1.0)*x10506);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10505)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10505)));
IkReal gconst4=(r20*x10507);
IkReal gconst5=(r21*x10507);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x10512 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x10512.valid){
continue;
}
IkReal x10509=((1.0)*(x10512.value));
IkReal x10510=x9733;
IkReal x10511=((1.0)*x10510);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10509)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10509)));
IkReal gconst4=(r20*x10511);
IkReal gconst5=(r21*x10511);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10513=(gconst5*r11);
IkReal x10514=(gconst4*r10);
CheckValue<IkReal> x10515=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x10513*x10513)+(x10514*x10514)+(((2.0)*x10513*x10514)))),-1);
if(!x10515.valid){
continue;
}
CheckValue<IkReal> x10516 = IKatan2WithCheck(IkReal(((((-1.0)*x10513))+(((-1.0)*x10514)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10516.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10515.value)))+(x10516.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10517=IKcos(j4);
IkReal x10518=IKsin(j4);
IkReal x10519=((1.0)*x10517);
IkReal x10520=((1.0)*gconst4*x10518);
IkReal x10521=((1.0)*gconst5*x10518);
evalcond[0]=(((r12*x10518))+(((-1.0)*gconst5*r11*x10519))+(((-1.0)*gconst4*r10*x10519)));
evalcond[1]=((((-1.0)*r20*x10520))+(((-1.0)*r22*x10519))+(((-1.0)*r21*x10521)));
evalcond[2]=((((-1.0)*r02*x10519))+(((-1.0)*r00*x10520))+(((-1.0)*r01*x10521)));
evalcond[3]=((-1.0)+(((-1.0)*r10*x10520))+(((-1.0)*r11*x10521))+(((-1.0)*r12*x10519)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst5*r21*x10519))+((cj1*sj2))+(((-1.0)*gconst4*r20*x10519))+((r22*x10518)));
evalcond[5]=((((-1.0)*gconst5*r01*x10519))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x10518))+(((-1.0)*gconst4*r00*x10519)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10522=((1.0)*gconst4);
CheckValue<IkReal> x10523=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10522))+((gconst5*r20)))),-1);
if(!x10523.valid){
continue;
}
CheckValue<IkReal> x10524 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x10522))+(((-1.0)*gconst5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10524.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10523.value)))+(x10524.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10525=IKcos(j4);
IkReal x10526=IKsin(j4);
IkReal x10527=((1.0)*x10525);
IkReal x10528=((1.0)*gconst4*x10526);
IkReal x10529=((1.0)*gconst5*x10526);
evalcond[0]=((((-1.0)*gconst4*r10*x10527))+(((-1.0)*gconst5*r11*x10527))+((r12*x10526)));
evalcond[1]=((((-1.0)*r22*x10527))+(((-1.0)*r20*x10528))+(((-1.0)*r21*x10529)));
evalcond[2]=((((-1.0)*r02*x10527))+(((-1.0)*r00*x10528))+(((-1.0)*r01*x10529)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10527))+(((-1.0)*r10*x10528))+(((-1.0)*r11*x10529)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst4*r20*x10527))+((r22*x10526))+((cj1*sj2))+(((-1.0)*gconst5*r21*x10527)));
evalcond[5]=(((r02*x10526))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst4*r00*x10527))+(((-1.0)*gconst5*r01*x10527)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10530=((1.0)*gconst5);
CheckValue<IkReal> x10531 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x10530))+(((-1.0)*gconst4*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10531.valid){
continue;
}
CheckValue<IkReal> x10532=IKPowWithIntegerCheck(IKsign((((gconst4*r01))+(((-1.0)*r00*x10530)))),-1);
if(!x10532.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10531.value)+(((1.5707963267949)*(x10532.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10533=IKcos(j4);
IkReal x10534=IKsin(j4);
IkReal x10535=((1.0)*x10533);
IkReal x10536=((1.0)*gconst4*x10534);
IkReal x10537=((1.0)*gconst5*x10534);
evalcond[0]=((((-1.0)*gconst4*r10*x10535))+((r12*x10534))+(((-1.0)*gconst5*r11*x10535)));
evalcond[1]=((((-1.0)*r22*x10535))+(((-1.0)*r21*x10537))+(((-1.0)*r20*x10536)));
evalcond[2]=((((-1.0)*r02*x10535))+(((-1.0)*r01*x10537))+(((-1.0)*r00*x10536)));
evalcond[3]=((-1.0)+(((-1.0)*r10*x10536))+(((-1.0)*r11*x10537))+(((-1.0)*r12*x10535)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst4*r20*x10535))+((r22*x10534))+((cj1*sj2))+(((-1.0)*gconst5*r21*x10535)));
evalcond[5]=(((r02*x10534))+(((-1.0)*gconst4*r00*x10535))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst5*r01*x10535)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x10541 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x10541.valid){
continue;
}
IkReal x10538=((1.0)*(x10541.value));
IkReal x10539=x9733;
IkReal x10540=((1.0)*x10539);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10538)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10538)));
IkReal gconst4=(r20*x10540);
IkReal gconst5=(r21*x10540);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x10545 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x10545.valid){
continue;
}
IkReal x10542=((1.0)*(x10545.value));
IkReal x10543=x9733;
IkReal x10544=((1.0)*x10543);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10542)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10542)));
IkReal gconst4=(r20*x10544);
IkReal gconst5=(r21*x10544);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x10549 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x10549.valid){
continue;
}
IkReal x10546=((1.0)*(x10549.value));
IkReal x10547=x9733;
IkReal x10548=((1.0)*x10547);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10546)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10546)));
IkReal gconst4=(r20*x10548);
IkReal gconst5=(r21*x10548);
IkReal x10550=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10554=IKPowWithIntegerCheck(x10550,-1);
if(!x10554.valid){
continue;
}
IkReal x10551=x10554.value;
IkReal x10552=((1.0)*x10551);
IkReal x10553=((((-2.0)*r10*r11*r20*r21*x10551))+(((-1.0)*(r12*r12)))+(((-1.0)*x10552*(r11*r11)*(r21*r21)))+(((-1.0)*x10552*(r10*r10)*(r20*r20))));
j4eval[0]=x10553;
j4eval[1]=IKsign(x10553);
j4eval[2]=r12;
j4eval[3]=x10550;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10555=(gconst5*r11);
IkReal x10556=(gconst4*r10);
CheckValue<IkReal> x10557 = IKatan2WithCheck(IkReal((x10555+x10556)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10557.valid){
continue;
}
CheckValue<IkReal> x10558=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10556*x10556)))+(((-1.0)*(x10555*x10555)))+(((-2.0)*x10555*x10556))+(((-1.0)*(r12*r12))))),-1);
if(!x10558.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10557.value)+(((1.5707963267949)*(x10558.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10559=IKcos(j4);
IkReal x10560=IKsin(j4);
IkReal x10561=((1.0)*x10559);
IkReal x10562=(gconst4*x10559);
IkReal x10563=(gconst5*x10559);
IkReal x10564=((1.0)*x10560);
IkReal x10565=(gconst4*x10564);
IkReal x10566=(gconst5*x10564);
evalcond[0]=(((r10*x10562))+(((-1.0)*r12*x10564))+((r11*x10563)));
evalcond[1]=((((-1.0)*r22*x10561))+(((-1.0)*r20*x10565))+(((-1.0)*r21*x10566)));
evalcond[2]=((((-1.0)*r00*x10565))+(((-1.0)*r01*x10566))+(((-1.0)*r02*x10561)));
evalcond[3]=((-1.0)+(((-1.0)*r10*x10565))+(((-1.0)*r12*x10561))+(((-1.0)*r11*x10566)));
evalcond[4]=(((cj2*sj1))+((r20*x10562))+(((-1.0)*r22*x10564))+((cj1*sj2))+((r21*x10563)));
evalcond[5]=(((r00*x10562))+((r01*x10563))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x10564)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10567=((1.0)*gconst4);
CheckValue<IkReal> x10568 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x10567))+(((-1.0)*gconst5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10568.valid){
continue;
}
CheckValue<IkReal> x10569=IKPowWithIntegerCheck(IKsign((((gconst5*r20))+(((-1.0)*r21*x10567)))),-1);
if(!x10569.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10568.value)+(((1.5707963267949)*(x10569.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10570=IKcos(j4);
IkReal x10571=IKsin(j4);
IkReal x10572=((1.0)*x10570);
IkReal x10573=(gconst4*x10570);
IkReal x10574=(gconst5*x10570);
IkReal x10575=((1.0)*x10571);
IkReal x10576=(gconst4*x10575);
IkReal x10577=(gconst5*x10575);
evalcond[0]=(((r10*x10573))+(((-1.0)*r12*x10575))+((r11*x10574)));
evalcond[1]=((((-1.0)*r22*x10572))+(((-1.0)*r20*x10576))+(((-1.0)*r21*x10577)));
evalcond[2]=((((-1.0)*r00*x10576))+(((-1.0)*r01*x10577))+(((-1.0)*r02*x10572)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10572))+(((-1.0)*r11*x10577))+(((-1.0)*r10*x10576)));
evalcond[4]=(((cj2*sj1))+((r20*x10573))+(((-1.0)*r22*x10575))+((cj1*sj2))+((r21*x10574)));
evalcond[5]=(((r00*x10573))+((r01*x10574))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x10575)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10578=((1.0)*gconst5);
CheckValue<IkReal> x10579 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst4*r20))+(((-1.0)*r21*x10578)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10579.valid){
continue;
}
CheckValue<IkReal> x10580=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x10578))+((gconst4*r01)))),-1);
if(!x10580.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10579.value)+(((1.5707963267949)*(x10580.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10581=IKcos(j4);
IkReal x10582=IKsin(j4);
IkReal x10583=((1.0)*x10581);
IkReal x10584=(gconst4*x10581);
IkReal x10585=(gconst5*x10581);
IkReal x10586=((1.0)*x10582);
IkReal x10587=(gconst4*x10586);
IkReal x10588=(gconst5*x10586);
evalcond[0]=(((r10*x10584))+((r11*x10585))+(((-1.0)*r12*x10586)));
evalcond[1]=((((-1.0)*r22*x10583))+(((-1.0)*r21*x10588))+(((-1.0)*r20*x10587)));
evalcond[2]=((((-1.0)*r01*x10588))+(((-1.0)*r00*x10587))+(((-1.0)*r02*x10583)));
evalcond[3]=((-1.0)+(((-1.0)*r11*x10588))+(((-1.0)*r12*x10583))+(((-1.0)*r10*x10587)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x10586))+((cj1*sj2))+((r21*x10585))+((r20*x10584)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x10586))+((r01*x10585))+((r00*x10584)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x10592 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x10592.valid){
continue;
}
IkReal x10589=((1.0)*(x10592.value));
IkReal x10590=x9733;
IkReal x10591=((1.0)*x10590);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10589)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10589)));
IkReal gconst4=(r20*x10591);
IkReal gconst5=(r21*x10591);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x10596 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x10596.valid){
continue;
}
IkReal x10593=((1.0)*(x10596.value));
IkReal x10594=x9733;
IkReal x10595=((1.0)*x10594);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10593)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10593)));
IkReal gconst4=(r20*x10595);
IkReal gconst5=(r21*x10595);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x10600 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x10600.valid){
continue;
}
IkReal x10597=((1.0)*(x10600.value));
IkReal x10598=x9733;
IkReal x10599=((1.0)*x10598);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10597)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10597)));
IkReal gconst4=(r20*x10599);
IkReal gconst5=(r21*x10599);
IkReal x10601=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10605=IKPowWithIntegerCheck(x10601,-1);
if(!x10605.valid){
continue;
}
IkReal x10602=x10605.value;
IkReal x10603=((1.0)*x10602);
IkReal x10604=((((-2.0)*r10*r11*r20*r21*x10602))+(((-1.0)*(r12*r12)))+(((-1.0)*x10603*(r10*r10)*(r20*r20)))+(((-1.0)*x10603*(r11*r11)*(r21*r21))));
j4eval[0]=x10604;
j4eval[1]=IKsign(x10604);
j4eval[2]=r12;
j4eval[3]=x10601;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10606=(gconst5*r11);
IkReal x10607=(gconst4*r10);
CheckValue<IkReal> x10608=IKPowWithIntegerCheck(IKsign(((((-2.0)*x10606*x10607))+(((-1.0)*(r12*r12)))+(((-1.0)*(x10606*x10606)))+(((-1.0)*(x10607*x10607))))),-1);
if(!x10608.valid){
continue;
}
CheckValue<IkReal> x10609 = IKatan2WithCheck(IkReal((x10606+x10607)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10609.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10608.value)))+(x10609.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10610=IKcos(j4);
IkReal x10611=IKsin(j4);
IkReal x10612=(gconst5*r21);
IkReal x10613=(gconst5*r11);
IkReal x10614=(gconst5*r01);
IkReal x10615=((1.0)*x10610);
IkReal x10616=(gconst4*x10610);
IkReal x10617=((1.0)*x10611);
IkReal x10618=(gconst4*x10617);
evalcond[0]=(((r10*x10616))+(((-1.0)*r12*x10617))+((x10610*x10613)));
evalcond[1]=((((-1.0)*r20*x10618))+(((-1.0)*r22*x10615))+(((-1.0)*x10612*x10617)));
evalcond[2]=((((-1.0)*x10614*x10617))+(((-1.0)*r02*x10615))+(((-1.0)*r00*x10618)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10615))+(((-1.0)*r10*x10618))+(((-1.0)*x10613*x10617)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r02*x10617))+((r00*x10616))+((x10610*x10614)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r20*x10616))+(((-1.0)*r22*x10617))+((cj1*cj2))+((x10610*x10612)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10619=((1.0)*gconst4);
CheckValue<IkReal> x10620=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10619))+((gconst5*r20)))),-1);
if(!x10620.valid){
continue;
}
CheckValue<IkReal> x10621 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*gconst5*r01))+(((-1.0)*r00*x10619)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10621.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10620.value)))+(x10621.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10622=IKcos(j4);
IkReal x10623=IKsin(j4);
IkReal x10624=(gconst5*r21);
IkReal x10625=(gconst5*r11);
IkReal x10626=(gconst5*r01);
IkReal x10627=((1.0)*x10622);
IkReal x10628=(gconst4*x10622);
IkReal x10629=((1.0)*x10623);
IkReal x10630=(gconst4*x10629);
evalcond[0]=(((x10622*x10625))+(((-1.0)*r12*x10629))+((r10*x10628)));
evalcond[1]=((((-1.0)*x10624*x10629))+(((-1.0)*r22*x10627))+(((-1.0)*r20*x10630)));
evalcond[2]=((((-1.0)*r00*x10630))+(((-1.0)*r02*x10627))+(((-1.0)*x10626*x10629)));
evalcond[3]=((-1.0)+(((-1.0)*x10625*x10629))+(((-1.0)*r12*x10627))+(((-1.0)*r10*x10630)));
evalcond[4]=(((x10622*x10626))+((cj2*sj1))+(((-1.0)*r02*x10629))+((r00*x10628))+((cj1*sj2)));
evalcond[5]=(((x10622*x10624))+((r20*x10628))+(((-1.0)*sj1*sj2))+(((-1.0)*r22*x10629))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10631=((1.0)*gconst5);
CheckValue<IkReal> x10632 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x10631))+(((-1.0)*gconst4*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10632.valid){
continue;
}
CheckValue<IkReal> x10633=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x10631))+((gconst4*r01)))),-1);
if(!x10633.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10632.value)+(((1.5707963267949)*(x10633.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10634=IKcos(j4);
IkReal x10635=IKsin(j4);
IkReal x10636=(gconst5*r21);
IkReal x10637=(gconst5*r11);
IkReal x10638=(gconst5*r01);
IkReal x10639=((1.0)*x10634);
IkReal x10640=(gconst4*x10634);
IkReal x10641=((1.0)*x10635);
IkReal x10642=(gconst4*x10641);
evalcond[0]=((((-1.0)*r12*x10641))+((x10634*x10637))+((r10*x10640)));
evalcond[1]=((((-1.0)*x10636*x10641))+(((-1.0)*r22*x10639))+(((-1.0)*r20*x10642)));
evalcond[2]=((((-1.0)*r02*x10639))+(((-1.0)*x10638*x10641))+(((-1.0)*r00*x10642)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10639))+(((-1.0)*r10*x10642))+(((-1.0)*x10637*x10641)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r02*x10641))+((cj1*sj2))+((r00*x10640))+((x10634*x10638)));
evalcond[5]=(((r20*x10640))+(((-1.0)*sj1*sj2))+(((-1.0)*r22*x10641))+((x10634*x10636))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x10646 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x10646.valid){
continue;
}
IkReal x10643=((1.0)*(x10646.value));
IkReal x10644=x9733;
IkReal x10645=((1.0)*x10644);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10643)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10643)));
IkReal gconst4=(r20*x10645);
IkReal gconst5=(r21*x10645);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x10650 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x10650.valid){
continue;
}
IkReal x10647=((1.0)*(x10650.value));
IkReal x10648=x9733;
IkReal x10649=((1.0)*x10648);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10647)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10647)));
IkReal gconst4=(r20*x10649);
IkReal gconst5=(r21*x10649);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x10654 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x10654.valid){
continue;
}
IkReal x10651=((1.0)*(x10654.value));
IkReal x10652=x9733;
IkReal x10653=((1.0)*x10652);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10651)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10651)));
IkReal gconst4=(r20*x10653);
IkReal gconst5=(r21*x10653);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10655=(gconst5*r11);
IkReal x10656=(gconst4*r10);
CheckValue<IkReal> x10657 = IKatan2WithCheck(IkReal(((((-1.0)*x10655))+(((-1.0)*x10656)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10657.valid){
continue;
}
CheckValue<IkReal> x10658=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x10655*x10655)+(x10656*x10656)+(((2.0)*x10655*x10656)))),-1);
if(!x10658.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10657.value)+(((1.5707963267949)*(x10658.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10659=IKcos(j4);
IkReal x10660=IKsin(j4);
IkReal x10661=(gconst5*r21);
IkReal x10662=(gconst5*r01);
IkReal x10663=(gconst5*r11);
IkReal x10664=((1.0)*x10659);
IkReal x10665=((1.0)*x10660);
IkReal x10666=(gconst4*x10665);
evalcond[0]=(((r12*x10660))+(((-1.0)*gconst4*r10*x10664))+(((-1.0)*x10663*x10664)));
evalcond[1]=((((-1.0)*r20*x10666))+(((-1.0)*x10661*x10665))+(((-1.0)*r22*x10664)));
evalcond[2]=((((-1.0)*r02*x10664))+(((-1.0)*r00*x10666))+(((-1.0)*x10662*x10665)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10664))+(((-1.0)*r10*x10666))+(((-1.0)*x10663*x10665)));
evalcond[4]=(((cj2*sj1))+((r02*x10660))+((cj1*sj2))+(((-1.0)*gconst4*r00*x10664))+(((-1.0)*x10662*x10664)));
evalcond[5]=(((r22*x10660))+(((-1.0)*gconst4*r20*x10664))+(((-1.0)*sj1*sj2))+(((-1.0)*x10661*x10664))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10667=((1.0)*gconst4);
CheckValue<IkReal> x10668 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x10667))+(((-1.0)*gconst5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10668.valid){
continue;
}
CheckValue<IkReal> x10669=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10667))+((gconst5*r20)))),-1);
if(!x10669.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10668.value)+(((1.5707963267949)*(x10669.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10670=IKcos(j4);
IkReal x10671=IKsin(j4);
IkReal x10672=(gconst5*r21);
IkReal x10673=(gconst5*r01);
IkReal x10674=(gconst5*r11);
IkReal x10675=((1.0)*x10670);
IkReal x10676=((1.0)*x10671);
IkReal x10677=(gconst4*x10676);
evalcond[0]=((((-1.0)*x10674*x10675))+(((-1.0)*gconst4*r10*x10675))+((r12*x10671)));
evalcond[1]=((((-1.0)*x10672*x10676))+(((-1.0)*r20*x10677))+(((-1.0)*r22*x10675)));
evalcond[2]=((((-1.0)*r02*x10675))+(((-1.0)*x10673*x10676))+(((-1.0)*r00*x10677)));
evalcond[3]=((-1.0)+(((-1.0)*x10674*x10676))+(((-1.0)*r10*x10677))+(((-1.0)*r12*x10675)));
evalcond[4]=(((cj2*sj1))+((r02*x10671))+((cj1*sj2))+(((-1.0)*x10673*x10675))+(((-1.0)*gconst4*r00*x10675)));
evalcond[5]=((((-1.0)*x10672*x10675))+((r22*x10671))+(((-1.0)*sj1*sj2))+(((-1.0)*gconst4*r20*x10675))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10678=((1.0)*gconst5);
CheckValue<IkReal> x10679 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x10678))+(((-1.0)*gconst4*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10679.valid){
continue;
}
CheckValue<IkReal> x10680=IKPowWithIntegerCheck(IKsign((((gconst4*r01))+(((-1.0)*r00*x10678)))),-1);
if(!x10680.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10679.value)+(((1.5707963267949)*(x10680.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10681=IKcos(j4);
IkReal x10682=IKsin(j4);
IkReal x10683=(gconst5*r21);
IkReal x10684=(gconst5*r01);
IkReal x10685=(gconst5*r11);
IkReal x10686=((1.0)*x10681);
IkReal x10687=((1.0)*x10682);
IkReal x10688=(gconst4*x10687);
evalcond[0]=((((-1.0)*x10685*x10686))+((r12*x10682))+(((-1.0)*gconst4*r10*x10686)));
evalcond[1]=((((-1.0)*x10683*x10687))+(((-1.0)*r22*x10686))+(((-1.0)*r20*x10688)));
evalcond[2]=((((-1.0)*r02*x10686))+(((-1.0)*x10684*x10687))+(((-1.0)*r00*x10688)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10686))+(((-1.0)*r10*x10688))+(((-1.0)*x10685*x10687)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x10684*x10686))+((cj1*sj2))+(((-1.0)*gconst4*r00*x10686))+((r02*x10682)));
evalcond[5]=((((-1.0)*x10683*x10686))+(((-1.0)*sj1*sj2))+(((-1.0)*gconst4*r20*x10686))+((r22*x10682))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x10689=((-1.0)*px);
CheckValue<IkReal> x10691 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x10691.valid){
continue;
}
IkReal x10690=((1.0)*(x10691.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10690)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10689);
rxp1_1=(px*r21);
rxp1_2=(r11*x10689);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10690)));
IkReal gconst4=((1.0)*r20);
IkReal gconst5=((1.0)*r21);
IkReal x10692=((1.0)*r11*r21);
IkReal x10693=((1.0)*r10*r20);
j4eval[0]=((((-1.0)*x10692))+(((-1.0)*x10693)));
j4eval[1]=(((sj3*x10692))+((sj3*x10693)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10694=((-1.0)*px);
CheckValue<IkReal> x10696 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x10696.valid){
continue;
}
IkReal x10695=((1.0)*(x10696.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10695)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10694);
rxp1_1=(px*r21);
rxp1_2=(r11*x10694);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10695)));
IkReal gconst4=((1.0)*r20);
IkReal gconst5=((1.0)*r21);
IkReal x10697=((1.0)*sj3);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=(((r11*r21*x10697))+((r10*r20*x10697)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10698=((-1.0)*px);
CheckValue<IkReal> x10700 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x10700.valid){
continue;
}
IkReal x10699=((1.0)*(x10700.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10699)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10698);
rxp1_1=(px*r21);
rxp1_2=(r11*x10698);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10699)));
IkReal gconst4=((1.0)*r20);
IkReal gconst5=((1.0)*r21);
IkReal x10701=((1.0)*sj3);
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=(((r10*r20*x10701))+((r11*r21*x10701)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10702=IKPowWithIntegerCheck(cj3,-1);
if(!x10702.valid){
continue;
}
CheckValue<IkReal> x10703=IKPowWithIntegerCheck(r02,-1);
if(!x10703.valid){
continue;
}
CheckValue<IkReal> x10704=IKPowWithIntegerCheck((((gconst4*r10*sj3))+((gconst5*r11*sj3))),-1);
if(!x10704.valid){
continue;
}
if( IKabs(((x10702.value)*(x10703.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10704.value)*(((((-1.0)*cj3*gconst4*r11))+((cj3*gconst5*r10)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x10702.value)*(x10703.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))+IKsqr(((x10704.value)*(((((-1.0)*cj3*gconst4*r11))+((cj3*gconst5*r10))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x10702.value)*(x10703.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))), ((x10704.value)*(((((-1.0)*cj3*gconst4*r11))+((cj3*gconst5*r10))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10705=IKsin(j4);
IkReal x10706=IKcos(j4);
IkReal x10707=(cj2*sj1);
IkReal x10708=(cj1*sj2);
IkReal x10709=((1.0)*r20);
IkReal x10710=(gconst5*sj3);
IkReal x10711=(cj3*r11);
IkReal x10712=((1.0)*gconst5);
IkReal x10713=(sj1*sj2);
IkReal x10714=(cj1*cj2);
IkReal x10715=(cj3*gconst4);
IkReal x10716=((1.0)*r10);
IkReal x10717=(gconst4*sj3);
IkReal x10718=(gconst4*x10705);
IkReal x10719=(r02*x10705);
IkReal x10720=(r21*x10706);
IkReal x10721=(x10708+x10707);
evalcond[0]=((-1.0)*r02*x10706);
evalcond[1]=((((-1.0)*sj3*x10719))+x10721);
evalcond[2]=((((-1.0)*x10714))+((cj3*x10719))+x10713);
evalcond[3]=((((-1.0)*x10709*x10718))+(((-1.0)*r21*x10705*x10712)));
evalcond[4]=((-1.0)+(((-1.0)*r11*x10705*x10712))+(((-1.0)*x10716*x10718)));
evalcond[5]=(((r10*x10706*x10717))+((r11*x10706*x10710))+((gconst4*x10711))+(((-1.0)*cj3*r10*x10712)));
evalcond[6]=((((-1.0)*x10710*x10716))+((r11*x10717))+(((-1.0)*x10706*x10715*x10716))+(((-1.0)*x10706*x10711*x10712)));
evalcond[7]=(((r20*x10706*x10717))+(((-1.0)*x10713))+(((-1.0)*cj3*gconst5*x10709))+((r21*x10715))+((x10710*x10720))+x10714);
evalcond[8]=((((-1.0)*x10706*x10709*x10715))+(((-1.0)*x10709*x10710))+((r21*x10717))+x10721+(((-1.0)*cj3*x10712*x10720)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10722=IKPowWithIntegerCheck(r02,-1);
if(!x10722.valid){
continue;
}
CheckValue<IkReal> x10723=IKPowWithIntegerCheck(sj3,-1);
if(!x10723.valid){
continue;
}
CheckValue<IkReal> x10724=IKPowWithIntegerCheck((((gconst4*r10*sj3))+((gconst5*r11*sj3))),-1);
if(!x10724.valid){
continue;
}
if( IKabs(((x10722.value)*(x10723.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10724.value)*(((((-1.0)*cj3*gconst4*r11))+((cj3*gconst5*r10)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x10722.value)*(x10723.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x10724.value)*(((((-1.0)*cj3*gconst4*r11))+((cj3*gconst5*r10))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x10722.value)*(x10723.value)*((((cj2*sj1))+((cj1*sj2))))), ((x10724.value)*(((((-1.0)*cj3*gconst4*r11))+((cj3*gconst5*r10))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10725=IKsin(j4);
IkReal x10726=IKcos(j4);
IkReal x10727=(cj2*sj1);
IkReal x10728=(cj1*sj2);
IkReal x10729=((1.0)*r20);
IkReal x10730=(gconst5*sj3);
IkReal x10731=(cj3*r11);
IkReal x10732=((1.0)*gconst5);
IkReal x10733=(sj1*sj2);
IkReal x10734=(cj1*cj2);
IkReal x10735=(cj3*gconst4);
IkReal x10736=((1.0)*r10);
IkReal x10737=(gconst4*sj3);
IkReal x10738=(gconst4*x10725);
IkReal x10739=(r02*x10725);
IkReal x10740=(r21*x10726);
IkReal x10741=(x10728+x10727);
evalcond[0]=((-1.0)*r02*x10726);
evalcond[1]=((((-1.0)*sj3*x10739))+x10741);
evalcond[2]=((((-1.0)*x10734))+x10733+((cj3*x10739)));
evalcond[3]=((((-1.0)*r21*x10725*x10732))+(((-1.0)*x10729*x10738)));
evalcond[4]=((-1.0)+(((-1.0)*x10736*x10738))+(((-1.0)*r11*x10725*x10732)));
evalcond[5]=((((-1.0)*cj3*r10*x10732))+((r10*x10726*x10737))+((r11*x10726*x10730))+((gconst4*x10731)));
evalcond[6]=((((-1.0)*x10726*x10735*x10736))+(((-1.0)*x10730*x10736))+(((-1.0)*x10726*x10731*x10732))+((r11*x10737)));
evalcond[7]=(((r20*x10726*x10737))+((x10730*x10740))+((r21*x10735))+(((-1.0)*x10733))+(((-1.0)*cj3*gconst5*x10729))+x10734);
evalcond[8]=(((r21*x10737))+(((-1.0)*cj3*x10732*x10740))+(((-1.0)*x10729*x10730))+(((-1.0)*x10726*x10729*x10735))+x10741);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10742=(gconst4*r10);
IkReal x10743=(gconst5*r11);
CheckValue<IkReal> x10744=IKPowWithIntegerCheck(((((-1.0)*x10742))+(((-1.0)*x10743))),-1);
if(!x10744.valid){
continue;
}
CheckValue<IkReal> x10745=IKPowWithIntegerCheck((((sj3*x10743))+((sj3*x10742))),-1);
if(!x10745.valid){
continue;
}
if( IKabs(x10744.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10745.value)*(((((-1.0)*cj3*gconst4*r11))+((cj3*gconst5*r10)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x10744.value)+IKsqr(((x10745.value)*(((((-1.0)*cj3*gconst4*r11))+((cj3*gconst5*r10))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x10744.value, ((x10745.value)*(((((-1.0)*cj3*gconst4*r11))+((cj3*gconst5*r10))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10746=IKsin(j4);
IkReal x10747=IKcos(j4);
IkReal x10748=(cj2*sj1);
IkReal x10749=(cj1*sj2);
IkReal x10750=((1.0)*r20);
IkReal x10751=(gconst5*sj3);
IkReal x10752=(cj3*r11);
IkReal x10753=((1.0)*gconst5);
IkReal x10754=(sj1*sj2);
IkReal x10755=(cj1*cj2);
IkReal x10756=(cj3*gconst4);
IkReal x10757=((1.0)*r10);
IkReal x10758=(gconst4*sj3);
IkReal x10759=(gconst4*x10746);
IkReal x10760=(r02*x10746);
IkReal x10761=(r21*x10747);
IkReal x10762=(x10749+x10748);
evalcond[0]=((-1.0)*r02*x10747);
evalcond[1]=((((-1.0)*sj3*x10760))+x10762);
evalcond[2]=(((cj3*x10760))+x10754+(((-1.0)*x10755)));
evalcond[3]=((((-1.0)*x10750*x10759))+(((-1.0)*r21*x10746*x10753)));
evalcond[4]=((-1.0)+(((-1.0)*r11*x10746*x10753))+(((-1.0)*x10757*x10759)));
evalcond[5]=(((r11*x10747*x10751))+((gconst4*x10752))+((r10*x10747*x10758))+(((-1.0)*cj3*r10*x10753)));
evalcond[6]=((((-1.0)*x10747*x10752*x10753))+(((-1.0)*x10751*x10757))+((r11*x10758))+(((-1.0)*x10747*x10756*x10757)));
evalcond[7]=((((-1.0)*cj3*gconst5*x10750))+((x10751*x10761))+x10755+((r20*x10747*x10758))+((r21*x10756))+(((-1.0)*x10754)));
evalcond[8]=((((-1.0)*cj3*x10753*x10761))+(((-1.0)*x10750*x10751))+(((-1.0)*x10747*x10750*x10756))+x10762+((r21*x10758)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10763=gconst5*gconst5;
IkReal x10764=gconst4*gconst4;
IkReal x10765=(gconst5*r10);
IkReal x10766=(gconst4*sj3);
IkReal x10767=((1.0)*cj3);
IkReal x10768=(gconst5*r11);
IkReal x10769=(cj3*gconst4);
IkReal x10770=(r20*x10764);
IkReal x10771=(r21*x10763);
CheckValue<IkReal> x10772 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x10765*x10767))+((r11*r22*x10769)))),IkReal((((cj3*r10*x10771))+((r20*x10765*x10769))+(((-1.0)*gconst4*r21*x10767*x10768))+(((-1.0)*r11*x10767*x10770)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10772.valid){
continue;
}
CheckValue<IkReal> x10773=IKPowWithIntegerCheck(IKsign((((r10*sj3*x10770))+((r20*x10766*x10768))+((r12*r22*sj3))+((r21*x10765*x10766))+((r11*sj3*x10771)))),-1);
if(!x10773.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10772.value)+(((1.5707963267949)*(x10773.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10774=IKsin(j4);
IkReal x10775=IKcos(j4);
IkReal x10776=(cj2*sj1);
IkReal x10777=(cj1*sj2);
IkReal x10778=(gconst4*r20);
IkReal x10779=(cj3*r11);
IkReal x10780=(sj1*sj2);
IkReal x10781=(gconst4*r21);
IkReal x10782=(gconst4*r00);
IkReal x10783=(gconst4*r10);
IkReal x10784=(cj1*cj2);
IkReal x10785=(gconst5*r21);
IkReal x10786=(gconst5*r11);
IkReal x10787=(gconst5*r01);
IkReal x10788=(gconst4*r01);
IkReal x10789=((1.0)*x10775);
IkReal x10790=((1.0)*x10774);
IkReal x10791=(cj3*x10774);
IkReal x10792=(sj3*x10775);
IkReal x10793=((1.0)*cj3*gconst5);
IkReal x10794=((1.0)*gconst5*sj3);
IkReal x10795=(x10776+x10777);
evalcond[0]=((((-1.0)*x10778*x10790))+(((-1.0)*x10785*x10790))+(((-1.0)*r22*x10789)));
evalcond[1]=((((-1.0)*x10787*x10790))+(((-1.0)*x10782*x10790))+(((-1.0)*r02*x10789)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x10789))+(((-1.0)*x10786*x10790))+(((-1.0)*x10783*x10790)));
evalcond[3]=(((x10783*x10792))+((gconst4*x10779))+((x10786*x10792))+(((-1.0)*r10*x10793))+(((-1.0)*r12*sj3*x10790)));
evalcond[4]=(((r12*x10791))+(((-1.0)*gconst5*x10779*x10789))+(((-1.0)*r10*x10794))+((gconst4*r11*sj3))+(((-1.0)*cj3*x10783*x10789)));
evalcond[5]=((((-1.0)*r00*x10793))+((x10787*x10792))+((x10782*x10792))+(((-1.0)*r02*sj3*x10790))+x10795+((cj3*x10788)));
evalcond[6]=(((x10778*x10792))+(((-1.0)*r20*x10793))+(((-1.0)*r22*sj3*x10790))+((x10785*x10792))+(((-1.0)*x10780))+x10784+((cj3*x10781)));
evalcond[7]=((((-1.0)*cj3*x10778*x10789))+(((-1.0)*cj3*x10785*x10789))+(((-1.0)*r20*x10794))+x10795+((r22*x10791))+((sj3*x10781)));
evalcond[8]=((((-1.0)*cj3*x10782*x10789))+(((-1.0)*cj3*x10787*x10789))+((r02*x10791))+(((-1.0)*r00*x10794))+(((-1.0)*x10784))+x10780+((sj3*x10788)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10796=((1.0)*gconst4);
CheckValue<IkReal> x10797=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10796))+((gconst5*r20)))),-1);
if(!x10797.valid){
continue;
}
CheckValue<IkReal> x10798 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x10796))+(((-1.0)*gconst5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10798.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10797.value)))+(x10798.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10799=IKsin(j4);
IkReal x10800=IKcos(j4);
IkReal x10801=(cj2*sj1);
IkReal x10802=(cj1*sj2);
IkReal x10803=(gconst4*r20);
IkReal x10804=(cj3*r11);
IkReal x10805=(sj1*sj2);
IkReal x10806=(gconst4*r21);
IkReal x10807=(gconst4*r00);
IkReal x10808=(gconst4*r10);
IkReal x10809=(cj1*cj2);
IkReal x10810=(gconst5*r21);
IkReal x10811=(gconst5*r11);
IkReal x10812=(gconst5*r01);
IkReal x10813=(gconst4*r01);
IkReal x10814=((1.0)*x10800);
IkReal x10815=((1.0)*x10799);
IkReal x10816=(cj3*x10799);
IkReal x10817=(sj3*x10800);
IkReal x10818=((1.0)*cj3*gconst5);
IkReal x10819=((1.0)*gconst5*sj3);
IkReal x10820=(x10802+x10801);
evalcond[0]=((((-1.0)*x10810*x10815))+(((-1.0)*x10803*x10815))+(((-1.0)*r22*x10814)));
evalcond[1]=((((-1.0)*r02*x10814))+(((-1.0)*x10812*x10815))+(((-1.0)*x10807*x10815)));
evalcond[2]=((-1.0)+(((-1.0)*x10811*x10815))+(((-1.0)*x10808*x10815))+(((-1.0)*r12*x10814)));
evalcond[3]=((((-1.0)*r10*x10818))+((x10808*x10817))+((x10811*x10817))+((gconst4*x10804))+(((-1.0)*r12*sj3*x10815)));
evalcond[4]=((((-1.0)*gconst5*x10804*x10814))+(((-1.0)*r10*x10819))+((gconst4*r11*sj3))+(((-1.0)*cj3*x10808*x10814))+((r12*x10816)));
evalcond[5]=(((x10807*x10817))+((x10812*x10817))+(((-1.0)*r02*sj3*x10815))+(((-1.0)*r00*x10818))+((cj3*x10813))+x10820);
evalcond[6]=(((cj3*x10806))+((x10810*x10817))+(((-1.0)*r22*sj3*x10815))+(((-1.0)*x10805))+((x10803*x10817))+(((-1.0)*r20*x10818))+x10809);
evalcond[7]=(((r22*x10816))+((sj3*x10806))+(((-1.0)*cj3*x10803*x10814))+(((-1.0)*cj3*x10810*x10814))+(((-1.0)*r20*x10819))+x10820);
evalcond[8]=(((r02*x10816))+(((-1.0)*cj3*x10812*x10814))+(((-1.0)*x10809))+(((-1.0)*r00*x10819))+((sj3*x10813))+(((-1.0)*cj3*x10807*x10814))+x10805);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10821=((1.0)*gconst5);
CheckValue<IkReal> x10822=IKPowWithIntegerCheck(IKsign((((gconst4*r01))+(((-1.0)*r00*x10821)))),-1);
if(!x10822.valid){
continue;
}
CheckValue<IkReal> x10823 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x10821))+(((-1.0)*gconst4*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10823.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10822.value)))+(x10823.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10824=IKsin(j4);
IkReal x10825=IKcos(j4);
IkReal x10826=(cj2*sj1);
IkReal x10827=(cj1*sj2);
IkReal x10828=(gconst4*r20);
IkReal x10829=(cj3*r11);
IkReal x10830=(sj1*sj2);
IkReal x10831=(gconst4*r21);
IkReal x10832=(gconst4*r00);
IkReal x10833=(gconst4*r10);
IkReal x10834=(cj1*cj2);
IkReal x10835=(gconst5*r21);
IkReal x10836=(gconst5*r11);
IkReal x10837=(gconst5*r01);
IkReal x10838=(gconst4*r01);
IkReal x10839=((1.0)*x10825);
IkReal x10840=((1.0)*x10824);
IkReal x10841=(cj3*x10824);
IkReal x10842=(sj3*x10825);
IkReal x10843=((1.0)*cj3*gconst5);
IkReal x10844=((1.0)*gconst5*sj3);
IkReal x10845=(x10826+x10827);
evalcond[0]=((((-1.0)*x10835*x10840))+(((-1.0)*x10828*x10840))+(((-1.0)*r22*x10839)));
evalcond[1]=((((-1.0)*x10832*x10840))+(((-1.0)*x10837*x10840))+(((-1.0)*r02*x10839)));
evalcond[2]=((-1.0)+(((-1.0)*x10833*x10840))+(((-1.0)*r12*x10839))+(((-1.0)*x10836*x10840)));
evalcond[3]=(((gconst4*x10829))+((x10833*x10842))+(((-1.0)*r10*x10843))+(((-1.0)*r12*sj3*x10840))+((x10836*x10842)));
evalcond[4]=((((-1.0)*r10*x10844))+((r12*x10841))+(((-1.0)*cj3*x10833*x10839))+(((-1.0)*gconst5*x10829*x10839))+((gconst4*r11*sj3)));
evalcond[5]=(((x10832*x10842))+(((-1.0)*r00*x10843))+(((-1.0)*r02*sj3*x10840))+((cj3*x10838))+((x10837*x10842))+x10845);
evalcond[6]=((((-1.0)*x10830))+(((-1.0)*r22*sj3*x10840))+((x10828*x10842))+((cj3*x10831))+(((-1.0)*r20*x10843))+((x10835*x10842))+x10834);
evalcond[7]=(((r22*x10841))+(((-1.0)*cj3*x10835*x10839))+(((-1.0)*cj3*x10828*x10839))+((sj3*x10831))+(((-1.0)*r20*x10844))+x10845);
evalcond[8]=((((-1.0)*x10834))+(((-1.0)*r00*x10844))+((r02*x10841))+(((-1.0)*cj3*x10837*x10839))+((sj3*x10838))+(((-1.0)*cj3*x10832*x10839))+x10830);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x10849 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x10849.valid){
continue;
}
IkReal x10846=((1.0)*(x10849.value));
IkReal x10847=x9733;
IkReal x10848=((1.0)*x10847);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10846)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10846)));
IkReal gconst4=(r20*x10848);
IkReal gconst5=(r21*x10848);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x10853 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x10853.valid){
continue;
}
IkReal x10850=((1.0)*(x10853.value));
IkReal x10851=x9733;
IkReal x10852=((1.0)*x10851);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10850)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10850)));
IkReal gconst4=(r20*x10852);
IkReal gconst5=(r21*x10852);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x10857 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x10857.valid){
continue;
}
IkReal x10854=((1.0)*(x10857.value));
IkReal x10855=x9733;
IkReal x10856=((1.0)*x10855);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10854)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10854)));
IkReal gconst4=(r20*x10856);
IkReal gconst5=(r21*x10856);
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x10861 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x10861.valid){
continue;
}
IkReal x10858=((1.0)*(x10861.value));
IkReal x10859=x9733;
IkReal x10860=((1.0)*x10859);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10858)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10858)));
IkReal gconst4=(r20*x10860);
IkReal gconst5=(r21*x10860);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x10865 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x10865.valid){
continue;
}
IkReal x10862=((1.0)*(x10865.value));
IkReal x10863=x9733;
IkReal x10864=((1.0)*x10863);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10862)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10862)));
IkReal gconst4=(r20*x10864);
IkReal gconst5=(r21*x10864);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x10869 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x10869.valid){
continue;
}
IkReal x10866=((1.0)*(x10869.value));
IkReal x10867=x9733;
IkReal x10868=((1.0)*x10867);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10866)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10866)));
IkReal gconst4=(r20*x10868);
IkReal gconst5=(r21*x10868);
IkReal x10870=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10874=IKPowWithIntegerCheck(x10870,-1);
if(!x10874.valid){
continue;
}
IkReal x10871=x10874.value;
IkReal x10872=((1.0)*x10871);
IkReal x10873=((((-1.0)*x10872*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x10871))+(((-1.0)*(r12*r12)))+(((-1.0)*x10872*(r11*r11)*(r21*r21))));
j4eval[0]=x10873;
j4eval[1]=IKsign(x10873);
j4eval[2]=r12;
j4eval[3]=x10870;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10875=(gconst5*r11);
IkReal x10876=(gconst4*r10);
CheckValue<IkReal> x10877=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10876*x10876)))+(((-2.0)*x10875*x10876))+(((-1.0)*(r12*r12)))+(((-1.0)*(x10875*x10875))))),-1);
if(!x10877.valid){
continue;
}
CheckValue<IkReal> x10878 = IKatan2WithCheck(IkReal(((((-1.0)*x10875))+(((-1.0)*x10876)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10878.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10877.value)))+(x10878.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10879=IKcos(j4);
IkReal x10880=IKsin(j4);
IkReal x10881=(gconst5*r21);
IkReal x10882=(gconst5*r01);
IkReal x10883=(gconst5*r11);
IkReal x10884=((1.0)*x10879);
IkReal x10885=((1.0)*x10880);
IkReal x10886=(gconst4*x10885);
evalcond[0]=(((r12*x10880))+(((-1.0)*x10883*x10884))+(((-1.0)*gconst4*r10*x10884)));
evalcond[1]=((((-1.0)*r22*x10884))+(((-1.0)*x10881*x10885))+(((-1.0)*r20*x10886)));
evalcond[2]=((((-1.0)*r00*x10886))+(((-1.0)*r02*x10884))+(((-1.0)*x10882*x10885)));
evalcond[3]=((1.0)+(((-1.0)*x10883*x10885))+(((-1.0)*r10*x10886))+(((-1.0)*r12*x10884)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x10880))+(((-1.0)*x10881*x10884))+(((-1.0)*gconst4*r20*x10884)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*gconst4*r00*x10884))+((r02*x10880))+(((-1.0)*x10882*x10884))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10887=((1.0)*gconst5);
CheckValue<IkReal> x10888=IKPowWithIntegerCheck(IKsign((((gconst4*r21))+(((-1.0)*r20*x10887)))),-1);
if(!x10888.valid){
continue;
}
CheckValue<IkReal> x10889 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10887)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10889.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10888.value)))+(x10889.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10890=IKcos(j4);
IkReal x10891=IKsin(j4);
IkReal x10892=(gconst5*r21);
IkReal x10893=(gconst5*r01);
IkReal x10894=(gconst5*r11);
IkReal x10895=((1.0)*x10890);
IkReal x10896=((1.0)*x10891);
IkReal x10897=(gconst4*x10896);
evalcond[0]=(((r12*x10891))+(((-1.0)*gconst4*r10*x10895))+(((-1.0)*x10894*x10895)));
evalcond[1]=((((-1.0)*x10892*x10896))+(((-1.0)*r22*x10895))+(((-1.0)*r20*x10897)));
evalcond[2]=((((-1.0)*r00*x10897))+(((-1.0)*x10893*x10896))+(((-1.0)*r02*x10895)));
evalcond[3]=((1.0)+(((-1.0)*r12*x10895))+(((-1.0)*x10894*x10896))+(((-1.0)*r10*x10897)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x10892*x10895))+((cj1*sj2))+((r22*x10891))+(((-1.0)*gconst4*r20*x10895)));
evalcond[5]=((((-1.0)*x10893*x10895))+(((-1.0)*sj1*sj2))+(((-1.0)*gconst4*r00*x10895))+((r02*x10891))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10898=((1.0)*gconst4);
CheckValue<IkReal> x10899 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst5*r21))+(((-1.0)*r20*x10898)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10899.valid){
continue;
}
CheckValue<IkReal> x10900=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x10898))+((gconst5*r00)))),-1);
if(!x10900.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10899.value)+(((1.5707963267949)*(x10900.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10901=IKcos(j4);
IkReal x10902=IKsin(j4);
IkReal x10903=(gconst5*r21);
IkReal x10904=(gconst5*r01);
IkReal x10905=(gconst5*r11);
IkReal x10906=((1.0)*x10901);
IkReal x10907=((1.0)*x10902);
IkReal x10908=(gconst4*x10907);
evalcond[0]=(((r12*x10902))+(((-1.0)*gconst4*r10*x10906))+(((-1.0)*x10905*x10906)));
evalcond[1]=((((-1.0)*r20*x10908))+(((-1.0)*r22*x10906))+(((-1.0)*x10903*x10907)));
evalcond[2]=((((-1.0)*r00*x10908))+(((-1.0)*x10904*x10907))+(((-1.0)*r02*x10906)));
evalcond[3]=((1.0)+(((-1.0)*r10*x10908))+(((-1.0)*r12*x10906))+(((-1.0)*x10905*x10907)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst4*r20*x10906))+((r22*x10902))+((cj1*sj2))+(((-1.0)*x10903*x10906)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*x10904*x10906))+((cj1*cj2))+((r02*x10902))+(((-1.0)*gconst4*r00*x10906)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x10912 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x10912.valid){
continue;
}
IkReal x10909=((1.0)*(x10912.value));
IkReal x10910=x9733;
IkReal x10911=((1.0)*x10910);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10909)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10909)));
IkReal gconst4=(r20*x10911);
IkReal gconst5=(r21*x10911);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x10916 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x10916.valid){
continue;
}
IkReal x10913=((1.0)*(x10916.value));
IkReal x10914=x9733;
IkReal x10915=((1.0)*x10914);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10913)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10913)));
IkReal gconst4=(r20*x10915);
IkReal gconst5=(r21*x10915);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x10920 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x10920.valid){
continue;
}
IkReal x10917=((1.0)*(x10920.value));
IkReal x10918=x9733;
IkReal x10919=((1.0)*x10918);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10917)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10917)));
IkReal gconst4=(r20*x10919);
IkReal gconst5=(r21*x10919);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10921=(gconst5*r11);
IkReal x10922=(gconst4*r10);
CheckValue<IkReal> x10923 = IKatan2WithCheck(IkReal((x10921+x10922)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10923.valid){
continue;
}
CheckValue<IkReal> x10924=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x10921*x10921)+(((2.0)*x10921*x10922))+(x10922*x10922))),-1);
if(!x10924.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10923.value)+(((1.5707963267949)*(x10924.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10925=IKcos(j4);
IkReal x10926=IKsin(j4);
IkReal x10927=((1.0)*x10925);
IkReal x10928=(gconst4*x10925);
IkReal x10929=(gconst5*x10925);
IkReal x10930=((1.0)*x10926);
IkReal x10931=(gconst4*x10930);
IkReal x10932=(gconst5*x10930);
evalcond[0]=(((r10*x10928))+(((-1.0)*r12*x10930))+((r11*x10929)));
evalcond[1]=((((-1.0)*r22*x10927))+(((-1.0)*r21*x10932))+(((-1.0)*r20*x10931)));
evalcond[2]=((((-1.0)*r02*x10927))+(((-1.0)*r01*x10932))+(((-1.0)*r00*x10931)));
evalcond[3]=((1.0)+(((-1.0)*r11*x10932))+(((-1.0)*r12*x10927))+(((-1.0)*r10*x10931)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x10930))+((cj1*sj2))+((r21*x10929))+((r20*x10928)));
evalcond[5]=((((-1.0)*r02*x10930))+(((-1.0)*sj1*sj2))+((r01*x10929))+((r00*x10928))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10933=((1.0)*gconst5);
CheckValue<IkReal> x10934=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x10933))+((gconst4*r21)))),-1);
if(!x10934.valid){
continue;
}
CheckValue<IkReal> x10935 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10933)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10935.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10934.value)))+(x10935.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10936=IKcos(j4);
IkReal x10937=IKsin(j4);
IkReal x10938=((1.0)*x10936);
IkReal x10939=(gconst4*x10936);
IkReal x10940=(gconst5*x10936);
IkReal x10941=((1.0)*x10937);
IkReal x10942=(gconst4*x10941);
IkReal x10943=(gconst5*x10941);
evalcond[0]=(((r10*x10939))+((r11*x10940))+(((-1.0)*r12*x10941)));
evalcond[1]=((((-1.0)*r22*x10938))+(((-1.0)*r21*x10943))+(((-1.0)*r20*x10942)));
evalcond[2]=((((-1.0)*r01*x10943))+(((-1.0)*r02*x10938))+(((-1.0)*r00*x10942)));
evalcond[3]=((1.0)+(((-1.0)*r12*x10938))+(((-1.0)*r11*x10943))+(((-1.0)*r10*x10942)));
evalcond[4]=(((cj2*sj1))+((r21*x10940))+((cj1*sj2))+(((-1.0)*r22*x10941))+((r20*x10939)));
evalcond[5]=(((r01*x10940))+(((-1.0)*sj1*sj2))+(((-1.0)*r02*x10941))+((r00*x10939))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10944=((1.0)*gconst4);
CheckValue<IkReal> x10945=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x10944))+((gconst5*r00)))),-1);
if(!x10945.valid){
continue;
}
CheckValue<IkReal> x10946 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst5*r21))+(((-1.0)*r20*x10944)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10946.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10945.value)))+(x10946.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10947=IKcos(j4);
IkReal x10948=IKsin(j4);
IkReal x10949=((1.0)*x10947);
IkReal x10950=(gconst4*x10947);
IkReal x10951=(gconst5*x10947);
IkReal x10952=((1.0)*x10948);
IkReal x10953=(gconst4*x10952);
IkReal x10954=(gconst5*x10952);
evalcond[0]=(((r10*x10950))+(((-1.0)*r12*x10952))+((r11*x10951)));
evalcond[1]=((((-1.0)*r20*x10953))+(((-1.0)*r21*x10954))+(((-1.0)*r22*x10949)));
evalcond[2]=((((-1.0)*r01*x10954))+(((-1.0)*r02*x10949))+(((-1.0)*r00*x10953)));
evalcond[3]=((1.0)+(((-1.0)*r12*x10949))+(((-1.0)*r10*x10953))+(((-1.0)*r11*x10954)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x10952))+((r20*x10950))+((r21*x10951)));
evalcond[5]=(((r00*x10950))+(((-1.0)*sj1*sj2))+((r01*x10951))+((cj1*cj2))+(((-1.0)*r02*x10952)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x10958 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x10958.valid){
continue;
}
IkReal x10955=((1.0)*(x10958.value));
IkReal x10956=x9733;
IkReal x10957=((1.0)*x10956);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10955)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10955)));
IkReal gconst4=(r20*x10957);
IkReal gconst5=(r21*x10957);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x10962 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x10962.valid){
continue;
}
IkReal x10959=((1.0)*(x10962.value));
IkReal x10960=x9733;
IkReal x10961=((1.0)*x10960);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10959)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10959)));
IkReal gconst4=(r20*x10961);
IkReal gconst5=(r21*x10961);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x10966 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x10966.valid){
continue;
}
IkReal x10963=((1.0)*(x10966.value));
IkReal x10964=x9733;
IkReal x10965=((1.0)*x10964);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10963)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10963)));
IkReal gconst4=(r20*x10965);
IkReal gconst5=(r21*x10965);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10967=(gconst5*r11);
IkReal x10968=(gconst4*r10);
CheckValue<IkReal> x10969=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x10967*x10967)+(((2.0)*x10967*x10968))+(x10968*x10968))),-1);
if(!x10969.valid){
continue;
}
CheckValue<IkReal> x10970 = IKatan2WithCheck(IkReal((x10967+x10968)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10970.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10969.value)))+(x10970.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10971=IKcos(j4);
IkReal x10972=IKsin(j4);
IkReal x10973=((1.0)*sj1);
IkReal x10974=((1.0)*x10971);
IkReal x10975=(gconst4*x10971);
IkReal x10976=(gconst5*x10971);
IkReal x10977=((1.0)*x10972);
IkReal x10978=(gconst4*x10977);
IkReal x10979=(gconst5*x10977);
evalcond[0]=(((r11*x10976))+((r10*x10975))+(((-1.0)*r12*x10977)));
evalcond[1]=((((-1.0)*r21*x10979))+(((-1.0)*r20*x10978))+(((-1.0)*r22*x10974)));
evalcond[2]=((((-1.0)*r02*x10974))+(((-1.0)*r01*x10979))+(((-1.0)*r00*x10978)));
evalcond[3]=((1.0)+(((-1.0)*r10*x10978))+(((-1.0)*r11*x10979))+(((-1.0)*r12*x10974)));
evalcond[4]=((((-1.0)*r22*x10977))+((r20*x10975))+((r21*x10976))+((cj1*cj2))+(((-1.0)*sj2*x10973)));
evalcond[5]=((((-1.0)*cj2*x10973))+((r01*x10976))+((r00*x10975))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x10977)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10980=((1.0)*gconst5);
CheckValue<IkReal> x10981=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x10980))+((gconst4*r21)))),-1);
if(!x10981.valid){
continue;
}
CheckValue<IkReal> x10982 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10980)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10982.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10981.value)))+(x10982.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10983=IKcos(j4);
IkReal x10984=IKsin(j4);
IkReal x10985=((1.0)*sj1);
IkReal x10986=((1.0)*x10983);
IkReal x10987=(gconst4*x10983);
IkReal x10988=(gconst5*x10983);
IkReal x10989=((1.0)*x10984);
IkReal x10990=(gconst4*x10989);
IkReal x10991=(gconst5*x10989);
evalcond[0]=(((r11*x10988))+(((-1.0)*r12*x10989))+((r10*x10987)));
evalcond[1]=((((-1.0)*r22*x10986))+(((-1.0)*r21*x10991))+(((-1.0)*r20*x10990)));
evalcond[2]=((((-1.0)*r01*x10991))+(((-1.0)*r00*x10990))+(((-1.0)*r02*x10986)));
evalcond[3]=((1.0)+(((-1.0)*r10*x10990))+(((-1.0)*r12*x10986))+(((-1.0)*r11*x10991)));
evalcond[4]=((((-1.0)*sj2*x10985))+((r21*x10988))+(((-1.0)*r22*x10989))+((r20*x10987))+((cj1*cj2)));
evalcond[5]=(((r00*x10987))+((r01*x10988))+(((-1.0)*cj2*x10985))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x10989)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10992=((1.0)*gconst4);
CheckValue<IkReal> x10993 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10992))+(((-1.0)*gconst5*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10993.valid){
continue;
}
CheckValue<IkReal> x10994=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x10992))+((gconst5*r00)))),-1);
if(!x10994.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10993.value)+(((1.5707963267949)*(x10994.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10995=IKcos(j4);
IkReal x10996=IKsin(j4);
IkReal x10997=((1.0)*sj1);
IkReal x10998=((1.0)*x10995);
IkReal x10999=(gconst4*x10995);
IkReal x11000=(gconst5*x10995);
IkReal x11001=((1.0)*x10996);
IkReal x11002=(gconst4*x11001);
IkReal x11003=(gconst5*x11001);
evalcond[0]=(((r10*x10999))+(((-1.0)*r12*x11001))+((r11*x11000)));
evalcond[1]=((((-1.0)*r22*x10998))+(((-1.0)*r21*x11003))+(((-1.0)*r20*x11002)));
evalcond[2]=((((-1.0)*r00*x11002))+(((-1.0)*r02*x10998))+(((-1.0)*r01*x11003)));
evalcond[3]=((1.0)+(((-1.0)*r10*x11002))+(((-1.0)*r12*x10998))+(((-1.0)*r11*x11003)));
evalcond[4]=((((-1.0)*sj2*x10997))+(((-1.0)*r22*x11001))+((r21*x11000))+((r20*x10999))+((cj1*cj2)));
evalcond[5]=((((-1.0)*r02*x11001))+(((-1.0)*cj2*x10997))+((r00*x10999))+(((-1.0)*cj1*sj2))+((r01*x11000)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x11007 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x11007.valid){
continue;
}
IkReal x11004=((1.0)*(x11007.value));
IkReal x11005=x9733;
IkReal x11006=((1.0)*x11005);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11004)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11004)));
IkReal gconst4=(r20*x11006);
IkReal gconst5=(r21*x11006);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x11011 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x11011.valid){
continue;
}
IkReal x11008=((1.0)*(x11011.value));
IkReal x11009=x9733;
IkReal x11010=((1.0)*x11009);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11008)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11008)));
IkReal gconst4=(r20*x11010);
IkReal gconst5=(r21*x11010);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x11015 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x11015.valid){
continue;
}
IkReal x11012=((1.0)*(x11015.value));
IkReal x11013=x9733;
IkReal x11014=((1.0)*x11013);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11012)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11012)));
IkReal gconst4=(r20*x11014);
IkReal gconst5=(r21*x11014);
IkReal x11016=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x11020=IKPowWithIntegerCheck(x11016,-1);
if(!x11020.valid){
continue;
}
IkReal x11017=x11020.value;
IkReal x11018=((1.0)*x11017);
IkReal x11019=((((-2.0)*r10*r11*r20*r21*x11017))+(((-1.0)*x11018*(r10*r10)*(r20*r20)))+(((-1.0)*(r12*r12)))+(((-1.0)*x11018*(r11*r11)*(r21*r21))));
j4eval[0]=x11019;
j4eval[1]=IKsign(x11019);
j4eval[2]=r12;
j4eval[3]=x11016;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11021=(gconst5*r11);
IkReal x11022=(gconst4*r10);
CheckValue<IkReal> x11023 = IKatan2WithCheck(IkReal(((((-1.0)*x11022))+(((-1.0)*x11021)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x11023.valid){
continue;
}
CheckValue<IkReal> x11024=IKPowWithIntegerCheck(IKsign(((((-2.0)*x11021*x11022))+(((-1.0)*(x11022*x11022)))+(((-1.0)*(r12*r12)))+(((-1.0)*(x11021*x11021))))),-1);
if(!x11024.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11023.value)+(((1.5707963267949)*(x11024.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11025=IKcos(j4);
IkReal x11026=IKsin(j4);
IkReal x11027=((1.0)*sj2);
IkReal x11028=((1.0)*x11025);
IkReal x11029=((1.0)*gconst4*x11026);
IkReal x11030=((1.0)*gconst5*x11026);
evalcond[0]=((((-1.0)*gconst5*r11*x11028))+((r12*x11026))+(((-1.0)*gconst4*r10*x11028)));
evalcond[1]=((((-1.0)*r21*x11030))+(((-1.0)*r20*x11029))+(((-1.0)*r22*x11028)));
evalcond[2]=((((-1.0)*r02*x11028))+(((-1.0)*r01*x11030))+(((-1.0)*r00*x11029)));
evalcond[3]=((1.0)+(((-1.0)*r10*x11029))+(((-1.0)*r11*x11030))+(((-1.0)*r12*x11028)));
evalcond[4]=((((-1.0)*sj1*x11027))+((r22*x11026))+(((-1.0)*gconst5*r21*x11028))+(((-1.0)*gconst4*r20*x11028))+((cj1*cj2)));
evalcond[5]=((((-1.0)*gconst5*r01*x11028))+(((-1.0)*gconst4*r00*x11028))+(((-1.0)*cj2*sj1))+((r02*x11026))+(((-1.0)*cj1*x11027)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11031=((1.0)*gconst5);
CheckValue<IkReal> x11032 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x11031)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11032.valid){
continue;
}
CheckValue<IkReal> x11033=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x11031))+((gconst4*r21)))),-1);
if(!x11033.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11032.value)+(((1.5707963267949)*(x11033.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11034=IKcos(j4);
IkReal x11035=IKsin(j4);
IkReal x11036=((1.0)*sj2);
IkReal x11037=((1.0)*x11034);
IkReal x11038=((1.0)*gconst4*x11035);
IkReal x11039=((1.0)*gconst5*x11035);
evalcond[0]=((((-1.0)*gconst5*r11*x11037))+((r12*x11035))+(((-1.0)*gconst4*r10*x11037)));
evalcond[1]=((((-1.0)*r21*x11039))+(((-1.0)*r20*x11038))+(((-1.0)*r22*x11037)));
evalcond[2]=((((-1.0)*r02*x11037))+(((-1.0)*r01*x11039))+(((-1.0)*r00*x11038)));
evalcond[3]=((1.0)+(((-1.0)*r10*x11038))+(((-1.0)*r11*x11039))+(((-1.0)*r12*x11037)));
evalcond[4]=((((-1.0)*sj1*x11036))+((r22*x11035))+((cj1*cj2))+(((-1.0)*gconst4*r20*x11037))+(((-1.0)*gconst5*r21*x11037)));
evalcond[5]=((((-1.0)*gconst5*r01*x11037))+(((-1.0)*gconst4*r00*x11037))+(((-1.0)*cj2*sj1))+((r02*x11035))+(((-1.0)*cj1*x11036)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11040=((1.0)*gconst4);
CheckValue<IkReal> x11041 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x11040))+(((-1.0)*gconst5*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11041.valid){
continue;
}
CheckValue<IkReal> x11042=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x11040))+((gconst5*r00)))),-1);
if(!x11042.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11041.value)+(((1.5707963267949)*(x11042.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11043=IKcos(j4);
IkReal x11044=IKsin(j4);
IkReal x11045=((1.0)*sj2);
IkReal x11046=((1.0)*x11043);
IkReal x11047=((1.0)*gconst4*x11044);
IkReal x11048=((1.0)*gconst5*x11044);
evalcond[0]=((((-1.0)*gconst4*r10*x11046))+(((-1.0)*gconst5*r11*x11046))+((r12*x11044)));
evalcond[1]=((((-1.0)*r22*x11046))+(((-1.0)*r21*x11048))+(((-1.0)*r20*x11047)));
evalcond[2]=((((-1.0)*r01*x11048))+(((-1.0)*r00*x11047))+(((-1.0)*r02*x11046)));
evalcond[3]=((1.0)+(((-1.0)*r11*x11048))+(((-1.0)*r12*x11046))+(((-1.0)*r10*x11047)));
evalcond[4]=((((-1.0)*sj1*x11045))+((r22*x11044))+(((-1.0)*gconst4*r20*x11046))+((cj1*cj2))+(((-1.0)*gconst5*r21*x11046)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*gconst4*r00*x11046))+((r02*x11044))+(((-1.0)*cj1*x11045))+(((-1.0)*gconst5*r01*x11046)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x11049=((-1.0)*px);
CheckValue<IkReal> x11051 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x11051.valid){
continue;
}
IkReal x11050=((1.0)*(x11051.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11050)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11049);
rxp1_1=(px*r21);
rxp1_2=(r11*x11049);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11050)));
IkReal gconst4=((1.0)*r20);
IkReal gconst5=((1.0)*r21);
IkReal x11052=((1.0)*r11*r21);
IkReal x11053=((1.0)*r10*r20);
j4eval[0]=((((-1.0)*x11053))+(((-1.0)*x11052)));
j4eval[1]=(((sj3*x11052))+((sj3*x11053)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11054=((-1.0)*px);
CheckValue<IkReal> x11056 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x11056.valid){
continue;
}
IkReal x11055=((1.0)*(x11056.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11055)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11054);
rxp1_1=(px*r21);
rxp1_2=(r11*x11054);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11055)));
IkReal gconst4=((1.0)*r20);
IkReal gconst5=((1.0)*r21);
IkReal x11057=((1.0)*cj3);
IkReal x11058=(r10*r20);
IkReal x11059=(r11*r21);
j4eval[0]=((((-1.0)*x11058))+(((-1.0)*x11059)));
j4eval[1]=((((-1.0)*x11057*x11058))+(((-1.0)*x11057*x11059)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x11060=((-1.0)*px);
CheckValue<IkReal> x11062 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x11062.valid){
continue;
}
IkReal x11061=((1.0)*(x11062.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11061)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11060);
rxp1_1=(px*r21);
rxp1_2=(r11*x11060);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11061)));
IkReal gconst4=((1.0)*r20);
IkReal gconst5=((1.0)*r21);
IkReal x11063=((1.0)*sj3);
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=(((r11*r21*x11063))+((r10*r20*x11063)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11064=IKPowWithIntegerCheck(cj3,-1);
if(!x11064.valid){
continue;
}
CheckValue<IkReal> x11065=IKPowWithIntegerCheck(r02,-1);
if(!x11065.valid){
continue;
}
CheckValue<IkReal> x11066=IKPowWithIntegerCheck((((gconst4*r10*sj3))+((gconst5*r11*sj3))),-1);
if(!x11066.valid){
continue;
}
if( IKabs(((x11064.value)*(x11065.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11066.value)*(((((-1.0)*cj3*gconst4*r11))+((cj3*gconst5*r10)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11064.value)*(x11065.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x11066.value)*(((((-1.0)*cj3*gconst4*r11))+((cj3*gconst5*r10))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x11064.value)*(x11065.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x11066.value)*(((((-1.0)*cj3*gconst4*r11))+((cj3*gconst5*r10))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11067=IKsin(j4);
IkReal x11068=IKcos(j4);
IkReal x11069=(cj1*cj2);
IkReal x11070=((1.0)*r20);
IkReal x11071=(gconst5*sj3);
IkReal x11072=(cj3*r11);
IkReal x11073=((1.0)*gconst5);
IkReal x11074=((1.0)*sj1);
IkReal x11075=(cj3*gconst4);
IkReal x11076=((1.0)*r10);
IkReal x11077=(cj1*sj2);
IkReal x11078=(gconst4*sj3);
IkReal x11079=(sj2*x11074);
IkReal x11080=(gconst4*x11067);
IkReal x11081=(r02*x11067);
IkReal x11082=(r21*x11068);
evalcond[0]=((-1.0)*r02*x11068);
evalcond[1]=(((cj3*x11081))+x11069+(((-1.0)*x11079)));
evalcond[2]=((((-1.0)*x11070*x11080))+(((-1.0)*r21*x11067*x11073)));
evalcond[3]=((1.0)+(((-1.0)*x11076*x11080))+(((-1.0)*r11*x11067*x11073)));
evalcond[4]=((((-1.0)*cj2*x11074))+(((-1.0)*sj3*x11081))+(((-1.0)*x11077)));
evalcond[5]=((((-1.0)*cj3*r10*x11073))+((r10*x11068*x11078))+((gconst4*x11072))+((r11*x11068*x11071)));
evalcond[6]=((((-1.0)*x11071*x11076))+((r11*x11078))+(((-1.0)*x11068*x11072*x11073))+(((-1.0)*x11068*x11075*x11076)));
evalcond[7]=(((r21*x11075))+x11069+(((-1.0)*x11079))+((x11071*x11082))+((r20*x11068*x11078))+(((-1.0)*cj3*gconst5*x11070)));
evalcond[8]=(((cj2*sj1))+((r21*x11078))+(((-1.0)*cj3*x11073*x11082))+(((-1.0)*x11070*x11071))+x11077+(((-1.0)*x11068*x11070*x11075)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11083=((1.0)*gconst4);
IkReal x11084=((1.0)*gconst5*r11);
CheckValue<IkReal> x11085=IKPowWithIntegerCheck(((((-1.0)*r10*x11083))+(((-1.0)*x11084))),-1);
if(!x11085.valid){
continue;
}
CheckValue<IkReal> x11086=IKPowWithIntegerCheck(((((-1.0)*cj3*r10*x11083))+(((-1.0)*cj3*x11084))),-1);
if(!x11086.valid){
continue;
}
if( IKabs(((-1.0)*(x11085.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11086.value)*(((((-1.0)*r11*sj3*x11083))+((gconst5*r10*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x11085.value)))+IKsqr(((x11086.value)*(((((-1.0)*r11*sj3*x11083))+((gconst5*r10*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x11085.value)), ((x11086.value)*(((((-1.0)*r11*sj3*x11083))+((gconst5*r10*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11087=IKsin(j4);
IkReal x11088=IKcos(j4);
IkReal x11089=(cj1*cj2);
IkReal x11090=((1.0)*r20);
IkReal x11091=(gconst5*sj3);
IkReal x11092=(cj3*r11);
IkReal x11093=((1.0)*gconst5);
IkReal x11094=((1.0)*sj1);
IkReal x11095=(cj3*gconst4);
IkReal x11096=((1.0)*r10);
IkReal x11097=(cj1*sj2);
IkReal x11098=(gconst4*sj3);
IkReal x11099=(sj2*x11094);
IkReal x11100=(gconst4*x11087);
IkReal x11101=(r02*x11087);
IkReal x11102=(r21*x11088);
evalcond[0]=((-1.0)*r02*x11088);
evalcond[1]=((((-1.0)*x11099))+x11089+((cj3*x11101)));
evalcond[2]=((((-1.0)*r21*x11087*x11093))+(((-1.0)*x11090*x11100)));
evalcond[3]=((1.0)+(((-1.0)*r11*x11087*x11093))+(((-1.0)*x11096*x11100)));
evalcond[4]=((((-1.0)*x11097))+(((-1.0)*sj3*x11101))+(((-1.0)*cj2*x11094)));
evalcond[5]=((((-1.0)*cj3*r10*x11093))+((r11*x11088*x11091))+((r10*x11088*x11098))+((gconst4*x11092)));
evalcond[6]=(((r11*x11098))+(((-1.0)*x11091*x11096))+(((-1.0)*x11088*x11092*x11093))+(((-1.0)*x11088*x11095*x11096)));
evalcond[7]=(((r20*x11088*x11098))+(((-1.0)*cj3*gconst5*x11090))+((x11091*x11102))+(((-1.0)*x11099))+x11089+((r21*x11095)));
evalcond[8]=(((cj2*sj1))+x11097+(((-1.0)*x11090*x11091))+(((-1.0)*cj3*x11093*x11102))+(((-1.0)*x11088*x11090*x11095))+((r21*x11098)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11103=(gconst4*r10);
IkReal x11104=(gconst5*r11);
CheckValue<IkReal> x11105=IKPowWithIntegerCheck(((((-1.0)*x11103))+(((-1.0)*x11104))),-1);
if(!x11105.valid){
continue;
}
CheckValue<IkReal> x11106=IKPowWithIntegerCheck((((sj3*x11104))+((sj3*x11103))),-1);
if(!x11106.valid){
continue;
}
if( IKabs(((-1.0)*(x11105.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11106.value)*(((((-1.0)*cj3*gconst4*r11))+((cj3*gconst5*r10)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x11105.value)))+IKsqr(((x11106.value)*(((((-1.0)*cj3*gconst4*r11))+((cj3*gconst5*r10))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x11105.value)), ((x11106.value)*(((((-1.0)*cj3*gconst4*r11))+((cj3*gconst5*r10))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11107=IKsin(j4);
IkReal x11108=IKcos(j4);
IkReal x11109=(cj1*cj2);
IkReal x11110=((1.0)*r20);
IkReal x11111=(gconst5*sj3);
IkReal x11112=(cj3*r11);
IkReal x11113=((1.0)*gconst5);
IkReal x11114=((1.0)*sj1);
IkReal x11115=(cj3*gconst4);
IkReal x11116=((1.0)*r10);
IkReal x11117=(cj1*sj2);
IkReal x11118=(gconst4*sj3);
IkReal x11119=(sj2*x11114);
IkReal x11120=(gconst4*x11107);
IkReal x11121=(r02*x11107);
IkReal x11122=(r21*x11108);
evalcond[0]=((-1.0)*r02*x11108);
evalcond[1]=(x11109+((cj3*x11121))+(((-1.0)*x11119)));
evalcond[2]=((((-1.0)*x11110*x11120))+(((-1.0)*r21*x11107*x11113)));
evalcond[3]=((1.0)+(((-1.0)*x11116*x11120))+(((-1.0)*r11*x11107*x11113)));
evalcond[4]=((((-1.0)*x11117))+(((-1.0)*sj3*x11121))+(((-1.0)*cj2*x11114)));
evalcond[5]=(((r10*x11108*x11118))+((gconst4*x11112))+(((-1.0)*cj3*r10*x11113))+((r11*x11108*x11111)));
evalcond[6]=((((-1.0)*x11111*x11116))+(((-1.0)*x11108*x11112*x11113))+(((-1.0)*x11108*x11115*x11116))+((r11*x11118)));
evalcond[7]=((((-1.0)*cj3*gconst5*x11110))+((r20*x11108*x11118))+x11109+((r21*x11115))+(((-1.0)*x11119))+((x11111*x11122)));
evalcond[8]=(((cj2*sj1))+(((-1.0)*cj3*x11113*x11122))+x11117+((r21*x11118))+(((-1.0)*x11110*x11111))+(((-1.0)*x11108*x11110*x11115)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11123=gconst5*gconst5;
IkReal x11124=gconst4*gconst4;
IkReal x11125=(gconst5*r10);
IkReal x11126=(gconst4*sj3);
IkReal x11127=((1.0)*cj3);
IkReal x11128=(gconst5*r11);
IkReal x11129=(cj3*gconst4);
IkReal x11130=(r20*x11124);
IkReal x11131=(r21*x11123);
CheckValue<IkReal> x11132 = IKatan2WithCheck(IkReal((((r11*r22*x11129))+(((-1.0)*r22*x11125*x11127)))),IkReal(((((-1.0)*r11*x11127*x11130))+(((-1.0)*gconst4*r21*x11127*x11128))+((r20*x11125*x11129))+((cj3*r10*x11131)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11132.valid){
continue;
}
CheckValue<IkReal> x11133=IKPowWithIntegerCheck(IKsign((((r11*sj3*x11131))+((r10*sj3*x11130))+((r21*x11125*x11126))+((r20*x11126*x11128))+((r12*r22*sj3)))),-1);
if(!x11133.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11132.value)+(((1.5707963267949)*(x11133.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11134=IKsin(j4);
IkReal x11135=IKcos(j4);
IkReal x11136=(cj1*cj2);
IkReal x11137=(gconst4*r20);
IkReal x11138=(cj3*r11);
IkReal x11139=((1.0)*sj1);
IkReal x11140=(gconst4*r21);
IkReal x11141=(gconst5*r01);
IkReal x11142=(gconst4*r00);
IkReal x11143=(gconst4*r10);
IkReal x11144=(cj1*sj2);
IkReal x11145=(gconst5*r21);
IkReal x11146=(gconst5*r11);
IkReal x11147=(gconst4*r01);
IkReal x11148=(sj2*x11139);
IkReal x11149=((1.0)*x11135);
IkReal x11150=((1.0)*x11134);
IkReal x11151=(cj3*x11134);
IkReal x11152=(sj3*x11135);
IkReal x11153=((1.0)*cj3*gconst5);
IkReal x11154=((1.0)*gconst5*sj3);
evalcond[0]=((((-1.0)*r22*x11149))+(((-1.0)*x11137*x11150))+(((-1.0)*x11145*x11150)));
evalcond[1]=((((-1.0)*x11142*x11150))+(((-1.0)*x11141*x11150))+(((-1.0)*r02*x11149)));
evalcond[2]=((1.0)+(((-1.0)*x11146*x11150))+(((-1.0)*r12*x11149))+(((-1.0)*x11143*x11150)));
evalcond[3]=(((x11146*x11152))+((x11143*x11152))+((gconst4*x11138))+(((-1.0)*r12*sj3*x11150))+(((-1.0)*r10*x11153)));
evalcond[4]=((((-1.0)*gconst5*x11138*x11149))+((r12*x11151))+(((-1.0)*r10*x11154))+((gconst4*r11*sj3))+(((-1.0)*cj3*x11143*x11149)));
evalcond[5]=((((-1.0)*r20*x11153))+((x11137*x11152))+x11136+((cj3*x11140))+((x11145*x11152))+(((-1.0)*x11148))+(((-1.0)*r22*sj3*x11150)));
evalcond[6]=(((cj2*sj1))+(((-1.0)*cj3*x11137*x11149))+((r22*x11151))+(((-1.0)*r20*x11154))+x11144+(((-1.0)*cj3*x11145*x11149))+((sj3*x11140)));
evalcond[7]=((((-1.0)*cj2*x11139))+(((-1.0)*x11144))+(((-1.0)*r00*x11153))+((cj3*x11147))+((x11142*x11152))+(((-1.0)*r02*sj3*x11150))+((x11141*x11152)));
evalcond[8]=(((r02*x11151))+(((-1.0)*r00*x11154))+x11136+((sj3*x11147))+(((-1.0)*cj3*x11141*x11149))+(((-1.0)*x11148))+(((-1.0)*cj3*x11142*x11149)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11155=((1.0)*gconst5);
CheckValue<IkReal> x11156=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x11155))+((gconst4*r21)))),-1);
if(!x11156.valid){
continue;
}
CheckValue<IkReal> x11157 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x11155)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11157.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11156.value)))+(x11157.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11158=IKsin(j4);
IkReal x11159=IKcos(j4);
IkReal x11160=(cj1*cj2);
IkReal x11161=(gconst4*r20);
IkReal x11162=(cj3*r11);
IkReal x11163=((1.0)*sj1);
IkReal x11164=(gconst4*r21);
IkReal x11165=(gconst5*r01);
IkReal x11166=(gconst4*r00);
IkReal x11167=(gconst4*r10);
IkReal x11168=(cj1*sj2);
IkReal x11169=(gconst5*r21);
IkReal x11170=(gconst5*r11);
IkReal x11171=(gconst4*r01);
IkReal x11172=(sj2*x11163);
IkReal x11173=((1.0)*x11159);
IkReal x11174=((1.0)*x11158);
IkReal x11175=(cj3*x11158);
IkReal x11176=(sj3*x11159);
IkReal x11177=((1.0)*cj3*gconst5);
IkReal x11178=((1.0)*gconst5*sj3);
evalcond[0]=((((-1.0)*x11161*x11174))+(((-1.0)*r22*x11173))+(((-1.0)*x11169*x11174)));
evalcond[1]=((((-1.0)*x11166*x11174))+(((-1.0)*x11165*x11174))+(((-1.0)*r02*x11173)));
evalcond[2]=((1.0)+(((-1.0)*x11167*x11174))+(((-1.0)*r12*x11173))+(((-1.0)*x11170*x11174)));
evalcond[3]=(((gconst4*x11162))+(((-1.0)*r10*x11177))+((x11167*x11176))+(((-1.0)*r12*sj3*x11174))+((x11170*x11176)));
evalcond[4]=(((r12*x11175))+(((-1.0)*r10*x11178))+(((-1.0)*gconst5*x11162*x11173))+(((-1.0)*cj3*x11167*x11173))+((gconst4*r11*sj3)));
evalcond[5]=((((-1.0)*r22*sj3*x11174))+((x11161*x11176))+((x11169*x11176))+(((-1.0)*x11172))+((cj3*x11164))+(((-1.0)*r20*x11177))+x11160);
evalcond[6]=(((cj2*sj1))+((sj3*x11164))+(((-1.0)*cj3*x11169*x11173))+(((-1.0)*r20*x11178))+x11168+((r22*x11175))+(((-1.0)*cj3*x11161*x11173)));
evalcond[7]=((((-1.0)*r00*x11177))+((x11166*x11176))+(((-1.0)*r02*sj3*x11174))+((x11165*x11176))+((cj3*x11171))+(((-1.0)*x11168))+(((-1.0)*cj2*x11163)));
evalcond[8]=((((-1.0)*r00*x11178))+((sj3*x11171))+(((-1.0)*cj3*x11166*x11173))+(((-1.0)*x11172))+x11160+((r02*x11175))+(((-1.0)*cj3*x11165*x11173)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11179=((1.0)*gconst4);
CheckValue<IkReal> x11180=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x11179))+((gconst5*r00)))),-1);
if(!x11180.valid){
continue;
}
CheckValue<IkReal> x11181 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x11179))+(((-1.0)*gconst5*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11181.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11180.value)))+(x11181.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11182=IKsin(j4);
IkReal x11183=IKcos(j4);
IkReal x11184=(cj1*cj2);
IkReal x11185=(gconst4*r20);
IkReal x11186=(cj3*r11);
IkReal x11187=((1.0)*sj1);
IkReal x11188=(gconst4*r21);
IkReal x11189=(gconst5*r01);
IkReal x11190=(gconst4*r00);
IkReal x11191=(gconst4*r10);
IkReal x11192=(cj1*sj2);
IkReal x11193=(gconst5*r21);
IkReal x11194=(gconst5*r11);
IkReal x11195=(gconst4*r01);
IkReal x11196=(sj2*x11187);
IkReal x11197=((1.0)*x11183);
IkReal x11198=((1.0)*x11182);
IkReal x11199=(cj3*x11182);
IkReal x11200=(sj3*x11183);
IkReal x11201=((1.0)*cj3*gconst5);
IkReal x11202=((1.0)*gconst5*sj3);
evalcond[0]=((((-1.0)*r22*x11197))+(((-1.0)*x11185*x11198))+(((-1.0)*x11193*x11198)));
evalcond[1]=((((-1.0)*r02*x11197))+(((-1.0)*x11189*x11198))+(((-1.0)*x11190*x11198)));
evalcond[2]=((1.0)+(((-1.0)*r12*x11197))+(((-1.0)*x11191*x11198))+(((-1.0)*x11194*x11198)));
evalcond[3]=((((-1.0)*r10*x11201))+((x11191*x11200))+((x11194*x11200))+(((-1.0)*r12*sj3*x11198))+((gconst4*x11186)));
evalcond[4]=((((-1.0)*gconst5*x11186*x11197))+(((-1.0)*r10*x11202))+(((-1.0)*cj3*x11191*x11197))+((r12*x11199))+((gconst4*r11*sj3)));
evalcond[5]=((((-1.0)*r22*sj3*x11198))+(((-1.0)*x11196))+((cj3*x11188))+(((-1.0)*r20*x11201))+x11184+((x11193*x11200))+((x11185*x11200)));
evalcond[6]=(((cj2*sj1))+((sj3*x11188))+(((-1.0)*cj3*x11185*x11197))+(((-1.0)*r20*x11202))+((r22*x11199))+x11192+(((-1.0)*cj3*x11193*x11197)));
evalcond[7]=(((x11189*x11200))+((x11190*x11200))+((cj3*x11195))+(((-1.0)*r02*sj3*x11198))+(((-1.0)*r00*x11201))+(((-1.0)*x11192))+(((-1.0)*cj2*x11187)));
evalcond[8]=(((sj3*x11195))+(((-1.0)*cj3*x11189*x11197))+(((-1.0)*cj3*x11190*x11197))+(((-1.0)*x11196))+(((-1.0)*r00*x11202))+x11184+((r02*x11199)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x11203=((-1.0)*r21);
CheckValue<IkReal> x11205 = IKatan2WithCheck(IkReal(r20),IkReal(x11203),IKFAST_ATAN2_MAGTHRESH);
if(!x11205.valid){
continue;
}
IkReal x11204=((1.0)*(x11205.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11204)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=((-1.0)*py*r20);
rxp0_2=(py*r00);
rxp1_0=(py*x11203);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11204)));
IkReal gconst4=((1.0)*r20);
IkReal gconst5=((1.0)*r21);
j4eval[0]=((((-1.0)*r01*r21))+(((-1.0)*r00*r20)));
j4eval[1]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11206=((-1.0)*r21);
CheckValue<IkReal> x11208 = IKatan2WithCheck(IkReal(r20),IkReal(x11206),IKFAST_ATAN2_MAGTHRESH);
if(!x11208.valid){
continue;
}
IkReal x11207=((1.0)*(x11208.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11207)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=((-1.0)*py*r20);
rxp0_2=(py*r00);
rxp1_0=(py*x11206);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11207)));
IkReal gconst4=((1.0)*r20);
IkReal gconst5=((1.0)*r21);
j4eval[0]=cj3;
j4eval[1]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11209=((-1.0)*r21);
CheckValue<IkReal> x11211 = IKatan2WithCheck(IkReal(r20),IkReal(x11209),IKFAST_ATAN2_MAGTHRESH);
if(!x11211.valid){
continue;
}
IkReal x11210=((1.0)*(x11211.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11210)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=((-1.0)*py*r20);
rxp0_2=(py*r00);
rxp1_0=(py*x11209);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11210)));
IkReal gconst4=((1.0)*r20);
IkReal gconst5=((1.0)*r21);
j4eval[0]=r12;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11212=((-1.0)*r21);
CheckValue<IkReal> x11214 = IKatan2WithCheck(IkReal(r20),IkReal(x11212),IKFAST_ATAN2_MAGTHRESH);
if(!x11214.valid){
continue;
}
IkReal x11213=((1.0)*(x11214.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11213)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=((-1.0)*py*r20);
rxp0_2=(py*r00);
rxp1_0=(py*x11212);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11213)));
IkReal gconst4=((1.0)*r20);
IkReal gconst5=((1.0)*r21);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11215=((-1.0)*r21);
CheckValue<IkReal> x11217 = IKatan2WithCheck(IkReal(r20),IkReal(x11215),IKFAST_ATAN2_MAGTHRESH);
if(!x11217.valid){
continue;
}
IkReal x11216=((1.0)*(x11217.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11216)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=((-1.0)*py*r20);
rxp0_2=(py*r00);
rxp1_0=(py*x11215);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11216)));
IkReal gconst4=((1.0)*r20);
IkReal gconst5=((1.0)*r21);
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(((1.0)*(r00*r00))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11218=((-1.0)*r21);
CheckValue<IkReal> x11220 = IKatan2WithCheck(IkReal(r20),IkReal(x11218),IKFAST_ATAN2_MAGTHRESH);
if(!x11220.valid){
continue;
}
IkReal x11219=((1.0)*(x11220.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11219)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=((-1.0)*py*r20);
rxp0_2=(py*r00);
rxp1_0=(py*x11218);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11219)));
IkReal gconst4=((1.0)*r20);
IkReal gconst5=((1.0)*r21);
j4eval[0]=((((-1.0)*r01*r21))+(((-1.0)*r00*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11223=IKPowWithIntegerCheck(((((-1.0)*gconst4*r00))+(((-1.0)*gconst5*r01))),-1);
if(!x11223.valid){
continue;
}
IkReal x11221=x11223.value;
IkReal x11222=(sj0*x11221);
cj4array[0]=((((-1.0)*sj1*sj2*x11222))+((cj1*cj2*x11222)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11224=IKsin(j4);
IkReal x11225=IKcos(j4);
IkReal x11226=((1.0)*gconst5);
IkReal x11227=((1.0)*gconst4*r20);
evalcond[0]=(r12*x11224);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r12*x11225)));
evalcond[2]=((((-1.0)*x11224*x11227))+(((-1.0)*r21*x11224*x11226)));
evalcond[3]=((((-1.0)*r01*x11224*x11226))+(((-1.0)*gconst4*r00*x11224)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x11225*x11227))+((cj1*sj2))+(((-1.0)*r21*x11225*x11226)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11230=IKPowWithIntegerCheck(((((-1.0)*gconst5*r21))+(((-1.0)*gconst4*r20))),-1);
if(!x11230.valid){
continue;
}
IkReal x11228=x11230.value;
IkReal x11229=((1.0)*x11228);
cj4array[0]=((((-1.0)*cj1*sj2*x11229))+(((-1.0)*cj2*sj1*x11229)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11231=IKsin(j4);
IkReal x11232=IKcos(j4);
IkReal x11233=((1.0)*gconst4);
IkReal x11234=((1.0)*sj0);
IkReal x11235=((1.0)*x11232);
IkReal x11236=((1.0)*gconst5*x11231);
evalcond[0]=(r12*x11231);
evalcond[1]=((((-1.0)*x11234))+(((-1.0)*r12*x11235)));
evalcond[2]=((((-1.0)*r20*x11231*x11233))+(((-1.0)*r21*x11236)));
evalcond[3]=((((-1.0)*r01*x11236))+(((-1.0)*r00*x11231*x11233)));
evalcond[4]=((((-1.0)*gconst5*r01*x11235))+(((-1.0)*r00*x11232*x11233))+((sj0*sj1*sj2))+(((-1.0)*cj1*cj2*x11234)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11237=IKPowWithIntegerCheck(r12,-1);
if(!x11237.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x11237.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11238=IKsin(j4);
IkReal x11239=IKcos(j4);
IkReal x11240=((1.0)*gconst4);
IkReal x11241=((1.0)*gconst5);
evalcond[0]=(r12*x11238);
evalcond[1]=((((-1.0)*r21*x11238*x11241))+(((-1.0)*r20*x11238*x11240)));
evalcond[2]=((((-1.0)*r00*x11238*x11240))+(((-1.0)*r01*x11238*x11241)));
evalcond[3]=((((-1.0)*r20*x11239*x11240))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*x11239*x11241)));
evalcond[4]=((((-1.0)*r01*x11239*x11241))+(((-1.0)*cj1*cj2*sj0))+((sj0*sj1*sj2))+(((-1.0)*r00*x11239*x11240)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11242=((-1.0)*r21);
CheckValue<IkReal> x11244 = IKatan2WithCheck(IkReal(r20),IkReal(x11242),IKFAST_ATAN2_MAGTHRESH);
if(!x11244.valid){
continue;
}
IkReal x11243=((1.0)*(x11244.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11243)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=((-1.0)*py*r20);
rxp0_2=(py*r00);
rxp1_0=(py*x11242);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11243)));
IkReal gconst4=((1.0)*r20);
IkReal gconst5=((1.0)*r21);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11245=((-1.0)*r21);
CheckValue<IkReal> x11247 = IKatan2WithCheck(IkReal(r20),IkReal(x11245),IKFAST_ATAN2_MAGTHRESH);
if(!x11247.valid){
continue;
}
IkReal x11246=((1.0)*(x11247.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11246)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=((-1.0)*py*r20);
rxp0_2=(py*r00);
rxp1_0=(py*x11245);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11246)));
IkReal gconst4=((1.0)*r20);
IkReal gconst5=((1.0)*r21);
j4eval[0]=((1.0)+(((1.0)*(r21*r21)))+(((-1.0)*(r00*r00))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11248=((-1.0)*r21);
CheckValue<IkReal> x11250 = IKatan2WithCheck(IkReal(r20),IkReal(x11248),IKFAST_ATAN2_MAGTHRESH);
if(!x11250.valid){
continue;
}
IkReal x11249=((1.0)*(x11250.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11249)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=((-1.0)*py*r20);
rxp0_2=(py*r00);
rxp1_0=(py*x11248);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11249)));
IkReal gconst4=((1.0)*r20);
IkReal gconst5=((1.0)*r21);
j4eval[0]=((((1.0)*r01*r21))+(((1.0)*r00*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11253=IKPowWithIntegerCheck((((gconst4*r00))+((gconst5*r01))),-1);
if(!x11253.valid){
continue;
}
IkReal x11251=x11253.value;
IkReal x11252=(sj0*x11251);
cj4array[0]=(((cj1*cj2*x11252))+(((-1.0)*sj1*sj2*x11252)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11254=IKsin(j4);
IkReal x11255=IKcos(j4);
IkReal x11256=(gconst4*r20);
IkReal x11257=(gconst5*r21);
IkReal x11258=((1.0)*x11254);
evalcond[0]=((-1.0)*r12*x11254);
evalcond[1]=((((-1.0)*r12*x11255))+(((-1.0)*sj0)));
evalcond[2]=((((-1.0)*x11257*x11258))+(((-1.0)*x11256*x11258)));
evalcond[3]=((((-1.0)*gconst5*r01*x11258))+(((-1.0)*gconst4*r00*x11258)));
evalcond[4]=(((x11255*x11257))+((x11255*x11256))+((cj2*sj1))+((cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11261=IKPowWithIntegerCheck((((gconst4*r20))+((gconst5*r21))),-1);
if(!x11261.valid){
continue;
}
IkReal x11259=x11261.value;
IkReal x11260=((1.0)*x11259);
cj4array[0]=((((-1.0)*cj2*sj1*x11260))+(((-1.0)*cj1*sj2*x11260)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11262=IKsin(j4);
IkReal x11263=IKcos(j4);
IkReal x11264=((1.0)*sj0);
IkReal x11265=(gconst5*r01);
IkReal x11266=(gconst4*r00);
IkReal x11267=((1.0)*x11262);
evalcond[0]=((-1.0)*r12*x11262);
evalcond[1]=((((-1.0)*r12*x11263))+(((-1.0)*x11264)));
evalcond[2]=((((-1.0)*gconst4*r20*x11267))+(((-1.0)*gconst5*r21*x11267)));
evalcond[3]=((((-1.0)*x11265*x11267))+(((-1.0)*x11266*x11267)));
evalcond[4]=(((sj0*sj1*sj2))+((x11263*x11265))+((x11263*x11266))+(((-1.0)*cj1*cj2*x11264)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11268=IKPowWithIntegerCheck(r12,-1);
if(!x11268.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x11268.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11269=IKsin(j4);
IkReal x11270=IKcos(j4);
IkReal x11271=(gconst4*r20);
IkReal x11272=(gconst5*r01);
IkReal x11273=(gconst5*r21);
IkReal x11274=(gconst4*r00);
IkReal x11275=((1.0)*x11269);
evalcond[0]=((-1.0)*r12*x11269);
evalcond[1]=((((-1.0)*x11271*x11275))+(((-1.0)*x11273*x11275)));
evalcond[2]=((((-1.0)*x11274*x11275))+(((-1.0)*x11272*x11275)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x11270*x11273))+((x11270*x11271)));
evalcond[4]=((((-1.0)*cj1*cj2*sj0))+((sj0*sj1*sj2))+((x11270*x11274))+((x11270*x11272)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11276=((-1.0)*r21);
CheckValue<IkReal> x11278 = IKatan2WithCheck(IkReal(r20),IkReal(x11276),IKFAST_ATAN2_MAGTHRESH);
if(!x11278.valid){
continue;
}
IkReal x11277=((1.0)*(x11278.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11277)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=((-1.0)*py*r20);
rxp0_2=(py*r00);
rxp1_0=(py*x11276);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11277)));
IkReal gconst4=((1.0)*r20);
IkReal gconst5=((1.0)*r21);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11279=((-1.0)*r21);
CheckValue<IkReal> x11281 = IKatan2WithCheck(IkReal(r20),IkReal(x11279),IKFAST_ATAN2_MAGTHRESH);
if(!x11281.valid){
continue;
}
IkReal x11280=((1.0)*(x11281.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11280)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=((-1.0)*py*r20);
rxp0_2=(py*r00);
rxp1_0=(py*x11279);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11280)));
IkReal gconst4=((1.0)*r20);
IkReal gconst5=((1.0)*r21);
j4eval[0]=((1.0)+(((1.0)*(r21*r21)))+(((-1.0)*(r00*r00))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11282=((-1.0)*r21);
CheckValue<IkReal> x11284 = IKatan2WithCheck(IkReal(r20),IkReal(x11282),IKFAST_ATAN2_MAGTHRESH);
if(!x11284.valid){
continue;
}
IkReal x11283=((1.0)*(x11284.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11283)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=((-1.0)*py*r20);
rxp0_2=(py*r00);
rxp1_0=(py*x11282);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11283)));
IkReal gconst4=((1.0)*r20);
IkReal gconst5=((1.0)*r21);
j4eval[0]=((((1.0)*r01*r21))+(((1.0)*r00*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11287=IKPowWithIntegerCheck((((gconst4*r00))+((gconst5*r01))),-1);
if(!x11287.valid){
continue;
}
IkReal x11285=x11287.value;
IkReal x11286=((1.0)*sj0*x11285);
cj4array[0]=((((-1.0)*cj1*sj2*x11286))+(((-1.0)*cj2*sj1*x11286)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11288=IKsin(j4);
IkReal x11289=IKcos(j4);
IkReal x11290=(gconst4*r20);
IkReal x11291=(gconst5*r21);
IkReal x11292=((1.0)*x11288);
evalcond[0]=((-1.0)*r12*x11288);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r12*x11289)));
evalcond[2]=((((-1.0)*x11291*x11292))+(((-1.0)*x11290*x11292)));
evalcond[3]=((((-1.0)*gconst5*r01*x11292))+(((-1.0)*gconst4*r00*x11292)));
evalcond[4]=((((-1.0)*sj1*sj2))+((x11289*x11291))+((x11289*x11290))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11294=IKPowWithIntegerCheck((((gconst4*r20))+((gconst5*r21))),-1);
if(!x11294.valid){
continue;
}
IkReal x11293=x11294.value;
cj4array[0]=((((-1.0)*cj1*cj2*x11293))+((sj1*sj2*x11293)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11295=IKsin(j4);
IkReal x11296=IKcos(j4);
IkReal x11297=(gconst5*r01);
IkReal x11298=(gconst4*r00);
IkReal x11299=((1.0)*x11295);
evalcond[0]=((-1.0)*r12*x11295);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r12*x11296)));
evalcond[2]=((((-1.0)*gconst4*r20*x11299))+(((-1.0)*gconst5*r21*x11299)));
evalcond[3]=((((-1.0)*x11298*x11299))+(((-1.0)*x11297*x11299)));
evalcond[4]=(((x11296*x11298))+((x11296*x11297))+((cj1*sj0*sj2))+((cj2*sj0*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11300=IKPowWithIntegerCheck(r12,-1);
if(!x11300.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x11300.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11301=IKsin(j4);
IkReal x11302=IKcos(j4);
IkReal x11303=(gconst4*r20);
IkReal x11304=(gconst5*r01);
IkReal x11305=(gconst5*r21);
IkReal x11306=(gconst4*r00);
IkReal x11307=((1.0)*x11301);
evalcond[0]=((-1.0)*r12*x11301);
evalcond[1]=((((-1.0)*x11305*x11307))+(((-1.0)*x11303*x11307)));
evalcond[2]=((((-1.0)*x11304*x11307))+(((-1.0)*x11306*x11307)));
evalcond[3]=((((-1.0)*sj1*sj2))+((x11302*x11303))+((x11302*x11305))+((cj1*cj2)));
evalcond[4]=(((cj1*sj0*sj2))+((cj2*sj0*sj1))+((x11302*x11304))+((x11302*x11306)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11308=((-1.0)*r21);
CheckValue<IkReal> x11310 = IKatan2WithCheck(IkReal(r20),IkReal(x11308),IKFAST_ATAN2_MAGTHRESH);
if(!x11310.valid){
continue;
}
IkReal x11309=((1.0)*(x11310.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11309)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=((-1.0)*py*r20);
rxp0_2=(py*r00);
rxp1_0=(py*x11308);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11309)));
IkReal gconst4=((1.0)*r20);
IkReal gconst5=((1.0)*r21);
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11311=((-1.0)*r21);
CheckValue<IkReal> x11313 = IKatan2WithCheck(IkReal(r20),IkReal(x11311),IKFAST_ATAN2_MAGTHRESH);
if(!x11313.valid){
continue;
}
IkReal x11312=((1.0)*(x11313.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11312)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=((-1.0)*py*r20);
rxp0_2=(py*r00);
rxp1_0=(py*x11311);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11312)));
IkReal gconst4=((1.0)*r20);
IkReal gconst5=((1.0)*r21);
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(((1.0)*(r00*r00))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11314=((-1.0)*r21);
CheckValue<IkReal> x11316 = IKatan2WithCheck(IkReal(r20),IkReal(x11314),IKFAST_ATAN2_MAGTHRESH);
if(!x11316.valid){
continue;
}
IkReal x11315=((1.0)*(x11316.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11315)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=((-1.0)*py*r20);
rxp0_2=(py*r00);
rxp1_0=(py*x11314);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11315)));
IkReal gconst4=((1.0)*r20);
IkReal gconst5=((1.0)*r21);
j4eval[0]=((((-1.0)*r01*r21))+(((-1.0)*r00*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11319=IKPowWithIntegerCheck(((((-1.0)*gconst4*r00))+(((-1.0)*gconst5*r01))),-1);
if(!x11319.valid){
continue;
}
IkReal x11317=x11319.value;
IkReal x11318=((1.0)*sj0*x11317);
cj4array[0]=((((-1.0)*cj1*sj2*x11318))+(((-1.0)*cj2*sj1*x11318)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11320=IKsin(j4);
IkReal x11321=IKcos(j4);
IkReal x11322=((1.0)*gconst5);
IkReal x11323=((1.0)*gconst4*r20);
evalcond[0]=(r12*x11320);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r12*x11321)));
evalcond[2]=((((-1.0)*r21*x11320*x11322))+(((-1.0)*x11320*x11323)));
evalcond[3]=((((-1.0)*gconst4*r00*x11320))+(((-1.0)*r01*x11320*x11322)));
evalcond[4]=((((-1.0)*r21*x11321*x11322))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*x11321*x11323)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11325=IKPowWithIntegerCheck(((((-1.0)*gconst5*r21))+(((-1.0)*gconst4*r20))),-1);
if(!x11325.valid){
continue;
}
IkReal x11324=x11325.value;
cj4array[0]=((((-1.0)*cj1*cj2*x11324))+((sj1*sj2*x11324)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11326=IKsin(j4);
IkReal x11327=IKcos(j4);
IkReal x11328=(gconst5*r01);
IkReal x11329=(gconst4*r00);
IkReal x11330=((1.0)*x11326);
IkReal x11331=((1.0)*x11327);
evalcond[0]=(r12*x11326);
evalcond[1]=((((-1.0)*r12*x11331))+(((-1.0)*sj0)));
evalcond[2]=((((-1.0)*gconst4*r20*x11330))+(((-1.0)*gconst5*r21*x11330)));
evalcond[3]=((((-1.0)*x11328*x11330))+(((-1.0)*x11329*x11330)));
evalcond[4]=(((cj1*sj0*sj2))+((cj2*sj0*sj1))+(((-1.0)*x11328*x11331))+(((-1.0)*x11329*x11331)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11332=IKPowWithIntegerCheck(r12,-1);
if(!x11332.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x11332.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11333=IKsin(j4);
IkReal x11334=IKcos(j4);
IkReal x11335=(gconst5*r21);
IkReal x11336=(gconst5*r01);
IkReal x11337=((1.0)*x11333);
IkReal x11338=((1.0)*x11334);
IkReal x11339=(gconst4*x11338);
evalcond[0]=(r12*x11333);
evalcond[1]=((((-1.0)*gconst4*r20*x11337))+(((-1.0)*x11335*x11337)));
evalcond[2]=((((-1.0)*x11336*x11337))+(((-1.0)*gconst4*r00*x11337)));
evalcond[3]=((((-1.0)*r20*x11339))+(((-1.0)*sj1*sj2))+(((-1.0)*x11335*x11338))+((cj1*cj2)));
evalcond[4]=((((-1.0)*r00*x11339))+(((-1.0)*x11336*x11338))+((cj1*sj0*sj2))+((cj2*sj0*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11342=IKPowWithIntegerCheck(r12,-1);
if(!x11342.valid){
continue;
}
IkReal x11340=x11342.value;
IkReal x11341=((1.0)*cj0);
CheckValue<IkReal> x11343=IKPowWithIntegerCheck(sj3,-1);
if(!x11343.valid){
continue;
}
if( IKabs((x11340*(x11343.value)*(((((-1.0)*cj1*sj2*x11341))+(((-1.0)*cj2*sj1*x11341)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x11340)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x11340*(x11343.value)*(((((-1.0)*cj1*sj2*x11341))+(((-1.0)*cj2*sj1*x11341))))))+IKsqr(((-1.0)*sj0*x11340))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x11340*(x11343.value)*(((((-1.0)*cj1*sj2*x11341))+(((-1.0)*cj2*sj1*x11341))))), ((-1.0)*sj0*x11340));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11344=IKsin(j4);
IkReal x11345=IKcos(j4);
IkReal x11346=(gconst4*r20);
IkReal x11347=(cj2*sj1);
IkReal x11348=((1.0)*cj3);
IkReal x11349=(gconst4*r21);
IkReal x11350=(gconst4*r00);
IkReal x11351=(gconst5*r00);
IkReal x11352=(gconst5*r21);
IkReal x11353=(gconst5*r20);
IkReal x11354=((1.0)*cj0);
IkReal x11355=((1.0)*sj3);
IkReal x11356=((1.0)*sj0);
IkReal x11357=(gconst5*r01);
IkReal x11358=(cj1*sj2);
IkReal x11359=(cj1*cj2);
IkReal x11360=(gconst4*r01);
IkReal x11361=((1.0)*x11344);
IkReal x11362=((1.0)*sj1*sj2);
IkReal x11363=(sj3*x11345);
evalcond[0]=((((-1.0)*x11356))+(((-1.0)*r12*x11345)));
evalcond[1]=((((-1.0)*x11352*x11361))+(((-1.0)*x11346*x11361)));
evalcond[2]=(((cj0*x11359))+((cj3*r12*x11344))+(((-1.0)*sj1*sj2*x11354)));
evalcond[3]=((((-1.0)*x11357*x11361))+(((-1.0)*x11354))+(((-1.0)*x11350*x11361)));
evalcond[4]=((((-1.0)*x11347*x11354))+(((-1.0)*r12*x11344*x11355))+(((-1.0)*x11354*x11358)));
evalcond[5]=((((-1.0)*x11348*x11353))+(((-1.0)*x11362))+((x11346*x11363))+x11359+((cj3*x11349))+((x11352*x11363)));
evalcond[6]=((((-1.0)*x11353*x11355))+(((-1.0)*x11345*x11348*x11352))+((sj3*x11349))+x11358+x11347+(((-1.0)*x11345*x11346*x11348)));
evalcond[7]=((((-1.0)*x11348*x11351))+((cj3*x11360))+((x11350*x11363))+((sj0*x11358))+((x11357*x11363))+((sj0*x11347)));
evalcond[8]=((((-1.0)*x11345*x11348*x11357))+(((-1.0)*x11345*x11348*x11350))+(((-1.0)*x11351*x11355))+((sj0*sj1*sj2))+(((-1.0)*x11356*x11359))+((sj3*x11360)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11365=IKPowWithIntegerCheck(r12,-1);
if(!x11365.valid){
continue;
}
IkReal x11364=x11365.value;
CheckValue<IkReal> x11366=IKPowWithIntegerCheck(cj3,-1);
if(!x11366.valid){
continue;
}
if( IKabs((x11364*(x11366.value)*(((((-1.0)*cj0*cj1*cj2))+((cj0*sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x11364)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x11364*(x11366.value)*(((((-1.0)*cj0*cj1*cj2))+((cj0*sj1*sj2))))))+IKsqr(((-1.0)*sj0*x11364))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x11364*(x11366.value)*(((((-1.0)*cj0*cj1*cj2))+((cj0*sj1*sj2))))), ((-1.0)*sj0*x11364));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11367=IKsin(j4);
IkReal x11368=IKcos(j4);
IkReal x11369=(gconst4*r20);
IkReal x11370=(cj2*sj1);
IkReal x11371=((1.0)*cj3);
IkReal x11372=(gconst4*r21);
IkReal x11373=(gconst4*r00);
IkReal x11374=(gconst5*r00);
IkReal x11375=(gconst5*r21);
IkReal x11376=(gconst5*r20);
IkReal x11377=((1.0)*cj0);
IkReal x11378=((1.0)*sj3);
IkReal x11379=((1.0)*sj0);
IkReal x11380=(gconst5*r01);
IkReal x11381=(cj1*sj2);
IkReal x11382=(cj1*cj2);
IkReal x11383=(gconst4*r01);
IkReal x11384=((1.0)*x11367);
IkReal x11385=((1.0)*sj1*sj2);
IkReal x11386=(sj3*x11368);
evalcond[0]=((((-1.0)*x11379))+(((-1.0)*r12*x11368)));
evalcond[1]=((((-1.0)*x11375*x11384))+(((-1.0)*x11369*x11384)));
evalcond[2]=(((cj0*x11382))+(((-1.0)*sj1*sj2*x11377))+((cj3*r12*x11367)));
evalcond[3]=((((-1.0)*x11380*x11384))+(((-1.0)*x11377))+(((-1.0)*x11373*x11384)));
evalcond[4]=((((-1.0)*x11370*x11377))+(((-1.0)*x11377*x11381))+(((-1.0)*r12*x11367*x11378)));
evalcond[5]=(((x11375*x11386))+((cj3*x11372))+x11382+(((-1.0)*x11385))+((x11369*x11386))+(((-1.0)*x11371*x11376)));
evalcond[6]=((((-1.0)*x11368*x11369*x11371))+x11370+x11381+(((-1.0)*x11368*x11371*x11375))+((sj3*x11372))+(((-1.0)*x11376*x11378)));
evalcond[7]=(((x11373*x11386))+((sj0*x11370))+((cj3*x11383))+((x11380*x11386))+((sj0*x11381))+(((-1.0)*x11371*x11374)));
evalcond[8]=((((-1.0)*x11374*x11378))+((sj3*x11383))+(((-1.0)*x11379*x11382))+(((-1.0)*x11368*x11371*x11373))+((sj0*sj1*sj2))+(((-1.0)*x11368*x11371*x11380)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11387=IKPowWithIntegerCheck(((((-1.0)*gconst4*r00))+(((-1.0)*gconst5*r01))),-1);
if(!x11387.valid){
continue;
}
CheckValue<IkReal> x11388=IKPowWithIntegerCheck(r12,-1);
if(!x11388.valid){
continue;
}
if( IKabs((cj0*(x11387.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x11388.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj0*(x11387.value)))+IKsqr(((-1.0)*sj0*(x11388.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((cj0*(x11387.value)), ((-1.0)*sj0*(x11388.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11389=IKsin(j4);
IkReal x11390=IKcos(j4);
IkReal x11391=(gconst4*r20);
IkReal x11392=(cj2*sj1);
IkReal x11393=((1.0)*cj3);
IkReal x11394=(gconst4*r21);
IkReal x11395=(gconst4*r00);
IkReal x11396=(gconst5*r00);
IkReal x11397=(gconst5*r21);
IkReal x11398=(gconst5*r20);
IkReal x11399=((1.0)*cj0);
IkReal x11400=((1.0)*sj3);
IkReal x11401=((1.0)*sj0);
IkReal x11402=(gconst5*r01);
IkReal x11403=(cj1*sj2);
IkReal x11404=(cj1*cj2);
IkReal x11405=(gconst4*r01);
IkReal x11406=((1.0)*x11389);
IkReal x11407=((1.0)*sj1*sj2);
IkReal x11408=(sj3*x11390);
evalcond[0]=((((-1.0)*x11401))+(((-1.0)*r12*x11390)));
evalcond[1]=((((-1.0)*x11391*x11406))+(((-1.0)*x11397*x11406)));
evalcond[2]=(((cj3*r12*x11389))+((cj0*x11404))+(((-1.0)*sj1*sj2*x11399)));
evalcond[3]=((((-1.0)*x11402*x11406))+(((-1.0)*x11399))+(((-1.0)*x11395*x11406)));
evalcond[4]=((((-1.0)*x11392*x11399))+(((-1.0)*r12*x11389*x11400))+(((-1.0)*x11399*x11403)));
evalcond[5]=((((-1.0)*x11393*x11398))+x11404+(((-1.0)*x11407))+((x11397*x11408))+((cj3*x11394))+((x11391*x11408)));
evalcond[6]=(((sj3*x11394))+x11403+(((-1.0)*x11390*x11393*x11397))+(((-1.0)*x11390*x11391*x11393))+x11392+(((-1.0)*x11398*x11400)));
evalcond[7]=((((-1.0)*x11393*x11396))+((cj3*x11405))+((x11395*x11408))+((sj0*x11392))+((sj0*x11403))+((x11402*x11408)));
evalcond[8]=((((-1.0)*x11390*x11393*x11395))+(((-1.0)*x11396*x11400))+((sj3*x11405))+(((-1.0)*x11401*x11404))+(((-1.0)*x11390*x11393*x11402))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11409=((1.0)*sj0);
CheckValue<IkReal> x11410 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r12))+((r02*sj0)))),IkReal((((cj0*gconst4*r10))+((cj0*gconst5*r11))+(((-1.0)*gconst4*r00*x11409))+(((-1.0)*gconst5*r01*x11409)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11410.valid){
continue;
}
CheckValue<IkReal> x11411=IKPowWithIntegerCheck(IKsign((((gconst5*r20))+(((-1.0)*gconst4*r21)))),-1);
if(!x11411.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11410.value)+(((1.5707963267949)*(x11411.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11412=IKsin(j4);
IkReal x11413=IKcos(j4);
IkReal x11414=(gconst4*r20);
IkReal x11415=(cj3*r11);
IkReal x11416=(cj2*sj1);
IkReal x11417=(cj3*gconst4);
IkReal x11418=(gconst5*r01);
IkReal x11419=(gconst4*r00);
IkReal x11420=(gconst4*r10);
IkReal x11421=(gconst5*r21);
IkReal x11422=((1.0)*cj0);
IkReal x11423=((1.0)*sj0);
IkReal x11424=(gconst5*r11);
IkReal x11425=(gconst4*sj3);
IkReal x11426=(cj1*cj2);
IkReal x11427=(cj1*sj2);
IkReal x11428=((1.0)*x11413);
IkReal x11429=(cj3*x11412);
IkReal x11430=((1.0)*x11412);
IkReal x11431=((1.0)*sj1*sj2);
IkReal x11432=(sj3*x11413);
IkReal x11433=((1.0)*cj3*gconst5);
IkReal x11434=((1.0)*gconst5*sj3);
evalcond[0]=((((-1.0)*x11421*x11430))+(((-1.0)*r22*x11428))+(((-1.0)*x11414*x11430)));
evalcond[1]=((((-1.0)*r02*x11428))+(((-1.0)*x11419*x11430))+(((-1.0)*x11422))+(((-1.0)*x11418*x11430)));
evalcond[2]=((((-1.0)*x11424*x11430))+(((-1.0)*r12*x11428))+(((-1.0)*x11420*x11430))+(((-1.0)*x11423)));
evalcond[3]=(x11426+((x11414*x11432))+((r21*x11417))+((x11421*x11432))+(((-1.0)*r20*x11433))+(((-1.0)*x11431))+(((-1.0)*r22*sj3*x11430)));
evalcond[4]=(x11416+x11427+((r21*x11425))+(((-1.0)*cj3*x11414*x11428))+((r22*x11429))+(((-1.0)*cj3*x11421*x11428))+(((-1.0)*r20*x11434)));
evalcond[5]=(((r01*x11417))+(((-1.0)*r00*x11433))+((sj0*x11427))+((sj0*x11416))+((x11419*x11432))+((x11418*x11432))+(((-1.0)*r02*sj3*x11430)));
evalcond[6]=(((r02*x11429))+(((-1.0)*r00*x11434))+(((-1.0)*cj3*x11418*x11428))+((r01*x11425))+((sj0*sj1*sj2))+(((-1.0)*x11423*x11426))+(((-1.0)*r00*x11417*x11428)));
evalcond[7]=((((-1.0)*x11416*x11422))+(((-1.0)*r10*x11433))+((gconst4*x11415))+(((-1.0)*r12*sj3*x11430))+((x11420*x11432))+((x11424*x11432))+(((-1.0)*x11422*x11427)));
evalcond[8]=((((-1.0)*gconst5*x11415*x11428))+((cj0*x11426))+(((-1.0)*r10*x11434))+(((-1.0)*sj1*sj2*x11422))+((r11*x11425))+(((-1.0)*r10*x11417*x11428))+((r12*x11429)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11435=((1.0)*sj0);
CheckValue<IkReal> x11436 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst5*r21*x11435))+(((-1.0)*gconst4*r20*x11435)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11436.valid){
continue;
}
CheckValue<IkReal> x11437=IKPowWithIntegerCheck(IKsign((((gconst4*r01))+(((-1.0)*gconst5*r00)))),-1);
if(!x11437.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11436.value)+(((1.5707963267949)*(x11437.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11438=IKsin(j4);
IkReal x11439=IKcos(j4);
IkReal x11440=(gconst4*r20);
IkReal x11441=(cj3*r11);
IkReal x11442=(cj2*sj1);
IkReal x11443=(cj3*gconst4);
IkReal x11444=(gconst5*r01);
IkReal x11445=(gconst4*r00);
IkReal x11446=(gconst4*r10);
IkReal x11447=(gconst5*r21);
IkReal x11448=((1.0)*cj0);
IkReal x11449=((1.0)*sj0);
IkReal x11450=(gconst5*r11);
IkReal x11451=(gconst4*sj3);
IkReal x11452=(cj1*cj2);
IkReal x11453=(cj1*sj2);
IkReal x11454=((1.0)*x11439);
IkReal x11455=(cj3*x11438);
IkReal x11456=((1.0)*x11438);
IkReal x11457=((1.0)*sj1*sj2);
IkReal x11458=(sj3*x11439);
IkReal x11459=((1.0)*cj3*gconst5);
IkReal x11460=((1.0)*gconst5*sj3);
evalcond[0]=((((-1.0)*x11440*x11456))+(((-1.0)*x11447*x11456))+(((-1.0)*r22*x11454)));
evalcond[1]=((((-1.0)*r02*x11454))+(((-1.0)*x11448))+(((-1.0)*x11444*x11456))+(((-1.0)*x11445*x11456)));
evalcond[2]=((((-1.0)*x11449))+(((-1.0)*r12*x11454))+(((-1.0)*x11450*x11456))+(((-1.0)*x11446*x11456)));
evalcond[3]=(((x11447*x11458))+x11452+(((-1.0)*r20*x11459))+(((-1.0)*r22*sj3*x11456))+((r21*x11443))+(((-1.0)*x11457))+((x11440*x11458)));
evalcond[4]=((((-1.0)*r20*x11460))+x11453+x11442+((r21*x11451))+(((-1.0)*cj3*x11440*x11454))+((r22*x11455))+(((-1.0)*cj3*x11447*x11454)));
evalcond[5]=((((-1.0)*r00*x11459))+((x11445*x11458))+((sj0*x11453))+((sj0*x11442))+(((-1.0)*r02*sj3*x11456))+((x11444*x11458))+((r01*x11443)));
evalcond[6]=(((r02*x11455))+(((-1.0)*x11449*x11452))+(((-1.0)*cj3*x11444*x11454))+(((-1.0)*r00*x11443*x11454))+((r01*x11451))+(((-1.0)*r00*x11460))+((sj0*sj1*sj2)));
evalcond[7]=((((-1.0)*x11448*x11453))+((x11446*x11458))+(((-1.0)*r10*x11459))+(((-1.0)*r12*sj3*x11456))+((x11450*x11458))+((gconst4*x11441))+(((-1.0)*x11442*x11448)));
evalcond[8]=((((-1.0)*r10*x11443*x11454))+((cj0*x11452))+(((-1.0)*gconst5*x11441*x11454))+((r12*x11455))+(((-1.0)*r10*x11460))+(((-1.0)*sj1*sj2*x11448))+((r11*x11451)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11461=((1.0)*cj0);
CheckValue<IkReal> x11462 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*gconst5*r21*x11461))+(((-1.0)*gconst4*r20*x11461)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11462.valid){
continue;
}
CheckValue<IkReal> x11463=IKPowWithIntegerCheck(IKsign((((gconst5*r10))+(((-1.0)*gconst4*r11)))),-1);
if(!x11463.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11462.value)+(((1.5707963267949)*(x11463.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11464=IKsin(j4);
IkReal x11465=IKcos(j4);
IkReal x11466=(gconst4*r20);
IkReal x11467=(cj3*r11);
IkReal x11468=(cj2*sj1);
IkReal x11469=(cj3*gconst4);
IkReal x11470=(gconst5*r01);
IkReal x11471=(gconst4*r00);
IkReal x11472=(gconst4*r10);
IkReal x11473=(gconst5*r21);
IkReal x11474=((1.0)*cj0);
IkReal x11475=((1.0)*sj0);
IkReal x11476=(gconst5*r11);
IkReal x11477=(gconst4*sj3);
IkReal x11478=(cj1*cj2);
IkReal x11479=(cj1*sj2);
IkReal x11480=((1.0)*x11465);
IkReal x11481=(cj3*x11464);
IkReal x11482=((1.0)*x11464);
IkReal x11483=((1.0)*sj1*sj2);
IkReal x11484=(sj3*x11465);
IkReal x11485=((1.0)*cj3*gconst5);
IkReal x11486=((1.0)*gconst5*sj3);
evalcond[0]=((((-1.0)*x11466*x11482))+(((-1.0)*x11473*x11482))+(((-1.0)*r22*x11480)));
evalcond[1]=((((-1.0)*r02*x11480))+(((-1.0)*x11474))+(((-1.0)*x11470*x11482))+(((-1.0)*x11471*x11482)));
evalcond[2]=((((-1.0)*r12*x11480))+(((-1.0)*x11472*x11482))+(((-1.0)*x11475))+(((-1.0)*x11476*x11482)));
evalcond[3]=(((x11466*x11484))+x11478+(((-1.0)*r22*sj3*x11482))+(((-1.0)*x11483))+((r21*x11469))+((x11473*x11484))+(((-1.0)*r20*x11485)));
evalcond[4]=((((-1.0)*cj3*x11466*x11480))+x11468+x11479+((r22*x11481))+(((-1.0)*cj3*x11473*x11480))+((r21*x11477))+(((-1.0)*r20*x11486)));
evalcond[5]=(((x11471*x11484))+((r01*x11469))+(((-1.0)*r02*sj3*x11482))+((x11470*x11484))+(((-1.0)*r00*x11485))+((sj0*x11479))+((sj0*x11468)));
evalcond[6]=((((-1.0)*x11475*x11478))+(((-1.0)*cj3*x11470*x11480))+(((-1.0)*r00*x11486))+((sj0*sj1*sj2))+(((-1.0)*r00*x11469*x11480))+((r02*x11481))+((r01*x11477)));
evalcond[7]=((((-1.0)*x11474*x11479))+(((-1.0)*x11468*x11474))+(((-1.0)*r10*x11485))+((x11476*x11484))+((gconst4*x11467))+((x11472*x11484))+(((-1.0)*r12*sj3*x11482)));
evalcond[8]=(((r11*x11477))+(((-1.0)*gconst5*x11467*x11480))+(((-1.0)*r10*x11469*x11480))+(((-1.0)*r10*x11486))+((cj0*x11478))+(((-1.0)*sj1*sj2*x11474))+((r12*x11481)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11488 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x11488)==0){
continue;
}
IkReal x11487=pow(x11488,-0.5);
CheckValue<IkReal> x11489 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x11489.valid){
continue;
}
IkReal gconst6=((-1.0)*(x11489.value));
IkReal gconst7=(r00*x11487);
IkReal gconst8=(r01*x11487);
CheckValue<IkReal> x11490 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x11490.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x11490.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x11493 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x11493.valid){
continue;
}
IkReal x11491=((-1.0)*(x11493.value));
IkReal x11492=x11487;
sj5=gconst7;
cj5=gconst8;
j5=x11491;
IkReal gconst6=x11491;
IkReal gconst7=(r00*x11492);
IkReal gconst8=(r01*x11492);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x11496 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x11496.valid){
continue;
}
IkReal x11494=((-1.0)*(x11496.value));
IkReal x11495=x11487;
sj5=gconst7;
cj5=gconst8;
j5=x11494;
IkReal gconst6=x11494;
IkReal gconst7=(r00*x11495);
IkReal gconst8=(r01*x11495);
IkReal x11497=r02*r02;
IkReal x11498=(cj0*r12);
IkReal x11499=((1.0)*x11497);
CheckValue<IkReal> x11503=IKPowWithIntegerCheck(((-1.0)+x11497),-1);
if(!x11503.valid){
continue;
}
IkReal x11500=x11503.value;
if((((1.0)+(((-1.0)*x11499)))) < -0.00001)
continue;
IkReal x11501=IKsqrt(((1.0)+(((-1.0)*x11499))));
IkReal x11502=(x11500*x11501);
j4eval[0]=((IKabs((((r02*sj0))+(((-1.0)*x11498)))))+(IKabs((((r02*x11498*x11502))+(((-1.0)*sj0*x11499*x11502))+((sj0*x11502))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x11506 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x11506.valid){
continue;
}
IkReal x11504=((-1.0)*(x11506.value));
IkReal x11505=x11487;
sj5=gconst7;
cj5=gconst8;
j5=x11504;
IkReal gconst6=x11504;
IkReal gconst7=(r00*x11505);
IkReal gconst8=(r01*x11505);
CheckValue<IkReal> x11510=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r02*r02)))),-1);
if(!x11510.valid){
continue;
}
IkReal x11507=x11510.value;
IkReal x11508=(sj3*x11507);
IkReal x11509=(((sj3*(r22*r22)))+((x11508*(r01*r01)*(r21*r21)))+(((2.0)*r00*r01*r20*r21*x11508))+((x11508*(r00*r00)*(r20*r20))));
j4eval[0]=x11509;
j4eval[1]=IKsign(x11509);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x11513 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x11513.valid){
continue;
}
IkReal x11511=((-1.0)*(x11513.value));
IkReal x11512=x11487;
sj5=gconst7;
cj5=gconst8;
j5=x11511;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst6=x11511;
IkReal gconst7=(r00*x11512);
IkReal gconst8=(r01*x11512);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x11516 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x11516.valid){
continue;
}
IkReal x11514=((-1.0)*(x11516.value));
IkReal x11515=x11487;
sj5=gconst7;
cj5=gconst8;
j5=x11514;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst6=x11514;
IkReal gconst7=(r00*x11515);
IkReal gconst8=(r01*x11515);
IkReal x11517=r02*r02;
IkReal x11518=(cj0*r12);
IkReal x11519=((1.0)*x11517);
CheckValue<IkReal> x11523=IKPowWithIntegerCheck(((-1.0)+x11517),-1);
if(!x11523.valid){
continue;
}
IkReal x11520=x11523.value;
if((((1.0)+(((-1.0)*x11519)))) < -0.00001)
continue;
IkReal x11521=IKsqrt(((1.0)+(((-1.0)*x11519))));
IkReal x11522=(x11520*x11521);
j4eval[0]=((IKabs(((((-1.0)*sj0*x11519*x11522))+((r02*x11518*x11522))+((sj0*x11522)))))+(IKabs(((((-1.0)*x11518))+((r02*sj0))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x11526 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x11526.valid){
continue;
}
IkReal x11524=((-1.0)*(x11526.value));
IkReal x11525=x11487;
sj5=gconst7;
cj5=gconst8;
j5=x11524;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst6=x11524;
IkReal gconst7=(r00*x11525);
IkReal gconst8=(r01*x11525);
IkReal x11527=r02*r02;
IkReal x11528=((1.0)+(((-1.0)*x11527)));
IkReal x11529=(cj2*r22*sj1);
IkReal x11530=(cj1*r22*sj2);
CheckValue<IkReal> x11537=IKPowWithIntegerCheck(x11528,-1);
if(!x11537.valid){
continue;
}
IkReal x11531=x11537.value;
CheckValue<IkReal> x11538=IKPowWithIntegerCheck(((-1.0)+x11527),-1);
if(!x11538.valid){
continue;
}
IkReal x11532=x11538.value;
IkReal x11533=((1.0)*x11531);
if((x11528) < -0.00001)
continue;
IkReal x11534=IKsqrt(x11528);
IkReal x11535=((1.0)*r02*x11532*x11534);
IkReal x11536=((((-2.0)*r00*r01*r20*r21*x11531))+(((-1.0)*x11533*(r01*r01)*(r21*r21)))+(((-1.0)*x11533*(r00*r00)*(r20*r20)))+(((-1.0)*(r22*r22))));
j4eval[0]=x11536;
j4eval[1]=IKsign(x11536);
j4eval[2]=((IKabs(((((-1.0)*x11530*x11535))+(((-1.0)*x11529*x11535)))))+(IKabs((x11530+x11529))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x11541 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x11541.valid){
continue;
}
IkReal x11539=((-1.0)*(x11541.value));
IkReal x11540=x11487;
sj5=gconst7;
cj5=gconst8;
j5=x11539;
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst6=x11539;
IkReal gconst7=(r00*x11540);
IkReal gconst8=(r01*x11540);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x11544 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x11544.valid){
continue;
}
IkReal x11542=((-1.0)*(x11544.value));
IkReal x11543=x11487;
sj5=gconst7;
cj5=gconst8;
j5=x11542;
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst6=x11542;
IkReal gconst7=(r00*x11543);
IkReal gconst8=(r01*x11543);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x11547 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x11547.valid){
continue;
}
IkReal x11545=((-1.0)*(x11547.value));
IkReal x11546=x11487;
sj5=gconst7;
cj5=gconst8;
j5=x11545;
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst6=x11545;
IkReal gconst7=(r00*x11546);
IkReal gconst8=(r01*x11546);
IkReal x11548=r02*r02;
IkReal x11549=(cj1*cj2);
IkReal x11550=((1.0)*sj1*sj2);
CheckValue<IkReal> x11554=IKPowWithIntegerCheck(((-1.0)+x11548),-1);
if(!x11554.valid){
continue;
}
IkReal x11551=x11554.value;
if((((1.0)+(((-1.0)*x11548)))) < -0.00001)
continue;
IkReal x11552=IKsqrt(((1.0)+(((-1.0)*x11548))));
IkReal x11553=(r02*r12*x11551*x11552);
j4eval[0]=((IKabs(((((-1.0)*x11550*x11553))+((x11549*x11553)))))+(IKabs(((((-1.0)*r12*x11550))+((r12*x11549))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11555=(gconst7*r10);
IkReal x11556=(gconst8*r11);
IkReal x11557=(cj1*cj2);
IkReal x11558=((1.0)*sj1*sj2);
CheckValue<IkReal> x11559=IKPowWithIntegerCheck(IKsign((((gconst7*r21))+(((-1.0)*gconst8*r20)))),-1);
if(!x11559.valid){
continue;
}
CheckValue<IkReal> x11560 = IKatan2WithCheck(IkReal(((((-1.0)*x11555*x11558))+((x11556*x11557))+((x11555*x11557))+(((-1.0)*x11556*x11558)))),IkReal((((r12*x11557))+(((-1.0)*r12*x11558)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11560.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11559.value)))+(x11560.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11561=IKcos(j4);
IkReal x11562=IKsin(j4);
IkReal x11563=(gconst7*r10);
IkReal x11564=(gconst7*r00);
IkReal x11565=(gconst7*r20);
IkReal x11566=(gconst8*r01);
IkReal x11567=(gconst8*r11);
IkReal x11568=(gconst8*r21);
IkReal x11569=((1.0)*x11561);
IkReal x11570=((1.0)*x11562);
evalcond[0]=((((-1.0)*x11567*x11569))+((r12*x11562))+(((-1.0)*x11563*x11569)));
evalcond[1]=((((-1.0)*x11568*x11570))+(((-1.0)*x11565*x11570))+(((-1.0)*r22*x11569)));
evalcond[2]=((((-1.0)*x11566*x11570))+(((-1.0)*x11564*x11570))+(((-1.0)*r02*x11569)));
evalcond[3]=((-1.0)+(((-1.0)*x11567*x11570))+(((-1.0)*r12*x11569))+(((-1.0)*x11563*x11570)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x11565*x11569))+((r22*x11562))+(((-1.0)*x11568*x11569)));
evalcond[5]=((((-1.0)*x11566*x11569))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x11562))+(((-1.0)*x11564*x11569)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11571=(gconst8*r11);
IkReal x11572=(gconst7*r10);
CheckValue<IkReal> x11573 = IKatan2WithCheck(IkReal(((((-1.0)*x11572))+(((-1.0)*x11571)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x11573.valid){
continue;
}
CheckValue<IkReal> x11574=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x11572*x11572)+(((2.0)*x11571*x11572))+(x11571*x11571))),-1);
if(!x11574.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11573.value)+(((1.5707963267949)*(x11574.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11575=IKcos(j4);
IkReal x11576=IKsin(j4);
IkReal x11577=(gconst7*r10);
IkReal x11578=(gconst7*r00);
IkReal x11579=(gconst7*r20);
IkReal x11580=(gconst8*r01);
IkReal x11581=(gconst8*r11);
IkReal x11582=(gconst8*r21);
IkReal x11583=((1.0)*x11575);
IkReal x11584=((1.0)*x11576);
evalcond[0]=((((-1.0)*x11577*x11583))+((r12*x11576))+(((-1.0)*x11581*x11583)));
evalcond[1]=((((-1.0)*x11579*x11584))+(((-1.0)*r22*x11583))+(((-1.0)*x11582*x11584)));
evalcond[2]=((((-1.0)*x11578*x11584))+(((-1.0)*r02*x11583))+(((-1.0)*x11580*x11584)));
evalcond[3]=((-1.0)+(((-1.0)*x11577*x11584))+(((-1.0)*r12*x11583))+(((-1.0)*x11581*x11584)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x11579*x11583))+((cj1*sj2))+((r22*x11576))+(((-1.0)*x11582*x11583)));
evalcond[5]=((((-1.0)*x11578*x11583))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11580*x11583))+((r02*x11576)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11585=((1.0)*gconst7);
CheckValue<IkReal> x11586 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x11585))+(((-1.0)*gconst8*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11586.valid){
continue;
}
CheckValue<IkReal> x11587=IKPowWithIntegerCheck(IKsign((((gconst8*r20))+(((-1.0)*r21*x11585)))),-1);
if(!x11587.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11586.value)+(((1.5707963267949)*(x11587.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11588=IKcos(j4);
IkReal x11589=IKsin(j4);
IkReal x11590=(gconst7*r10);
IkReal x11591=(gconst7*r00);
IkReal x11592=(gconst7*r20);
IkReal x11593=(gconst8*r01);
IkReal x11594=(gconst8*r11);
IkReal x11595=(gconst8*r21);
IkReal x11596=((1.0)*x11588);
IkReal x11597=((1.0)*x11589);
evalcond[0]=((((-1.0)*x11590*x11596))+(((-1.0)*x11594*x11596))+((r12*x11589)));
evalcond[1]=((((-1.0)*x11595*x11597))+(((-1.0)*x11592*x11597))+(((-1.0)*r22*x11596)));
evalcond[2]=((((-1.0)*x11593*x11597))+(((-1.0)*x11591*x11597))+(((-1.0)*r02*x11596)));
evalcond[3]=((-1.0)+(((-1.0)*x11590*x11597))+(((-1.0)*x11594*x11597))+(((-1.0)*r12*x11596)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x11595*x11596))+((r22*x11589))+(((-1.0)*x11592*x11596)));
evalcond[5]=((((-1.0)*x11593*x11596))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11591*x11596))+((r02*x11589)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x11600 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x11600.valid){
continue;
}
IkReal x11598=((-1.0)*(x11600.value));
IkReal x11599=x11487;
sj5=gconst7;
cj5=gconst8;
j5=x11598;
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst6=x11598;
IkReal gconst7=(r00*x11599);
IkReal gconst8=(r01*x11599);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x11603 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x11603.valid){
continue;
}
IkReal x11601=((-1.0)*(x11603.value));
IkReal x11602=x11487;
sj5=gconst7;
cj5=gconst8;
j5=x11601;
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst6=x11601;
IkReal gconst7=(r00*x11602);
IkReal gconst8=(r01*x11602);
IkReal x11604=((1.0)+(((-1.0)*(r02*r02))));
CheckValue<IkReal> x11608=IKPowWithIntegerCheck(x11604,-1);
if(!x11608.valid){
continue;
}
IkReal x11605=x11608.value;
IkReal x11606=((1.0)*x11605);
IkReal x11607=((((-2.0)*r00*r01*r10*r11*x11605))+(((-1.0)*x11606*(r00*r00)*(r10*r10)))+(((-1.0)*(r12*r12)))+(((-1.0)*x11606*(r01*r01)*(r11*r11))));
j4eval[0]=x11607;
j4eval[1]=IKsign(x11607);
j4eval[2]=r12;
j4eval[3]=x11604;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x11611 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x11611.valid){
continue;
}
IkReal x11609=((-1.0)*(x11611.value));
IkReal x11610=x11487;
sj5=gconst7;
cj5=gconst8;
j5=x11609;
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst6=x11609;
IkReal gconst7=(r00*x11610);
IkReal gconst8=(r01*x11610);
IkReal x11612=r02*r02;
IkReal x11613=(sj1*sj2);
IkReal x11614=((1.0)*cj1*cj2);
CheckValue<IkReal> x11618=IKPowWithIntegerCheck(((-1.0)+x11612),-1);
if(!x11618.valid){
continue;
}
IkReal x11615=x11618.value;
if((((1.0)+(((-1.0)*x11612)))) < -0.00001)
continue;
IkReal x11616=IKsqrt(((1.0)+(((-1.0)*x11612))));
IkReal x11617=(r02*r12*x11615*x11616);
j4eval[0]=((IKabs((((x11613*x11617))+(((-1.0)*x11614*x11617)))))+(IKabs((((r12*x11613))+(((-1.0)*r12*x11614))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11619=(gconst7*r10);
IkReal x11620=(sj1*sj2);
IkReal x11621=(gconst8*r11);
IkReal x11622=((1.0)*cj1*cj2);
CheckValue<IkReal> x11623 = IKatan2WithCheck(IkReal(((((-1.0)*x11619*x11622))+((x11619*x11620))+(((-1.0)*x11621*x11622))+((x11620*x11621)))),IkReal((((r12*x11620))+(((-1.0)*r12*x11622)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11623.valid){
continue;
}
CheckValue<IkReal> x11624=IKPowWithIntegerCheck(IKsign((((gconst7*r21))+(((-1.0)*gconst8*r20)))),-1);
if(!x11624.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11623.value)+(((1.5707963267949)*(x11624.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11625=IKcos(j4);
IkReal x11626=IKsin(j4);
IkReal x11627=(gconst7*r10);
IkReal x11628=(gconst7*r00);
IkReal x11629=(gconst7*r20);
IkReal x11630=(gconst8*r01);
IkReal x11631=(gconst8*r11);
IkReal x11632=(gconst8*r21);
IkReal x11633=((1.0)*x11625);
IkReal x11634=((1.0)*x11626);
evalcond[0]=(((r12*x11626))+(((-1.0)*x11631*x11633))+(((-1.0)*x11627*x11633)));
evalcond[1]=((((-1.0)*r22*x11633))+(((-1.0)*x11632*x11634))+(((-1.0)*x11629*x11634)));
evalcond[2]=((((-1.0)*r02*x11633))+(((-1.0)*x11628*x11634))+(((-1.0)*x11630*x11634)));
evalcond[3]=((1.0)+(((-1.0)*x11631*x11634))+(((-1.0)*r12*x11633))+(((-1.0)*x11627*x11634)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x11626))+(((-1.0)*x11632*x11633))+(((-1.0)*x11629*x11633)));
evalcond[5]=((((-1.0)*x11628*x11633))+(((-1.0)*sj1*sj2))+((r02*x11626))+(((-1.0)*x11630*x11633))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11635=(gconst8*r11);
IkReal x11636=(gconst7*r10);
CheckValue<IkReal> x11637 = IKatan2WithCheck(IkReal(((((-1.0)*x11636))+(((-1.0)*x11635)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x11637.valid){
continue;
}
CheckValue<IkReal> x11638=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r12*r12)))+(((-1.0)*(x11635*x11635)))+(((-2.0)*x11635*x11636))+(((-1.0)*(x11636*x11636))))),-1);
if(!x11638.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11637.value)+(((1.5707963267949)*(x11638.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11639=IKcos(j4);
IkReal x11640=IKsin(j4);
IkReal x11641=(gconst7*r10);
IkReal x11642=(gconst7*r00);
IkReal x11643=(gconst7*r20);
IkReal x11644=(gconst8*r01);
IkReal x11645=(gconst8*r11);
IkReal x11646=(gconst8*r21);
IkReal x11647=((1.0)*x11639);
IkReal x11648=((1.0)*x11640);
evalcond[0]=((((-1.0)*x11641*x11647))+((r12*x11640))+(((-1.0)*x11645*x11647)));
evalcond[1]=((((-1.0)*x11646*x11648))+(((-1.0)*x11643*x11648))+(((-1.0)*r22*x11647)));
evalcond[2]=((((-1.0)*x11642*x11648))+(((-1.0)*x11644*x11648))+(((-1.0)*r02*x11647)));
evalcond[3]=((1.0)+(((-1.0)*r12*x11647))+(((-1.0)*x11641*x11648))+(((-1.0)*x11645*x11648)));
evalcond[4]=((((-1.0)*x11646*x11647))+((cj2*sj1))+(((-1.0)*x11643*x11647))+((cj1*sj2))+((r22*x11640)));
evalcond[5]=((((-1.0)*x11642*x11647))+(((-1.0)*sj1*sj2))+((r02*x11640))+((cj1*cj2))+(((-1.0)*x11644*x11647)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11649=((1.0)*gconst8);
CheckValue<IkReal> x11650=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x11649))+((gconst7*r21)))),-1);
if(!x11650.valid){
continue;
}
CheckValue<IkReal> x11651 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*gconst7*r00))+(((-1.0)*r01*x11649)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11651.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11650.value)))+(x11651.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11652=IKcos(j4);
IkReal x11653=IKsin(j4);
IkReal x11654=(gconst7*r10);
IkReal x11655=(gconst7*r00);
IkReal x11656=(gconst7*r20);
IkReal x11657=(gconst8*r01);
IkReal x11658=(gconst8*r11);
IkReal x11659=(gconst8*r21);
IkReal x11660=((1.0)*x11652);
IkReal x11661=((1.0)*x11653);
evalcond[0]=((((-1.0)*x11654*x11660))+((r12*x11653))+(((-1.0)*x11658*x11660)));
evalcond[1]=((((-1.0)*x11659*x11661))+(((-1.0)*r22*x11660))+(((-1.0)*x11656*x11661)));
evalcond[2]=((((-1.0)*x11655*x11661))+(((-1.0)*r02*x11660))+(((-1.0)*x11657*x11661)));
evalcond[3]=((1.0)+(((-1.0)*x11654*x11661))+(((-1.0)*r12*x11660))+(((-1.0)*x11658*x11661)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x11659*x11660))+((cj1*sj2))+((r22*x11653))+(((-1.0)*x11656*x11660)));
evalcond[5]=((((-1.0)*x11655*x11660))+(((-1.0)*sj1*sj2))+((r02*x11653))+((cj1*cj2))+(((-1.0)*x11657*x11660)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11662=((-1.0)*py);
CheckValue<IkReal> x11664 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x11664.valid){
continue;
}
IkReal x11663=((-1.0)*(x11664.value));
sj5=gconst7;
cj5=gconst8;
j5=x11663;
sj3=0;
cj3=1.0;
j3=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x11662);
rxp0_2=(py*r00);
rxp1_0=(r21*x11662);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst6=x11663;
IkReal gconst7=r00;
IkReal gconst8=r01;
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11665=((-1.0)*py);
CheckValue<IkReal> x11667 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x11667.valid){
continue;
}
IkReal x11666=((-1.0)*(x11667.value));
sj5=gconst7;
cj5=gconst8;
j5=x11666;
sj3=0;
cj3=1.0;
j3=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x11665);
rxp0_2=(py*r00);
rxp1_0=(r21*x11665);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst6=x11666;
IkReal gconst7=r00;
IkReal gconst8=r01;
j4eval[0]=((((-1.0)*r01*r21))+(((-1.0)*r00*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11668=((-1.0)*py);
CheckValue<IkReal> x11670 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x11670.valid){
continue;
}
IkReal x11669=((-1.0)*(x11670.value));
sj5=gconst7;
cj5=gconst8;
j5=x11669;
sj3=0;
cj3=1.0;
j3=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x11668);
rxp0_2=(py*r00);
rxp1_0=(r21*x11668);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst6=x11669;
IkReal gconst7=r00;
IkReal gconst8=r01;
j4eval[0]=-1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11673=IKPowWithIntegerCheck(((((-1.0)*gconst8*r01))+(((-1.0)*gconst7*r00))),-1);
if(!x11673.valid){
continue;
}
IkReal x11671=x11673.value;
IkReal x11672=(sj0*x11671);
cj4array[0]=(((cj1*cj2*x11672))+(((-1.0)*sj1*sj2*x11672)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11674=IKsin(j4);
IkReal x11675=IKcos(j4);
IkReal x11676=((1.0)*gconst7);
IkReal x11677=((1.0)*x11675);
IkReal x11678=((1.0)*gconst8*x11674);
evalcond[0]=(r12*x11674);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r12*x11677)));
evalcond[2]=((((-1.0)*r21*x11678))+(((-1.0)*r20*x11674*x11676)));
evalcond[3]=((((-1.0)*r00*x11674*x11676))+(((-1.0)*r01*x11678)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst8*r21*x11677))+(((-1.0)*r20*x11675*x11676)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11681=IKPowWithIntegerCheck(((((-1.0)*gconst7*r20))+(((-1.0)*gconst8*r21))),-1);
if(!x11681.valid){
continue;
}
IkReal x11679=x11681.value;
IkReal x11680=((1.0)*x11679);
cj4array[0]=((((-1.0)*cj2*sj1*x11680))+(((-1.0)*cj1*sj2*x11680)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11682=IKsin(j4);
IkReal x11683=IKcos(j4);
IkReal x11684=((1.0)*sj0);
IkReal x11685=((1.0)*gconst7*r00);
IkReal x11686=((1.0)*x11683);
IkReal x11687=((1.0)*gconst8*x11682);
evalcond[0]=(r12*x11682);
evalcond[1]=((((-1.0)*x11684))+(((-1.0)*r12*x11686)));
evalcond[2]=((((-1.0)*gconst7*r20*x11682))+(((-1.0)*r21*x11687)));
evalcond[3]=((((-1.0)*r01*x11687))+(((-1.0)*x11682*x11685)));
evalcond[4]=((((-1.0)*gconst8*r01*x11686))+((sj0*sj1*sj2))+(((-1.0)*cj1*cj2*x11684))+(((-1.0)*x11683*x11685)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11688=IKPowWithIntegerCheck(r12,-1);
if(!x11688.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x11688.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11689=IKsin(j4);
IkReal x11690=IKcos(j4);
IkReal x11691=(gconst8*r21);
IkReal x11692=(gconst7*r00);
IkReal x11693=(gconst7*r20);
IkReal x11694=((1.0)*gconst8*r01);
IkReal x11695=((1.0)*x11689);
IkReal x11696=((1.0)*x11690);
evalcond[0]=(r12*x11689);
evalcond[1]=((((-1.0)*x11691*x11695))+(((-1.0)*x11693*x11695)));
evalcond[2]=((((-1.0)*x11689*x11694))+(((-1.0)*x11692*x11695)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x11691*x11696))+(((-1.0)*x11693*x11696)));
evalcond[4]=((((-1.0)*x11690*x11694))+(((-1.0)*cj1*cj2*sj0))+(((-1.0)*x11692*x11696))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x11699 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x11699.valid){
continue;
}
IkReal x11697=((-1.0)*(x11699.value));
IkReal x11698=x11487;
sj5=gconst7;
cj5=gconst8;
j5=x11697;
sj3=0;
cj3=1.0;
j3=0;
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst6=x11697;
IkReal gconst7=(r00*x11698);
IkReal gconst8=(r01*x11698);
IkReal x11700=r02*r02;
IkReal x11701=(cj0*r12);
IkReal x11702=((1.0)*x11700);
CheckValue<IkReal> x11706=IKPowWithIntegerCheck(((-1.0)+x11700),-1);
if(!x11706.valid){
continue;
}
IkReal x11703=x11706.value;
if((((1.0)+(((-1.0)*x11702)))) < -0.00001)
continue;
IkReal x11704=IKsqrt(((1.0)+(((-1.0)*x11702))));
IkReal x11705=(x11703*x11704);
j4eval[0]=((IKabs((((r02*sj0))+(((-1.0)*x11701)))))+(IKabs(((((-1.0)*sj0*x11702*x11705))+((r02*x11701*x11705))+((sj0*x11705))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x11709 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x11709.valid){
continue;
}
IkReal x11707=((-1.0)*(x11709.value));
IkReal x11708=x11487;
sj5=gconst7;
cj5=gconst8;
j5=x11707;
sj3=0;
cj3=1.0;
j3=0;
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst6=x11707;
IkReal gconst7=(r00*x11708);
IkReal gconst8=(r01*x11708);
IkReal x11710=r02*r02;
CheckValue<IkReal> x11713=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x11710))),-1);
if(!x11713.valid){
continue;
}
IkReal x11711=x11713.value;
IkReal x11712=(x11710+((x11711*(r00*r00*r00*r00)))+(((2.0)*x11711*(r00*r00)*(r01*r01)))+((x11711*(r01*r01*r01*r01))));
j4eval[0]=x11712;
j4eval[1]=IKsign(x11712);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11714=(gconst8*r21);
IkReal x11715=((1.0)*cj0);
IkReal x11716=(gconst7*r20);
IkReal x11717=((1.0)*cj2*sj1);
IkReal x11718=((1.0)*cj1*sj2);
CheckValue<IkReal> x11719=IKPowWithIntegerCheck((((gconst7*r00*x11714))+((gconst7*r00*x11716))+((gconst8*r01*x11716))+((gconst8*r01*x11714))),-1);
if(!x11719.valid){
continue;
}
CheckValue<IkReal> x11720=IKPowWithIntegerCheck(((((-1.0)*x11714))+(((-1.0)*x11716))),-1);
if(!x11720.valid){
continue;
}
if( IKabs(((x11719.value)*(((((-1.0)*x11715*x11716))+(((-1.0)*r02*x11718))+(((-1.0)*r02*x11717))+(((-1.0)*x11714*x11715)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11720.value)*(((((-1.0)*x11718))+(((-1.0)*x11717)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11719.value)*(((((-1.0)*x11715*x11716))+(((-1.0)*r02*x11718))+(((-1.0)*r02*x11717))+(((-1.0)*x11714*x11715))))))+IKsqr(((x11720.value)*(((((-1.0)*x11718))+(((-1.0)*x11717))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x11719.value)*(((((-1.0)*x11715*x11716))+(((-1.0)*r02*x11718))+(((-1.0)*r02*x11717))+(((-1.0)*x11714*x11715))))), ((x11720.value)*(((((-1.0)*x11718))+(((-1.0)*x11717))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11721=IKsin(j4);
IkReal x11722=IKcos(j4);
IkReal x11723=((1.0)*gconst7);
IkReal x11724=(gconst8*r01);
IkReal x11725=((1.0)*sj0);
IkReal x11726=(gconst8*r11);
IkReal x11727=(cj1*cj2);
IkReal x11728=(gconst8*r21);
IkReal x11729=((1.0)*cj0);
IkReal x11730=(sj1*sj2);
IkReal x11731=((1.0)*x11722);
IkReal x11732=((1.0)*x11721);
evalcond[0]=((((-1.0)*x11728*x11732))+(((-1.0)*r20*x11721*x11723)));
evalcond[1]=((((-1.0)*x11728*x11731))+((cj2*sj1))+(((-1.0)*r20*x11722*x11723))+((cj1*sj2)));
evalcond[2]=((((-1.0)*x11729))+(((-1.0)*x11724*x11732))+(((-1.0)*r00*x11721*x11723))+(((-1.0)*r02*x11731)));
evalcond[3]=((((-1.0)*x11726*x11732))+(((-1.0)*x11725))+(((-1.0)*r10*x11721*x11723))+(((-1.0)*r12*x11731)));
evalcond[4]=(((sj0*x11730))+(((-1.0)*r00*x11722*x11723))+((r02*x11721))+(((-1.0)*x11724*x11731))+(((-1.0)*x11725*x11727)));
evalcond[5]=((((-1.0)*x11726*x11731))+((r12*x11721))+(((-1.0)*x11729*x11730))+((cj0*x11727))+(((-1.0)*r10*x11722*x11723)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11733=(gconst7*r00);
IkReal x11734=((1.0)*cj0);
IkReal x11735=(gconst8*r01);
IkReal x11736=((1.0)*sj0);
IkReal x11737=(cj1*cj2);
IkReal x11738=(sj1*sj2);
CheckValue<IkReal> x11739=IKPowWithIntegerCheck(IKsign(((x11733*x11733)+(((2.0)*x11733*x11735))+(r02*r02)+(x11735*x11735))),-1);
if(!x11739.valid){
continue;
}
CheckValue<IkReal> x11740 = IKatan2WithCheck(IkReal(((((-1.0)*x11734*x11735))+(((-1.0)*r02*x11736*x11738))+((r02*sj0*x11737))+(((-1.0)*x11733*x11734)))),IkReal(((((-1.0)*x11735*x11736*x11737))+(((-1.0)*x11733*x11736*x11737))+((sj0*x11733*x11738))+((sj0*x11735*x11738))+(((-1.0)*r02*x11734)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11740.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11739.value)))+(x11740.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11741=IKsin(j4);
IkReal x11742=IKcos(j4);
IkReal x11743=((1.0)*gconst7);
IkReal x11744=(gconst8*r01);
IkReal x11745=((1.0)*sj0);
IkReal x11746=(gconst8*r11);
IkReal x11747=(cj1*cj2);
IkReal x11748=(gconst8*r21);
IkReal x11749=((1.0)*cj0);
IkReal x11750=(sj1*sj2);
IkReal x11751=((1.0)*x11742);
IkReal x11752=((1.0)*x11741);
evalcond[0]=((((-1.0)*r20*x11741*x11743))+(((-1.0)*x11748*x11752)));
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x11748*x11751))+(((-1.0)*r20*x11742*x11743)));
evalcond[2]=((((-1.0)*x11749))+(((-1.0)*r02*x11751))+(((-1.0)*x11744*x11752))+(((-1.0)*r00*x11741*x11743)));
evalcond[3]=((((-1.0)*r12*x11751))+(((-1.0)*r10*x11741*x11743))+(((-1.0)*x11745))+(((-1.0)*x11746*x11752)));
evalcond[4]=((((-1.0)*r00*x11742*x11743))+((sj0*x11750))+(((-1.0)*x11744*x11751))+((r02*x11741))+(((-1.0)*x11745*x11747)));
evalcond[5]=(((cj0*x11747))+(((-1.0)*x11749*x11750))+(((-1.0)*r10*x11742*x11743))+(((-1.0)*x11746*x11751))+((r12*x11741)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11753=((1.0)*sj0);
CheckValue<IkReal> x11754 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r12))+((r02*sj0)))),IkReal((((cj0*gconst8*r11))+((cj0*gconst7*r10))+(((-1.0)*gconst8*r01*x11753))+(((-1.0)*gconst7*r00*x11753)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11754.valid){
continue;
}
CheckValue<IkReal> x11755=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst7*r21))+((gconst8*r20)))),-1);
if(!x11755.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11754.value)+(((1.5707963267949)*(x11755.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11756=IKsin(j4);
IkReal x11757=IKcos(j4);
IkReal x11758=((1.0)*gconst7);
IkReal x11759=(gconst8*r01);
IkReal x11760=((1.0)*sj0);
IkReal x11761=(gconst8*r11);
IkReal x11762=(cj1*cj2);
IkReal x11763=(gconst8*r21);
IkReal x11764=((1.0)*cj0);
IkReal x11765=(sj1*sj2);
IkReal x11766=((1.0)*x11757);
IkReal x11767=((1.0)*x11756);
evalcond[0]=((((-1.0)*r20*x11756*x11758))+(((-1.0)*x11763*x11767)));
evalcond[1]=(((cj2*sj1))+(((-1.0)*r20*x11757*x11758))+((cj1*sj2))+(((-1.0)*x11763*x11766)));
evalcond[2]=((((-1.0)*r02*x11766))+(((-1.0)*r00*x11756*x11758))+(((-1.0)*x11764))+(((-1.0)*x11759*x11767)));
evalcond[3]=((((-1.0)*r12*x11766))+(((-1.0)*x11760))+(((-1.0)*r10*x11756*x11758))+(((-1.0)*x11761*x11767)));
evalcond[4]=(((r02*x11756))+(((-1.0)*x11760*x11762))+((sj0*x11765))+(((-1.0)*r00*x11757*x11758))+(((-1.0)*x11759*x11766)));
evalcond[5]=(((cj0*x11762))+(((-1.0)*r10*x11757*x11758))+((r12*x11756))+(((-1.0)*x11764*x11765))+(((-1.0)*x11761*x11766)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11768=(gconst7*r20);
IkReal x11769=(cj2*sj1);
IkReal x11770=(gconst8*r21);
IkReal x11771=(cj1*sj2);
CheckValue<IkReal> x11772 = IKatan2WithCheck(IkReal((((r22*x11769))+((r22*x11771)))),IkReal(((((-1.0)*x11770*x11771))+(((-1.0)*x11769*x11770))+(((-1.0)*x11768*x11769))+(((-1.0)*x11768*x11771)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11772.valid){
continue;
}
CheckValue<IkReal> x11773=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x11770*x11770)))+(((-2.0)*x11768*x11770))+(((-1.0)*(r22*r22)))+(((-1.0)*(x11768*x11768))))),-1);
if(!x11773.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11772.value)+(((1.5707963267949)*(x11773.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11774=IKsin(j4);
IkReal x11775=IKcos(j4);
IkReal x11776=(gconst7*r10);
IkReal x11777=(gconst7*r00);
IkReal x11778=(gconst7*r20);
IkReal x11779=(gconst8*r01);
IkReal x11780=((1.0)*sj0);
IkReal x11781=(gconst8*r11);
IkReal x11782=(cj1*cj2);
IkReal x11783=(gconst8*r21);
IkReal x11784=((1.0)*cj0);
IkReal x11785=(sj1*sj2);
IkReal x11786=((1.0)*x11775);
IkReal x11787=((1.0)*x11774);
evalcond[0]=((((-1.0)*x11778*x11787))+(((-1.0)*r22*x11786))+(((-1.0)*x11783*x11787)));
evalcond[1]=((((-1.0)*x11779*x11787))+(((-1.0)*x11777*x11787))+(((-1.0)*r02*x11786))+(((-1.0)*x11784)));
evalcond[2]=((((-1.0)*r12*x11786))+(((-1.0)*x11781*x11787))+(((-1.0)*x11776*x11787))+(((-1.0)*x11780)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x11778*x11786))+((cj1*sj2))+(((-1.0)*x11783*x11786))+((r22*x11774)));
evalcond[4]=((((-1.0)*x11779*x11786))+(((-1.0)*x11780*x11782))+((r02*x11774))+((sj0*x11785))+(((-1.0)*x11777*x11786)));
evalcond[5]=(((r12*x11774))+((cj0*x11782))+(((-1.0)*x11784*x11785))+(((-1.0)*x11781*x11786))+(((-1.0)*x11776*x11786)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11788=((1.0)*sj0);
CheckValue<IkReal> x11789=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst7*r21))+((gconst8*r20)))),-1);
if(!x11789.valid){
continue;
}
CheckValue<IkReal> x11790 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r12))+((r02*sj0)))),IkReal((((cj0*gconst8*r11))+((cj0*gconst7*r10))+(((-1.0)*gconst7*r00*x11788))+(((-1.0)*gconst8*r01*x11788)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11790.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11789.value)))+(x11790.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11791=IKsin(j4);
IkReal x11792=IKcos(j4);
IkReal x11793=(gconst7*r10);
IkReal x11794=(gconst7*r00);
IkReal x11795=(gconst7*r20);
IkReal x11796=(gconst8*r01);
IkReal x11797=((1.0)*sj0);
IkReal x11798=(gconst8*r11);
IkReal x11799=(cj1*cj2);
IkReal x11800=(gconst8*r21);
IkReal x11801=((1.0)*cj0);
IkReal x11802=(sj1*sj2);
IkReal x11803=((1.0)*x11792);
IkReal x11804=((1.0)*x11791);
evalcond[0]=((((-1.0)*x11795*x11804))+(((-1.0)*r22*x11803))+(((-1.0)*x11800*x11804)));
evalcond[1]=((((-1.0)*x11794*x11804))+(((-1.0)*x11801))+(((-1.0)*x11796*x11804))+(((-1.0)*r02*x11803)));
evalcond[2]=((((-1.0)*x11793*x11804))+(((-1.0)*x11798*x11804))+(((-1.0)*r12*x11803))+(((-1.0)*x11797)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x11795*x11803))+((cj1*sj2))+((r22*x11791))+(((-1.0)*x11800*x11803)));
evalcond[4]=((((-1.0)*x11794*x11803))+(((-1.0)*x11797*x11799))+((r02*x11791))+(((-1.0)*x11796*x11803))+((sj0*x11802)));
evalcond[5]=(((r12*x11791))+(((-1.0)*x11793*x11803))+(((-1.0)*x11798*x11803))+(((-1.0)*x11801*x11802))+((cj0*x11799)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11805=((1.0)*cj0);
CheckValue<IkReal> x11806 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*gconst8*r21*x11805))+(((-1.0)*gconst7*r20*x11805)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11806.valid){
continue;
}
CheckValue<IkReal> x11807=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst7*r11))+((gconst8*r10)))),-1);
if(!x11807.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11806.value)+(((1.5707963267949)*(x11807.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11808=IKsin(j4);
IkReal x11809=IKcos(j4);
IkReal x11810=(gconst7*r10);
IkReal x11811=(gconst7*r00);
IkReal x11812=(gconst7*r20);
IkReal x11813=(gconst8*r01);
IkReal x11814=((1.0)*sj0);
IkReal x11815=(gconst8*r11);
IkReal x11816=(cj1*cj2);
IkReal x11817=(gconst8*r21);
IkReal x11818=((1.0)*cj0);
IkReal x11819=(sj1*sj2);
IkReal x11820=((1.0)*x11809);
IkReal x11821=((1.0)*x11808);
evalcond[0]=((((-1.0)*r22*x11820))+(((-1.0)*x11812*x11821))+(((-1.0)*x11817*x11821)));
evalcond[1]=((((-1.0)*x11813*x11821))+(((-1.0)*x11811*x11821))+(((-1.0)*r02*x11820))+(((-1.0)*x11818)));
evalcond[2]=((((-1.0)*x11810*x11821))+(((-1.0)*r12*x11820))+(((-1.0)*x11814))+(((-1.0)*x11815*x11821)));
evalcond[3]=(((cj2*sj1))+((r22*x11808))+((cj1*sj2))+(((-1.0)*x11812*x11820))+(((-1.0)*x11817*x11820)));
evalcond[4]=((((-1.0)*x11813*x11820))+((sj0*x11819))+((r02*x11808))+(((-1.0)*x11811*x11820))+(((-1.0)*x11814*x11816)));
evalcond[5]=((((-1.0)*x11810*x11820))+(((-1.0)*x11818*x11819))+((r12*x11808))+((cj0*x11816))+(((-1.0)*x11815*x11820)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x11824 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x11824.valid){
continue;
}
IkReal x11822=((-1.0)*(x11824.value));
IkReal x11823=x11487;
sj5=gconst7;
cj5=gconst8;
j5=x11822;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst6=x11822;
IkReal gconst7=(r00*x11823);
IkReal gconst8=(r01*x11823);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x11827 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x11827.valid){
continue;
}
IkReal x11825=((-1.0)*(x11827.value));
IkReal x11826=x11487;
sj5=gconst7;
cj5=gconst8;
j5=x11825;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst6=x11825;
IkReal gconst7=(r00*x11826);
IkReal gconst8=(r01*x11826);
IkReal x11828=r02*r02;
IkReal x11829=(cj0*r12);
IkReal x11830=((1.0)*x11828);
CheckValue<IkReal> x11834=IKPowWithIntegerCheck(((-1.0)+x11828),-1);
if(!x11834.valid){
continue;
}
IkReal x11831=x11834.value;
if((((1.0)+(((-1.0)*x11830)))) < -0.00001)
continue;
IkReal x11832=IKsqrt(((1.0)+(((-1.0)*x11830))));
IkReal x11833=(x11831*x11832);
j4eval[0]=((IKabs((((r02*x11829*x11833))+(((-1.0)*sj0*x11830*x11833))+((sj0*x11833)))))+(IKabs(((((-1.0)*x11829))+((r02*sj0))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x11837 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x11837.valid){
continue;
}
IkReal x11835=((-1.0)*(x11837.value));
IkReal x11836=x11487;
sj5=gconst7;
cj5=gconst8;
j5=x11835;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst6=x11835;
IkReal gconst7=(r00*x11836);
IkReal gconst8=(r01*x11836);
IkReal x11838=r02*r02;
IkReal x11839=(cj1*r22*sj2);
IkReal x11840=(cj2*r22*sj1);
CheckValue<IkReal> x11844=IKPowWithIntegerCheck(((-1.0)+x11838),-1);
if(!x11844.valid){
continue;
}
IkReal x11841=x11844.value;
if((((1.0)+(((-1.0)*x11838)))) < -0.00001)
continue;
IkReal x11842=IKsqrt(((1.0)+(((-1.0)*x11838))));
IkReal x11843=((1.0)*r02*x11841*x11842);
j4eval[0]=((IKabs((x11840+x11839)))+(IKabs(((((-1.0)*x11840*x11843))+(((-1.0)*x11839*x11843))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x11847 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x11847.valid){
continue;
}
IkReal x11845=((-1.0)*(x11847.value));
IkReal x11846=x11487;
sj5=gconst7;
cj5=gconst8;
j5=x11845;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst6=x11845;
IkReal gconst7=(r00*x11846);
IkReal gconst8=(r01*x11846);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x11850 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x11850.valid){
continue;
}
IkReal x11848=((-1.0)*(x11850.value));
IkReal x11849=x11487;
sj5=gconst7;
cj5=gconst8;
j5=x11848;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst6=x11848;
IkReal gconst7=(r00*x11849);
IkReal gconst8=(r01*x11849);
IkReal x11851=((1.0)+(((-1.0)*(r02*r02))));
CheckValue<IkReal> x11855=IKPowWithIntegerCheck(x11851,-1);
if(!x11855.valid){
continue;
}
IkReal x11852=x11855.value;
IkReal x11853=((1.0)*x11852);
IkReal x11854=((((-1.0)*x11853*(r00*r00)*(r10*r10)))+(((-1.0)*(r12*r12)))+(((-1.0)*x11853*(r01*r01)*(r11*r11)))+(((-2.0)*r00*r01*r10*r11*x11852)));
j4eval[0]=x11854;
j4eval[1]=IKsign(x11854);
j4eval[2]=r12;
j4eval[3]=x11851;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x11858 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x11858.valid){
continue;
}
IkReal x11856=((-1.0)*(x11858.value));
IkReal x11857=x11487;
sj5=gconst7;
cj5=gconst8;
j5=x11856;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst6=x11856;
IkReal gconst7=(r00*x11857);
IkReal gconst8=(r01*x11857);
IkReal x11859=r02*r02;
IkReal x11860=(sj1*sj2);
IkReal x11861=((1.0)*cj1*cj2);
CheckValue<IkReal> x11865=IKPowWithIntegerCheck(((-1.0)+x11859),-1);
if(!x11865.valid){
continue;
}
IkReal x11862=x11865.value;
if((((1.0)+(((-1.0)*x11859)))) < -0.00001)
continue;
IkReal x11863=IKsqrt(((1.0)+(((-1.0)*x11859))));
IkReal x11864=(r02*r12*x11862*x11863);
j4eval[0]=((IKabs((((r12*x11860))+(((-1.0)*r12*x11861)))))+(IKabs(((((-1.0)*x11861*x11864))+((x11860*x11864))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11866=(gconst7*r10);
IkReal x11867=(sj1*sj2);
IkReal x11868=(gconst8*r11);
IkReal x11869=((1.0)*cj1*cj2);
CheckValue<IkReal> x11870 = IKatan2WithCheck(IkReal(((((-1.0)*x11868*x11869))+(((-1.0)*x11866*x11869))+((x11866*x11867))+((x11867*x11868)))),IkReal((((r12*x11867))+(((-1.0)*r12*x11869)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11870.valid){
continue;
}
CheckValue<IkReal> x11871=IKPowWithIntegerCheck(IKsign((((gconst7*r21))+(((-1.0)*gconst8*r20)))),-1);
if(!x11871.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11870.value)+(((1.5707963267949)*(x11871.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11872=IKcos(j4);
IkReal x11873=IKsin(j4);
IkReal x11874=((1.0)*x11872);
IkReal x11875=(gconst8*x11872);
IkReal x11876=(gconst7*x11872);
IkReal x11877=((1.0)*x11873);
IkReal x11878=(gconst7*x11877);
evalcond[0]=(((r10*x11876))+((r11*x11875))+(((-1.0)*r12*x11877)));
evalcond[1]=((((-1.0)*r22*x11874))+(((-1.0)*gconst8*r21*x11877))+(((-1.0)*r20*x11878)));
evalcond[2]=((((-1.0)*gconst8*r01*x11877))+(((-1.0)*r02*x11874))+(((-1.0)*r00*x11878)));
evalcond[3]=((-1.0)+(((-1.0)*gconst8*r11*x11877))+(((-1.0)*r10*x11878))+(((-1.0)*r12*x11874)));
evalcond[4]=((((-1.0)*r22*x11877))+((cj2*sj1))+((r20*x11876))+((cj1*sj2))+((r21*x11875)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x11875))+((r00*x11876))+(((-1.0)*r02*x11877)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11879=(gconst7*r10);
IkReal x11880=(gconst8*r11);
CheckValue<IkReal> x11881 = IKatan2WithCheck(IkReal((x11880+x11879)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x11881.valid){
continue;
}
CheckValue<IkReal> x11882=IKPowWithIntegerCheck(IKsign(((((-2.0)*x11879*x11880))+(((-1.0)*(x11879*x11879)))+(((-1.0)*(r12*r12)))+(((-1.0)*(x11880*x11880))))),-1);
if(!x11882.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11881.value)+(((1.5707963267949)*(x11882.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11883=IKcos(j4);
IkReal x11884=IKsin(j4);
IkReal x11885=((1.0)*x11883);
IkReal x11886=(gconst8*x11883);
IkReal x11887=(gconst7*x11883);
IkReal x11888=((1.0)*x11884);
IkReal x11889=(gconst7*x11888);
evalcond[0]=(((r10*x11887))+(((-1.0)*r12*x11888))+((r11*x11886)));
evalcond[1]=((((-1.0)*r22*x11885))+(((-1.0)*gconst8*r21*x11888))+(((-1.0)*r20*x11889)));
evalcond[2]=((((-1.0)*r00*x11889))+(((-1.0)*r02*x11885))+(((-1.0)*gconst8*r01*x11888)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x11885))+(((-1.0)*gconst8*r11*x11888))+(((-1.0)*r10*x11889)));
evalcond[4]=(((cj2*sj1))+((r21*x11886))+((cj1*sj2))+(((-1.0)*r22*x11888))+((r20*x11887)));
evalcond[5]=(((r01*x11886))+((r00*x11887))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x11888)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11890=((1.0)*gconst7);
CheckValue<IkReal> x11891 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x11890))+(((-1.0)*gconst8*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11891.valid){
continue;
}
CheckValue<IkReal> x11892=IKPowWithIntegerCheck(IKsign((((gconst8*r20))+(((-1.0)*r21*x11890)))),-1);
if(!x11892.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11891.value)+(((1.5707963267949)*(x11892.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11893=IKcos(j4);
IkReal x11894=IKsin(j4);
IkReal x11895=((1.0)*x11893);
IkReal x11896=(gconst8*x11893);
IkReal x11897=(gconst7*x11893);
IkReal x11898=((1.0)*x11894);
IkReal x11899=(gconst7*x11898);
evalcond[0]=((((-1.0)*r12*x11898))+((r10*x11897))+((r11*x11896)));
evalcond[1]=((((-1.0)*gconst8*r21*x11898))+(((-1.0)*r20*x11899))+(((-1.0)*r22*x11895)));
evalcond[2]=((((-1.0)*r00*x11899))+(((-1.0)*r02*x11895))+(((-1.0)*gconst8*r01*x11898)));
evalcond[3]=((-1.0)+(((-1.0)*r10*x11899))+(((-1.0)*r12*x11895))+(((-1.0)*gconst8*r11*x11898)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x11898))+((r21*x11896))+((cj1*sj2))+((r20*x11897)));
evalcond[5]=(((r01*x11896))+((r00*x11897))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x11898)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x11902 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x11902.valid){
continue;
}
IkReal x11900=((-1.0)*(x11902.value));
IkReal x11901=x11487;
sj5=gconst7;
cj5=gconst8;
j5=x11900;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst6=x11900;
IkReal gconst7=(r00*x11901);
IkReal gconst8=(r01*x11901);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x11905 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x11905.valid){
continue;
}
IkReal x11903=((-1.0)*(x11905.value));
IkReal x11904=x11487;
sj5=gconst7;
cj5=gconst8;
j5=x11903;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst6=x11903;
IkReal gconst7=(r00*x11904);
IkReal gconst8=(r01*x11904);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x11908 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x11908.valid){
continue;
}
IkReal x11906=((-1.0)*(x11908.value));
IkReal x11907=x11487;
sj5=gconst7;
cj5=gconst8;
j5=x11906;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst6=x11906;
IkReal gconst7=(r00*x11907);
IkReal gconst8=(r01*x11907);
IkReal x11909=r02*r02;
IkReal x11910=(cj1*cj2);
IkReal x11911=((1.0)*sj1*sj2);
CheckValue<IkReal> x11915=IKPowWithIntegerCheck(((-1.0)+x11909),-1);
if(!x11915.valid){
continue;
}
IkReal x11912=x11915.value;
if((((1.0)+(((-1.0)*x11909)))) < -0.00001)
continue;
IkReal x11913=IKsqrt(((1.0)+(((-1.0)*x11909))));
IkReal x11914=(r02*r12*x11912*x11913);
j4eval[0]=((IKabs(((((-1.0)*r12*x11911))+((r12*x11910)))))+(IKabs(((((-1.0)*x11911*x11914))+((x11910*x11914))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11916=(gconst7*r10);
IkReal x11917=(gconst8*r11);
IkReal x11918=(cj1*cj2);
IkReal x11919=((1.0)*sj1*sj2);
CheckValue<IkReal> x11920=IKPowWithIntegerCheck(IKsign((((gconst7*r21))+(((-1.0)*gconst8*r20)))),-1);
if(!x11920.valid){
continue;
}
CheckValue<IkReal> x11921 = IKatan2WithCheck(IkReal(((((-1.0)*x11917*x11919))+(((-1.0)*x11916*x11919))+((x11917*x11918))+((x11916*x11918)))),IkReal(((((-1.0)*r12*x11919))+((r12*x11918)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11921.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11920.value)))+(x11921.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11922=IKcos(j4);
IkReal x11923=IKsin(j4);
IkReal x11924=((1.0)*x11922);
IkReal x11925=(gconst8*x11922);
IkReal x11926=(gconst7*x11922);
IkReal x11927=((1.0)*x11923);
IkReal x11928=(gconst7*x11927);
evalcond[0]=(((r10*x11926))+((r11*x11925))+(((-1.0)*r12*x11927)));
evalcond[1]=((((-1.0)*r20*x11928))+(((-1.0)*r22*x11924))+(((-1.0)*gconst8*r21*x11927)));
evalcond[2]=((((-1.0)*r02*x11924))+(((-1.0)*r00*x11928))+(((-1.0)*gconst8*r01*x11927)));
evalcond[3]=((1.0)+(((-1.0)*gconst8*r11*x11927))+(((-1.0)*r10*x11928))+(((-1.0)*r12*x11924)));
evalcond[4]=(((cj2*sj1))+((r21*x11925))+((r20*x11926))+((cj1*sj2))+(((-1.0)*r22*x11927)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r02*x11927))+((cj1*cj2))+((r01*x11925))+((r00*x11926)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11929=(gconst7*r10);
IkReal x11930=(gconst8*r11);
CheckValue<IkReal> x11931=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((2.0)*x11929*x11930))+(x11930*x11930)+(x11929*x11929))),-1);
if(!x11931.valid){
continue;
}
CheckValue<IkReal> x11932 = IKatan2WithCheck(IkReal((x11930+x11929)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x11932.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11931.value)))+(x11932.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11933=IKcos(j4);
IkReal x11934=IKsin(j4);
IkReal x11935=((1.0)*x11933);
IkReal x11936=(gconst8*x11933);
IkReal x11937=(gconst7*x11933);
IkReal x11938=((1.0)*x11934);
IkReal x11939=(gconst7*x11938);
evalcond[0]=(((r10*x11937))+((r11*x11936))+(((-1.0)*r12*x11938)));
evalcond[1]=((((-1.0)*gconst8*r21*x11938))+(((-1.0)*r22*x11935))+(((-1.0)*r20*x11939)));
evalcond[2]=((((-1.0)*r02*x11935))+(((-1.0)*r00*x11939))+(((-1.0)*gconst8*r01*x11938)));
evalcond[3]=((1.0)+(((-1.0)*gconst8*r11*x11938))+(((-1.0)*r10*x11939))+(((-1.0)*r12*x11935)));
evalcond[4]=(((cj2*sj1))+((r21*x11936))+((cj1*sj2))+((r20*x11937))+(((-1.0)*r22*x11938)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r02*x11938))+((cj1*cj2))+((r00*x11937))+((r01*x11936)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11940=((1.0)*gconst8);
CheckValue<IkReal> x11941=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x11940))+((gconst7*r21)))),-1);
if(!x11941.valid){
continue;
}
CheckValue<IkReal> x11942 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*gconst7*r00))+(((-1.0)*r01*x11940)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11942.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11941.value)))+(x11942.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11943=IKcos(j4);
IkReal x11944=IKsin(j4);
IkReal x11945=((1.0)*x11943);
IkReal x11946=(gconst8*x11943);
IkReal x11947=(gconst7*x11943);
IkReal x11948=((1.0)*x11944);
IkReal x11949=(gconst7*x11948);
evalcond[0]=(((r11*x11946))+((r10*x11947))+(((-1.0)*r12*x11948)));
evalcond[1]=((((-1.0)*r20*x11949))+(((-1.0)*r22*x11945))+(((-1.0)*gconst8*r21*x11948)));
evalcond[2]=((((-1.0)*gconst8*r01*x11948))+(((-1.0)*r02*x11945))+(((-1.0)*r00*x11949)));
evalcond[3]=((1.0)+(((-1.0)*gconst8*r11*x11948))+(((-1.0)*r12*x11945))+(((-1.0)*r10*x11949)));
evalcond[4]=(((cj2*sj1))+((r20*x11947))+((cj1*sj2))+(((-1.0)*r22*x11948))+((r21*x11946)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r02*x11948))+((r00*x11947))+((cj1*cj2))+((r01*x11946)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11950=((-1.0)*py);
CheckValue<IkReal> x11952 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x11952.valid){
continue;
}
IkReal x11951=((-1.0)*(x11952.value));
sj5=gconst7;
cj5=gconst8;
j5=x11951;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x11950);
rxp0_2=(py*r00);
rxp1_0=(r21*x11950);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst6=x11951;
IkReal gconst7=r00;
IkReal gconst8=r01;
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11953=((-1.0)*py);
CheckValue<IkReal> x11955 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x11955.valid){
continue;
}
IkReal x11954=((-1.0)*(x11955.value));
sj5=gconst7;
cj5=gconst8;
j5=x11954;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x11953);
rxp0_2=(py*r00);
rxp1_0=(r21*x11953);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst6=x11954;
IkReal gconst7=r00;
IkReal gconst8=r01;
j4eval[0]=(((r00*r20))+((r01*r21)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11956=((-1.0)*py);
CheckValue<IkReal> x11958 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x11958.valid){
continue;
}
IkReal x11957=((-1.0)*(x11958.value));
sj5=gconst7;
cj5=gconst8;
j5=x11957;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x11956);
rxp0_2=(py*r00);
rxp1_0=(r21*x11956);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst6=x11957;
IkReal gconst7=r00;
IkReal gconst8=r01;
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11961=IKPowWithIntegerCheck((((gconst7*r00))+((gconst8*r01))),-1);
if(!x11961.valid){
continue;
}
IkReal x11959=x11961.value;
IkReal x11960=(sj0*x11959);
cj4array[0]=(((cj1*cj2*x11960))+(((-1.0)*sj1*sj2*x11960)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11962=IKsin(j4);
IkReal x11963=IKcos(j4);
IkReal x11964=((1.0)*gconst8*x11962);
IkReal x11965=((1.0)*gconst7*x11962);
evalcond[0]=((-1.0)*r12*x11962);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r12*x11963)));
evalcond[2]=((((-1.0)*r21*x11964))+(((-1.0)*r20*x11965)));
evalcond[3]=((((-1.0)*r01*x11964))+(((-1.0)*r00*x11965)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((gconst8*r21*x11963))+((gconst7*r20*x11963)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11968=IKPowWithIntegerCheck((((gconst7*r20))+((gconst8*r21))),-1);
if(!x11968.valid){
continue;
}
IkReal x11966=x11968.value;
IkReal x11967=((1.0)*x11966);
cj4array[0]=((((-1.0)*cj2*sj1*x11967))+(((-1.0)*cj1*sj2*x11967)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11969=IKsin(j4);
IkReal x11970=IKcos(j4);
IkReal x11971=((1.0)*sj0);
IkReal x11972=(gconst7*r00);
IkReal x11973=((1.0)*x11969);
IkReal x11974=(gconst8*x11973);
evalcond[0]=((-1.0)*r12*x11969);
evalcond[1]=((((-1.0)*x11971))+(((-1.0)*r12*x11970)));
evalcond[2]=((((-1.0)*gconst7*r20*x11973))+(((-1.0)*r21*x11974)));
evalcond[3]=((((-1.0)*r01*x11974))+(((-1.0)*x11972*x11973)));
evalcond[4]=((((-1.0)*cj1*cj2*x11971))+((x11970*x11972))+((sj0*sj1*sj2))+((gconst8*r01*x11970)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11975=IKPowWithIntegerCheck(r12,-1);
if(!x11975.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x11975.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11976=IKsin(j4);
IkReal x11977=IKcos(j4);
IkReal x11978=(gconst8*x11977);
IkReal x11979=(gconst7*x11977);
IkReal x11980=((1.0)*gconst8*x11976);
IkReal x11981=((1.0)*gconst7*x11976);
evalcond[0]=((-1.0)*r12*x11976);
evalcond[1]=((((-1.0)*r20*x11981))+(((-1.0)*r21*x11980)));
evalcond[2]=((((-1.0)*r00*x11981))+(((-1.0)*r01*x11980)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r20*x11979))+((r21*x11978)));
evalcond[4]=(((r00*x11979))+((r01*x11978))+(((-1.0)*cj1*cj2*sj0))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x11984 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x11984.valid){
continue;
}
IkReal x11982=((-1.0)*(x11984.value));
IkReal x11983=x11487;
sj5=gconst7;
cj5=gconst8;
j5=x11982;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst6=x11982;
IkReal gconst7=(r00*x11983);
IkReal gconst8=(r01*x11983);
IkReal x11985=r02*r02;
IkReal x11986=(cj0*r12);
IkReal x11987=((1.0)*x11985);
CheckValue<IkReal> x11991=IKPowWithIntegerCheck(((-1.0)+x11985),-1);
if(!x11991.valid){
continue;
}
IkReal x11988=x11991.value;
if((((1.0)+(((-1.0)*x11987)))) < -0.00001)
continue;
IkReal x11989=IKsqrt(((1.0)+(((-1.0)*x11987))));
IkReal x11990=(x11988*x11989);
j4eval[0]=((IKabs((((r02*sj0))+(((-1.0)*x11986)))))+(IKabs((((sj0*x11990))+(((-1.0)*sj0*x11987*x11990))+((r02*x11986*x11990))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11992=((1.0)*r21);
IkReal x11993=(gconst7*gconst8);
IkReal x11994=(gconst7*r20);
IkReal x11995=((1.0)*r20);
IkReal x11996=(gconst8*r21);
IkReal x11997=((1.0)*cj1*sj2);
IkReal x11998=((1.0)*cj2*sj1);
CheckValue<IkReal> x11999=IKPowWithIntegerCheck(((((-1.0)*r01*x11992*(gconst8*gconst8)))+(((-1.0)*gconst7*r00*x11994))+(((-1.0)*r00*x11992*x11993))+(((-1.0)*r01*x11993*x11995))),-1);
if(!x11999.valid){
continue;
}
CheckValue<IkReal> x12000=IKPowWithIntegerCheck((x11996+x11994),-1);
if(!x12000.valid){
continue;
}
if( IKabs(((x11999.value)*(((((-1.0)*r02*x11998))+(((-1.0)*r02*x11997))+((cj0*x11994))+((cj0*x11996)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12000.value)*(((((-1.0)*x11998))+(((-1.0)*x11997)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11999.value)*(((((-1.0)*r02*x11998))+(((-1.0)*r02*x11997))+((cj0*x11994))+((cj0*x11996))))))+IKsqr(((x12000.value)*(((((-1.0)*x11998))+(((-1.0)*x11997))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x11999.value)*(((((-1.0)*r02*x11998))+(((-1.0)*r02*x11997))+((cj0*x11994))+((cj0*x11996))))), ((x12000.value)*(((((-1.0)*x11998))+(((-1.0)*x11997))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12001=IKsin(j4);
IkReal x12002=IKcos(j4);
IkReal x12003=((1.0)*r12);
IkReal x12004=((1.0)*sj0);
IkReal x12005=((1.0)*r02);
IkReal x12006=(cj1*cj2);
IkReal x12007=((1.0)*cj0);
IkReal x12008=(sj1*sj2);
IkReal x12009=(gconst8*x12002);
IkReal x12010=(gconst7*x12002);
IkReal x12011=((1.0)*gconst7*x12001);
IkReal x12012=((1.0)*gconst8*x12001);
evalcond[0]=((((-1.0)*r20*x12011))+(((-1.0)*r21*x12012)));
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((r20*x12010))+((r21*x12009)));
evalcond[2]=((((-1.0)*r01*x12012))+(((-1.0)*x12007))+(((-1.0)*x12002*x12005))+(((-1.0)*r00*x12011)));
evalcond[3]=((((-1.0)*x12004))+(((-1.0)*r10*x12011))+(((-1.0)*r11*x12012))+(((-1.0)*x12002*x12003)));
evalcond[4]=((((-1.0)*x12001*x12005))+(((-1.0)*x12004*x12006))+((r01*x12009))+((sj0*x12008))+((r00*x12010)));
evalcond[5]=((((-1.0)*x12001*x12003))+((cj0*x12006))+(((-1.0)*x12007*x12008))+((r10*x12010))+((r11*x12009)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12013=((1.0)*sj0);
CheckValue<IkReal> x12014=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst7*r21))+((gconst8*r20)))),-1);
if(!x12014.valid){
continue;
}
CheckValue<IkReal> x12015 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r12))+((r02*sj0)))),IkReal((((cj0*gconst8*r11))+((cj0*gconst7*r10))+(((-1.0)*gconst7*r00*x12013))+(((-1.0)*gconst8*r01*x12013)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12015.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12014.value)))+(x12015.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12016=IKsin(j4);
IkReal x12017=IKcos(j4);
IkReal x12018=((1.0)*r12);
IkReal x12019=((1.0)*sj0);
IkReal x12020=((1.0)*r02);
IkReal x12021=(cj1*cj2);
IkReal x12022=((1.0)*cj0);
IkReal x12023=(sj1*sj2);
IkReal x12024=(gconst8*x12017);
IkReal x12025=(gconst7*x12017);
IkReal x12026=((1.0)*gconst7*x12016);
IkReal x12027=((1.0)*gconst8*x12016);
evalcond[0]=((((-1.0)*r20*x12026))+(((-1.0)*r21*x12027)));
evalcond[1]=(((cj2*sj1))+((r20*x12025))+((cj1*sj2))+((r21*x12024)));
evalcond[2]=((((-1.0)*r01*x12027))+(((-1.0)*x12022))+(((-1.0)*r00*x12026))+(((-1.0)*x12017*x12020)));
evalcond[3]=((((-1.0)*x12017*x12018))+(((-1.0)*x12019))+(((-1.0)*r11*x12027))+(((-1.0)*r10*x12026)));
evalcond[4]=((((-1.0)*x12016*x12020))+((r01*x12024))+((r00*x12025))+((sj0*x12023))+(((-1.0)*x12019*x12021)));
evalcond[5]=((((-1.0)*x12016*x12018))+((r11*x12024))+(((-1.0)*x12022*x12023))+((r10*x12025))+((cj0*x12021)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12028=(gconst7*r20);
IkReal x12029=(cj2*sj1);
IkReal x12030=(gconst8*r21);
IkReal x12031=(cj1*sj2);
CheckValue<IkReal> x12032 = IKatan2WithCheck(IkReal((((r22*x12029))+((r22*x12031)))),IkReal(((((-1.0)*x12028*x12029))+(((-1.0)*x12028*x12031))+(((-1.0)*x12029*x12030))+(((-1.0)*x12030*x12031)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12032.valid){
continue;
}
CheckValue<IkReal> x12033=IKPowWithIntegerCheck(IKsign(((x12028*x12028)+(r22*r22)+(((2.0)*x12028*x12030))+(x12030*x12030))),-1);
if(!x12033.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12032.value)+(((1.5707963267949)*(x12033.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12034=IKsin(j4);
IkReal x12035=IKcos(j4);
IkReal x12036=((1.0)*sj0);
IkReal x12037=(cj1*cj2);
IkReal x12038=((1.0)*cj0);
IkReal x12039=(sj1*sj2);
IkReal x12040=((1.0)*x12035);
IkReal x12041=(gconst8*x12035);
IkReal x12042=(gconst7*x12035);
IkReal x12043=((1.0)*x12034);
IkReal x12044=(gconst7*x12043);
evalcond[0]=((((-1.0)*r20*x12044))+(((-1.0)*r22*x12040))+(((-1.0)*gconst8*r21*x12043)));
evalcond[1]=((((-1.0)*gconst8*r01*x12043))+(((-1.0)*r00*x12044))+(((-1.0)*x12038))+(((-1.0)*r02*x12040)));
evalcond[2]=((((-1.0)*r12*x12040))+(((-1.0)*x12036))+(((-1.0)*r10*x12044))+(((-1.0)*gconst8*r11*x12043)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r20*x12042))+((r21*x12041))+(((-1.0)*r22*x12043)));
evalcond[4]=(((sj0*x12039))+((r00*x12042))+((r01*x12041))+(((-1.0)*x12036*x12037))+(((-1.0)*r02*x12043)));
evalcond[5]=(((cj0*x12037))+((r10*x12042))+(((-1.0)*r12*x12043))+((r11*x12041))+(((-1.0)*x12038*x12039)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12045=((1.0)*sj0);
CheckValue<IkReal> x12046=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst7*r21))+((gconst8*r20)))),-1);
if(!x12046.valid){
continue;
}
CheckValue<IkReal> x12047 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r12))+((r02*sj0)))),IkReal((((cj0*gconst8*r11))+((cj0*gconst7*r10))+(((-1.0)*gconst8*r01*x12045))+(((-1.0)*gconst7*r00*x12045)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12047.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12046.value)))+(x12047.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12048=IKsin(j4);
IkReal x12049=IKcos(j4);
IkReal x12050=((1.0)*sj0);
IkReal x12051=(cj1*cj2);
IkReal x12052=((1.0)*cj0);
IkReal x12053=(sj1*sj2);
IkReal x12054=((1.0)*x12049);
IkReal x12055=(gconst8*x12049);
IkReal x12056=(gconst7*x12049);
IkReal x12057=((1.0)*x12048);
IkReal x12058=(gconst7*x12057);
evalcond[0]=((((-1.0)*r20*x12058))+(((-1.0)*r22*x12054))+(((-1.0)*gconst8*r21*x12057)));
evalcond[1]=((((-1.0)*x12052))+(((-1.0)*gconst8*r01*x12057))+(((-1.0)*r02*x12054))+(((-1.0)*r00*x12058)));
evalcond[2]=((((-1.0)*x12050))+(((-1.0)*r10*x12058))+(((-1.0)*r12*x12054))+(((-1.0)*gconst8*r11*x12057)));
evalcond[3]=(((cj2*sj1))+((r20*x12056))+((cj1*sj2))+(((-1.0)*r22*x12057))+((r21*x12055)));
evalcond[4]=(((r01*x12055))+((r00*x12056))+(((-1.0)*r02*x12057))+((sj0*x12053))+(((-1.0)*x12050*x12051)));
evalcond[5]=(((r10*x12056))+((cj0*x12051))+(((-1.0)*x12052*x12053))+(((-1.0)*r12*x12057))+((r11*x12055)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12059=((1.0)*cj0);
CheckValue<IkReal> x12060 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*gconst7*r20*x12059))+(((-1.0)*gconst8*r21*x12059)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12060.valid){
continue;
}
CheckValue<IkReal> x12061=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst7*r11))+((gconst8*r10)))),-1);
if(!x12061.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12060.value)+(((1.5707963267949)*(x12061.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12062=IKsin(j4);
IkReal x12063=IKcos(j4);
IkReal x12064=((1.0)*sj0);
IkReal x12065=(cj1*cj2);
IkReal x12066=((1.0)*cj0);
IkReal x12067=(sj1*sj2);
IkReal x12068=((1.0)*x12063);
IkReal x12069=(gconst8*x12063);
IkReal x12070=(gconst7*x12063);
IkReal x12071=((1.0)*x12062);
IkReal x12072=(gconst7*x12071);
evalcond[0]=((((-1.0)*r20*x12072))+(((-1.0)*gconst8*r21*x12071))+(((-1.0)*r22*x12068)));
evalcond[1]=((((-1.0)*gconst8*r01*x12071))+(((-1.0)*r02*x12068))+(((-1.0)*x12066))+(((-1.0)*r00*x12072)));
evalcond[2]=((((-1.0)*r10*x12072))+(((-1.0)*r12*x12068))+(((-1.0)*gconst8*r11*x12071))+(((-1.0)*x12064)));
evalcond[3]=(((r21*x12069))+((cj2*sj1))+((cj1*sj2))+((r20*x12070))+(((-1.0)*r22*x12071)));
evalcond[4]=(((r01*x12069))+(((-1.0)*r02*x12071))+(((-1.0)*x12064*x12065))+((sj0*x12067))+((r00*x12070)));
evalcond[5]=((((-1.0)*x12066*x12067))+((r10*x12070))+((cj0*x12065))+(((-1.0)*r12*x12071))+((r11*x12069)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x12075 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x12075.valid){
continue;
}
IkReal x12073=((-1.0)*(x12075.value));
IkReal x12074=x11487;
sj5=gconst7;
cj5=gconst8;
j5=x12073;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst6=x12073;
IkReal gconst7=(r00*x12074);
IkReal gconst8=(r01*x12074);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12076=gconst8*gconst8;
IkReal x12077=gconst7*gconst7;
IkReal x12078=(r10*sj3);
IkReal x12079=(r11*r21);
IkReal x12080=(cj3*r11);
IkReal x12081=(gconst7*gconst8);
IkReal x12082=(cj3*r10);
IkReal x12083=(r20*x12077);
CheckValue<IkReal> x12084 = IKatan2WithCheck(IkReal((((gconst7*r22*x12080))+(((-1.0)*gconst8*r22*x12082)))),IkReal((((r21*x12076*x12082))+(((-1.0)*x12080*x12083))+((r20*x12081*x12082))+(((-1.0)*cj3*x12079*x12081)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12084.valid){
continue;
}
CheckValue<IkReal> x12085=IKPowWithIntegerCheck(IKsign((((r21*x12078*x12081))+((x12078*x12083))+((r12*r22*sj3))+((r11*r20*sj3*x12081))+((sj3*x12076*x12079)))),-1);
if(!x12085.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12084.value)+(((1.5707963267949)*(x12085.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12086=IKsin(j4);
IkReal x12087=IKcos(j4);
IkReal x12088=(cj2*sj1);
IkReal x12089=(cj1*sj2);
IkReal x12090=(gconst7*r00);
IkReal x12091=(cj3*gconst8);
IkReal x12092=(sj1*sj2);
IkReal x12093=((1.0)*r20);
IkReal x12094=(gconst7*r10);
IkReal x12095=(gconst7*sj3);
IkReal x12096=(cj3*gconst7);
IkReal x12097=(gconst8*sj3);
IkReal x12098=((1.0)*r00);
IkReal x12099=((1.0)*r10);
IkReal x12100=(cj1*cj2);
IkReal x12101=((1.0)*x12087);
IkReal x12102=((1.0)*x12086);
IkReal x12103=(cj3*x12086);
IkReal x12104=(x12088+x12089);
IkReal x12105=(x12087*x12095);
evalcond[0]=((((-1.0)*gconst7*x12086*x12093))+(((-1.0)*r22*x12101))+(((-1.0)*gconst8*r21*x12102)));
evalcond[1]=((((-1.0)*gconst8*r01*x12102))+(((-1.0)*x12090*x12102))+(((-1.0)*r02*x12101)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x12101))+(((-1.0)*gconst8*r11*x12102))+(((-1.0)*x12094*x12102)));
evalcond[3]=(((r11*x12096))+((r11*x12087*x12097))+((sj3*x12087*x12094))+(((-1.0)*r12*sj3*x12102))+(((-1.0)*x12091*x12099)));
evalcond[4]=(((r11*x12095))+(((-1.0)*r11*x12091*x12101))+(((-1.0)*cj3*x12094*x12101))+(((-1.0)*x12097*x12099))+((r12*x12103)));
evalcond[5]=(((r01*x12096))+((r01*x12087*x12097))+x12104+((sj3*x12087*x12090))+(((-1.0)*r02*sj3*x12102))+(((-1.0)*x12091*x12098)));
evalcond[6]=((((-1.0)*x12092))+((r21*x12087*x12097))+(((-1.0)*r22*sj3*x12102))+((r20*x12105))+x12100+(((-1.0)*x12091*x12093))+((r21*x12096)));
evalcond[7]=((((-1.0)*r21*x12091*x12101))+(((-1.0)*x12093*x12097))+(((-1.0)*x12087*x12093*x12096))+x12104+((r22*x12103))+((r21*x12095)));
evalcond[8]=(((r01*x12095))+((r02*x12103))+(((-1.0)*x12097*x12098))+(((-1.0)*r01*x12091*x12101))+x12092+(((-1.0)*x12100))+(((-1.0)*cj3*x12090*x12101)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12106=((1.0)*gconst7);
CheckValue<IkReal> x12107=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x12106))+((gconst8*r20)))),-1);
if(!x12107.valid){
continue;
}
CheckValue<IkReal> x12108 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x12106))+(((-1.0)*gconst8*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12108.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12107.value)))+(x12108.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12109=IKsin(j4);
IkReal x12110=IKcos(j4);
IkReal x12111=(cj2*sj1);
IkReal x12112=(cj1*sj2);
IkReal x12113=(gconst7*r00);
IkReal x12114=(cj3*gconst8);
IkReal x12115=(sj1*sj2);
IkReal x12116=((1.0)*r20);
IkReal x12117=(gconst7*r10);
IkReal x12118=(gconst7*sj3);
IkReal x12119=(cj3*gconst7);
IkReal x12120=(gconst8*sj3);
IkReal x12121=((1.0)*r00);
IkReal x12122=((1.0)*r10);
IkReal x12123=(cj1*cj2);
IkReal x12124=((1.0)*x12110);
IkReal x12125=((1.0)*x12109);
IkReal x12126=(cj3*x12109);
IkReal x12127=(x12112+x12111);
IkReal x12128=(x12110*x12118);
evalcond[0]=((((-1.0)*r22*x12124))+(((-1.0)*gconst7*x12109*x12116))+(((-1.0)*gconst8*r21*x12125)));
evalcond[1]=((((-1.0)*gconst8*r01*x12125))+(((-1.0)*x12113*x12125))+(((-1.0)*r02*x12124)));
evalcond[2]=((-1.0)+(((-1.0)*gconst8*r11*x12125))+(((-1.0)*r12*x12124))+(((-1.0)*x12117*x12125)));
evalcond[3]=(((sj3*x12110*x12117))+((r11*x12110*x12120))+(((-1.0)*x12114*x12122))+(((-1.0)*r12*sj3*x12125))+((r11*x12119)));
evalcond[4]=((((-1.0)*cj3*x12117*x12124))+((r12*x12126))+(((-1.0)*r11*x12114*x12124))+(((-1.0)*x12120*x12122))+((r11*x12118)));
evalcond[5]=(((r01*x12110*x12120))+(((-1.0)*r02*sj3*x12125))+((sj3*x12110*x12113))+((r01*x12119))+x12127+(((-1.0)*x12114*x12121)));
evalcond[6]=((((-1.0)*x12115))+(((-1.0)*r22*sj3*x12125))+(((-1.0)*x12114*x12116))+((r21*x12110*x12120))+x12123+((r21*x12119))+((r20*x12128)));
evalcond[7]=((((-1.0)*x12110*x12116*x12119))+x12127+(((-1.0)*x12116*x12120))+((r22*x12126))+(((-1.0)*r21*x12114*x12124))+((r21*x12118)));
evalcond[8]=((((-1.0)*r01*x12114*x12124))+((r01*x12118))+x12115+((r02*x12126))+(((-1.0)*x12120*x12121))+(((-1.0)*cj3*x12113*x12124))+(((-1.0)*x12123)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x12131 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x12131.valid){
continue;
}
IkReal x12129=((-1.0)*(x12131.value));
IkReal x12130=x11487;
sj5=gconst7;
cj5=gconst8;
j5=x12129;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst6=x12129;
IkReal gconst7=(r00*x12130);
IkReal gconst8=(r01*x12130);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12132=gconst8*gconst8;
IkReal x12133=gconst7*gconst7;
IkReal x12134=(r10*sj3);
IkReal x12135=(r11*r21);
IkReal x12136=(cj3*r11);
IkReal x12137=(gconst7*gconst8);
IkReal x12138=(cj3*r10);
IkReal x12139=(r20*x12133);
CheckValue<IkReal> x12140=IKPowWithIntegerCheck(IKsign((((x12134*x12139))+((r12*r22*sj3))+((sj3*x12132*x12135))+((r21*x12134*x12137))+((r11*r20*sj3*x12137)))),-1);
if(!x12140.valid){
continue;
}
CheckValue<IkReal> x12141 = IKatan2WithCheck(IkReal((((gconst7*r22*x12136))+(((-1.0)*gconst8*r22*x12138)))),IkReal((((r20*x12137*x12138))+(((-1.0)*cj3*x12135*x12137))+((r21*x12132*x12138))+(((-1.0)*x12136*x12139)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12141.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12140.value)))+(x12141.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12142=IKsin(j4);
IkReal x12143=IKcos(j4);
IkReal x12144=(cj1*cj2);
IkReal x12145=((1.0)*sj2);
IkReal x12146=(cj3*gconst7);
IkReal x12147=(gconst8*r21);
IkReal x12148=(cj3*gconst8);
IkReal x12149=(gconst7*r20);
IkReal x12150=(gconst7*r10);
IkReal x12151=((1.0)*r20);
IkReal x12152=(gconst7*sj3);
IkReal x12153=(cj2*sj1);
IkReal x12154=(gconst8*sj3);
IkReal x12155=((1.0)*r00);
IkReal x12156=(gconst7*r00);
IkReal x12157=((1.0)*r10);
IkReal x12158=(gconst8*r01);
IkReal x12159=(gconst8*r11);
IkReal x12160=(sj1*x12145);
IkReal x12161=((1.0)*x12143);
IkReal x12162=((1.0)*x12142);
IkReal x12163=(sj3*x12143);
IkReal x12164=(cj3*x12142);
evalcond[0]=((((-1.0)*r22*x12161))+(((-1.0)*x12149*x12162))+(((-1.0)*x12147*x12162)));
evalcond[1]=((((-1.0)*gconst7*x12142*x12155))+(((-1.0)*r02*x12161))+(((-1.0)*x12158*x12162)));
evalcond[2]=((1.0)+(((-1.0)*x12150*x12162))+(((-1.0)*r12*x12161))+(((-1.0)*x12159*x12162)));
evalcond[3]=((((-1.0)*r12*sj3*x12162))+((r11*x12146))+((r11*x12143*x12154))+(((-1.0)*x12148*x12157))+((x12150*x12163)));
evalcond[4]=((((-1.0)*r11*x12148*x12161))+(((-1.0)*x12143*x12146*x12157))+((r11*x12152))+(((-1.0)*x12154*x12157))+((r12*x12164)));
evalcond[5]=(x12144+(((-1.0)*r22*sj3*x12162))+(((-1.0)*x12160))+((x12149*x12163))+((x12147*x12163))+((r21*x12146))+(((-1.0)*x12148*x12151)));
evalcond[6]=(((cj1*sj2))+(((-1.0)*cj3*x12147*x12161))+x12153+(((-1.0)*x12143*x12146*x12151))+((r21*x12152))+((r22*x12164))+(((-1.0)*x12151*x12154)));
evalcond[7]=(((r01*x12143*x12154))+(((-1.0)*x12153))+((r01*x12146))+(((-1.0)*cj1*x12145))+(((-1.0)*x12148*x12155))+(((-1.0)*r02*sj3*x12162))+((r00*x12143*x12152)));
evalcond[8]=(((r02*x12164))+(((-1.0)*r01*x12148*x12161))+x12144+(((-1.0)*x12160))+((r01*x12152))+(((-1.0)*x12143*x12146*x12155))+(((-1.0)*x12154*x12155)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12165=((1.0)*gconst8);
CheckValue<IkReal> x12166=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x12165))+((gconst7*r21)))),-1);
if(!x12166.valid){
continue;
}
CheckValue<IkReal> x12167 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*gconst7*r00))+(((-1.0)*r01*x12165)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12167.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12166.value)))+(x12167.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12168=IKsin(j4);
IkReal x12169=IKcos(j4);
IkReal x12170=(cj1*cj2);
IkReal x12171=((1.0)*sj2);
IkReal x12172=(cj3*gconst7);
IkReal x12173=(gconst8*r21);
IkReal x12174=(cj3*gconst8);
IkReal x12175=(gconst7*r20);
IkReal x12176=(gconst7*r10);
IkReal x12177=((1.0)*r20);
IkReal x12178=(gconst7*sj3);
IkReal x12179=(cj2*sj1);
IkReal x12180=(gconst8*sj3);
IkReal x12181=((1.0)*r00);
IkReal x12182=(gconst7*r00);
IkReal x12183=((1.0)*r10);
IkReal x12184=(gconst8*r01);
IkReal x12185=(gconst8*r11);
IkReal x12186=(sj1*x12171);
IkReal x12187=((1.0)*x12169);
IkReal x12188=((1.0)*x12168);
IkReal x12189=(sj3*x12169);
IkReal x12190=(cj3*x12168);
evalcond[0]=((((-1.0)*x12175*x12188))+(((-1.0)*x12173*x12188))+(((-1.0)*r22*x12187)));
evalcond[1]=((((-1.0)*gconst7*x12168*x12181))+(((-1.0)*r02*x12187))+(((-1.0)*x12184*x12188)));
evalcond[2]=((1.0)+(((-1.0)*x12176*x12188))+(((-1.0)*x12185*x12188))+(((-1.0)*r12*x12187)));
evalcond[3]=(((r11*x12169*x12180))+(((-1.0)*x12174*x12183))+(((-1.0)*r12*sj3*x12188))+((r11*x12172))+((x12176*x12189)));
evalcond[4]=(((r12*x12190))+(((-1.0)*r11*x12174*x12187))+(((-1.0)*x12169*x12172*x12183))+((r11*x12178))+(((-1.0)*x12180*x12183)));
evalcond[5]=(((r21*x12172))+(((-1.0)*x12186))+x12170+((x12173*x12189))+(((-1.0)*x12174*x12177))+((x12175*x12189))+(((-1.0)*r22*sj3*x12188)));
evalcond[6]=(((r21*x12178))+((cj1*sj2))+(((-1.0)*cj3*x12173*x12187))+x12179+((r22*x12190))+(((-1.0)*x12177*x12180))+(((-1.0)*x12169*x12172*x12177)));
evalcond[7]=(((r00*x12169*x12178))+(((-1.0)*r02*sj3*x12188))+(((-1.0)*x12179))+((r01*x12169*x12180))+(((-1.0)*x12174*x12181))+((r01*x12172))+(((-1.0)*cj1*x12171)));
evalcond[8]=((((-1.0)*x12186))+(((-1.0)*x12169*x12172*x12181))+(((-1.0)*r01*x12174*x12187))+x12170+((r01*x12178))+((r02*x12190))+(((-1.0)*x12180*x12181)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12191=((-1.0)*py);
CheckValue<IkReal> x12193 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x12193.valid){
continue;
}
IkReal x12192=((-1.0)*(x12193.value));
sj5=gconst7;
cj5=gconst8;
j5=x12192;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12191);
rxp0_2=(py*r00);
rxp1_0=(r21*x12191);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst6=x12192;
IkReal gconst7=r00;
IkReal gconst8=r01;
j4eval[0]=-1.0;
j4eval[1]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12194=((-1.0)*py);
CheckValue<IkReal> x12196 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x12196.valid){
continue;
}
IkReal x12195=((-1.0)*(x12196.value));
sj5=gconst7;
cj5=gconst8;
j5=x12195;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12194);
rxp0_2=(py*r00);
rxp1_0=(r21*x12194);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst6=x12195;
IkReal gconst7=r00;
IkReal gconst8=r01;
j4eval[0]=cj3;
j4eval[1]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12197=((-1.0)*py);
CheckValue<IkReal> x12199 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x12199.valid){
continue;
}
IkReal x12198=((-1.0)*(x12199.value));
sj5=gconst7;
cj5=gconst8;
j5=x12198;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12197);
rxp0_2=(py*r00);
rxp1_0=(r21*x12197);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst6=x12198;
IkReal gconst7=r00;
IkReal gconst8=r01;
j4eval[0]=r12;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12200=((-1.0)*py);
CheckValue<IkReal> x12202 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x12202.valid){
continue;
}
IkReal x12201=((-1.0)*(x12202.value));
sj5=gconst7;
cj5=gconst8;
j5=x12201;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12200);
rxp0_2=(py*r00);
rxp1_0=(r21*x12200);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst6=x12201;
IkReal gconst7=r00;
IkReal gconst8=r01;
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12203=((-1.0)*py);
CheckValue<IkReal> x12205 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x12205.valid){
continue;
}
IkReal x12204=((-1.0)*(x12205.value));
sj5=gconst7;
cj5=gconst8;
j5=x12204;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12203);
rxp0_2=(py*r00);
rxp1_0=(r21*x12203);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst6=x12204;
IkReal gconst7=r00;
IkReal gconst8=r01;
j4eval[0]=(((r00*r20))+((r01*r21)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12206=((-1.0)*py);
CheckValue<IkReal> x12208 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x12208.valid){
continue;
}
IkReal x12207=((-1.0)*(x12208.value));
sj5=gconst7;
cj5=gconst8;
j5=x12207;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12206);
rxp0_2=(py*r00);
rxp1_0=(r21*x12206);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst6=x12207;
IkReal gconst7=r00;
IkReal gconst8=r01;
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12211=IKPowWithIntegerCheck((((gconst7*r00))+((gconst8*r01))),-1);
if(!x12211.valid){
continue;
}
IkReal x12209=x12211.value;
IkReal x12210=((1.0)*sj0*x12209);
cj4array[0]=((((-1.0)*cj2*sj1*x12210))+(((-1.0)*cj1*sj2*x12210)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12212=IKsin(j4);
IkReal x12213=IKcos(j4);
IkReal x12214=((1.0)*gconst8*x12212);
IkReal x12215=((1.0)*gconst7*x12212);
evalcond[0]=((-1.0)*r12*x12212);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r12*x12213)));
evalcond[2]=((((-1.0)*r20*x12215))+(((-1.0)*r21*x12214)));
evalcond[3]=((((-1.0)*r00*x12215))+(((-1.0)*r01*x12214)));
evalcond[4]=((((-1.0)*sj1*sj2))+((gconst8*r21*x12213))+((gconst7*r20*x12213))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12217=IKPowWithIntegerCheck((((gconst7*r20))+((gconst8*r21))),-1);
if(!x12217.valid){
continue;
}
IkReal x12216=x12217.value;
cj4array[0]=((((-1.0)*cj1*cj2*x12216))+((sj1*sj2*x12216)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12218=IKsin(j4);
IkReal x12219=IKcos(j4);
IkReal x12220=(gconst7*r00);
IkReal x12221=((1.0)*x12218);
IkReal x12222=(gconst8*x12221);
evalcond[0]=((-1.0)*r12*x12218);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r12*x12219)));
evalcond[2]=((((-1.0)*gconst7*r20*x12221))+(((-1.0)*r21*x12222)));
evalcond[3]=((((-1.0)*x12220*x12221))+(((-1.0)*r01*x12222)));
evalcond[4]=(((gconst8*r01*x12219))+((x12219*x12220))+((cj1*sj0*sj2))+((cj2*sj0*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12223=IKPowWithIntegerCheck(r12,-1);
if(!x12223.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x12223.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12224=IKsin(j4);
IkReal x12225=IKcos(j4);
IkReal x12226=(gconst8*x12225);
IkReal x12227=(gconst7*x12225);
IkReal x12228=((1.0)*gconst8*x12224);
IkReal x12229=((1.0)*gconst7*x12224);
evalcond[0]=((-1.0)*r12*x12224);
evalcond[1]=((((-1.0)*r21*x12228))+(((-1.0)*r20*x12229)));
evalcond[2]=((((-1.0)*r01*x12228))+(((-1.0)*r00*x12229)));
evalcond[3]=((((-1.0)*sj1*sj2))+((r21*x12226))+((cj1*cj2))+((r20*x12227)));
evalcond[4]=(((cj1*sj0*sj2))+((cj2*sj0*sj1))+((r01*x12226))+((r00*x12227)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12230=((-1.0)*py);
CheckValue<IkReal> x12232 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x12232.valid){
continue;
}
IkReal x12231=((-1.0)*(x12232.value));
sj5=gconst7;
cj5=gconst8;
j5=x12231;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12230);
rxp0_2=(py*r00);
rxp1_0=(r21*x12230);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst6=x12231;
IkReal gconst7=r00;
IkReal gconst8=r01;
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12233=((-1.0)*py);
CheckValue<IkReal> x12235 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x12235.valid){
continue;
}
IkReal x12234=((-1.0)*(x12235.value));
sj5=gconst7;
cj5=gconst8;
j5=x12234;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12233);
rxp0_2=(py*r00);
rxp1_0=(r21*x12233);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst6=x12234;
IkReal gconst7=r00;
IkReal gconst8=r01;
j4eval[0]=((((-1.0)*r01*r21))+(((-1.0)*r00*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12236=((-1.0)*py);
CheckValue<IkReal> x12238 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x12238.valid){
continue;
}
IkReal x12237=((-1.0)*(x12238.value));
sj5=gconst7;
cj5=gconst8;
j5=x12237;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12236);
rxp0_2=(py*r00);
rxp1_0=(r21*x12236);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst6=x12237;
IkReal gconst7=r00;
IkReal gconst8=r01;
j4eval[0]=-1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12241=IKPowWithIntegerCheck(((((-1.0)*gconst8*r01))+(((-1.0)*gconst7*r00))),-1);
if(!x12241.valid){
continue;
}
IkReal x12239=x12241.value;
IkReal x12240=((1.0)*sj0*x12239);
cj4array[0]=((((-1.0)*cj2*sj1*x12240))+(((-1.0)*cj1*sj2*x12240)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12242=IKsin(j4);
IkReal x12243=IKcos(j4);
IkReal x12244=((1.0)*gconst7);
IkReal x12245=((1.0)*x12243);
IkReal x12246=((1.0)*gconst8*x12242);
evalcond[0]=(r12*x12242);
evalcond[1]=((((-1.0)*r12*x12245))+(((-1.0)*sj0)));
evalcond[2]=((((-1.0)*r20*x12242*x12244))+(((-1.0)*r21*x12246)));
evalcond[3]=((((-1.0)*r01*x12246))+(((-1.0)*r00*x12242*x12244)));
evalcond[4]=((((-1.0)*r20*x12243*x12244))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*gconst8*r21*x12245)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12248=IKPowWithIntegerCheck(((((-1.0)*gconst7*r20))+(((-1.0)*gconst8*r21))),-1);
if(!x12248.valid){
continue;
}
IkReal x12247=x12248.value;
cj4array[0]=(((sj1*sj2*x12247))+(((-1.0)*cj1*cj2*x12247)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12249=IKsin(j4);
IkReal x12250=IKcos(j4);
IkReal x12251=((1.0)*gconst7*r00);
IkReal x12252=((1.0)*x12250);
IkReal x12253=((1.0)*gconst8*x12249);
evalcond[0]=(r12*x12249);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r12*x12252)));
evalcond[2]=((((-1.0)*r21*x12253))+(((-1.0)*gconst7*r20*x12249)));
evalcond[3]=((((-1.0)*x12249*x12251))+(((-1.0)*r01*x12253)));
evalcond[4]=((((-1.0)*x12250*x12251))+(((-1.0)*gconst8*r01*x12252))+((cj1*sj0*sj2))+((cj2*sj0*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12254=IKPowWithIntegerCheck(r12,-1);
if(!x12254.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x12254.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12255=IKsin(j4);
IkReal x12256=IKcos(j4);
IkReal x12257=(gconst8*r21);
IkReal x12258=(gconst7*r00);
IkReal x12259=(gconst7*r20);
IkReal x12260=((1.0)*gconst8*r01);
IkReal x12261=((1.0)*x12255);
IkReal x12262=((1.0)*x12256);
evalcond[0]=(r12*x12255);
evalcond[1]=((((-1.0)*x12259*x12261))+(((-1.0)*x12257*x12261)));
evalcond[2]=((((-1.0)*x12258*x12261))+(((-1.0)*x12255*x12260)));
evalcond[3]=((((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*x12259*x12262))+(((-1.0)*x12257*x12262)));
evalcond[4]=((((-1.0)*x12256*x12260))+(((-1.0)*x12258*x12262))+((cj1*sj0*sj2))+((cj2*sj0*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12265=IKPowWithIntegerCheck(r12,-1);
if(!x12265.valid){
continue;
}
IkReal x12263=x12265.value;
IkReal x12264=((1.0)*cj0);
CheckValue<IkReal> x12266=IKPowWithIntegerCheck(sj3,-1);
if(!x12266.valid){
continue;
}
if( IKabs((x12263*(x12266.value)*(((((-1.0)*cj2*sj1*x12264))+(((-1.0)*cj1*sj2*x12264)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x12263)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x12263*(x12266.value)*(((((-1.0)*cj2*sj1*x12264))+(((-1.0)*cj1*sj2*x12264))))))+IKsqr(((-1.0)*sj0*x12263))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x12263*(x12266.value)*(((((-1.0)*cj2*sj1*x12264))+(((-1.0)*cj1*sj2*x12264))))), ((-1.0)*sj0*x12263));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12267=IKsin(j4);
IkReal x12268=IKcos(j4);
IkReal x12269=((1.0)*cj3);
IkReal x12270=(r21*sj3);
IkReal x12271=(cj2*sj1);
IkReal x12272=(r20*sj3);
IkReal x12273=(cj3*gconst7);
IkReal x12274=((1.0)*gconst8);
IkReal x12275=((1.0)*cj0);
IkReal x12276=(r00*sj3);
IkReal x12277=((1.0)*sj0);
IkReal x12278=(r01*sj3);
IkReal x12279=(cj1*sj2);
IkReal x12280=(cj1*cj2);
IkReal x12281=((1.0)*x12267);
IkReal x12282=(gconst7*x12268);
IkReal x12283=(gconst8*x12268);
IkReal x12284=((1.0)*sj1*sj2);
evalcond[0]=((((-1.0)*x12277))+(((-1.0)*r12*x12268)));
evalcond[1]=((((-1.0)*gconst7*r20*x12281))+(((-1.0)*r21*x12267*x12274)));
evalcond[2]=(((cj3*r12*x12267))+((cj0*x12280))+(((-1.0)*sj1*sj2*x12275)));
evalcond[3]=((((-1.0)*x12275))+(((-1.0)*gconst7*r00*x12281))+(((-1.0)*r01*x12267*x12274)));
evalcond[4]=((((-1.0)*r12*sj3*x12281))+(((-1.0)*x12275*x12279))+(((-1.0)*x12271*x12275)));
evalcond[5]=(((r21*x12273))+((x12270*x12283))+x12280+(((-1.0)*gconst8*r20*x12269))+((x12272*x12282))+(((-1.0)*x12284)));
evalcond[6]=((((-1.0)*x12272*x12274))+x12279+x12271+((gconst7*x12270))+(((-1.0)*r21*x12269*x12283))+(((-1.0)*r20*x12269*x12282)));
evalcond[7]=(((x12276*x12282))+(((-1.0)*gconst8*r00*x12269))+((x12278*x12283))+((sj0*x12279))+((sj0*x12271))+((r01*x12273)));
evalcond[8]=((((-1.0)*x12277*x12280))+(((-1.0)*r01*x12269*x12283))+((sj0*sj1*sj2))+((gconst7*x12278))+(((-1.0)*r00*x12269*x12282))+(((-1.0)*x12274*x12276)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12286=IKPowWithIntegerCheck(r12,-1);
if(!x12286.valid){
continue;
}
IkReal x12285=x12286.value;
CheckValue<IkReal> x12287=IKPowWithIntegerCheck(cj3,-1);
if(!x12287.valid){
continue;
}
if( IKabs((x12285*(x12287.value)*(((((-1.0)*cj0*cj1*cj2))+((cj0*sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x12285)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x12285*(x12287.value)*(((((-1.0)*cj0*cj1*cj2))+((cj0*sj1*sj2))))))+IKsqr(((-1.0)*sj0*x12285))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x12285*(x12287.value)*(((((-1.0)*cj0*cj1*cj2))+((cj0*sj1*sj2))))), ((-1.0)*sj0*x12285));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12288=IKsin(j4);
IkReal x12289=IKcos(j4);
IkReal x12290=((1.0)*cj3);
IkReal x12291=(r21*sj3);
IkReal x12292=(cj2*sj1);
IkReal x12293=(r20*sj3);
IkReal x12294=(cj3*gconst7);
IkReal x12295=((1.0)*gconst8);
IkReal x12296=((1.0)*cj0);
IkReal x12297=(r00*sj3);
IkReal x12298=((1.0)*sj0);
IkReal x12299=(r01*sj3);
IkReal x12300=(cj1*sj2);
IkReal x12301=(cj1*cj2);
IkReal x12302=((1.0)*x12288);
IkReal x12303=(gconst7*x12289);
IkReal x12304=(gconst8*x12289);
IkReal x12305=((1.0)*sj1*sj2);
evalcond[0]=((((-1.0)*x12298))+(((-1.0)*r12*x12289)));
evalcond[1]=((((-1.0)*gconst7*r20*x12302))+(((-1.0)*r21*x12288*x12295)));
evalcond[2]=((((-1.0)*sj1*sj2*x12296))+((cj0*x12301))+((cj3*r12*x12288)));
evalcond[3]=((((-1.0)*r01*x12288*x12295))+(((-1.0)*x12296))+(((-1.0)*gconst7*r00*x12302)));
evalcond[4]=((((-1.0)*x12296*x12300))+(((-1.0)*r12*sj3*x12302))+(((-1.0)*x12292*x12296)));
evalcond[5]=(((r21*x12294))+((x12291*x12304))+((x12293*x12303))+x12301+(((-1.0)*x12305))+(((-1.0)*gconst8*r20*x12290)));
evalcond[6]=(((gconst7*x12291))+x12300+x12292+(((-1.0)*r21*x12290*x12304))+(((-1.0)*r20*x12290*x12303))+(((-1.0)*x12293*x12295)));
evalcond[7]=(((r01*x12294))+((sj0*x12292))+((x12299*x12304))+((sj0*x12300))+((x12297*x12303))+(((-1.0)*gconst8*r00*x12290)));
evalcond[8]=((((-1.0)*r01*x12290*x12304))+((gconst7*x12299))+(((-1.0)*x12295*x12297))+(((-1.0)*r00*x12290*x12303))+((sj0*sj1*sj2))+(((-1.0)*x12298*x12301)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12306=IKPowWithIntegerCheck(((((-1.0)*gconst8*r01))+(((-1.0)*gconst7*r00))),-1);
if(!x12306.valid){
continue;
}
CheckValue<IkReal> x12307=IKPowWithIntegerCheck(r12,-1);
if(!x12307.valid){
continue;
}
if( IKabs((cj0*(x12306.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x12307.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj0*(x12306.value)))+IKsqr(((-1.0)*sj0*(x12307.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((cj0*(x12306.value)), ((-1.0)*sj0*(x12307.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12308=IKsin(j4);
IkReal x12309=IKcos(j4);
IkReal x12310=((1.0)*cj3);
IkReal x12311=(r21*sj3);
IkReal x12312=(cj2*sj1);
IkReal x12313=(r20*sj3);
IkReal x12314=(cj3*gconst7);
IkReal x12315=((1.0)*gconst8);
IkReal x12316=((1.0)*cj0);
IkReal x12317=(r00*sj3);
IkReal x12318=((1.0)*sj0);
IkReal x12319=(r01*sj3);
IkReal x12320=(cj1*sj2);
IkReal x12321=(cj1*cj2);
IkReal x12322=((1.0)*x12308);
IkReal x12323=(gconst7*x12309);
IkReal x12324=(gconst8*x12309);
IkReal x12325=((1.0)*sj1*sj2);
evalcond[0]=((((-1.0)*r12*x12309))+(((-1.0)*x12318)));
evalcond[1]=((((-1.0)*r21*x12308*x12315))+(((-1.0)*gconst7*r20*x12322)));
evalcond[2]=((((-1.0)*sj1*sj2*x12316))+((cj0*x12321))+((cj3*r12*x12308)));
evalcond[3]=((((-1.0)*gconst7*r00*x12322))+(((-1.0)*r01*x12308*x12315))+(((-1.0)*x12316)));
evalcond[4]=((((-1.0)*x12312*x12316))+(((-1.0)*r12*sj3*x12322))+(((-1.0)*x12316*x12320)));
evalcond[5]=(((x12311*x12324))+(((-1.0)*gconst8*r20*x12310))+x12321+((x12313*x12323))+(((-1.0)*x12325))+((r21*x12314)));
evalcond[6]=(((gconst7*x12311))+x12320+x12312+(((-1.0)*r21*x12310*x12324))+(((-1.0)*x12313*x12315))+(((-1.0)*r20*x12310*x12323)));
evalcond[7]=((((-1.0)*gconst8*r00*x12310))+((sj0*x12312))+((x12317*x12323))+((x12319*x12324))+((r01*x12314))+((sj0*x12320)));
evalcond[8]=(((gconst7*x12319))+(((-1.0)*x12315*x12317))+(((-1.0)*r01*x12310*x12324))+((sj0*sj1*sj2))+(((-1.0)*r00*x12310*x12323))+(((-1.0)*x12318*x12321)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x12328 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x12328.valid){
continue;
}
IkReal x12326=((-1.0)*(x12328.value));
IkReal x12327=x11487;
sj5=gconst7;
cj5=gconst8;
j5=x12326;
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst6=x12326;
IkReal gconst7=(r00*x12327);
IkReal gconst8=(r01*x12327);
IkReal x12329=r02*r02;
IkReal x12330=(cj0*r12);
IkReal x12331=((1.0)*x12329);
CheckValue<IkReal> x12335=IKPowWithIntegerCheck(((-1.0)+x12329),-1);
if(!x12335.valid){
continue;
}
IkReal x12332=x12335.value;
if((((1.0)+(((-1.0)*x12331)))) < -0.00001)
continue;
IkReal x12333=IKsqrt(((1.0)+(((-1.0)*x12331))));
IkReal x12334=(x12332*x12333);
j4eval[0]=((IKabs((((r02*sj0))+(((-1.0)*x12330)))))+(IKabs(((((-1.0)*sj0*x12331*x12334))+((r02*x12330*x12334))+((sj0*x12334))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12336=(cj0*sj3);
IkReal x12337=(gconst8*r21);
IkReal x12338=(gconst7*r20);
IkReal x12339=((1.0)*r21);
IkReal x12340=(cj3*gconst7);
IkReal x12341=(sj1*sj2);
IkReal x12342=(r01*sj3);
IkReal x12343=((1.0)*cj1*cj2);
IkReal x12344=(cj3*gconst8*r20);
IkReal x12345=((1.0)*r00*sj3);
CheckValue<IkReal> x12346=IKPowWithIntegerCheck(((((-1.0)*gconst7*x12338*x12345))+(((-1.0)*gconst7*x12337*x12345))+(((-1.0)*gconst8*x12337*x12342))+(((-1.0)*gconst8*x12338*x12342))),-1);
if(!x12346.valid){
continue;
}
CheckValue<IkReal> x12347=IKPowWithIntegerCheck((((sj3*x12338))+((sj3*x12337))),-1);
if(!x12347.valid){
continue;
}
if( IKabs(((x12346.value)*(((((-1.0)*r02*x12343))+((x12336*x12338))+((x12336*x12337))+((r02*x12341))+((r02*x12344))+(((-1.0)*r02*x12339*x12340)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12347.value)*((x12341+x12344+(((-1.0)*x12343))+(((-1.0)*x12339*x12340)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12346.value)*(((((-1.0)*r02*x12343))+((x12336*x12338))+((x12336*x12337))+((r02*x12341))+((r02*x12344))+(((-1.0)*r02*x12339*x12340))))))+IKsqr(((x12347.value)*((x12341+x12344+(((-1.0)*x12343))+(((-1.0)*x12339*x12340))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12346.value)*(((((-1.0)*r02*x12343))+((x12336*x12338))+((x12336*x12337))+((r02*x12341))+((r02*x12344))+(((-1.0)*r02*x12339*x12340))))), ((x12347.value)*((x12341+x12344+(((-1.0)*x12343))+(((-1.0)*x12339*x12340))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12348=IKsin(j4);
IkReal x12349=IKcos(j4);
IkReal x12350=(cj3*gconst7);
IkReal x12351=(gconst7*r00);
IkReal x12352=(cj2*sj1);
IkReal x12353=(cj3*gconst8);
IkReal x12354=(cj1*cj2);
IkReal x12355=(r21*sj3);
IkReal x12356=((1.0)*cj0);
IkReal x12357=((1.0)*sj0);
IkReal x12358=(r01*sj3);
IkReal x12359=(cj1*sj2);
IkReal x12360=(r11*sj3);
IkReal x12361=((1.0)*x12348);
IkReal x12362=((1.0)*x12349);
IkReal x12363=((1.0)*gconst8*sj3);
IkReal x12364=((1.0)*sj1*sj2);
IkReal x12365=(gconst8*x12349);
IkReal x12366=(cj3*x12348);
IkReal x12367=(gconst7*sj3*x12349);
evalcond[0]=((((-1.0)*gconst7*r20*x12361))+(((-1.0)*gconst8*r21*x12361)));
evalcond[1]=((((-1.0)*x12356))+(((-1.0)*gconst8*r01*x12361))+(((-1.0)*x12351*x12361))+(((-1.0)*r02*x12362)));
evalcond[2]=((((-1.0)*x12357))+(((-1.0)*r12*x12362))+(((-1.0)*gconst8*r11*x12361))+(((-1.0)*gconst7*r10*x12361)));
evalcond[3]=((((-1.0)*x12364))+x12354+((r21*x12350))+(((-1.0)*r20*x12353))+((x12355*x12365))+((r20*x12367)));
evalcond[4]=((((-1.0)*r20*x12363))+(((-1.0)*r20*x12350*x12362))+x12359+x12352+(((-1.0)*r21*x12353*x12362))+((gconst7*x12355)));
evalcond[5]=((((-1.0)*r02*sj3*x12361))+(((-1.0)*r00*x12353))+((r01*x12350))+((sj3*x12349*x12351))+((x12358*x12365))+((sj0*x12352))+((sj0*x12359)));
evalcond[6]=((((-1.0)*x12354*x12357))+(((-1.0)*r00*x12350*x12362))+(((-1.0)*r00*x12363))+((sj0*sj1*sj2))+((gconst7*x12358))+((r02*x12366))+(((-1.0)*r01*x12353*x12362)));
evalcond[7]=((((-1.0)*x12356*x12359))+((r10*x12367))+(((-1.0)*r10*x12353))+(((-1.0)*x12352*x12356))+((r11*x12350))+((x12360*x12365))+(((-1.0)*r12*sj3*x12361)));
evalcond[8]=(((cj0*x12354))+(((-1.0)*r10*x12350*x12362))+((gconst7*x12360))+(((-1.0)*r11*x12353*x12362))+(((-1.0)*r10*x12363))+(((-1.0)*sj1*sj2*x12356))+((r12*x12366)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12368=((1.0)*sj0);
CheckValue<IkReal> x12369=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst7*r21))+((gconst8*r20)))),-1);
if(!x12369.valid){
continue;
}
CheckValue<IkReal> x12370 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r12))+((r02*sj0)))),IkReal((((cj0*gconst8*r11))+((cj0*gconst7*r10))+(((-1.0)*gconst7*r00*x12368))+(((-1.0)*gconst8*r01*x12368)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12370.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12369.value)))+(x12370.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12371=IKsin(j4);
IkReal x12372=IKcos(j4);
IkReal x12373=(cj3*gconst7);
IkReal x12374=(gconst7*r00);
IkReal x12375=(cj2*sj1);
IkReal x12376=(cj3*gconst8);
IkReal x12377=(cj1*cj2);
IkReal x12378=(r21*sj3);
IkReal x12379=((1.0)*cj0);
IkReal x12380=((1.0)*sj0);
IkReal x12381=(r01*sj3);
IkReal x12382=(cj1*sj2);
IkReal x12383=(r11*sj3);
IkReal x12384=((1.0)*x12371);
IkReal x12385=((1.0)*x12372);
IkReal x12386=((1.0)*gconst8*sj3);
IkReal x12387=((1.0)*sj1*sj2);
IkReal x12388=(gconst8*x12372);
IkReal x12389=(cj3*x12371);
IkReal x12390=(gconst7*sj3*x12372);
evalcond[0]=((((-1.0)*gconst8*r21*x12384))+(((-1.0)*gconst7*r20*x12384)));
evalcond[1]=((((-1.0)*x12379))+(((-1.0)*r02*x12385))+(((-1.0)*gconst8*r01*x12384))+(((-1.0)*x12374*x12384)));
evalcond[2]=((((-1.0)*gconst8*r11*x12384))+(((-1.0)*gconst7*r10*x12384))+(((-1.0)*x12380))+(((-1.0)*r12*x12385)));
evalcond[3]=(x12377+((r20*x12390))+((r21*x12373))+(((-1.0)*r20*x12376))+(((-1.0)*x12387))+((x12378*x12388)));
evalcond[4]=((((-1.0)*r21*x12376*x12385))+(((-1.0)*r20*x12386))+(((-1.0)*r20*x12373*x12385))+((gconst7*x12378))+x12375+x12382);
evalcond[5]=(((x12381*x12388))+((sj3*x12372*x12374))+(((-1.0)*r00*x12376))+(((-1.0)*r02*sj3*x12384))+((r01*x12373))+((sj0*x12375))+((sj0*x12382)));
evalcond[6]=(((r02*x12389))+(((-1.0)*r00*x12386))+(((-1.0)*r00*x12373*x12385))+((sj0*sj1*sj2))+((gconst7*x12381))+(((-1.0)*x12377*x12380))+(((-1.0)*r01*x12376*x12385)));
evalcond[7]=(((r11*x12373))+(((-1.0)*x12375*x12379))+((r10*x12390))+((x12383*x12388))+(((-1.0)*r10*x12376))+(((-1.0)*r12*sj3*x12384))+(((-1.0)*x12379*x12382)));
evalcond[8]=(((r12*x12389))+(((-1.0)*r11*x12376*x12385))+(((-1.0)*r10*x12373*x12385))+(((-1.0)*sj1*sj2*x12379))+((cj0*x12377))+((gconst7*x12383))+(((-1.0)*r10*x12386)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12391=gconst8*gconst8;
IkReal x12392=r20*r20;
IkReal x12393=r21*r21;
IkReal x12394=gconst7*gconst7;
IkReal x12395=(r20*r21);
IkReal x12396=(gconst7*gconst8);
IkReal x12397=((1.0)*cj3);
IkReal x12398=(gconst8*r21);
IkReal x12399=(sj1*sj2);
IkReal x12400=(gconst7*r20);
IkReal x12401=((1.0)*cj1*cj2);
CheckValue<IkReal> x12402=IKPowWithIntegerCheck(IKsign((((sj3*(r22*r22)))+((sj3*x12392*x12394))+(((2.0)*sj3*x12395*x12396))+((sj3*x12391*x12393)))),-1);
if(!x12402.valid){
continue;
}
CheckValue<IkReal> x12403 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x12399))+((cj3*gconst7*r21*r22))+((cj1*cj2*r22))+(((-1.0)*gconst8*r20*r22*x12397)))),IkReal((((cj3*x12391*x12395))+(((-1.0)*x12398*x12401))+((cj3*x12392*x12396))+(((-1.0)*x12394*x12395*x12397))+(((-1.0)*x12393*x12396*x12397))+((x12398*x12399))+((x12399*x12400))+(((-1.0)*x12400*x12401)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12403.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12402.value)))+(x12403.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12404=IKsin(j4);
IkReal x12405=IKcos(j4);
IkReal x12406=(gconst7*r00);
IkReal x12407=(cj2*sj1);
IkReal x12408=(cj3*gconst8);
IkReal x12409=(cj1*cj2);
IkReal x12410=(gconst7*r10);
IkReal x12411=(gconst7*sj3);
IkReal x12412=(cj3*gconst7);
IkReal x12413=(gconst8*r21);
IkReal x12414=((1.0)*cj0);
IkReal x12415=((1.0)*sj0);
IkReal x12416=(gconst8*r01);
IkReal x12417=(cj1*sj2);
IkReal x12418=(gconst8*r11);
IkReal x12419=((1.0)*x12405);
IkReal x12420=((1.0)*x12404);
IkReal x12421=(cj3*x12404);
IkReal x12422=((1.0)*gconst8*sj3);
IkReal x12423=((1.0)*sj1*sj2);
IkReal x12424=(sj3*x12405);
IkReal x12425=(x12405*x12411);
evalcond[0]=((((-1.0)*r22*x12419))+(((-1.0)*gconst7*r20*x12420))+(((-1.0)*x12413*x12420)));
evalcond[1]=((((-1.0)*r02*x12419))+(((-1.0)*x12414))+(((-1.0)*x12416*x12420))+(((-1.0)*x12406*x12420)));
evalcond[2]=((((-1.0)*x12418*x12420))+(((-1.0)*x12415))+(((-1.0)*x12410*x12420))+(((-1.0)*r12*x12419)));
evalcond[3]=(((r20*x12425))+((r21*x12412))+(((-1.0)*r22*sj3*x12420))+(((-1.0)*x12423))+(((-1.0)*r20*x12408))+x12409+((x12413*x12424)));
evalcond[4]=((((-1.0)*r20*x12422))+((r21*x12411))+(((-1.0)*r21*x12408*x12419))+(((-1.0)*r20*x12412*x12419))+((r22*x12421))+x12407+x12417);
evalcond[5]=((((-1.0)*r02*sj3*x12420))+((sj0*x12407))+((r01*x12412))+((x12406*x12424))+((x12416*x12424))+(((-1.0)*r00*x12408))+((sj0*x12417)));
evalcond[6]=((((-1.0)*cj3*x12406*x12419))+(((-1.0)*r00*x12422))+((r01*x12411))+(((-1.0)*r01*x12408*x12419))+(((-1.0)*x12409*x12415))+((r02*x12421))+((sj0*sj1*sj2)));
evalcond[7]=(((r11*x12412))+(((-1.0)*r12*sj3*x12420))+((x12418*x12424))+(((-1.0)*r10*x12408))+((x12410*x12424))+(((-1.0)*x12407*x12414))+(((-1.0)*x12414*x12417)));
evalcond[8]=((((-1.0)*sj1*sj2*x12414))+(((-1.0)*cj3*x12410*x12419))+(((-1.0)*r10*x12422))+((r11*x12411))+(((-1.0)*r11*x12408*x12419))+((r12*x12421))+((cj0*x12409)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12426=((1.0)*sj0);
CheckValue<IkReal> x12427=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst7*r21))+((gconst8*r20)))),-1);
if(!x12427.valid){
continue;
}
CheckValue<IkReal> x12428 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r12))+((r02*sj0)))),IkReal((((cj0*gconst8*r11))+((cj0*gconst7*r10))+(((-1.0)*gconst8*r01*x12426))+(((-1.0)*gconst7*r00*x12426)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12428.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12427.value)))+(x12428.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12429=IKsin(j4);
IkReal x12430=IKcos(j4);
IkReal x12431=(gconst7*r00);
IkReal x12432=(cj2*sj1);
IkReal x12433=(cj3*gconst8);
IkReal x12434=(cj1*cj2);
IkReal x12435=(gconst7*r10);
IkReal x12436=(gconst7*sj3);
IkReal x12437=(cj3*gconst7);
IkReal x12438=(gconst8*r21);
IkReal x12439=((1.0)*cj0);
IkReal x12440=((1.0)*sj0);
IkReal x12441=(gconst8*r01);
IkReal x12442=(cj1*sj2);
IkReal x12443=(gconst8*r11);
IkReal x12444=((1.0)*x12430);
IkReal x12445=((1.0)*x12429);
IkReal x12446=(cj3*x12429);
IkReal x12447=((1.0)*gconst8*sj3);
IkReal x12448=((1.0)*sj1*sj2);
IkReal x12449=(sj3*x12430);
IkReal x12450=(x12430*x12436);
evalcond[0]=((((-1.0)*r22*x12444))+(((-1.0)*x12438*x12445))+(((-1.0)*gconst7*r20*x12445)));
evalcond[1]=((((-1.0)*r02*x12444))+(((-1.0)*x12441*x12445))+(((-1.0)*x12431*x12445))+(((-1.0)*x12439)));
evalcond[2]=((((-1.0)*x12435*x12445))+(((-1.0)*x12440))+(((-1.0)*r12*x12444))+(((-1.0)*x12443*x12445)));
evalcond[3]=((((-1.0)*x12448))+(((-1.0)*r22*sj3*x12445))+((r21*x12437))+((x12438*x12449))+((r20*x12450))+(((-1.0)*r20*x12433))+x12434);
evalcond[4]=((((-1.0)*r20*x12447))+((r21*x12436))+((r22*x12446))+(((-1.0)*r20*x12437*x12444))+(((-1.0)*r21*x12433*x12444))+x12432+x12442);
evalcond[5]=(((sj0*x12432))+((sj0*x12442))+((x12441*x12449))+(((-1.0)*r02*sj3*x12445))+((x12431*x12449))+((r01*x12437))+(((-1.0)*r00*x12433)));
evalcond[6]=((((-1.0)*r01*x12433*x12444))+((r02*x12446))+(((-1.0)*r00*x12447))+(((-1.0)*x12434*x12440))+(((-1.0)*cj3*x12431*x12444))+((sj0*sj1*sj2))+((r01*x12436)));
evalcond[7]=(((x12443*x12449))+(((-1.0)*r10*x12433))+(((-1.0)*r12*sj3*x12445))+((x12435*x12449))+(((-1.0)*x12439*x12442))+((r11*x12437))+(((-1.0)*x12432*x12439)));
evalcond[8]=(((cj0*x12434))+(((-1.0)*r11*x12433*x12444))+(((-1.0)*sj1*sj2*x12439))+(((-1.0)*r10*x12447))+(((-1.0)*cj3*x12435*x12444))+((r11*x12436))+((r12*x12446)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12451=((1.0)*cj0);
CheckValue<IkReal> x12452=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst7*r11))+((gconst8*r10)))),-1);
if(!x12452.valid){
continue;
}
CheckValue<IkReal> x12453 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*gconst7*r20*x12451))+(((-1.0)*gconst8*r21*x12451)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12453.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12452.value)))+(x12453.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12454=IKsin(j4);
IkReal x12455=IKcos(j4);
IkReal x12456=(gconst7*r00);
IkReal x12457=(cj2*sj1);
IkReal x12458=(cj3*gconst8);
IkReal x12459=(cj1*cj2);
IkReal x12460=(gconst7*r10);
IkReal x12461=(gconst7*sj3);
IkReal x12462=(cj3*gconst7);
IkReal x12463=(gconst8*r21);
IkReal x12464=((1.0)*cj0);
IkReal x12465=((1.0)*sj0);
IkReal x12466=(gconst8*r01);
IkReal x12467=(cj1*sj2);
IkReal x12468=(gconst8*r11);
IkReal x12469=((1.0)*x12455);
IkReal x12470=((1.0)*x12454);
IkReal x12471=(cj3*x12454);
IkReal x12472=((1.0)*gconst8*sj3);
IkReal x12473=((1.0)*sj1*sj2);
IkReal x12474=(sj3*x12455);
IkReal x12475=(x12455*x12461);
evalcond[0]=((((-1.0)*r22*x12469))+(((-1.0)*x12463*x12470))+(((-1.0)*gconst7*r20*x12470)));
evalcond[1]=((((-1.0)*r02*x12469))+(((-1.0)*x12466*x12470))+(((-1.0)*x12456*x12470))+(((-1.0)*x12464)));
evalcond[2]=((((-1.0)*x12460*x12470))+(((-1.0)*x12468*x12470))+(((-1.0)*x12465))+(((-1.0)*r12*x12469)));
evalcond[3]=(((x12463*x12474))+((r20*x12475))+(((-1.0)*r22*sj3*x12470))+(((-1.0)*x12473))+x12459+(((-1.0)*r20*x12458))+((r21*x12462)));
evalcond[4]=((((-1.0)*r20*x12472))+(((-1.0)*r20*x12462*x12469))+(((-1.0)*r21*x12458*x12469))+((r22*x12471))+x12467+x12457+((r21*x12461)));
evalcond[5]=(((r01*x12462))+((x12456*x12474))+((sj0*x12457))+((sj0*x12467))+(((-1.0)*r00*x12458))+((x12466*x12474))+(((-1.0)*r02*sj3*x12470)));
evalcond[6]=(((r01*x12461))+(((-1.0)*x12459*x12465))+(((-1.0)*r01*x12458*x12469))+(((-1.0)*cj3*x12456*x12469))+((sj0*sj1*sj2))+((r02*x12471))+(((-1.0)*r00*x12472)));
evalcond[7]=((((-1.0)*x12464*x12467))+(((-1.0)*x12457*x12464))+((r11*x12462))+(((-1.0)*r10*x12458))+(((-1.0)*r12*sj3*x12470))+((x12468*x12474))+((x12460*x12474)));
evalcond[8]=((((-1.0)*sj1*sj2*x12464))+(((-1.0)*r11*x12458*x12469))+(((-1.0)*cj3*x12460*x12469))+((r12*x12471))+((cj0*x12459))+((r11*x12461))+(((-1.0)*r10*x12472)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12476=((-1.0)*r00);
IkReal x12478 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x12478)==0){
continue;
}
IkReal x12477=pow(x12478,-0.5);
CheckValue<IkReal> x12479 = IKatan2WithCheck(IkReal(x12476),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x12479.valid){
continue;
}
IkReal gconst9=((3.14159265358979)+(((-1.0)*(x12479.value))));
IkReal gconst10=(x12476*x12477);
IkReal gconst11=((-1.0)*r01*x12477);
CheckValue<IkReal> x12480 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x12480.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x12480.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x12481=((-1.0)*r00);
CheckValue<IkReal> x12484 = IKatan2WithCheck(IkReal(x12481),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x12484.valid){
continue;
}
IkReal x12482=((1.0)*(x12484.value));
IkReal x12483=x12477;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12482)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12482)));
IkReal gconst10=(x12481*x12483);
IkReal gconst11=((-1.0)*r01*x12483);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
IkReal x12485=((-1.0)*r00);
CheckValue<IkReal> x12488 = IKatan2WithCheck(IkReal(x12485),IkReal(r01),IKFAST_ATAN2_MAGTHRESH);
if(!x12488.valid){
continue;
}
IkReal x12486=((1.0)*(x12488.value));
IkReal x12487=x12477;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12486)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12486)));
IkReal gconst10=(x12485*x12487);
IkReal gconst11=((-1.0)*r01*x12487);
j4eval[0]=0;
j4eval[1]=r22;
j4eval[2]=sj0;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12489=((1.0)*gconst10);
CheckValue<IkReal> x12490=IKPowWithIntegerCheck(IKsign((((gconst11*r20))+(((-1.0)*r21*x12489)))),-1);
if(!x12490.valid){
continue;
}
CheckValue<IkReal> x12491 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r12))+((r02*sj0)))),IkReal(((((-1.0)*r00*sj0*x12489))+((cj0*gconst10*r10))+((cj0*gconst11*r11))+(((-1.0)*gconst11*r01*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12491.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12490.value)))+(x12491.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12492=IKsin(j4);
IkReal x12493=IKcos(j4);
IkReal x12494=(r10*sj3);
IkReal x12495=(gconst11*r21);
IkReal x12496=((1.0)*gconst11);
IkReal x12497=(gconst10*r21);
IkReal x12498=(r20*sj3);
IkReal x12499=(cj2*sj1);
IkReal x12500=(cj3*gconst10);
IkReal x12501=(cj1*cj2);
IkReal x12502=(r00*sj3);
IkReal x12503=(gconst11*r01);
IkReal x12504=(gconst11*r11);
IkReal x12505=((1.0)*sj0);
IkReal x12506=((1.0)*cj0);
IkReal x12507=(gconst10*sj3);
IkReal x12508=(cj1*sj2);
IkReal x12509=((1.0)*x12493);
IkReal x12510=((1.0)*x12492);
IkReal x12511=(gconst10*x12493);
IkReal x12512=(cj3*x12492);
IkReal x12513=((1.0)*sj1*sj2);
IkReal x12514=(gconst11*sj3*x12493);
evalcond[0]=((((-1.0)*r22*x12509))+(((-1.0)*gconst10*r20*x12510))+(((-1.0)*x12495*x12510)));
evalcond[1]=((((-1.0)*x12506))+(((-1.0)*r02*x12509))+(((-1.0)*gconst10*r00*x12510))+(((-1.0)*r01*x12492*x12496)));
evalcond[2]=((((-1.0)*x12505))+(((-1.0)*r11*x12492*x12496))+(((-1.0)*r12*x12509))+(((-1.0)*gconst10*r10*x12510)));
evalcond[3]=((((-1.0)*x12513))+((cj3*x12497))+((x12498*x12511))+(((-1.0)*r22*sj3*x12510))+((sj3*x12493*x12495))+(((-1.0)*cj3*r20*x12496))+x12501);
evalcond[4]=((((-1.0)*cj3*x12495*x12509))+(((-1.0)*r20*x12500*x12509))+((r22*x12512))+x12508+x12499+(((-1.0)*x12496*x12498))+((sj3*x12497)));
evalcond[5]=(((x12502*x12511))+((sj0*x12508))+((sj0*x12499))+(((-1.0)*cj3*r00*x12496))+((r01*x12500))+(((-1.0)*r02*sj3*x12510))+((sj3*x12493*x12503)));
evalcond[6]=((((-1.0)*cj3*r01*x12493*x12496))+(((-1.0)*x12496*x12502))+((r01*x12507))+(((-1.0)*x12501*x12505))+(((-1.0)*r00*x12500*x12509))+((sj0*sj1*sj2))+((r02*x12512)));
evalcond[7]=(((r11*x12500))+(((-1.0)*x12506*x12508))+(((-1.0)*r12*sj3*x12510))+((x12494*x12511))+((sj3*x12493*x12504))+(((-1.0)*cj3*r10*x12496))+(((-1.0)*x12499*x12506)));
evalcond[8]=((((-1.0)*r10*x12500*x12509))+((r12*x12512))+((r11*x12507))+(((-1.0)*cj3*r11*x12493*x12496))+((cj0*x12501))+(((-1.0)*x12494*x12496))+(((-1.0)*sj1*sj2*x12506)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12515=((1.0)*sj0);
CheckValue<IkReal> x12516=IKPowWithIntegerCheck(IKsign((((gconst10*r01))+(((-1.0)*gconst11*r00)))),-1);
if(!x12516.valid){
continue;
}
CheckValue<IkReal> x12517 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst10*r20*x12515))+(((-1.0)*gconst11*r21*x12515)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12517.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12516.value)))+(x12517.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12518=IKsin(j4);
IkReal x12519=IKcos(j4);
IkReal x12520=(r10*sj3);
IkReal x12521=(gconst11*r21);
IkReal x12522=((1.0)*gconst11);
IkReal x12523=(gconst10*r21);
IkReal x12524=(r20*sj3);
IkReal x12525=(cj2*sj1);
IkReal x12526=(cj3*gconst10);
IkReal x12527=(cj1*cj2);
IkReal x12528=(r00*sj3);
IkReal x12529=(gconst11*r01);
IkReal x12530=(gconst11*r11);
IkReal x12531=((1.0)*sj0);
IkReal x12532=((1.0)*cj0);
IkReal x12533=(gconst10*sj3);
IkReal x12534=(cj1*sj2);
IkReal x12535=((1.0)*x12519);
IkReal x12536=((1.0)*x12518);
IkReal x12537=(gconst10*x12519);
IkReal x12538=(cj3*x12518);
IkReal x12539=((1.0)*sj1*sj2);
IkReal x12540=(gconst11*sj3*x12519);
evalcond[0]=((((-1.0)*x12521*x12536))+(((-1.0)*r22*x12535))+(((-1.0)*gconst10*r20*x12536)));
evalcond[1]=((((-1.0)*gconst10*r00*x12536))+(((-1.0)*r02*x12535))+(((-1.0)*r01*x12518*x12522))+(((-1.0)*x12532)));
evalcond[2]=((((-1.0)*gconst10*r10*x12536))+(((-1.0)*r12*x12535))+(((-1.0)*r11*x12518*x12522))+(((-1.0)*x12531)));
evalcond[3]=((((-1.0)*r22*sj3*x12536))+((x12524*x12537))+((sj3*x12519*x12521))+(((-1.0)*cj3*r20*x12522))+x12527+(((-1.0)*x12539))+((cj3*x12523)));
evalcond[4]=((((-1.0)*cj3*x12521*x12535))+(((-1.0)*x12522*x12524))+((sj3*x12523))+(((-1.0)*r20*x12526*x12535))+((r22*x12538))+x12525+x12534);
evalcond[5]=(((sj0*x12525))+(((-1.0)*cj3*r00*x12522))+((x12528*x12537))+((r01*x12526))+((sj3*x12519*x12529))+(((-1.0)*r02*sj3*x12536))+((sj0*x12534)));
evalcond[6]=((((-1.0)*cj3*r01*x12519*x12522))+(((-1.0)*x12522*x12528))+(((-1.0)*x12527*x12531))+((r02*x12538))+((sj0*sj1*sj2))+(((-1.0)*r00*x12526*x12535))+((r01*x12533)));
evalcond[7]=(((sj3*x12519*x12530))+(((-1.0)*x12525*x12532))+(((-1.0)*r12*sj3*x12536))+(((-1.0)*x12532*x12534))+((r11*x12526))+((x12520*x12537))+(((-1.0)*cj3*r10*x12522)));
evalcond[8]=((((-1.0)*cj3*r11*x12519*x12522))+((cj0*x12527))+((r11*x12533))+(((-1.0)*sj1*sj2*x12532))+(((-1.0)*r10*x12526*x12535))+((r12*x12538))+(((-1.0)*x12520*x12522)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12541=((1.0)*gconst10);
CheckValue<IkReal> x12542=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x12541))+((gconst11*r10)))),-1);
if(!x12542.valid){
continue;
}
CheckValue<IkReal> x12543 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x12541))+(((-1.0)*cj0*gconst11*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12543.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12542.value)))+(x12543.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12544=IKsin(j4);
IkReal x12545=IKcos(j4);
IkReal x12546=(r10*sj3);
IkReal x12547=(gconst11*r21);
IkReal x12548=((1.0)*gconst11);
IkReal x12549=(gconst10*r21);
IkReal x12550=(r20*sj3);
IkReal x12551=(cj2*sj1);
IkReal x12552=(cj3*gconst10);
IkReal x12553=(cj1*cj2);
IkReal x12554=(r00*sj3);
IkReal x12555=(gconst11*r01);
IkReal x12556=(gconst11*r11);
IkReal x12557=((1.0)*sj0);
IkReal x12558=((1.0)*cj0);
IkReal x12559=(gconst10*sj3);
IkReal x12560=(cj1*sj2);
IkReal x12561=((1.0)*x12545);
IkReal x12562=((1.0)*x12544);
IkReal x12563=(gconst10*x12545);
IkReal x12564=(cj3*x12544);
IkReal x12565=((1.0)*sj1*sj2);
IkReal x12566=(gconst11*sj3*x12545);
evalcond[0]=((((-1.0)*r22*x12561))+(((-1.0)*gconst10*r20*x12562))+(((-1.0)*x12547*x12562)));
evalcond[1]=((((-1.0)*r02*x12561))+(((-1.0)*gconst10*r00*x12562))+(((-1.0)*r01*x12544*x12548))+(((-1.0)*x12558)));
evalcond[2]=((((-1.0)*r12*x12561))+(((-1.0)*gconst10*r10*x12562))+(((-1.0)*r11*x12544*x12548))+(((-1.0)*x12557)));
evalcond[3]=(((x12550*x12563))+(((-1.0)*r22*sj3*x12562))+((cj3*x12549))+(((-1.0)*cj3*r20*x12548))+((sj3*x12545*x12547))+x12553+(((-1.0)*x12565)));
evalcond[4]=((((-1.0)*x12548*x12550))+(((-1.0)*r20*x12552*x12561))+(((-1.0)*cj3*x12547*x12561))+((sj3*x12549))+((r22*x12564))+x12551+x12560);
evalcond[5]=(((r01*x12552))+((sj0*x12560))+((sj0*x12551))+(((-1.0)*r02*sj3*x12562))+((sj3*x12545*x12555))+((x12554*x12563))+(((-1.0)*cj3*r00*x12548)));
evalcond[6]=(((r01*x12559))+(((-1.0)*x12548*x12554))+(((-1.0)*x12553*x12557))+(((-1.0)*r00*x12552*x12561))+(((-1.0)*cj3*r01*x12545*x12548))+((sj0*sj1*sj2))+((r02*x12564)));
evalcond[7]=(((x12546*x12563))+((r11*x12552))+(((-1.0)*cj3*r10*x12548))+((sj3*x12545*x12556))+(((-1.0)*x12558*x12560))+(((-1.0)*r12*sj3*x12562))+(((-1.0)*x12551*x12558)));
evalcond[8]=(((r12*x12564))+(((-1.0)*sj1*sj2*x12558))+((r11*x12559))+(((-1.0)*x12546*x12548))+(((-1.0)*r10*x12552*x12561))+((cj0*x12553))+(((-1.0)*cj3*r11*x12545*x12548)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x12567=((1.0)*sj5);
IkReal x12568=(((cj5*r10))+(((-1.0)*r11*x12567)));
j4eval[0]=x12568;
j4eval[1]=IKsign(x12568);
j4eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*cj5*r21))+(((-1.0)*r20*x12567))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x12569=((1.0)*cj5);
IkReal x12570=(((r21*sj5))+(((-1.0)*r20*x12569)));
j4eval[0]=x12570;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r11*x12569))+(((-1.0)*r10*sj5))))));
j4eval[2]=IKsign(x12570);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=0;
cj0=1.0;
j0=0;
IkReal x12571=cj5*cj5;
IkReal x12572=(r00*r20);
IkReal x12573=(sj3*x12571);
IkReal x12574=(cj5*sj3*sj5);
IkReal x12575=(((sj3*x12572))+(((-1.0)*x12572*x12573))+((r01*r21*x12573))+((r00*r21*x12574))+((r01*r20*x12574))+((r02*r22*sj3)));
j4eval[0]=x12575;
j4eval[1]=IKsign(x12575);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal x12576=((1.0)*sj5);
IkReal x12577=(((cj5*r10))+(((-1.0)*r11*x12576)));
j4eval[0]=x12577;
j4eval[1]=IKsign(x12577);
j4eval[2]=((IKabs(((((-1.0)*r20*x12576))+(((-1.0)*cj5*r21)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal x12578=((1.0)*cj5);
IkReal x12579=((((-1.0)*r20*x12578))+((r21*sj5)));
j4eval[0]=x12579;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*sj5))+(((-1.0)*r11*x12578))))));
j4eval[2]=IKsign(x12579);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal x12580=cj5*cj5;
IkReal x12581=r00*r00;
IkReal x12582=(r00*sj5);
IkReal x12583=(cj5*r01);
IkReal x12584=(((x12580*(r01*r01)))+(((-1.0)*x12580*x12581))+x12581+(r02*r02)+(((2.0)*x12582*x12583)));
j4eval[0]=x12584;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*x12583))+(((-1.0)*x12582))))));
j4eval[2]=IKsign(x12584);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12585=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12585);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12585);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x12586=((1.0)*sj5);
IkReal x12587=((1.0)*cj5);
j4eval[0]=((((-1.0)*r01*x12587))+(((-1.0)*r00*x12586)));
j4eval[1]=((((-1.0)*r11*x12587))+(((-1.0)*r10*x12586)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12588=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12588);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12588);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=((((-1.0)*cj5*r11))+(((-1.0)*r10*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12589=((1.0)*cj2);
CheckValue<IkReal> x12590=IKPowWithIntegerCheck(r22,-1);
if(!x12590.valid){
continue;
}
CheckValue<IkReal> x12591=IKPowWithIntegerCheck(((((-1.0)*cj5*r11))+(((-1.0)*r10*sj5))),-1);
if(!x12591.valid){
continue;
}
if( IKabs(((x12590.value)*(((((-1.0)*sj1*x12589))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12591.value)*((((sj1*sj2))+(((-1.0)*cj1*x12589)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12590.value)*(((((-1.0)*sj1*x12589))+(((-1.0)*cj1*sj2))))))+IKsqr(((x12591.value)*((((sj1*sj2))+(((-1.0)*cj1*x12589))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12590.value)*(((((-1.0)*sj1*x12589))+(((-1.0)*cj1*sj2))))), ((x12591.value)*((((sj1*sj2))+(((-1.0)*cj1*x12589))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12592=IKsin(j4);
IkReal x12593=IKcos(j4);
IkReal x12594=((1.0)*r00*sj5);
IkReal x12595=((1.0)*r10*sj5);
IkReal x12596=((1.0)*cj5*x12593);
IkReal x12597=((1.0)*cj5*x12592);
evalcond[0]=((-1.0)*r22*x12593);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((r22*x12592)));
evalcond[2]=((((-1.0)*r11*x12597))+(((-1.0)*x12592*x12595)));
evalcond[3]=((((-1.0)*r01*x12596))+(((-1.0)*x12593*x12594)));
evalcond[4]=((-1.0)+(((-1.0)*r01*x12597))+(((-1.0)*x12592*x12594)));
evalcond[5]=((((-1.0)*r11*x12596))+(((-1.0)*sj1*sj2))+(((-1.0)*x12593*x12595))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12598=((1.0)*cj5);
IkReal x12599=((1.0)*sj5);
CheckValue<IkReal> x12600=IKPowWithIntegerCheck(((((-1.0)*r01*x12598))+(((-1.0)*r00*x12599))),-1);
if(!x12600.valid){
continue;
}
CheckValue<IkReal> x12601=IKPowWithIntegerCheck(((((-1.0)*r11*x12598))+(((-1.0)*r10*x12599))),-1);
if(!x12601.valid){
continue;
}
if( IKabs(x12600.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12601.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x12600.value)+IKsqr(((x12601.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x12600.value, ((x12601.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12602=IKsin(j4);
IkReal x12603=IKcos(j4);
IkReal x12604=((1.0)*r00*sj5);
IkReal x12605=((1.0)*r10*sj5);
IkReal x12606=((1.0)*cj5*x12603);
IkReal x12607=((1.0)*cj5*x12602);
evalcond[0]=((-1.0)*r22*x12603);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((r22*x12602)));
evalcond[2]=((((-1.0)*r11*x12607))+(((-1.0)*x12602*x12605)));
evalcond[3]=((((-1.0)*r01*x12606))+(((-1.0)*x12603*x12604)));
evalcond[4]=((-1.0)+(((-1.0)*r01*x12607))+(((-1.0)*x12602*x12604)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r11*x12606))+((cj1*cj2))+(((-1.0)*x12603*x12605)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12608=((-1.0)*py);
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12608);
rxp0_2=(py*r00);
rxp1_0=(r21*x12608);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x12609=((1.0)*sj5);
IkReal x12610=((1.0)*cj5);
j4eval[0]=((((-1.0)*r00*x12609))+(((-1.0)*r01*x12610)));
j4eval[1]=((((-1.0)*r21*x12610))+(((-1.0)*r20*x12609)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12611=((-1.0)*py);
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12611);
rxp0_2=(py*r00);
rxp1_0=(r21*x12611);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
j4eval[1]=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12612=((1.0)*cj2);
CheckValue<IkReal> x12613=IKPowWithIntegerCheck(r12,-1);
if(!x12613.valid){
continue;
}
CheckValue<IkReal> x12614=IKPowWithIntegerCheck(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5))),-1);
if(!x12614.valid){
continue;
}
if( IKabs(((x12613.value)*(((((-1.0)*cj1*x12612))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12614.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12612)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12613.value)*(((((-1.0)*cj1*x12612))+((sj1*sj2))))))+IKsqr(((x12614.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12612))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12613.value)*(((((-1.0)*cj1*x12612))+((sj1*sj2))))), ((x12614.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12612))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12615=IKsin(j4);
IkReal x12616=IKcos(j4);
IkReal x12617=((1.0)*cj5);
IkReal x12618=((1.0)*r00*sj5);
IkReal x12619=((1.0)*r20*sj5);
evalcond[0]=((-1.0)*r12*x12616);
evalcond[1]=((((-1.0)*sj1*sj2))+((cj1*cj2))+((r12*x12615)));
evalcond[2]=((((-1.0)*x12615*x12619))+(((-1.0)*r21*x12615*x12617)));
evalcond[3]=((((-1.0)*r01*x12616*x12617))+(((-1.0)*x12616*x12618)));
evalcond[4]=((-1.0)+(((-1.0)*r01*x12615*x12617))+(((-1.0)*x12615*x12618)));
evalcond[5]=((((-1.0)*r21*x12616*x12617))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x12616*x12619)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12620=((1.0)*sj5);
IkReal x12621=((1.0)*cj5);
CheckValue<IkReal> x12622=IKPowWithIntegerCheck(((((-1.0)*r01*x12621))+(((-1.0)*r00*x12620))),-1);
if(!x12622.valid){
continue;
}
CheckValue<IkReal> x12623=IKPowWithIntegerCheck(((((-1.0)*r21*x12621))+(((-1.0)*r20*x12620))),-1);
if(!x12623.valid){
continue;
}
if( IKabs(x12622.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12623.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x12622.value)+IKsqr(((x12623.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x12622.value, ((x12623.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12624=IKsin(j4);
IkReal x12625=IKcos(j4);
IkReal x12626=((1.0)*cj5);
IkReal x12627=((1.0)*r00*sj5);
IkReal x12628=((1.0)*r20*sj5);
evalcond[0]=((-1.0)*r12*x12625);
evalcond[1]=((((-1.0)*sj1*sj2))+((r12*x12624))+((cj1*cj2)));
evalcond[2]=((((-1.0)*x12624*x12628))+(((-1.0)*r21*x12624*x12626)));
evalcond[3]=((((-1.0)*x12625*x12627))+(((-1.0)*r01*x12625*x12626)));
evalcond[4]=((-1.0)+(((-1.0)*r01*x12624*x12626))+(((-1.0)*x12624*x12627)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*r21*x12625*x12626))+(((-1.0)*x12625*x12628))+((cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12629=cj5*cj5;
IkReal x12630=r00*r00;
IkReal x12631=(r00*sj5);
IkReal x12632=(cj5*r01);
CheckValue<IkReal> x12633 = IKatan2WithCheck(IkReal(((((-1.0)*x12632))+(((-1.0)*x12631)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12633.valid){
continue;
}
CheckValue<IkReal> x12634=IKPowWithIntegerCheck(IKsign(((((2.0)*x12631*x12632))+(((-1.0)*x12629*x12630))+((x12629*(r01*r01)))+x12630+(r02*r02))),-1);
if(!x12634.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12633.value)+(((1.5707963267949)*(x12634.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12635=IKcos(j4);
IkReal x12636=IKsin(j4);
IkReal x12637=(r00*sj5);
IkReal x12638=(cj5*r01);
IkReal x12639=(r20*sj5);
IkReal x12640=(cj5*r21);
IkReal x12641=(cj5*r11);
IkReal x12642=(r10*sj5);
IkReal x12643=((1.0)*x12635);
IkReal x12644=((1.0)*x12636);
evalcond[0]=((((-1.0)*x12637*x12643))+(((-1.0)*x12638*x12643))+((r02*x12636)));
evalcond[1]=((((-1.0)*x12639*x12644))+(((-1.0)*r22*x12643))+(((-1.0)*x12640*x12644)));
evalcond[2]=((((-1.0)*x12642*x12644))+(((-1.0)*x12641*x12644))+(((-1.0)*r12*x12643)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x12643))+(((-1.0)*x12637*x12644))+(((-1.0)*x12638*x12644)));
evalcond[4]=((((-1.0)*x12639*x12643))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x12640*x12643))+((r22*x12636)));
evalcond[5]=(((r12*x12636))+(((-1.0)*sj1*sj2))+(((-1.0)*x12642*x12643))+(((-1.0)*x12641*x12643))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12645=((1.0)*cj5);
CheckValue<IkReal> x12646 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*sj5))+(((-1.0)*r11*x12645)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12646.valid){
continue;
}
CheckValue<IkReal> x12647=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x12645))+((r21*sj5)))),-1);
if(!x12647.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12646.value)+(((1.5707963267949)*(x12647.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12648=IKcos(j4);
IkReal x12649=IKsin(j4);
IkReal x12650=(r00*sj5);
IkReal x12651=(cj5*r01);
IkReal x12652=(r20*sj5);
IkReal x12653=(cj5*r21);
IkReal x12654=(cj5*r11);
IkReal x12655=(r10*sj5);
IkReal x12656=((1.0)*x12648);
IkReal x12657=((1.0)*x12649);
evalcond[0]=((((-1.0)*x12650*x12656))+(((-1.0)*x12651*x12656))+((r02*x12649)));
evalcond[1]=((((-1.0)*x12652*x12657))+(((-1.0)*x12653*x12657))+(((-1.0)*r22*x12656)));
evalcond[2]=((((-1.0)*r12*x12656))+(((-1.0)*x12655*x12657))+(((-1.0)*x12654*x12657)));
evalcond[3]=((-1.0)+(((-1.0)*x12650*x12657))+(((-1.0)*r02*x12656))+(((-1.0)*x12651*x12657)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x12652*x12656))+((cj1*sj2))+((r22*x12649))+(((-1.0)*x12653*x12656)));
evalcond[5]=(((r12*x12649))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*x12655*x12656))+(((-1.0)*x12654*x12656)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12658=((1.0)*sj5);
CheckValue<IkReal> x12659 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*cj5*r21))+(((-1.0)*r20*x12658)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12659.valid){
continue;
}
CheckValue<IkReal> x12660=IKPowWithIntegerCheck(IKsign((((cj5*r10))+(((-1.0)*r11*x12658)))),-1);
if(!x12660.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12659.value)+(((1.5707963267949)*(x12660.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12661=IKcos(j4);
IkReal x12662=IKsin(j4);
IkReal x12663=(r00*sj5);
IkReal x12664=(cj5*r01);
IkReal x12665=(r20*sj5);
IkReal x12666=(cj5*r21);
IkReal x12667=(cj5*r11);
IkReal x12668=(r10*sj5);
IkReal x12669=((1.0)*x12661);
IkReal x12670=((1.0)*x12662);
evalcond[0]=(((r02*x12662))+(((-1.0)*x12664*x12669))+(((-1.0)*x12663*x12669)));
evalcond[1]=((((-1.0)*r22*x12669))+(((-1.0)*x12666*x12670))+(((-1.0)*x12665*x12670)));
evalcond[2]=((((-1.0)*x12667*x12670))+(((-1.0)*r12*x12669))+(((-1.0)*x12668*x12670)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x12669))+(((-1.0)*x12663*x12670))+(((-1.0)*x12664*x12670)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x12666*x12669))+(((-1.0)*x12665*x12669))+((r22*x12662)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*x12667*x12669))+((r12*x12662))+((cj1*cj2))+(((-1.0)*x12668*x12669)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x12671=((1.0)*sj5);
IkReal x12672=(((cj5*r10))+(((-1.0)*r11*x12671)));
j4eval[0]=x12672;
j4eval[1]=IKsign(x12672);
j4eval[2]=((IKabs(((((-1.0)*r20*x12671))+(((-1.0)*cj5*r21)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x12673=((1.0)*cj5);
IkReal x12674=(((r21*sj5))+(((-1.0)*r20*x12673)));
j4eval[0]=x12674;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*sj5))+(((-1.0)*r11*x12673))))));
j4eval[2]=IKsign(x12674);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x12675=(cj5*r01);
IkReal x12676=(cj1*sj2);
IkReal x12677=(cj2*sj1);
IkReal x12678=(r00*sj5);
IkReal x12679=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[0]=x12679;
j4eval[1]=((IKabs((((r02*x12677))+((r02*x12676)))))+(IKabs((((x12676*x12678))+((x12677*x12678))+((x12675*x12677))+((x12675*x12676))))));
j4eval[2]=IKsign(x12679);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12680=((-1.0)*py);
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12680);
rxp0_2=(py*r00);
rxp1_0=(r21*x12680);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)));
j4eval[1]=(((cj5*r21))+((r20*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12681=((-1.0)*py);
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12681);
rxp0_2=(py*r00);
rxp1_0=(r21*x12681);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
j4eval[1]=(((cj5*r21))+((r20*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12682=((1.0)*sj1);
CheckValue<IkReal> x12683=IKPowWithIntegerCheck(r12,-1);
if(!x12683.valid){
continue;
}
CheckValue<IkReal> x12684=IKPowWithIntegerCheck((((cj5*r21))+((r20*sj5))),-1);
if(!x12684.valid){
continue;
}
if( IKabs(((x12683.value)*((((cj1*cj2))+(((-1.0)*sj2*x12682)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12684.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12682)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12683.value)*((((cj1*cj2))+(((-1.0)*sj2*x12682))))))+IKsqr(((x12684.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12682))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12683.value)*((((cj1*cj2))+(((-1.0)*sj2*x12682))))), ((x12684.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12682))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12685=IKcos(j4);
IkReal x12686=IKsin(j4);
IkReal x12687=(cj5*r21);
IkReal x12688=(cj5*r01);
IkReal x12689=(r00*sj5);
IkReal x12690=(r20*sj5);
IkReal x12691=((1.0)*x12686);
evalcond[0]=((-1.0)*r12*x12685);
evalcond[1]=(((x12685*x12688))+((x12685*x12689)));
evalcond[2]=((((-1.0)*r12*x12691))+(((-1.0)*sj1*sj2))+((cj1*cj2)));
evalcond[3]=((((-1.0)*x12687*x12691))+(((-1.0)*x12690*x12691)));
evalcond[4]=((-1.0)+(((-1.0)*x12689*x12691))+(((-1.0)*x12688*x12691)));
evalcond[5]=(((cj2*sj1))+((cj1*sj2))+((x12685*x12690))+((x12685*x12687)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12692=IKPowWithIntegerCheck(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01))),-1);
if(!x12692.valid){
continue;
}
CheckValue<IkReal> x12693=IKPowWithIntegerCheck((((cj5*r21))+((r20*sj5))),-1);
if(!x12693.valid){
continue;
}
if( IKabs(x12692.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12693.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x12692.value)+IKsqr(((x12693.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x12692.value, ((x12693.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12694=IKcos(j4);
IkReal x12695=IKsin(j4);
IkReal x12696=(cj5*r21);
IkReal x12697=(cj5*r01);
IkReal x12698=(r00*sj5);
IkReal x12699=(r20*sj5);
IkReal x12700=((1.0)*x12695);
evalcond[0]=((-1.0)*r12*x12694);
evalcond[1]=(((x12694*x12697))+((x12694*x12698)));
evalcond[2]=((((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*r12*x12700)));
evalcond[3]=((((-1.0)*x12696*x12700))+(((-1.0)*x12699*x12700)));
evalcond[4]=((-1.0)+(((-1.0)*x12698*x12700))+(((-1.0)*x12697*x12700)));
evalcond[5]=(((cj2*sj1))+((x12694*x12696))+((x12694*x12699))+((cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x12701=(((r01*sj5))+(((-1.0)*cj5*r00)));
j4eval[0]=x12701;
j4eval[1]=IKsign(x12701);
j4eval[2]=((IKabs((((cj5*r21))+((r20*sj5)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x12702=(((cj5*r20))+(((-1.0)*r21*sj5)));
j4eval[0]=x12702;
j4eval[1]=((IKabs(r02))+(IKabs((((r00*sj5))+((cj5*r01))))));
j4eval[2]=IKsign(x12702);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x12703=cj5*cj5;
IkReal x12704=r00*r00;
IkReal x12705=(r00*sj5);
IkReal x12706=(cj5*r01);
IkReal x12707=((((-1.0)*x12703*(r01*r01)))+(((-1.0)*(r02*r02)))+(((-2.0)*x12705*x12706))+((x12703*x12704))+(((-1.0)*x12704)));
j4eval[0]=x12707;
j4eval[1]=((IKabs((x12706+x12705)))+(IKabs(r02)));
j4eval[2]=IKsign(x12707);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12708=cj5*cj5;
IkReal x12709=r00*r00;
IkReal x12710=(r00*sj5);
IkReal x12711=(cj5*r01);
CheckValue<IkReal> x12712 = IKatan2WithCheck(IkReal((x12710+x12711)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x12712.valid){
continue;
}
CheckValue<IkReal> x12713=IKPowWithIntegerCheck(IKsign((((x12708*x12709))+(((-1.0)*(r02*r02)))+(((-1.0)*x12708*(r01*r01)))+(((-2.0)*x12710*x12711))+(((-1.0)*x12709)))),-1);
if(!x12713.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12712.value)+(((1.5707963267949)*(x12713.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12714=IKcos(j4);
IkReal x12715=IKsin(j4);
IkReal x12716=(cj5*r21);
IkReal x12717=(cj5*r11);
IkReal x12718=(cj5*r01);
IkReal x12719=((1.0)*x12714);
IkReal x12720=(sj5*x12714);
IkReal x12721=((1.0)*x12715);
evalcond[0]=((((-1.0)*r22*x12721))+((r20*x12720))+((x12714*x12716)));
evalcond[1]=((((-1.0)*r02*x12721))+((x12714*x12718))+((r00*x12720)));
evalcond[2]=((1.0)+((x12714*x12717))+((r10*x12720))+(((-1.0)*r12*x12721)));
evalcond[3]=((((-1.0)*r20*sj5*x12721))+(((-1.0)*x12716*x12721))+(((-1.0)*r22*x12719)));
evalcond[4]=((((-1.0)*r12*x12719))+(((-1.0)*x12717*x12721))+(((-1.0)*r10*sj5*x12721)));
evalcond[5]=((-1.0)+(((-1.0)*r00*sj5*x12721))+(((-1.0)*x12718*x12721))+(((-1.0)*r02*x12719)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12722 = IKatan2WithCheck(IkReal((((r00*sj5))+((cj5*r01)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x12722.valid){
continue;
}
CheckValue<IkReal> x12723=IKPowWithIntegerCheck(IKsign((((cj5*r20))+(((-1.0)*r21*sj5)))),-1);
if(!x12723.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12722.value)+(((1.5707963267949)*(x12723.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12724=IKcos(j4);
IkReal x12725=IKsin(j4);
IkReal x12726=(cj5*r21);
IkReal x12727=(cj5*r11);
IkReal x12728=(cj5*r01);
IkReal x12729=((1.0)*x12724);
IkReal x12730=(sj5*x12724);
IkReal x12731=((1.0)*x12725);
evalcond[0]=((((-1.0)*r22*x12731))+((r20*x12730))+((x12724*x12726)));
evalcond[1]=((((-1.0)*r02*x12731))+((x12724*x12728))+((r00*x12730)));
evalcond[2]=((1.0)+((x12724*x12727))+((r10*x12730))+(((-1.0)*r12*x12731)));
evalcond[3]=((((-1.0)*r20*sj5*x12731))+(((-1.0)*r22*x12729))+(((-1.0)*x12726*x12731)));
evalcond[4]=((((-1.0)*x12727*x12731))+(((-1.0)*r10*sj5*x12731))+(((-1.0)*r12*x12729)));
evalcond[5]=((-1.0)+(((-1.0)*r02*x12729))+(((-1.0)*x12728*x12731))+(((-1.0)*r00*sj5*x12731)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12732 = IKatan2WithCheck(IkReal((((cj5*r21))+((r20*sj5)))),IkReal(r22),IKFAST_ATAN2_MAGTHRESH);
if(!x12732.valid){
continue;
}
CheckValue<IkReal> x12733=IKPowWithIntegerCheck(IKsign((((r01*sj5))+(((-1.0)*cj5*r00)))),-1);
if(!x12733.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12732.value)+(((1.5707963267949)*(x12733.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12734=IKcos(j4);
IkReal x12735=IKsin(j4);
IkReal x12736=(cj5*r21);
IkReal x12737=(cj5*r11);
IkReal x12738=(cj5*r01);
IkReal x12739=((1.0)*x12734);
IkReal x12740=(sj5*x12734);
IkReal x12741=((1.0)*x12735);
evalcond[0]=(((x12734*x12736))+(((-1.0)*r22*x12741))+((r20*x12740)));
evalcond[1]=((((-1.0)*r02*x12741))+((x12734*x12738))+((r00*x12740)));
evalcond[2]=((1.0)+(((-1.0)*r12*x12741))+((x12734*x12737))+((r10*x12740)));
evalcond[3]=((((-1.0)*r22*x12739))+(((-1.0)*r20*sj5*x12741))+(((-1.0)*x12736*x12741)));
evalcond[4]=((((-1.0)*r10*sj5*x12741))+(((-1.0)*r12*x12739))+(((-1.0)*x12737*x12741)));
evalcond[5]=((-1.0)+(((-1.0)*r02*x12739))+(((-1.0)*x12738*x12741))+(((-1.0)*r00*sj5*x12741)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x12742=((((-1.0)*r01*sj5))+((cj5*r00)));
j4eval[0]=x12742;
j4eval[1]=IKsign(x12742);
j4eval[2]=((IKabs((((cj5*r21))+((r20*sj5)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x12743=(((r21*sj5))+(((-1.0)*cj5*r20)));
j4eval[0]=x12743;
j4eval[1]=((IKabs(r02))+(IKabs((((r00*sj5))+((cj5*r01))))));
j4eval[2]=IKsign(x12743);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x12744=cj5*cj5;
IkReal x12745=r00*r00;
IkReal x12746=(r00*sj5);
IkReal x12747=(cj5*r01);
IkReal x12748=((((-2.0)*x12746*x12747))+((x12744*x12745))+(((-1.0)*x12745))+(((-1.0)*(r02*r02)))+(((-1.0)*x12744*(r01*r01))));
j4eval[0]=x12748;
j4eval[1]=((IKabs(r02))+(IKabs((x12747+x12746))));
j4eval[2]=IKsign(x12748);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12749=cj5*cj5;
IkReal x12750=r00*r00;
IkReal x12751=(r00*sj5);
IkReal x12752=(cj5*r01);
CheckValue<IkReal> x12753 = IKatan2WithCheck(IkReal((x12751+x12752)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x12753.valid){
continue;
}
CheckValue<IkReal> x12754=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12750))+(((-1.0)*(r02*r02)))+(((-1.0)*x12749*(r01*r01)))+(((-2.0)*x12751*x12752))+((x12749*x12750)))),-1);
if(!x12754.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12753.value)+(((1.5707963267949)*(x12754.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12755=IKcos(j4);
IkReal x12756=IKsin(j4);
IkReal x12757=(cj5*r21);
IkReal x12758=(cj5*r11);
IkReal x12759=(cj5*r01);
IkReal x12760=((1.0)*x12755);
IkReal x12761=(sj5*x12755);
IkReal x12762=((1.0)*x12756);
evalcond[0]=(((x12755*x12757))+(((-1.0)*r22*x12762))+((r20*x12761)));
evalcond[1]=(((x12755*x12759))+(((-1.0)*r02*x12762))+((r00*x12761)));
evalcond[2]=((-1.0)+((x12755*x12758))+(((-1.0)*r12*x12762))+((r10*x12761)));
evalcond[3]=((((-1.0)*r20*sj5*x12762))+(((-1.0)*r22*x12760))+(((-1.0)*x12757*x12762)));
evalcond[4]=((((-1.0)*r12*x12760))+(((-1.0)*r10*sj5*x12762))+(((-1.0)*x12758*x12762)));
evalcond[5]=((-1.0)+(((-1.0)*x12759*x12762))+(((-1.0)*r00*sj5*x12762))+(((-1.0)*r02*x12760)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12763 = IKatan2WithCheck(IkReal((((r00*sj5))+((cj5*r01)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x12763.valid){
continue;
}
CheckValue<IkReal> x12764=IKPowWithIntegerCheck(IKsign((((r21*sj5))+(((-1.0)*cj5*r20)))),-1);
if(!x12764.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12763.value)+(((1.5707963267949)*(x12764.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12765=IKcos(j4);
IkReal x12766=IKsin(j4);
IkReal x12767=(cj5*r21);
IkReal x12768=(cj5*r11);
IkReal x12769=(cj5*r01);
IkReal x12770=((1.0)*x12765);
IkReal x12771=(sj5*x12765);
IkReal x12772=((1.0)*x12766);
evalcond[0]=(((r20*x12771))+(((-1.0)*r22*x12772))+((x12765*x12767)));
evalcond[1]=(((x12765*x12769))+(((-1.0)*r02*x12772))+((r00*x12771)));
evalcond[2]=((-1.0)+((x12765*x12768))+(((-1.0)*r12*x12772))+((r10*x12771)));
evalcond[3]=((((-1.0)*r22*x12770))+(((-1.0)*x12767*x12772))+(((-1.0)*r20*sj5*x12772)));
evalcond[4]=((((-1.0)*x12768*x12772))+(((-1.0)*r12*x12770))+(((-1.0)*r10*sj5*x12772)));
evalcond[5]=((-1.0)+(((-1.0)*x12769*x12772))+(((-1.0)*r02*x12770))+(((-1.0)*r00*sj5*x12772)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12773=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj5))+((cj5*r00)))),-1);
if(!x12773.valid){
continue;
}
CheckValue<IkReal> x12774 = IKatan2WithCheck(IkReal((((cj5*r21))+((r20*sj5)))),IkReal(r22),IKFAST_ATAN2_MAGTHRESH);
if(!x12774.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12773.value)))+(x12774.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12775=IKcos(j4);
IkReal x12776=IKsin(j4);
IkReal x12777=(cj5*r21);
IkReal x12778=(cj5*r11);
IkReal x12779=(cj5*r01);
IkReal x12780=((1.0)*x12775);
IkReal x12781=(sj5*x12775);
IkReal x12782=((1.0)*x12776);
evalcond[0]=(((r20*x12781))+(((-1.0)*r22*x12782))+((x12775*x12777)));
evalcond[1]=(((r00*x12781))+(((-1.0)*r02*x12782))+((x12775*x12779)));
evalcond[2]=((-1.0)+((r10*x12781))+(((-1.0)*r12*x12782))+((x12775*x12778)));
evalcond[3]=((((-1.0)*r20*sj5*x12782))+(((-1.0)*r22*x12780))+(((-1.0)*x12777*x12782)));
evalcond[4]=((((-1.0)*x12778*x12782))+(((-1.0)*r12*x12780))+(((-1.0)*r10*sj5*x12782)));
evalcond[5]=((-1.0)+(((-1.0)*x12779*x12782))+(((-1.0)*r00*sj5*x12782))+(((-1.0)*r02*x12780)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12783=((((-1.0)*r01*sj5))+((cj5*r00)));
j4eval[0]=x12783;
j4eval[1]=IKsign(x12783);
j4eval[2]=((IKabs((((cj5*r21))+((r20*sj5)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12784=(((r21*sj5))+(((-1.0)*cj5*r20)));
j4eval[0]=x12784;
j4eval[1]=((IKabs(r02))+(IKabs((((r00*sj5))+((cj5*r01))))));
j4eval[2]=IKsign(x12784);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12785=cj5*cj5;
IkReal x12786=r00*r00;
IkReal x12787=(r00*sj5);
IkReal x12788=(cj5*r01);
IkReal x12789=((((-1.0)*(r02*r02)))+((x12785*x12786))+(((-1.0)*x12785*(r01*r01)))+(((-2.0)*x12787*x12788))+(((-1.0)*x12786)));
j4eval[0]=x12789;
j4eval[1]=((IKabs(r02))+(IKabs((x12788+x12787))));
j4eval[2]=IKsign(x12789);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12790=cj5*cj5;
IkReal x12791=r00*r00;
IkReal x12792=(r00*sj5);
IkReal x12793=(cj5*r01);
CheckValue<IkReal> x12794=IKPowWithIntegerCheck(IKsign(((((-2.0)*x12792*x12793))+(((-1.0)*(r02*r02)))+(((-1.0)*x12791))+((x12790*x12791))+(((-1.0)*x12790*(r01*r01))))),-1);
if(!x12794.valid){
continue;
}
CheckValue<IkReal> x12795 = IKatan2WithCheck(IkReal((x12792+x12793)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x12795.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12794.value)))+(x12795.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12796=IKcos(j4);
IkReal x12797=IKsin(j4);
IkReal x12798=(cj5*r21);
IkReal x12799=(cj5*r11);
IkReal x12800=(cj5*r01);
IkReal x12801=((1.0)*x12796);
IkReal x12802=(sj5*x12796);
IkReal x12803=((1.0)*x12797);
evalcond[0]=(((r20*x12802))+(((-1.0)*r22*x12803))+((x12796*x12798)));
evalcond[1]=((((-1.0)*r02*x12803))+((r00*x12802))+((x12796*x12800)));
evalcond[2]=((-1.0)+((r10*x12802))+(((-1.0)*r12*x12803))+((x12796*x12799)));
evalcond[3]=((((-1.0)*r22*x12801))+(((-1.0)*r20*sj5*x12803))+(((-1.0)*x12798*x12803)));
evalcond[4]=((((-1.0)*x12799*x12803))+(((-1.0)*r12*x12801))+(((-1.0)*r10*sj5*x12803)));
evalcond[5]=((-1.0)+(((-1.0)*x12800*x12803))+(((-1.0)*r00*sj5*x12803))+(((-1.0)*r02*x12801)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12804 = IKatan2WithCheck(IkReal((((r00*sj5))+((cj5*r01)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x12804.valid){
continue;
}
CheckValue<IkReal> x12805=IKPowWithIntegerCheck(IKsign((((r21*sj5))+(((-1.0)*cj5*r20)))),-1);
if(!x12805.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12804.value)+(((1.5707963267949)*(x12805.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12806=IKcos(j4);
IkReal x12807=IKsin(j4);
IkReal x12808=(cj5*r21);
IkReal x12809=(cj5*r11);
IkReal x12810=(cj5*r01);
IkReal x12811=((1.0)*x12806);
IkReal x12812=(sj5*x12806);
IkReal x12813=((1.0)*x12807);
evalcond[0]=(((x12806*x12808))+((r20*x12812))+(((-1.0)*r22*x12813)));
evalcond[1]=(((x12806*x12810))+(((-1.0)*r02*x12813))+((r00*x12812)));
evalcond[2]=((-1.0)+((x12806*x12809))+(((-1.0)*r12*x12813))+((r10*x12812)));
evalcond[3]=((((-1.0)*r20*sj5*x12813))+(((-1.0)*r22*x12811))+(((-1.0)*x12808*x12813)));
evalcond[4]=((((-1.0)*x12809*x12813))+(((-1.0)*r12*x12811))+(((-1.0)*r10*sj5*x12813)));
evalcond[5]=((-1.0)+(((-1.0)*r00*sj5*x12813))+(((-1.0)*r02*x12811))+(((-1.0)*x12810*x12813)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12814=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj5))+((cj5*r00)))),-1);
if(!x12814.valid){
continue;
}
CheckValue<IkReal> x12815 = IKatan2WithCheck(IkReal((((cj5*r21))+((r20*sj5)))),IkReal(r22),IKFAST_ATAN2_MAGTHRESH);
if(!x12815.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12814.value)))+(x12815.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12816=IKcos(j4);
IkReal x12817=IKsin(j4);
IkReal x12818=(cj5*r21);
IkReal x12819=(cj5*r11);
IkReal x12820=(cj5*r01);
IkReal x12821=((1.0)*x12816);
IkReal x12822=(sj5*x12816);
IkReal x12823=((1.0)*x12817);
evalcond[0]=((((-1.0)*r22*x12823))+((x12816*x12818))+((r20*x12822)));
evalcond[1]=((((-1.0)*r02*x12823))+((r00*x12822))+((x12816*x12820)));
evalcond[2]=((-1.0)+((r10*x12822))+(((-1.0)*r12*x12823))+((x12816*x12819)));
evalcond[3]=((((-1.0)*r22*x12821))+(((-1.0)*r20*sj5*x12823))+(((-1.0)*x12818*x12823)));
evalcond[4]=((((-1.0)*r10*sj5*x12823))+(((-1.0)*r12*x12821))+(((-1.0)*x12819*x12823)));
evalcond[5]=((-1.0)+(((-1.0)*r02*x12821))+(((-1.0)*r00*sj5*x12823))+(((-1.0)*x12820*x12823)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12824=(((r01*sj5))+(((-1.0)*cj5*r00)));
j4eval[0]=x12824;
j4eval[1]=IKsign(x12824);
j4eval[2]=((IKabs((((cj5*r21))+((r20*sj5)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12825=(((cj5*r20))+(((-1.0)*r21*sj5)));
j4eval[0]=x12825;
j4eval[1]=((IKabs(r02))+(IKabs((((r00*sj5))+((cj5*r01))))));
j4eval[2]=IKsign(x12825);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12826=cj5*cj5;
IkReal x12827=r00*r00;
IkReal x12828=(r00*sj5);
IkReal x12829=(cj5*r01);
IkReal x12830=((((-1.0)*(r02*r02)))+(((-1.0)*x12827))+(((-1.0)*x12826*(r01*r01)))+(((-2.0)*x12828*x12829))+((x12826*x12827)));
j4eval[0]=x12830;
j4eval[1]=((IKabs(r02))+(IKabs((x12828+x12829))));
j4eval[2]=IKsign(x12830);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12831=cj5*cj5;
IkReal x12832=r00*r00;
IkReal x12833=(r00*sj5);
IkReal x12834=(cj5*r01);
CheckValue<IkReal> x12835 = IKatan2WithCheck(IkReal((x12833+x12834)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x12835.valid){
continue;
}
CheckValue<IkReal> x12836=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-2.0)*x12833*x12834))+(((-1.0)*x12832))+((x12831*x12832))+(((-1.0)*x12831*(r01*r01))))),-1);
if(!x12836.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12835.value)+(((1.5707963267949)*(x12836.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12837=IKcos(j4);
IkReal x12838=IKsin(j4);
IkReal x12839=(cj5*r21);
IkReal x12840=(cj5*r11);
IkReal x12841=(cj5*r01);
IkReal x12842=((1.0)*x12837);
IkReal x12843=(sj5*x12837);
IkReal x12844=((1.0)*x12838);
evalcond[0]=((((-1.0)*r22*x12844))+((x12837*x12839))+((r20*x12843)));
evalcond[1]=(((x12837*x12841))+(((-1.0)*r02*x12844))+((r00*x12843)));
evalcond[2]=((1.0)+((x12837*x12840))+(((-1.0)*r12*x12844))+((r10*x12843)));
evalcond[3]=((((-1.0)*r22*x12842))+(((-1.0)*x12839*x12844))+(((-1.0)*r20*sj5*x12844)));
evalcond[4]=((((-1.0)*r12*x12842))+(((-1.0)*x12840*x12844))+(((-1.0)*r10*sj5*x12844)));
evalcond[5]=((-1.0)+(((-1.0)*r02*x12842))+(((-1.0)*x12841*x12844))+(((-1.0)*r00*sj5*x12844)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12845 = IKatan2WithCheck(IkReal((((r00*sj5))+((cj5*r01)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x12845.valid){
continue;
}
CheckValue<IkReal> x12846=IKPowWithIntegerCheck(IKsign((((cj5*r20))+(((-1.0)*r21*sj5)))),-1);
if(!x12846.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12845.value)+(((1.5707963267949)*(x12846.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12847=IKcos(j4);
IkReal x12848=IKsin(j4);
IkReal x12849=(cj5*r21);
IkReal x12850=(cj5*r11);
IkReal x12851=(cj5*r01);
IkReal x12852=((1.0)*x12847);
IkReal x12853=(sj5*x12847);
IkReal x12854=((1.0)*x12848);
evalcond[0]=((((-1.0)*r22*x12854))+((x12847*x12849))+((r20*x12853)));
evalcond[1]=(((r00*x12853))+(((-1.0)*r02*x12854))+((x12847*x12851)));
evalcond[2]=((1.0)+(((-1.0)*r12*x12854))+((r10*x12853))+((x12847*x12850)));
evalcond[3]=((((-1.0)*r22*x12852))+(((-1.0)*r20*sj5*x12854))+(((-1.0)*x12849*x12854)));
evalcond[4]=((((-1.0)*x12850*x12854))+(((-1.0)*r12*x12852))+(((-1.0)*r10*sj5*x12854)));
evalcond[5]=((-1.0)+(((-1.0)*r00*sj5*x12854))+(((-1.0)*x12851*x12854))+(((-1.0)*r02*x12852)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12855 = IKatan2WithCheck(IkReal((((cj5*r21))+((r20*sj5)))),IkReal(r22),IKFAST_ATAN2_MAGTHRESH);
if(!x12855.valid){
continue;
}
CheckValue<IkReal> x12856=IKPowWithIntegerCheck(IKsign((((r01*sj5))+(((-1.0)*cj5*r00)))),-1);
if(!x12856.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12855.value)+(((1.5707963267949)*(x12856.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12857=IKcos(j4);
IkReal x12858=IKsin(j4);
IkReal x12859=(cj5*r21);
IkReal x12860=(cj5*r11);
IkReal x12861=(cj5*r01);
IkReal x12862=((1.0)*x12857);
IkReal x12863=(sj5*x12857);
IkReal x12864=((1.0)*x12858);
evalcond[0]=(((x12857*x12859))+((r20*x12863))+(((-1.0)*r22*x12864)));
evalcond[1]=((((-1.0)*r02*x12864))+((x12857*x12861))+((r00*x12863)));
evalcond[2]=((1.0)+(((-1.0)*r12*x12864))+((x12857*x12860))+((r10*x12863)));
evalcond[3]=((((-1.0)*r20*sj5*x12864))+(((-1.0)*x12859*x12864))+(((-1.0)*r22*x12862)));
evalcond[4]=((((-1.0)*x12860*x12864))+(((-1.0)*r12*x12862))+(((-1.0)*r10*sj5*x12864)));
evalcond[5]=((-1.0)+(((-1.0)*x12861*x12864))+(((-1.0)*r00*sj5*x12864))+(((-1.0)*r02*x12862)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x12865=((((-1.0)*r01*sj5))+((cj5*r00)));
j4eval[0]=x12865;
j4eval[1]=IKsign(x12865);
j4eval[2]=((IKabs((((cj5*r21))+((r20*sj5)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x12866=(((r21*sj5))+(((-1.0)*cj5*r20)));
j4eval[0]=x12866;
j4eval[1]=((IKabs(r02))+(IKabs((((r00*sj5))+((cj5*r01))))));
j4eval[2]=IKsign(x12866);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x12867=cj5*cj5;
IkReal x12868=r00*r00;
IkReal x12869=(r00*sj5);
IkReal x12870=(cj5*r01);
IkReal x12871=((((-1.0)*x12868))+(((-2.0)*x12869*x12870))+(((-1.0)*(r02*r02)))+((x12867*x12868))+(((-1.0)*x12867*(r01*r01))));
j4eval[0]=x12871;
j4eval[1]=((IKabs(r02))+(IKabs((x12869+x12870))));
j4eval[2]=IKsign(x12871);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12872=cj5*cj5;
IkReal x12873=r00*r00;
IkReal x12874=(r00*sj5);
IkReal x12875=(cj5*r01);
CheckValue<IkReal> x12876=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12872*(r01*r01)))+(((-2.0)*x12874*x12875))+(((-1.0)*(r02*r02)))+((x12872*x12873))+(((-1.0)*x12873)))),-1);
if(!x12876.valid){
continue;
}
CheckValue<IkReal> x12877 = IKatan2WithCheck(IkReal((x12875+x12874)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x12877.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12876.value)))+(x12877.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12878=IKcos(j4);
IkReal x12879=IKsin(j4);
IkReal x12880=(cj5*r21);
IkReal x12881=(cj5*r11);
IkReal x12882=(cj5*r01);
IkReal x12883=((1.0)*x12878);
IkReal x12884=(sj5*x12878);
IkReal x12885=((1.0)*x12879);
evalcond[0]=((((-1.0)*r22*x12885))+((r20*x12884))+((x12878*x12880)));
evalcond[1]=((((-1.0)*r02*x12885))+((r00*x12884))+((x12878*x12882)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x12885))+((r10*x12884))+((x12878*x12881)));
evalcond[3]=((((-1.0)*r22*x12883))+(((-1.0)*r20*sj5*x12885))+(((-1.0)*x12880*x12885)));
evalcond[4]=((((-1.0)*r10*sj5*x12885))+(((-1.0)*r12*x12883))+(((-1.0)*x12881*x12885)));
evalcond[5]=((-1.0)+(((-1.0)*r00*sj5*x12885))+(((-1.0)*r02*x12883))+(((-1.0)*x12882*x12885)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12886 = IKatan2WithCheck(IkReal((((r00*sj5))+((cj5*r01)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x12886.valid){
continue;
}
CheckValue<IkReal> x12887=IKPowWithIntegerCheck(IKsign((((r21*sj5))+(((-1.0)*cj5*r20)))),-1);
if(!x12887.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12886.value)+(((1.5707963267949)*(x12887.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12888=IKcos(j4);
IkReal x12889=IKsin(j4);
IkReal x12890=(cj5*r21);
IkReal x12891=(cj5*r11);
IkReal x12892=(cj5*r01);
IkReal x12893=((1.0)*x12888);
IkReal x12894=(sj5*x12888);
IkReal x12895=((1.0)*x12889);
evalcond[0]=((((-1.0)*r22*x12895))+((x12888*x12890))+((r20*x12894)));
evalcond[1]=(((x12888*x12892))+((r00*x12894))+(((-1.0)*r02*x12895)));
evalcond[2]=((-1.0)+((x12888*x12891))+((r10*x12894))+(((-1.0)*r12*x12895)));
evalcond[3]=((((-1.0)*r22*x12893))+(((-1.0)*x12890*x12895))+(((-1.0)*r20*sj5*x12895)));
evalcond[4]=((((-1.0)*x12891*x12895))+(((-1.0)*r10*sj5*x12895))+(((-1.0)*r12*x12893)));
evalcond[5]=((-1.0)+(((-1.0)*x12892*x12895))+(((-1.0)*r00*sj5*x12895))+(((-1.0)*r02*x12893)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12896=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj5))+((cj5*r00)))),-1);
if(!x12896.valid){
continue;
}
CheckValue<IkReal> x12897 = IKatan2WithCheck(IkReal((((cj5*r21))+((r20*sj5)))),IkReal(r22),IKFAST_ATAN2_MAGTHRESH);
if(!x12897.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12896.value)))+(x12897.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12898=IKcos(j4);
IkReal x12899=IKsin(j4);
IkReal x12900=(cj5*r21);
IkReal x12901=(cj5*r11);
IkReal x12902=(cj5*r01);
IkReal x12903=((1.0)*x12898);
IkReal x12904=(sj5*x12898);
IkReal x12905=((1.0)*x12899);
evalcond[0]=(((r20*x12904))+((x12898*x12900))+(((-1.0)*r22*x12905)));
evalcond[1]=(((r00*x12904))+(((-1.0)*r02*x12905))+((x12898*x12902)));
evalcond[2]=((-1.0)+((x12898*x12901))+(((-1.0)*r12*x12905))+((r10*x12904)));
evalcond[3]=((((-1.0)*r20*sj5*x12905))+(((-1.0)*x12900*x12905))+(((-1.0)*r22*x12903)));
evalcond[4]=((((-1.0)*x12901*x12905))+(((-1.0)*r12*x12903))+(((-1.0)*r10*sj5*x12905)));
evalcond[5]=((-1.0)+(((-1.0)*x12902*x12905))+(((-1.0)*r02*x12903))+(((-1.0)*r00*sj5*x12905)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x12906=(((r01*sj5))+(((-1.0)*cj5*r00)));
j4eval[0]=x12906;
j4eval[1]=IKsign(x12906);
j4eval[2]=((IKabs((((cj5*r21))+((r20*sj5)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x12907=(((cj5*r20))+(((-1.0)*r21*sj5)));
j4eval[0]=x12907;
j4eval[1]=((IKabs(r02))+(IKabs((((r00*sj5))+((cj5*r01))))));
j4eval[2]=IKsign(x12907);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x12908=cj5*cj5;
IkReal x12909=r00*r00;
IkReal x12910=(r00*sj5);
IkReal x12911=(cj5*r01);
IkReal x12912=((((-1.0)*x12908*(r01*r01)))+(((-2.0)*x12910*x12911))+((x12908*x12909))+(((-1.0)*x12909))+(((-1.0)*(r02*r02))));
j4eval[0]=x12912;
j4eval[1]=((IKabs(r02))+(IKabs((x12910+x12911))));
j4eval[2]=IKsign(x12912);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12913=cj5*cj5;
IkReal x12914=r00*r00;
IkReal x12915=(r00*sj5);
IkReal x12916=(cj5*r01);
CheckValue<IkReal> x12917=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12913*(r01*r01)))+(((-1.0)*(r02*r02)))+(((-1.0)*x12914))+(((-2.0)*x12915*x12916))+((x12913*x12914)))),-1);
if(!x12917.valid){
continue;
}
CheckValue<IkReal> x12918 = IKatan2WithCheck(IkReal((x12916+x12915)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x12918.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12917.value)))+(x12918.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12919=IKcos(j4);
IkReal x12920=IKsin(j4);
IkReal x12921=(cj5*r21);
IkReal x12922=(cj5*r11);
IkReal x12923=(cj5*r01);
IkReal x12924=((1.0)*x12919);
IkReal x12925=(sj5*x12919);
IkReal x12926=((1.0)*x12920);
evalcond[0]=(((r20*x12925))+((x12919*x12921))+(((-1.0)*r22*x12926)));
evalcond[1]=((((-1.0)*r02*x12926))+((x12919*x12923))+((r00*x12925)));
evalcond[2]=((1.0)+((x12919*x12922))+(((-1.0)*r12*x12926))+((r10*x12925)));
evalcond[3]=((((-1.0)*r20*sj5*x12926))+(((-1.0)*x12921*x12926))+(((-1.0)*r22*x12924)));
evalcond[4]=((((-1.0)*r12*x12924))+(((-1.0)*x12922*x12926))+(((-1.0)*r10*sj5*x12926)));
evalcond[5]=((-1.0)+(((-1.0)*r02*x12924))+(((-1.0)*x12923*x12926))+(((-1.0)*r00*sj5*x12926)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12927 = IKatan2WithCheck(IkReal((((r00*sj5))+((cj5*r01)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x12927.valid){
continue;
}
CheckValue<IkReal> x12928=IKPowWithIntegerCheck(IKsign((((cj5*r20))+(((-1.0)*r21*sj5)))),-1);
if(!x12928.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12927.value)+(((1.5707963267949)*(x12928.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12929=IKcos(j4);
IkReal x12930=IKsin(j4);
IkReal x12931=(cj5*r21);
IkReal x12932=(cj5*r11);
IkReal x12933=(cj5*r01);
IkReal x12934=((1.0)*x12929);
IkReal x12935=(sj5*x12929);
IkReal x12936=((1.0)*x12930);
evalcond[0]=(((r20*x12935))+((x12929*x12931))+(((-1.0)*r22*x12936)));
evalcond[1]=((((-1.0)*r02*x12936))+((x12929*x12933))+((r00*x12935)));
evalcond[2]=((1.0)+(((-1.0)*r12*x12936))+((r10*x12935))+((x12929*x12932)));
evalcond[3]=((((-1.0)*r22*x12934))+(((-1.0)*x12931*x12936))+(((-1.0)*r20*sj5*x12936)));
evalcond[4]=((((-1.0)*r10*sj5*x12936))+(((-1.0)*r12*x12934))+(((-1.0)*x12932*x12936)));
evalcond[5]=((-1.0)+(((-1.0)*r00*sj5*x12936))+(((-1.0)*r02*x12934))+(((-1.0)*x12933*x12936)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12937 = IKatan2WithCheck(IkReal((((cj5*r21))+((r20*sj5)))),IkReal(r22),IKFAST_ATAN2_MAGTHRESH);
if(!x12937.valid){
continue;
}
CheckValue<IkReal> x12938=IKPowWithIntegerCheck(IKsign((((r01*sj5))+(((-1.0)*cj5*r00)))),-1);
if(!x12938.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12937.value)+(((1.5707963267949)*(x12938.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12939=IKcos(j4);
IkReal x12940=IKsin(j4);
IkReal x12941=(cj5*r21);
IkReal x12942=(cj5*r11);
IkReal x12943=(cj5*r01);
IkReal x12944=((1.0)*x12939);
IkReal x12945=(sj5*x12939);
IkReal x12946=((1.0)*x12940);
evalcond[0]=(((x12939*x12941))+(((-1.0)*r22*x12946))+((r20*x12945)));
evalcond[1]=(((x12939*x12943))+((r00*x12945))+(((-1.0)*r02*x12946)));
evalcond[2]=((1.0)+((r10*x12945))+((x12939*x12942))+(((-1.0)*r12*x12946)));
evalcond[3]=((((-1.0)*r20*sj5*x12946))+(((-1.0)*r22*x12944))+(((-1.0)*x12941*x12946)));
evalcond[4]=((((-1.0)*r10*sj5*x12946))+(((-1.0)*r12*x12944))+(((-1.0)*x12942*x12946)));
evalcond[5]=((-1.0)+(((-1.0)*r00*sj5*x12946))+(((-1.0)*r02*x12944))+(((-1.0)*x12943*x12946)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12947=(((r01*sj5))+(((-1.0)*cj5*r00)));
j4eval[0]=x12947;
j4eval[1]=IKsign(x12947);
j4eval[2]=((IKabs((((cj5*r21))+((r20*sj5)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12948=(((cj5*r20))+(((-1.0)*r21*sj5)));
j4eval[0]=x12948;
j4eval[1]=((IKabs(r02))+(IKabs((((r00*sj5))+((cj5*r01))))));
j4eval[2]=IKsign(x12948);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12949=cj5*cj5;
IkReal x12950=r00*r00;
IkReal x12951=(r00*sj5);
IkReal x12952=(cj5*r01);
IkReal x12953=((((-1.0)*(r02*r02)))+(((-2.0)*x12951*x12952))+((x12949*x12950))+(((-1.0)*x12950))+(((-1.0)*x12949*(r01*r01))));
j4eval[0]=x12953;
j4eval[1]=((IKabs(r02))+(IKabs((x12952+x12951))));
j4eval[2]=IKsign(x12953);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12954=cj5*cj5;
IkReal x12955=r00*r00;
IkReal x12956=(r00*sj5);
IkReal x12957=(cj5*r01);
CheckValue<IkReal> x12958=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*x12954*(r01*r01)))+(((-2.0)*x12956*x12957))+(((-1.0)*x12955))+((x12954*x12955)))),-1);
if(!x12958.valid){
continue;
}
CheckValue<IkReal> x12959 = IKatan2WithCheck(IkReal((x12956+x12957)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x12959.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12958.value)))+(x12959.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12960=IKcos(j4);
IkReal x12961=IKsin(j4);
IkReal x12962=(cj5*r21);
IkReal x12963=(cj5*r11);
IkReal x12964=(cj5*r01);
IkReal x12965=((1.0)*x12960);
IkReal x12966=(sj5*x12960);
IkReal x12967=((1.0)*x12961);
evalcond[0]=(((r20*x12966))+((x12960*x12962))+(((-1.0)*r22*x12967)));
evalcond[1]=(((r00*x12966))+((x12960*x12964))+(((-1.0)*r02*x12967)));
evalcond[2]=((1.0)+((x12960*x12963))+(((-1.0)*r12*x12967))+((r10*x12966)));
evalcond[3]=((((-1.0)*x12962*x12967))+(((-1.0)*r20*sj5*x12967))+(((-1.0)*r22*x12965)));
evalcond[4]=((((-1.0)*r10*sj5*x12967))+(((-1.0)*r12*x12965))+(((-1.0)*x12963*x12967)));
evalcond[5]=((-1.0)+(((-1.0)*r02*x12965))+(((-1.0)*r00*sj5*x12967))+(((-1.0)*x12964*x12967)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12968 = IKatan2WithCheck(IkReal((((r00*sj5))+((cj5*r01)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x12968.valid){
continue;
}
CheckValue<IkReal> x12969=IKPowWithIntegerCheck(IKsign((((cj5*r20))+(((-1.0)*r21*sj5)))),-1);
if(!x12969.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12968.value)+(((1.5707963267949)*(x12969.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12970=IKcos(j4);
IkReal x12971=IKsin(j4);
IkReal x12972=(cj5*r21);
IkReal x12973=(cj5*r11);
IkReal x12974=(cj5*r01);
IkReal x12975=((1.0)*x12970);
IkReal x12976=(sj5*x12970);
IkReal x12977=((1.0)*x12971);
evalcond[0]=(((r20*x12976))+((x12970*x12972))+(((-1.0)*r22*x12977)));
evalcond[1]=(((r00*x12976))+(((-1.0)*r02*x12977))+((x12970*x12974)));
evalcond[2]=((1.0)+((x12970*x12973))+(((-1.0)*r12*x12977))+((r10*x12976)));
evalcond[3]=((((-1.0)*r20*sj5*x12977))+(((-1.0)*r22*x12975))+(((-1.0)*x12972*x12977)));
evalcond[4]=((((-1.0)*r10*sj5*x12977))+(((-1.0)*x12973*x12977))+(((-1.0)*r12*x12975)));
evalcond[5]=((-1.0)+(((-1.0)*x12974*x12977))+(((-1.0)*r02*x12975))+(((-1.0)*r00*sj5*x12977)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12978 = IKatan2WithCheck(IkReal((((cj5*r21))+((r20*sj5)))),IkReal(r22),IKFAST_ATAN2_MAGTHRESH);
if(!x12978.valid){
continue;
}
CheckValue<IkReal> x12979=IKPowWithIntegerCheck(IKsign((((r01*sj5))+(((-1.0)*cj5*r00)))),-1);
if(!x12979.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12978.value)+(((1.5707963267949)*(x12979.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12980=IKcos(j4);
IkReal x12981=IKsin(j4);
IkReal x12982=(cj5*r21);
IkReal x12983=(cj5*r11);
IkReal x12984=(cj5*r01);
IkReal x12985=((1.0)*x12980);
IkReal x12986=(sj5*x12980);
IkReal x12987=((1.0)*x12981);
evalcond[0]=((((-1.0)*r22*x12987))+((r20*x12986))+((x12980*x12982)));
evalcond[1]=(((r00*x12986))+((x12980*x12984))+(((-1.0)*r02*x12987)));
evalcond[2]=((1.0)+((r10*x12986))+((x12980*x12983))+(((-1.0)*r12*x12987)));
evalcond[3]=((((-1.0)*r22*x12985))+(((-1.0)*r20*sj5*x12987))+(((-1.0)*x12982*x12987)));
evalcond[4]=((((-1.0)*x12983*x12987))+(((-1.0)*r10*sj5*x12987))+(((-1.0)*r12*x12985)));
evalcond[5]=((-1.0)+(((-1.0)*r02*x12985))+(((-1.0)*x12984*x12987))+(((-1.0)*r00*sj5*x12987)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12988=((((-1.0)*r01*sj5))+((cj5*r00)));
j4eval[0]=x12988;
j4eval[1]=IKsign(x12988);
j4eval[2]=((IKabs((((cj5*r21))+((r20*sj5)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12989=(((r21*sj5))+(((-1.0)*cj5*r20)));
j4eval[0]=x12989;
j4eval[1]=((IKabs(r02))+(IKabs((((r00*sj5))+((cj5*r01))))));
j4eval[2]=IKsign(x12989);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12990=cj5*cj5;
IkReal x12991=r00*r00;
IkReal x12992=(r00*sj5);
IkReal x12993=(cj5*r01);
IkReal x12994=((((-1.0)*x12990*(r01*r01)))+((x12990*x12991))+(((-1.0)*(r02*r02)))+(((-2.0)*x12992*x12993))+(((-1.0)*x12991)));
j4eval[0]=x12994;
j4eval[1]=((IKabs(r02))+(IKabs((x12992+x12993))));
j4eval[2]=IKsign(x12994);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12995=cj5*cj5;
IkReal x12996=r00*r00;
IkReal x12997=(r00*sj5);
IkReal x12998=(cj5*r01);
CheckValue<IkReal> x12999=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12995*(r01*r01)))+(((-1.0)*(r02*r02)))+((x12995*x12996))+(((-2.0)*x12997*x12998))+(((-1.0)*x12996)))),-1);
if(!x12999.valid){
continue;
}
CheckValue<IkReal> x13000 = IKatan2WithCheck(IkReal((x12997+x12998)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x13000.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12999.value)))+(x13000.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13001=IKcos(j4);
IkReal x13002=IKsin(j4);
IkReal x13003=(cj5*r21);
IkReal x13004=(cj5*r11);
IkReal x13005=(cj5*r01);
IkReal x13006=((1.0)*x13001);
IkReal x13007=(sj5*x13001);
IkReal x13008=((1.0)*x13002);
evalcond[0]=((((-1.0)*r22*x13008))+((r20*x13007))+((x13001*x13003)));
evalcond[1]=(((r00*x13007))+((x13001*x13005))+(((-1.0)*r02*x13008)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x13008))+((x13001*x13004))+((r10*x13007)));
evalcond[3]=((((-1.0)*r20*sj5*x13008))+(((-1.0)*x13003*x13008))+(((-1.0)*r22*x13006)));
evalcond[4]=((((-1.0)*r10*sj5*x13008))+(((-1.0)*r12*x13006))+(((-1.0)*x13004*x13008)));
evalcond[5]=((-1.0)+(((-1.0)*x13005*x13008))+(((-1.0)*r00*sj5*x13008))+(((-1.0)*r02*x13006)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13009 = IKatan2WithCheck(IkReal((((r00*sj5))+((cj5*r01)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x13009.valid){
continue;
}
CheckValue<IkReal> x13010=IKPowWithIntegerCheck(IKsign((((r21*sj5))+(((-1.0)*cj5*r20)))),-1);
if(!x13010.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13009.value)+(((1.5707963267949)*(x13010.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13011=IKcos(j4);
IkReal x13012=IKsin(j4);
IkReal x13013=(cj5*r21);
IkReal x13014=(cj5*r11);
IkReal x13015=(cj5*r01);
IkReal x13016=((1.0)*x13011);
IkReal x13017=(sj5*x13011);
IkReal x13018=((1.0)*x13012);
evalcond[0]=((((-1.0)*r22*x13018))+((r20*x13017))+((x13011*x13013)));
evalcond[1]=(((r00*x13017))+(((-1.0)*r02*x13018))+((x13011*x13015)));
evalcond[2]=((-1.0)+((r10*x13017))+(((-1.0)*r12*x13018))+((x13011*x13014)));
evalcond[3]=((((-1.0)*x13013*x13018))+(((-1.0)*r22*x13016))+(((-1.0)*r20*sj5*x13018)));
evalcond[4]=((((-1.0)*r10*sj5*x13018))+(((-1.0)*x13014*x13018))+(((-1.0)*r12*x13016)));
evalcond[5]=((-1.0)+(((-1.0)*x13015*x13018))+(((-1.0)*r00*sj5*x13018))+(((-1.0)*r02*x13016)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13019=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj5))+((cj5*r00)))),-1);
if(!x13019.valid){
continue;
}
CheckValue<IkReal> x13020 = IKatan2WithCheck(IkReal((((cj5*r21))+((r20*sj5)))),IkReal(r22),IKFAST_ATAN2_MAGTHRESH);
if(!x13020.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13019.value)))+(x13020.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13021=IKcos(j4);
IkReal x13022=IKsin(j4);
IkReal x13023=(cj5*r21);
IkReal x13024=(cj5*r11);
IkReal x13025=(cj5*r01);
IkReal x13026=((1.0)*x13021);
IkReal x13027=(sj5*x13021);
IkReal x13028=((1.0)*x13022);
evalcond[0]=((((-1.0)*r22*x13028))+((r20*x13027))+((x13021*x13023)));
evalcond[1]=(((r00*x13027))+((x13021*x13025))+(((-1.0)*r02*x13028)));
evalcond[2]=((-1.0)+((x13021*x13024))+(((-1.0)*r12*x13028))+((r10*x13027)));
evalcond[3]=((((-1.0)*r22*x13026))+(((-1.0)*r20*sj5*x13028))+(((-1.0)*x13023*x13028)));
evalcond[4]=((((-1.0)*r10*sj5*x13028))+(((-1.0)*x13024*x13028))+(((-1.0)*r12*x13026)));
evalcond[5]=((-1.0)+(((-1.0)*r00*sj5*x13028))+(((-1.0)*x13025*x13028))+(((-1.0)*r02*x13026)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13029=(cj5*r01);
IkReal x13030=(cj1*sj2);
IkReal x13031=(cj2*sj1);
IkReal x13032=(r00*sj5);
CheckValue<IkReal> x13033 = IKatan2WithCheck(IkReal((((x13029*x13030))+((x13029*x13031))+((x13031*x13032))+((x13030*x13032)))),IkReal((((r02*x13030))+((r02*x13031)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13033.valid){
continue;
}
CheckValue<IkReal> x13034=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10))+((r11*sj5)))),-1);
if(!x13034.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13033.value)+(((1.5707963267949)*(x13034.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13035=IKcos(j4);
IkReal x13036=IKsin(j4);
IkReal x13037=(r00*sj5);
IkReal x13038=(cj5*r01);
IkReal x13039=(r20*sj5);
IkReal x13040=(cj5*r21);
IkReal x13041=(cj5*r11);
IkReal x13042=(r10*sj5);
IkReal x13043=((1.0)*x13035);
IkReal x13044=((1.0)*x13036);
evalcond[0]=(((x13035*x13038))+((x13035*x13037))+(((-1.0)*r02*x13044)));
evalcond[1]=((((-1.0)*x13040*x13044))+(((-1.0)*x13039*x13044))+(((-1.0)*r22*x13043)));
evalcond[2]=((((-1.0)*x13042*x13044))+(((-1.0)*x13041*x13044))+(((-1.0)*r12*x13043)));
evalcond[3]=((-1.0)+(((-1.0)*x13038*x13044))+(((-1.0)*r02*x13043))+(((-1.0)*x13037*x13044)));
evalcond[4]=(((cj2*sj1))+((x13035*x13040))+((cj1*sj2))+((x13035*x13039))+(((-1.0)*r22*x13044)));
evalcond[5]=(((x13035*x13042))+((x13035*x13041))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*r12*x13044)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13045=((1.0)*cj5);
CheckValue<IkReal> x13046 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*sj5))+(((-1.0)*r11*x13045)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13046.valid){
continue;
}
CheckValue<IkReal> x13047=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x13045))+((r21*sj5)))),-1);
if(!x13047.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13046.value)+(((1.5707963267949)*(x13047.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13048=IKcos(j4);
IkReal x13049=IKsin(j4);
IkReal x13050=(r00*sj5);
IkReal x13051=(cj5*r01);
IkReal x13052=(r20*sj5);
IkReal x13053=(cj5*r21);
IkReal x13054=(cj5*r11);
IkReal x13055=(r10*sj5);
IkReal x13056=((1.0)*x13048);
IkReal x13057=((1.0)*x13049);
evalcond[0]=(((x13048*x13050))+((x13048*x13051))+(((-1.0)*r02*x13057)));
evalcond[1]=((((-1.0)*r22*x13056))+(((-1.0)*x13052*x13057))+(((-1.0)*x13053*x13057)));
evalcond[2]=((((-1.0)*x13054*x13057))+(((-1.0)*r12*x13056))+(((-1.0)*x13055*x13057)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x13056))+(((-1.0)*x13050*x13057))+(((-1.0)*x13051*x13057)));
evalcond[4]=(((x13048*x13052))+((x13048*x13053))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x13057)));
evalcond[5]=(((x13048*x13054))+((x13048*x13055))+(((-1.0)*sj1*sj2))+(((-1.0)*r12*x13057))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13058=((1.0)*sj5);
CheckValue<IkReal> x13059=IKPowWithIntegerCheck(IKsign((((cj5*r10))+(((-1.0)*r11*x13058)))),-1);
if(!x13059.valid){
continue;
}
CheckValue<IkReal> x13060 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13058))+(((-1.0)*cj5*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13060.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13059.value)))+(x13060.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13061=IKcos(j4);
IkReal x13062=IKsin(j4);
IkReal x13063=(r00*sj5);
IkReal x13064=(cj5*r01);
IkReal x13065=(r20*sj5);
IkReal x13066=(cj5*r21);
IkReal x13067=(cj5*r11);
IkReal x13068=(r10*sj5);
IkReal x13069=((1.0)*x13061);
IkReal x13070=((1.0)*x13062);
evalcond[0]=((((-1.0)*r02*x13070))+((x13061*x13063))+((x13061*x13064)));
evalcond[1]=((((-1.0)*x13065*x13070))+(((-1.0)*r22*x13069))+(((-1.0)*x13066*x13070)));
evalcond[2]=((((-1.0)*x13067*x13070))+(((-1.0)*x13068*x13070))+(((-1.0)*r12*x13069)));
evalcond[3]=((-1.0)+(((-1.0)*x13063*x13070))+(((-1.0)*x13064*x13070))+(((-1.0)*r02*x13069)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x13061*x13066))+((x13061*x13065))+(((-1.0)*r22*x13070)));
evalcond[5]=((((-1.0)*r12*x13070))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((x13061*x13068))+((x13061*x13067)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13072 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x13072)==0){
continue;
}
IkReal x13071=pow(x13072,-0.5);
CheckValue<IkReal> x13073 = IKatan2WithCheck(IkReal(((-1.0)*r20)),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x13073.valid){
continue;
}
IkReal gconst18=((-1.0)*(x13073.value));
IkReal gconst19=(r20*x13071);
IkReal gconst20=(r21*x13071);
CheckValue<IkReal> x13074 = IKatan2WithCheck(IkReal(((-1.0)*r20)),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x13074.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x13074.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x13077 = IKatan2WithCheck(IkReal(((-1.0)*r20)),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x13077.valid){
continue;
}
IkReal x13075=((-1.0)*(x13077.value));
IkReal x13076=x13071;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst19;
cj5=gconst20;
j5=x13075;
IkReal gconst18=x13075;
IkReal gconst19=(r20*x13076);
IkReal gconst20=(r21*x13076);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13078=gconst19*gconst19;
IkReal x13079=gconst20*gconst20;
IkReal x13080=(r00*sj3);
IkReal x13081=(r01*sj3);
IkReal x13082=(cj3*r12);
IkReal x13083=(cj3*r00);
IkReal x13084=(gconst19*gconst20*r11);
IkReal x13085=((1.0)*cj3*r01);
IkReal x13086=(r10*x13078);
IkReal x13087=(r11*x13079);
IkReal x13088=(gconst19*gconst20*r10);
CheckValue<IkReal> x13089=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+((x13081*x13087))+((x13081*x13088))+((x13080*x13086))+((x13080*x13084)))),-1);
if(!x13089.valid){
continue;
}
CheckValue<IkReal> x13090 = IKatan2WithCheck(IkReal((((gconst19*r01*x13082))+(((-1.0)*gconst20*r00*x13082)))),IkReal(((((-1.0)*x13084*x13085))+((x13083*x13087))+((x13083*x13088))+(((-1.0)*x13085*x13086)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13090.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13089.value)))+(x13090.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13091=IKsin(j4);
IkReal x13092=IKcos(j4);
IkReal x13093=(cj1*cj2);
IkReal x13094=((1.0)*sj2);
IkReal x13095=(cj3*r01);
IkReal x13096=(cj3*r00);
IkReal x13097=((1.0)*gconst20);
IkReal x13098=(gconst19*r20);
IkReal x13099=(gconst19*r10);
IkReal x13100=(gconst20*r11);
IkReal x13101=(cj3*r21);
IkReal x13102=(gconst19*sj3);
IkReal x13103=(cj2*sj1);
IkReal x13104=(gconst19*r00);
IkReal x13105=(gconst20*r01);
IkReal x13106=(gconst20*r21);
IkReal x13107=(sj1*x13094);
IkReal x13108=((1.0)*x13092);
IkReal x13109=((1.0)*x13091);
IkReal x13110=(cj3*x13091);
IkReal x13111=(sj3*x13092);
evalcond[0]=((((-1.0)*x13098*x13109))+(((-1.0)*r21*x13091*x13097))+(((-1.0)*r22*x13108)));
evalcond[1]=((((-1.0)*x13099*x13109))+(((-1.0)*r11*x13091*x13097))+(((-1.0)*r12*x13108)));
evalcond[2]=((-1.0)+(((-1.0)*r01*x13091*x13097))+(((-1.0)*x13104*x13109))+(((-1.0)*r02*x13108)));
evalcond[3]=(((gconst19*x13095))+(((-1.0)*r02*sj3*x13109))+(((-1.0)*x13096*x13097))+((r00*x13092*x13102))+((x13105*x13111)));
evalcond[4]=((((-1.0)*r00*sj3*x13097))+((r01*x13102))+((r02*x13110))+(((-1.0)*x13092*x13095*x13097))+(((-1.0)*gconst19*x13096*x13108)));
evalcond[5]=(((x13098*x13111))+((gconst19*x13101))+((x13106*x13111))+(((-1.0)*x13107))+x13093+(((-1.0)*r22*sj3*x13109))+(((-1.0)*cj3*r20*x13097)));
evalcond[6]=(((r22*x13110))+(((-1.0)*r20*sj3*x13097))+(((-1.0)*x13092*x13097*x13101))+((cj1*sj2))+(((-1.0)*cj3*x13098*x13108))+x13103+((r21*x13102)));
evalcond[7]=(((cj3*gconst19*r11))+(((-1.0)*cj1*x13094))+(((-1.0)*r12*sj3*x13109))+((x13099*x13111))+(((-1.0)*x13103))+((x13100*x13111))+(((-1.0)*cj3*r10*x13097)));
evalcond[8]=(((r12*x13110))+(((-1.0)*cj3*x13099*x13108))+(((-1.0)*cj3*r11*x13092*x13097))+(((-1.0)*r10*sj3*x13097))+(((-1.0)*x13107))+x13093+((r11*x13102)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13112=((1.0)*gconst19);
CheckValue<IkReal> x13113 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst20*r21))+(((-1.0)*r20*x13112)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13113.valid){
continue;
}
CheckValue<IkReal> x13114=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x13112))+((gconst20*r10)))),-1);
if(!x13114.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13113.value)+(((1.5707963267949)*(x13114.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13115=IKsin(j4);
IkReal x13116=IKcos(j4);
IkReal x13117=(cj1*cj2);
IkReal x13118=((1.0)*sj2);
IkReal x13119=(cj3*r01);
IkReal x13120=(cj3*r00);
IkReal x13121=((1.0)*gconst20);
IkReal x13122=(gconst19*r20);
IkReal x13123=(gconst19*r10);
IkReal x13124=(gconst20*r11);
IkReal x13125=(cj3*r21);
IkReal x13126=(gconst19*sj3);
IkReal x13127=(cj2*sj1);
IkReal x13128=(gconst19*r00);
IkReal x13129=(gconst20*r01);
IkReal x13130=(gconst20*r21);
IkReal x13131=(sj1*x13118);
IkReal x13132=((1.0)*x13116);
IkReal x13133=((1.0)*x13115);
IkReal x13134=(cj3*x13115);
IkReal x13135=(sj3*x13116);
evalcond[0]=((((-1.0)*r21*x13115*x13121))+(((-1.0)*x13122*x13133))+(((-1.0)*r22*x13132)));
evalcond[1]=((((-1.0)*x13123*x13133))+(((-1.0)*r11*x13115*x13121))+(((-1.0)*r12*x13132)));
evalcond[2]=((-1.0)+(((-1.0)*r01*x13115*x13121))+(((-1.0)*r02*x13132))+(((-1.0)*x13128*x13133)));
evalcond[3]=((((-1.0)*x13120*x13121))+((x13129*x13135))+(((-1.0)*r02*sj3*x13133))+((gconst19*x13119))+((r00*x13116*x13126)));
evalcond[4]=((((-1.0)*gconst19*x13120*x13132))+((r01*x13126))+(((-1.0)*r00*sj3*x13121))+(((-1.0)*x13116*x13119*x13121))+((r02*x13134)));
evalcond[5]=((((-1.0)*r22*sj3*x13133))+((x13130*x13135))+((gconst19*x13125))+(((-1.0)*cj3*r20*x13121))+((x13122*x13135))+(((-1.0)*x13131))+x13117);
evalcond[6]=(((cj1*sj2))+(((-1.0)*x13116*x13121*x13125))+((r21*x13126))+(((-1.0)*cj3*x13122*x13132))+x13127+((r22*x13134))+(((-1.0)*r20*sj3*x13121)));
evalcond[7]=(((cj3*gconst19*r11))+((x13123*x13135))+((x13124*x13135))+(((-1.0)*r12*sj3*x13133))+(((-1.0)*cj3*r10*x13121))+(((-1.0)*cj1*x13118))+(((-1.0)*x13127)));
evalcond[8]=((((-1.0)*cj3*r11*x13116*x13121))+((r12*x13134))+((r11*x13126))+(((-1.0)*cj3*x13123*x13132))+(((-1.0)*r10*sj3*x13121))+(((-1.0)*x13131))+x13117);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13138 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x13138)==0){
continue;
}
IkReal x13136=pow(x13138,-0.5);
IkReal x13137=((-1.0)*x13136);
CheckValue<IkReal> x13139 = IKatan2WithCheck(IkReal(((-1.0)*r20)),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x13139.valid){
continue;
}
IkReal gconst21=((3.14159265358979)+(((-1.0)*(x13139.value))));
IkReal gconst22=(r20*x13137);
IkReal gconst23=(r21*x13137);
CheckValue<IkReal> x13140 = IKatan2WithCheck(IkReal(((-1.0)*r20)),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x13140.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x13140.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x13144 = IKatan2WithCheck(IkReal(((-1.0)*r20)),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x13144.valid){
continue;
}
IkReal x13141=((1.0)*(x13144.value));
IkReal x13142=x13136;
IkReal x13143=((-1.0)*x13142);
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x13141)));
IkReal gconst21=((3.14159265358979)+(((-1.0)*x13141)));
IkReal gconst22=(r20*x13143);
IkReal gconst23=(r21*x13143);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x13148 = IKatan2WithCheck(IkReal(((-1.0)*r20)),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x13148.valid){
continue;
}
IkReal x13145=((1.0)*(x13148.value));
IkReal x13146=x13136;
IkReal x13147=((-1.0)*x13146);
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x13145)));
IkReal gconst21=((3.14159265358979)+(((-1.0)*x13145)));
IkReal gconst22=(r20*x13147);
IkReal gconst23=(r21*x13147);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x13152 = IKatan2WithCheck(IkReal(((-1.0)*r20)),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x13152.valid){
continue;
}
IkReal x13149=((1.0)*(x13152.value));
IkReal x13150=x13136;
IkReal x13151=((-1.0)*x13150);
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x13149)));
IkReal gconst21=((3.14159265358979)+(((-1.0)*x13149)));
IkReal gconst22=(r20*x13151);
IkReal gconst23=(r21*x13151);
j4eval[0]=cj3;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x13156 = IKatan2WithCheck(IkReal(((-1.0)*r20)),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x13156.valid){
continue;
}
IkReal x13153=((1.0)*(x13156.value));
IkReal x13154=x13136;
IkReal x13155=((-1.0)*x13154);
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x13153)));
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst21=((3.14159265358979)+(((-1.0)*x13153)));
IkReal gconst22=(r20*x13155);
IkReal gconst23=(r21*x13155);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x13160 = IKatan2WithCheck(IkReal(((-1.0)*r20)),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x13160.valid){
continue;
}
IkReal x13157=((1.0)*(x13160.value));
IkReal x13158=x13136;
IkReal x13159=((-1.0)*x13158);
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x13157)));
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst21=((3.14159265358979)+(((-1.0)*x13157)));
IkReal gconst22=(r20*x13159);
IkReal gconst23=(r21*x13159);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x13164 = IKatan2WithCheck(IkReal(((-1.0)*r20)),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x13164.valid){
continue;
}
IkReal x13161=((1.0)*(x13164.value));
IkReal x13162=x13136;
IkReal x13163=((-1.0)*x13162);
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x13161)));
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst21=((3.14159265358979)+(((-1.0)*x13161)));
IkReal gconst22=(r20*x13163);
IkReal gconst23=(r21*x13163);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13165=(gconst23*r01);
IkReal x13166=(gconst22*r00);
CheckValue<IkReal> x13167=IKPowWithIntegerCheck(IKsign(((((2.0)*x13165*x13166))+(r02*r02)+(x13166*x13166)+(x13165*x13165))),-1);
if(!x13167.valid){
continue;
}
CheckValue<IkReal> x13168 = IKatan2WithCheck(IkReal(((((-1.0)*x13165))+(((-1.0)*x13166)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x13168.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13167.value)))+(x13168.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13169=IKcos(j4);
IkReal x13170=IKsin(j4);
IkReal x13171=(gconst23*r21);
IkReal x13172=(gconst22*r00);
IkReal x13173=(gconst22*r10);
IkReal x13174=(gconst22*r20);
IkReal x13175=(gconst23*r11);
IkReal x13176=(gconst23*r01);
IkReal x13177=((1.0)*x13169);
IkReal x13178=((1.0)*x13170);
evalcond[0]=((((-1.0)*x13172*x13177))+((r02*x13170))+(((-1.0)*x13176*x13177)));
evalcond[1]=((((-1.0)*r22*x13177))+(((-1.0)*x13171*x13178))+(((-1.0)*x13174*x13178)));
evalcond[2]=((((-1.0)*x13173*x13178))+(((-1.0)*r12*x13177))+(((-1.0)*x13175*x13178)));
evalcond[3]=((-1.0)+(((-1.0)*x13172*x13178))+(((-1.0)*r02*x13177))+(((-1.0)*x13176*x13178)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x13170))+(((-1.0)*x13171*x13177))+(((-1.0)*x13174*x13177)));
evalcond[5]=((((-1.0)*x13173*x13177))+(((-1.0)*sj1*sj2))+((r12*x13170))+(((-1.0)*x13175*x13177))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13179=((1.0)*gconst23);
CheckValue<IkReal> x13180=IKPowWithIntegerCheck(IKsign((((gconst22*r21))+(((-1.0)*r20*x13179)))),-1);
if(!x13180.valid){
continue;
}
CheckValue<IkReal> x13181 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*gconst22*r10))+(((-1.0)*r11*x13179)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13181.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13180.value)))+(x13181.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13182=IKcos(j4);
IkReal x13183=IKsin(j4);
IkReal x13184=(gconst23*r21);
IkReal x13185=(gconst22*r00);
IkReal x13186=(gconst22*r10);
IkReal x13187=(gconst22*r20);
IkReal x13188=(gconst23*r11);
IkReal x13189=(gconst23*r01);
IkReal x13190=((1.0)*x13182);
IkReal x13191=((1.0)*x13183);
evalcond[0]=(((r02*x13183))+(((-1.0)*x13185*x13190))+(((-1.0)*x13189*x13190)));
evalcond[1]=((((-1.0)*r22*x13190))+(((-1.0)*x13187*x13191))+(((-1.0)*x13184*x13191)));
evalcond[2]=((((-1.0)*r12*x13190))+(((-1.0)*x13188*x13191))+(((-1.0)*x13186*x13191)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x13190))+(((-1.0)*x13185*x13191))+(((-1.0)*x13189*x13191)));
evalcond[4]=(((cj2*sj1))+((r22*x13183))+((cj1*sj2))+(((-1.0)*x13187*x13190))+(((-1.0)*x13184*x13190)));
evalcond[5]=(((r12*x13183))+(((-1.0)*x13188*x13190))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*x13186*x13190)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13192=((1.0)*gconst22);
CheckValue<IkReal> x13193 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst23*r21))+(((-1.0)*r20*x13192)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13193.valid){
continue;
}
CheckValue<IkReal> x13194=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x13192))+((gconst23*r10)))),-1);
if(!x13194.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13193.value)+(((1.5707963267949)*(x13194.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13195=IKcos(j4);
IkReal x13196=IKsin(j4);
IkReal x13197=(gconst23*r21);
IkReal x13198=(gconst22*r00);
IkReal x13199=(gconst22*r10);
IkReal x13200=(gconst22*r20);
IkReal x13201=(gconst23*r11);
IkReal x13202=(gconst23*r01);
IkReal x13203=((1.0)*x13195);
IkReal x13204=((1.0)*x13196);
evalcond[0]=((((-1.0)*x13198*x13203))+((r02*x13196))+(((-1.0)*x13202*x13203)));
evalcond[1]=((((-1.0)*x13200*x13204))+(((-1.0)*r22*x13203))+(((-1.0)*x13197*x13204)));
evalcond[2]=((((-1.0)*x13199*x13204))+(((-1.0)*r12*x13203))+(((-1.0)*x13201*x13204)));
evalcond[3]=((-1.0)+(((-1.0)*x13198*x13204))+(((-1.0)*x13202*x13204))+(((-1.0)*r02*x13203)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x13200*x13203))+(((-1.0)*x13197*x13203))+((r22*x13196)));
evalcond[5]=(((r12*x13196))+(((-1.0)*x13199*x13203))+(((-1.0)*sj1*sj2))+(((-1.0)*x13201*x13203))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x13208 = IKatan2WithCheck(IkReal(((-1.0)*r20)),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x13208.valid){
continue;
}
IkReal x13205=((1.0)*(x13208.value));
IkReal x13206=x13136;
IkReal x13207=((-1.0)*x13206);
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x13205)));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst21=((3.14159265358979)+(((-1.0)*x13205)));
IkReal gconst22=(r20*x13207);
IkReal gconst23=(r21*x13207);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x13212 = IKatan2WithCheck(IkReal(((-1.0)*r20)),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x13212.valid){
continue;
}
IkReal x13209=((1.0)*(x13212.value));
IkReal x13210=x13136;
IkReal x13211=((-1.0)*x13210);
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x13209)));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst21=((3.14159265358979)+(((-1.0)*x13209)));
IkReal gconst22=(r20*x13211);
IkReal gconst23=(r21*x13211);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x13216 = IKatan2WithCheck(IkReal(((-1.0)*r20)),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x13216.valid){
continue;
}
IkReal x13213=((1.0)*(x13216.value));
IkReal x13214=x13136;
IkReal x13215=((-1.0)*x13214);
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x13213)));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst21=((3.14159265358979)+(((-1.0)*x13213)));
IkReal gconst22=(r20*x13215);
IkReal gconst23=(r21*x13215);
IkReal x13217=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x13221=IKPowWithIntegerCheck(x13217,-1);
if(!x13221.valid){
continue;
}
IkReal x13218=x13221.value;
IkReal x13219=((1.0)*x13218);
IkReal x13220=((((-2.0)*r00*r01*r20*r21*x13218))+(((-1.0)*(r02*r02)))+(((-1.0)*x13219*(r01*r01)*(r21*r21)))+(((-1.0)*x13219*(r00*r00)*(r20*r20))));
j4eval[0]=x13220;
j4eval[1]=IKsign(x13220);
j4eval[2]=r02;
j4eval[3]=x13217;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13222=(gconst22*r00);
IkReal x13223=(gconst23*r01);
CheckValue<IkReal> x13224=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-2.0)*x13222*x13223))+(((-1.0)*(x13222*x13222)))+(((-1.0)*(x13223*x13223))))),-1);
if(!x13224.valid){
continue;
}
CheckValue<IkReal> x13225 = IKatan2WithCheck(IkReal((x13223+x13222)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x13225.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13224.value)))+(x13225.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13226=IKcos(j4);
IkReal x13227=IKsin(j4);
IkReal x13228=(gconst23*r21);
IkReal x13229=(gconst23*r11);
IkReal x13230=(gconst23*r01);
IkReal x13231=((1.0)*x13226);
IkReal x13232=((1.0)*x13227);
IkReal x13233=(gconst22*x13226);
evalcond[0]=(((x13226*x13230))+(((-1.0)*r02*x13232))+((r00*x13233)));
evalcond[1]=((((-1.0)*x13228*x13232))+(((-1.0)*gconst22*r20*x13232))+(((-1.0)*r22*x13231)));
evalcond[2]=((((-1.0)*x13229*x13232))+(((-1.0)*gconst22*r10*x13232))+(((-1.0)*r12*x13231)));
evalcond[3]=((-1.0)+(((-1.0)*gconst22*r00*x13232))+(((-1.0)*r02*x13231))+(((-1.0)*x13230*x13232)));
evalcond[4]=(((cj2*sj1))+((r20*x13233))+((x13226*x13228))+((cj1*sj2))+(((-1.0)*r22*x13232)));
evalcond[5]=(((r10*x13233))+((x13226*x13229))+(((-1.0)*sj1*sj2))+(((-1.0)*r12*x13232))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13234=((1.0)*gconst23);
CheckValue<IkReal> x13235 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*gconst22*r10))+(((-1.0)*r11*x13234)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13235.valid){
continue;
}
CheckValue<IkReal> x13236=IKPowWithIntegerCheck(IKsign((((gconst22*r21))+(((-1.0)*r20*x13234)))),-1);
if(!x13236.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13235.value)+(((1.5707963267949)*(x13236.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13237=IKcos(j4);
IkReal x13238=IKsin(j4);
IkReal x13239=(gconst23*r21);
IkReal x13240=(gconst23*r11);
IkReal x13241=(gconst23*r01);
IkReal x13242=((1.0)*x13237);
IkReal x13243=((1.0)*x13238);
IkReal x13244=(gconst22*x13237);
evalcond[0]=(((x13237*x13241))+(((-1.0)*r02*x13243))+((r00*x13244)));
evalcond[1]=((((-1.0)*r22*x13242))+(((-1.0)*gconst22*r20*x13243))+(((-1.0)*x13239*x13243)));
evalcond[2]=((((-1.0)*gconst22*r10*x13243))+(((-1.0)*r12*x13242))+(((-1.0)*x13240*x13243)));
evalcond[3]=((-1.0)+(((-1.0)*gconst22*r00*x13243))+(((-1.0)*r02*x13242))+(((-1.0)*x13241*x13243)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x13243))+((x13237*x13239))+((r20*x13244)));
evalcond[5]=(((r10*x13244))+(((-1.0)*sj1*sj2))+((x13237*x13240))+(((-1.0)*r12*x13243))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13245=((1.0)*gconst22);
CheckValue<IkReal> x13246 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst23*r21))+(((-1.0)*r20*x13245)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13246.valid){
continue;
}
CheckValue<IkReal> x13247=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x13245))+((gconst23*r10)))),-1);
if(!x13247.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13246.value)+(((1.5707963267949)*(x13247.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13248=IKcos(j4);
IkReal x13249=IKsin(j4);
IkReal x13250=(gconst23*r21);
IkReal x13251=(gconst23*r11);
IkReal x13252=(gconst23*r01);
IkReal x13253=((1.0)*x13248);
IkReal x13254=((1.0)*x13249);
IkReal x13255=(gconst22*x13248);
evalcond[0]=(((x13248*x13252))+(((-1.0)*r02*x13254))+((r00*x13255)));
evalcond[1]=((((-1.0)*r22*x13253))+(((-1.0)*gconst22*r20*x13254))+(((-1.0)*x13250*x13254)));
evalcond[2]=((((-1.0)*gconst22*r10*x13254))+(((-1.0)*x13251*x13254))+(((-1.0)*r12*x13253)));
evalcond[3]=((-1.0)+(((-1.0)*gconst22*r00*x13254))+(((-1.0)*r02*x13253))+(((-1.0)*x13252*x13254)));
evalcond[4]=(((cj2*sj1))+((x13248*x13250))+((cj1*sj2))+(((-1.0)*r22*x13254))+((r20*x13255)));
evalcond[5]=(((x13248*x13251))+((r10*x13255))+(((-1.0)*sj1*sj2))+(((-1.0)*r12*x13254))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x13259 = IKatan2WithCheck(IkReal(((-1.0)*r20)),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x13259.valid){
continue;
}
IkReal x13256=((1.0)*(x13259.value));
IkReal x13257=x13136;
IkReal x13258=((-1.0)*x13257);
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x13256)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst21=((3.14159265358979)+(((-1.0)*x13256)));
IkReal gconst22=(r20*x13258);
IkReal gconst23=(r21*x13258);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x13263 = IKatan2WithCheck(IkReal(((-1.0)*r20)),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x13263.valid){
continue;
}
IkReal x13260=((1.0)*(x13263.value));
IkReal x13261=x13136;
IkReal x13262=((-1.0)*x13261);
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x13260)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst21=((3.14159265358979)+(((-1.0)*x13260)));
IkReal gconst22=(r20*x13262);
IkReal gconst23=(r21*x13262);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x13267 = IKatan2WithCheck(IkReal(((-1.0)*r20)),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x13267.valid){
continue;
}
IkReal x13264=((1.0)*(x13267.value));
IkReal x13265=x13136;
IkReal x13266=((-1.0)*x13265);
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x13264)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst21=((3.14159265358979)+(((-1.0)*x13264)));
IkReal gconst22=(r20*x13266);
IkReal gconst23=(r21*x13266);
IkReal x13268=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x13272=IKPowWithIntegerCheck(x13268,-1);
if(!x13272.valid){
continue;
}
IkReal x13269=x13272.value;
IkReal x13270=((1.0)*x13269);
IkReal x13271=((((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r20*r21*x13269))+(((-1.0)*x13270*(r00*r00)*(r20*r20)))+(((-1.0)*x13270*(r01*r01)*(r21*r21))));
j4eval[0]=x13271;
j4eval[1]=IKsign(x13271);
j4eval[2]=r02;
j4eval[3]=x13268;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13273=(gconst22*r00);
IkReal x13274=(gconst23*r01);
CheckValue<IkReal> x13275=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x13273*x13273)))+(((-1.0)*(r02*r02)))+(((-2.0)*x13273*x13274))+(((-1.0)*(x13274*x13274))))),-1);
if(!x13275.valid){
continue;
}
CheckValue<IkReal> x13276 = IKatan2WithCheck(IkReal((x13274+x13273)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x13276.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13275.value)))+(x13276.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13277=IKcos(j4);
IkReal x13278=IKsin(j4);
IkReal x13279=(gconst23*r21);
IkReal x13280=((1.0)*sj1);
IkReal x13281=(gconst23*r11);
IkReal x13282=(gconst23*r01);
IkReal x13283=((1.0)*x13277);
IkReal x13284=((1.0)*x13278);
IkReal x13285=(gconst22*x13277);
evalcond[0]=((((-1.0)*r02*x13284))+((x13277*x13282))+((r00*x13285)));
evalcond[1]=((((-1.0)*r22*x13283))+(((-1.0)*gconst22*r20*x13284))+(((-1.0)*x13279*x13284)));
evalcond[2]=((((-1.0)*x13281*x13284))+(((-1.0)*gconst22*r10*x13284))+(((-1.0)*r12*x13283)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x13283))+(((-1.0)*gconst22*r00*x13284))+(((-1.0)*x13282*x13284)));
evalcond[4]=((((-1.0)*r22*x13284))+(((-1.0)*sj2*x13280))+((r20*x13285))+((cj1*cj2))+((x13277*x13279)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x13280))+((r10*x13285))+((x13277*x13281))+(((-1.0)*r12*x13284)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13286=((1.0)*gconst23);
CheckValue<IkReal> x13287=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x13286))+((gconst22*r21)))),-1);
if(!x13287.valid){
continue;
}
CheckValue<IkReal> x13288 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*gconst22*r10))+(((-1.0)*r11*x13286)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13288.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13287.value)))+(x13288.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13289=IKcos(j4);
IkReal x13290=IKsin(j4);
IkReal x13291=(gconst23*r21);
IkReal x13292=((1.0)*sj1);
IkReal x13293=(gconst23*r11);
IkReal x13294=(gconst23*r01);
IkReal x13295=((1.0)*x13289);
IkReal x13296=((1.0)*x13290);
IkReal x13297=(gconst22*x13289);
evalcond[0]=((((-1.0)*r02*x13296))+((x13289*x13294))+((r00*x13297)));
evalcond[1]=((((-1.0)*gconst22*r20*x13296))+(((-1.0)*x13291*x13296))+(((-1.0)*r22*x13295)));
evalcond[2]=((((-1.0)*x13293*x13296))+(((-1.0)*gconst22*r10*x13296))+(((-1.0)*r12*x13295)));
evalcond[3]=((-1.0)+(((-1.0)*x13294*x13296))+(((-1.0)*r02*x13295))+(((-1.0)*gconst22*r00*x13296)));
evalcond[4]=(((r20*x13297))+((cj1*cj2))+(((-1.0)*r22*x13296))+(((-1.0)*sj2*x13292))+((x13289*x13291)));
evalcond[5]=((((-1.0)*cj2*x13292))+(((-1.0)*cj1*sj2))+((r10*x13297))+(((-1.0)*r12*x13296))+((x13289*x13293)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13298=((1.0)*gconst22);
CheckValue<IkReal> x13299 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst23*r21))+(((-1.0)*r20*x13298)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13299.valid){
continue;
}
CheckValue<IkReal> x13300=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x13298))+((gconst23*r10)))),-1);
if(!x13300.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13299.value)+(((1.5707963267949)*(x13300.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13301=IKcos(j4);
IkReal x13302=IKsin(j4);
IkReal x13303=(gconst23*r21);
IkReal x13304=((1.0)*sj1);
IkReal x13305=(gconst23*r11);
IkReal x13306=(gconst23*r01);
IkReal x13307=((1.0)*x13301);
IkReal x13308=((1.0)*x13302);
IkReal x13309=(gconst22*x13301);
evalcond[0]=(((x13301*x13306))+((r00*x13309))+(((-1.0)*r02*x13308)));
evalcond[1]=((((-1.0)*gconst22*r20*x13308))+(((-1.0)*r22*x13307))+(((-1.0)*x13303*x13308)));
evalcond[2]=((((-1.0)*gconst22*r10*x13308))+(((-1.0)*r12*x13307))+(((-1.0)*x13305*x13308)));
evalcond[3]=((-1.0)+(((-1.0)*gconst22*r00*x13308))+(((-1.0)*x13306*x13308))+(((-1.0)*r02*x13307)));
evalcond[4]=(((r20*x13309))+((x13301*x13303))+((cj1*cj2))+(((-1.0)*r22*x13308))+(((-1.0)*sj2*x13304)));
evalcond[5]=(((r10*x13309))+(((-1.0)*cj1*sj2))+((x13301*x13305))+(((-1.0)*cj2*x13304))+(((-1.0)*r12*x13308)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x13313 = IKatan2WithCheck(IkReal(((-1.0)*r20)),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x13313.valid){
continue;
}
IkReal x13310=((1.0)*(x13313.value));
IkReal x13311=x13136;
IkReal x13312=((-1.0)*x13311);
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x13310)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst21=((3.14159265358979)+(((-1.0)*x13310)));
IkReal gconst22=(r20*x13312);
IkReal gconst23=(r21*x13312);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x13317 = IKatan2WithCheck(IkReal(((-1.0)*r20)),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x13317.valid){
continue;
}
IkReal x13314=((1.0)*(x13317.value));
IkReal x13315=x13136;
IkReal x13316=((-1.0)*x13315);
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x13314)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst21=((3.14159265358979)+(((-1.0)*x13314)));
IkReal gconst22=(r20*x13316);
IkReal gconst23=(r21*x13316);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x13321 = IKatan2WithCheck(IkReal(((-1.0)*r20)),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x13321.valid){
continue;
}
IkReal x13318=((1.0)*(x13321.value));
IkReal x13319=x13136;
IkReal x13320=((-1.0)*x13319);
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x13318)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst21=((3.14159265358979)+(((-1.0)*x13318)));
IkReal gconst22=(r20*x13320);
IkReal gconst23=(r21*x13320);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13322=(gconst23*r01);
IkReal x13323=(gconst22*r00);
CheckValue<IkReal> x13324 = IKatan2WithCheck(IkReal(((((-1.0)*x13322))+(((-1.0)*x13323)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x13324.valid){
continue;
}
CheckValue<IkReal> x13325=IKPowWithIntegerCheck(IKsign(((x13322*x13322)+(((2.0)*x13322*x13323))+(x13323*x13323)+(r02*r02))),-1);
if(!x13325.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13324.value)+(((1.5707963267949)*(x13325.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13326=IKcos(j4);
IkReal x13327=IKsin(j4);
IkReal x13328=(gconst23*r21);
IkReal x13329=((1.0)*sj1);
IkReal x13330=(gconst22*r00);
IkReal x13331=(gconst22*r10);
IkReal x13332=(gconst22*r20);
IkReal x13333=(gconst23*r11);
IkReal x13334=(gconst23*r01);
IkReal x13335=((1.0)*x13326);
IkReal x13336=((1.0)*x13327);
evalcond[0]=(((r02*x13327))+(((-1.0)*x13334*x13335))+(((-1.0)*x13330*x13335)));
evalcond[1]=((((-1.0)*r22*x13335))+(((-1.0)*x13332*x13336))+(((-1.0)*x13328*x13336)));
evalcond[2]=((((-1.0)*r12*x13335))+(((-1.0)*x13333*x13336))+(((-1.0)*x13331*x13336)));
evalcond[3]=((-1.0)+(((-1.0)*x13334*x13336))+(((-1.0)*r02*x13335))+(((-1.0)*x13330*x13336)));
evalcond[4]=((((-1.0)*x13332*x13335))+((cj1*cj2))+(((-1.0)*x13328*x13335))+(((-1.0)*sj2*x13329))+((r22*x13327)));
evalcond[5]=(((r12*x13327))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x13329))+(((-1.0)*x13333*x13335))+(((-1.0)*x13331*x13335)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13337=((1.0)*gconst23);
CheckValue<IkReal> x13338=IKPowWithIntegerCheck(IKsign((((gconst22*r21))+(((-1.0)*r20*x13337)))),-1);
if(!x13338.valid){
continue;
}
CheckValue<IkReal> x13339 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*gconst22*r10))+(((-1.0)*r11*x13337)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13339.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13338.value)))+(x13339.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13340=IKcos(j4);
IkReal x13341=IKsin(j4);
IkReal x13342=(gconst23*r21);
IkReal x13343=((1.0)*sj1);
IkReal x13344=(gconst22*r00);
IkReal x13345=(gconst22*r10);
IkReal x13346=(gconst22*r20);
IkReal x13347=(gconst23*r11);
IkReal x13348=(gconst23*r01);
IkReal x13349=((1.0)*x13340);
IkReal x13350=((1.0)*x13341);
evalcond[0]=(((r02*x13341))+(((-1.0)*x13344*x13349))+(((-1.0)*x13348*x13349)));
evalcond[1]=((((-1.0)*x13346*x13350))+(((-1.0)*x13342*x13350))+(((-1.0)*r22*x13349)));
evalcond[2]=((((-1.0)*x13345*x13350))+(((-1.0)*r12*x13349))+(((-1.0)*x13347*x13350)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x13349))+(((-1.0)*x13344*x13350))+(((-1.0)*x13348*x13350)));
evalcond[4]=((((-1.0)*sj2*x13343))+((r22*x13341))+(((-1.0)*x13342*x13349))+(((-1.0)*x13346*x13349))+((cj1*cj2)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x13343))+((r12*x13341))+(((-1.0)*x13345*x13349))+(((-1.0)*x13347*x13349)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13351=((1.0)*gconst22);
CheckValue<IkReal> x13352 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst23*r21))+(((-1.0)*r20*x13351)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13352.valid){
continue;
}
CheckValue<IkReal> x13353=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x13351))+((gconst23*r10)))),-1);
if(!x13353.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13352.value)+(((1.5707963267949)*(x13353.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13354=IKcos(j4);
IkReal x13355=IKsin(j4);
IkReal x13356=(gconst23*r21);
IkReal x13357=((1.0)*sj1);
IkReal x13358=(gconst22*r00);
IkReal x13359=(gconst22*r10);
IkReal x13360=(gconst22*r20);
IkReal x13361=(gconst23*r11);
IkReal x13362=(gconst23*r01);
IkReal x13363=((1.0)*x13354);
IkReal x13364=((1.0)*x13355);
evalcond[0]=(((r02*x13355))+(((-1.0)*x13362*x13363))+(((-1.0)*x13358*x13363)));
evalcond[1]=((((-1.0)*x13360*x13364))+(((-1.0)*x13356*x13364))+(((-1.0)*r22*x13363)));
evalcond[2]=((((-1.0)*r12*x13363))+(((-1.0)*x13361*x13364))+(((-1.0)*x13359*x13364)));
evalcond[3]=((-1.0)+(((-1.0)*x13362*x13364))+(((-1.0)*r02*x13363))+(((-1.0)*x13358*x13364)));
evalcond[4]=(((r22*x13355))+(((-1.0)*x13360*x13363))+(((-1.0)*x13356*x13363))+((cj1*cj2))+(((-1.0)*sj2*x13357)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x13357))+(((-1.0)*x13361*x13363))+((r12*x13355))+(((-1.0)*x13359*x13363)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13365=((-1.0)*r20);
IkReal x13366=((-1.0)*r21);
CheckValue<IkReal> x13368 = IKatan2WithCheck(IkReal(x13365),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x13368.valid){
continue;
}
IkReal x13367=((1.0)*(x13368.value));
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x13367)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x13365);
rxp0_2=(py*r00);
rxp1_0=(py*x13366);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst21=((3.14159265358979)+(((-1.0)*x13367)));
IkReal gconst22=x13365;
IkReal gconst23=x13366;
IkReal x13369=((1.0)*r01*r21);
IkReal x13370=((1.0)*r00*r20);
j4eval[0]=(x13370+x13369);
j4eval[1]=((((-1.0)*sj3*x13370))+(((-1.0)*sj3*x13369)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13371=((-1.0)*r20);
IkReal x13372=((-1.0)*r21);
CheckValue<IkReal> x13374 = IKatan2WithCheck(IkReal(x13371),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x13374.valid){
continue;
}
IkReal x13373=((1.0)*(x13374.value));
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x13373)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x13371);
rxp0_2=(py*r00);
rxp1_0=(py*x13372);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst21=((3.14159265358979)+(((-1.0)*x13373)));
IkReal gconst22=x13371;
IkReal gconst23=x13372;
IkReal x13375=((1.0)*r01*r21);
IkReal x13376=((1.0)*r00*r20);
j4eval[0]=(x13375+x13376);
j4eval[1]=(((cj3*x13375))+((cj3*x13376)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x13377=((-1.0)*r20);
IkReal x13378=((-1.0)*r21);
CheckValue<IkReal> x13380 = IKatan2WithCheck(IkReal(x13377),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x13380.valid){
continue;
}
IkReal x13379=((1.0)*(x13380.value));
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x13379)));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x13377);
rxp0_2=(py*r00);
rxp1_0=(py*x13378);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst21=((3.14159265358979)+(((-1.0)*x13379)));
IkReal gconst22=x13377;
IkReal gconst23=x13378;
IkReal x13381=((1.0)*sj3);
j4eval[0]=cj3;
j4eval[1]=r12;
j4eval[2]=((((-1.0)*r01*r21*x13381))+(((-1.0)*r00*r20*x13381)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13382=IKPowWithIntegerCheck(cj3,-1);
if(!x13382.valid){
continue;
}
CheckValue<IkReal> x13383=IKPowWithIntegerCheck(r12,-1);
if(!x13383.valid){
continue;
}
CheckValue<IkReal> x13384=IKPowWithIntegerCheck((((gconst22*r00*sj3))+((gconst23*r01*sj3))),-1);
if(!x13384.valid){
continue;
}
if( IKabs(((x13382.value)*(x13383.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13384.value)*(((((-1.0)*cj3*gconst22*r01))+((cj3*gconst23*r00)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13382.value)*(x13383.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x13384.value)*(((((-1.0)*cj3*gconst22*r01))+((cj3*gconst23*r00))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13382.value)*(x13383.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x13384.value)*(((((-1.0)*cj3*gconst22*r01))+((cj3*gconst23*r00))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13385=IKsin(j4);
IkReal x13386=IKcos(j4);
IkReal x13387=(cj1*cj2);
IkReal x13388=((1.0)*sj1);
IkReal x13389=(gconst22*r00);
IkReal x13390=(cj1*sj2);
IkReal x13391=(cj3*gconst22);
IkReal x13392=(gconst23*sj3);
IkReal x13393=(gconst22*r20);
IkReal x13394=(gconst22*sj3);
IkReal x13395=(sj2*x13388);
IkReal x13396=((1.0)*x13385);
IkReal x13397=((1.0)*cj3*gconst23);
IkReal x13398=(r21*x13386);
IkReal x13399=((1.0)*x13386);
IkReal x13400=(r01*x13386);
IkReal x13401=(sj3*x13386);
evalcond[0]=((-1.0)*r12*x13386);
evalcond[1]=(((cj3*r12*x13385))+(((-1.0)*x13395))+x13387);
evalcond[2]=((((-1.0)*gconst23*r21*x13396))+(((-1.0)*x13393*x13396)));
evalcond[3]=((-1.0)+(((-1.0)*x13389*x13396))+(((-1.0)*gconst23*r01*x13396)));
evalcond[4]=((((-1.0)*x13390))+(((-1.0)*cj2*x13388))+(((-1.0)*r12*sj3*x13396)));
evalcond[5]=(((x13392*x13400))+((r01*x13391))+(((-1.0)*r00*x13397))+((x13389*x13401)));
evalcond[6]=((((-1.0)*r00*x13392))+(((-1.0)*x13397*x13400))+((r01*x13394))+(((-1.0)*cj3*x13389*x13399)));
evalcond[7]=(((r21*x13391))+((x13393*x13401))+((x13392*x13398))+(((-1.0)*r20*x13397))+(((-1.0)*x13395))+x13387);
evalcond[8]=(((cj2*sj1))+((r21*x13394))+(((-1.0)*r20*x13391*x13399))+(((-1.0)*x13397*x13398))+(((-1.0)*r20*x13392))+x13390);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13402=((1.0)*r01);
IkReal x13403=((1.0)*gconst22*r00);
CheckValue<IkReal> x13404=IKPowWithIntegerCheck(((((-1.0)*x13403))+(((-1.0)*gconst23*x13402))),-1);
if(!x13404.valid){
continue;
}
CheckValue<IkReal> x13405=IKPowWithIntegerCheck(((((-1.0)*cj3*x13403))+(((-1.0)*cj3*gconst23*x13402))),-1);
if(!x13405.valid){
continue;
}
if( IKabs(x13404.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13405.value)*((((gconst23*r00*sj3))+(((-1.0)*gconst22*sj3*x13402)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x13404.value)+IKsqr(((x13405.value)*((((gconst23*r00*sj3))+(((-1.0)*gconst22*sj3*x13402))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x13404.value, ((x13405.value)*((((gconst23*r00*sj3))+(((-1.0)*gconst22*sj3*x13402))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13406=IKsin(j4);
IkReal x13407=IKcos(j4);
IkReal x13408=(cj1*cj2);
IkReal x13409=((1.0)*sj1);
IkReal x13410=(gconst22*r00);
IkReal x13411=(cj1*sj2);
IkReal x13412=(cj3*gconst22);
IkReal x13413=(gconst23*sj3);
IkReal x13414=(gconst22*r20);
IkReal x13415=(gconst22*sj3);
IkReal x13416=(sj2*x13409);
IkReal x13417=((1.0)*x13406);
IkReal x13418=((1.0)*cj3*gconst23);
IkReal x13419=(r21*x13407);
IkReal x13420=((1.0)*x13407);
IkReal x13421=(r01*x13407);
IkReal x13422=(sj3*x13407);
evalcond[0]=((-1.0)*r12*x13407);
evalcond[1]=(x13408+((cj3*r12*x13406))+(((-1.0)*x13416)));
evalcond[2]=((((-1.0)*x13414*x13417))+(((-1.0)*gconst23*r21*x13417)));
evalcond[3]=((-1.0)+(((-1.0)*x13410*x13417))+(((-1.0)*gconst23*r01*x13417)));
evalcond[4]=((((-1.0)*x13411))+(((-1.0)*r12*sj3*x13417))+(((-1.0)*cj2*x13409)));
evalcond[5]=(((x13413*x13421))+(((-1.0)*r00*x13418))+((x13410*x13422))+((r01*x13412)));
evalcond[6]=((((-1.0)*cj3*x13410*x13420))+(((-1.0)*r00*x13413))+((r01*x13415))+(((-1.0)*x13418*x13421)));
evalcond[7]=(x13408+((x13414*x13422))+(((-1.0)*r20*x13418))+((x13413*x13419))+((r21*x13412))+(((-1.0)*x13416)));
evalcond[8]=(x13411+(((-1.0)*r20*x13412*x13420))+(((-1.0)*r20*x13413))+((cj2*sj1))+((r21*x13415))+(((-1.0)*x13418*x13419)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13423=((1.0)*r01);
IkReal x13424=(gconst22*r00);
CheckValue<IkReal> x13425=IKPowWithIntegerCheck(((((-1.0)*x13424))+(((-1.0)*gconst23*x13423))),-1);
if(!x13425.valid){
continue;
}
CheckValue<IkReal> x13426=IKPowWithIntegerCheck((((gconst23*r01*sj3))+((sj3*x13424))),-1);
if(!x13426.valid){
continue;
}
if( IKabs(x13425.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13426.value)*(((((-1.0)*cj3*gconst22*x13423))+((cj3*gconst23*r00)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x13425.value)+IKsqr(((x13426.value)*(((((-1.0)*cj3*gconst22*x13423))+((cj3*gconst23*r00))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x13425.value, ((x13426.value)*(((((-1.0)*cj3*gconst22*x13423))+((cj3*gconst23*r00))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13427=IKsin(j4);
IkReal x13428=IKcos(j4);
IkReal x13429=(cj1*cj2);
IkReal x13430=((1.0)*sj1);
IkReal x13431=(gconst22*r00);
IkReal x13432=(cj1*sj2);
IkReal x13433=(cj3*gconst22);
IkReal x13434=(gconst23*sj3);
IkReal x13435=(gconst22*r20);
IkReal x13436=(gconst22*sj3);
IkReal x13437=(sj2*x13430);
IkReal x13438=((1.0)*x13427);
IkReal x13439=((1.0)*cj3*gconst23);
IkReal x13440=(r21*x13428);
IkReal x13441=((1.0)*x13428);
IkReal x13442=(r01*x13428);
IkReal x13443=(sj3*x13428);
evalcond[0]=((-1.0)*r12*x13428);
evalcond[1]=(x13429+(((-1.0)*x13437))+((cj3*r12*x13427)));
evalcond[2]=((((-1.0)*gconst23*r21*x13438))+(((-1.0)*x13435*x13438)));
evalcond[3]=((-1.0)+(((-1.0)*gconst23*r01*x13438))+(((-1.0)*x13431*x13438)));
evalcond[4]=((((-1.0)*cj2*x13430))+(((-1.0)*x13432))+(((-1.0)*r12*sj3*x13438)));
evalcond[5]=(((r01*x13433))+((x13434*x13442))+((x13431*x13443))+(((-1.0)*r00*x13439)));
evalcond[6]=(((r01*x13436))+(((-1.0)*x13439*x13442))+(((-1.0)*r00*x13434))+(((-1.0)*cj3*x13431*x13441)));
evalcond[7]=(x13429+((x13434*x13440))+((x13435*x13443))+(((-1.0)*x13437))+(((-1.0)*r20*x13439))+((r21*x13433)));
evalcond[8]=(x13432+((cj2*sj1))+(((-1.0)*x13439*x13440))+(((-1.0)*r20*x13434))+((r21*x13436))+(((-1.0)*r20*x13433*x13441)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13444=gconst22*gconst22;
IkReal x13445=gconst23*gconst23;
IkReal x13446=(r21*sj3);
IkReal x13447=(gconst23*r00);
IkReal x13448=(cj3*r21);
IkReal x13449=((1.0)*cj3);
IkReal x13450=(r01*r20);
IkReal x13451=(gconst22*gconst23);
IkReal x13452=(cj3*gconst22);
CheckValue<IkReal> x13453 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x13447*x13449))+((r01*r22*x13452)))),IkReal((((r20*x13447*x13452))+(((-1.0)*r01*x13448*x13451))+((r00*x13445*x13448))+(((-1.0)*x13444*x13449*x13450)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13453.valid){
continue;
}
CheckValue<IkReal> x13454=IKPowWithIntegerCheck(IKsign((((gconst22*x13446*x13447))+((r00*r20*sj3*x13444))+((sj3*x13450*x13451))+((r02*r22*sj3))+((r01*x13445*x13446)))),-1);
if(!x13454.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13453.value)+(((1.5707963267949)*(x13454.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13455=IKsin(j4);
IkReal x13456=IKcos(j4);
IkReal x13457=(cj1*cj2);
IkReal x13458=(cj3*gconst23);
IkReal x13459=((1.0)*r00);
IkReal x13460=(gconst23*r21);
IkReal x13461=(r11*sj3);
IkReal x13462=((1.0)*sj2);
IkReal x13463=((1.0)*r20);
IkReal x13464=(cj3*gconst22);
IkReal x13465=(gconst22*sj3);
IkReal x13466=(cj2*sj1);
IkReal x13467=((1.0)*r10);
IkReal x13468=(gconst23*sj3);
IkReal x13469=(sj1*x13462);
IkReal x13470=((1.0)*x13456);
IkReal x13471=((1.0)*x13455);
IkReal x13472=(cj3*x13455);
IkReal x13473=(gconst23*x13456);
evalcond[0]=((((-1.0)*gconst22*x13455*x13463))+(((-1.0)*r22*x13470))+(((-1.0)*x13460*x13471)));
evalcond[1]=((((-1.0)*gconst23*r11*x13471))+(((-1.0)*r12*x13470))+(((-1.0)*gconst22*x13455*x13467)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x13470))+(((-1.0)*gconst23*r01*x13471))+(((-1.0)*gconst22*x13455*x13459)));
evalcond[3]=(((r01*x13456*x13468))+(((-1.0)*r02*sj3*x13471))+((r00*x13456*x13465))+(((-1.0)*x13458*x13459))+((r01*x13464)));
evalcond[4]=((((-1.0)*x13459*x13468))+(((-1.0)*r01*x13458*x13470))+((r02*x13472))+(((-1.0)*x13456*x13459*x13464))+((r01*x13465)));
evalcond[5]=(x13457+((r21*x13464))+(((-1.0)*r22*sj3*x13471))+((sj3*x13456*x13460))+(((-1.0)*x13469))+((r20*x13456*x13465))+(((-1.0)*x13458*x13463)));
evalcond[6]=(x13466+(((-1.0)*x13463*x13468))+((r21*x13465))+((cj1*sj2))+((r22*x13472))+(((-1.0)*r21*x13458*x13470))+(((-1.0)*x13456*x13463*x13464)));
evalcond[7]=((((-1.0)*cj1*x13462))+((r10*x13456*x13465))+((r11*x13464))+(((-1.0)*x13466))+((x13461*x13473))+(((-1.0)*r12*sj3*x13471))+(((-1.0)*x13458*x13467)));
evalcond[8]=(x13457+((gconst22*x13461))+(((-1.0)*x13456*x13464*x13467))+(((-1.0)*r11*x13458*x13470))+((r12*x13472))+(((-1.0)*x13469))+(((-1.0)*x13467*x13468)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13474=((1.0)*gconst23);
CheckValue<IkReal> x13475=IKPowWithIntegerCheck(IKsign((((gconst22*r21))+(((-1.0)*r20*x13474)))),-1);
if(!x13475.valid){
continue;
}
CheckValue<IkReal> x13476 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*gconst22*r10))+(((-1.0)*r11*x13474)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13476.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13475.value)))+(x13476.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13477=IKsin(j4);
IkReal x13478=IKcos(j4);
IkReal x13479=(cj1*cj2);
IkReal x13480=(cj3*gconst23);
IkReal x13481=((1.0)*r00);
IkReal x13482=(gconst23*r21);
IkReal x13483=(r11*sj3);
IkReal x13484=((1.0)*sj2);
IkReal x13485=((1.0)*r20);
IkReal x13486=(cj3*gconst22);
IkReal x13487=(gconst22*sj3);
IkReal x13488=(cj2*sj1);
IkReal x13489=((1.0)*r10);
IkReal x13490=(gconst23*sj3);
IkReal x13491=(sj1*x13484);
IkReal x13492=((1.0)*x13478);
IkReal x13493=((1.0)*x13477);
IkReal x13494=(cj3*x13477);
IkReal x13495=(gconst23*x13478);
evalcond[0]=((((-1.0)*gconst22*x13477*x13485))+(((-1.0)*x13482*x13493))+(((-1.0)*r22*x13492)));
evalcond[1]=((((-1.0)*gconst22*x13477*x13489))+(((-1.0)*r12*x13492))+(((-1.0)*gconst23*r11*x13493)));
evalcond[2]=((-1.0)+(((-1.0)*gconst22*x13477*x13481))+(((-1.0)*r02*x13492))+(((-1.0)*gconst23*r01*x13493)));
evalcond[3]=(((r01*x13478*x13490))+(((-1.0)*r02*sj3*x13493))+((r00*x13478*x13487))+((r01*x13486))+(((-1.0)*x13480*x13481)));
evalcond[4]=(((r02*x13494))+(((-1.0)*x13481*x13490))+(((-1.0)*x13478*x13481*x13486))+((r01*x13487))+(((-1.0)*r01*x13480*x13492)));
evalcond[5]=(x13479+(((-1.0)*r22*sj3*x13493))+((sj3*x13478*x13482))+((r20*x13478*x13487))+(((-1.0)*x13480*x13485))+((r21*x13486))+(((-1.0)*x13491)));
evalcond[6]=(x13488+(((-1.0)*x13478*x13485*x13486))+((r22*x13494))+((cj1*sj2))+(((-1.0)*r21*x13480*x13492))+(((-1.0)*x13485*x13490))+((r21*x13487)));
evalcond[7]=((((-1.0)*x13488))+((x13483*x13495))+((r10*x13478*x13487))+(((-1.0)*r12*sj3*x13493))+(((-1.0)*cj1*x13484))+((r11*x13486))+(((-1.0)*x13480*x13489)));
evalcond[8]=(x13479+(((-1.0)*x13489*x13490))+(((-1.0)*r11*x13480*x13492))+((gconst22*x13483))+((r12*x13494))+(((-1.0)*x13478*x13486*x13489))+(((-1.0)*x13491)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13496=((1.0)*gconst22);
CheckValue<IkReal> x13497 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst23*r21))+(((-1.0)*r20*x13496)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13497.valid){
continue;
}
CheckValue<IkReal> x13498=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x13496))+((gconst23*r10)))),-1);
if(!x13498.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13497.value)+(((1.5707963267949)*(x13498.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13499=IKsin(j4);
IkReal x13500=IKcos(j4);
IkReal x13501=(cj1*cj2);
IkReal x13502=(cj3*gconst23);
IkReal x13503=((1.0)*r00);
IkReal x13504=(gconst23*r21);
IkReal x13505=(r11*sj3);
IkReal x13506=((1.0)*sj2);
IkReal x13507=((1.0)*r20);
IkReal x13508=(cj3*gconst22);
IkReal x13509=(gconst22*sj3);
IkReal x13510=(cj2*sj1);
IkReal x13511=((1.0)*r10);
IkReal x13512=(gconst23*sj3);
IkReal x13513=(sj1*x13506);
IkReal x13514=((1.0)*x13500);
IkReal x13515=((1.0)*x13499);
IkReal x13516=(cj3*x13499);
IkReal x13517=(gconst23*x13500);
evalcond[0]=((((-1.0)*r22*x13514))+(((-1.0)*gconst22*x13499*x13507))+(((-1.0)*x13504*x13515)));
evalcond[1]=((((-1.0)*r12*x13514))+(((-1.0)*gconst22*x13499*x13511))+(((-1.0)*gconst23*r11*x13515)));
evalcond[2]=((-1.0)+(((-1.0)*gconst23*r01*x13515))+(((-1.0)*gconst22*x13499*x13503))+(((-1.0)*r02*x13514)));
evalcond[3]=(((r00*x13500*x13509))+(((-1.0)*r02*sj3*x13515))+(((-1.0)*x13502*x13503))+((r01*x13500*x13512))+((r01*x13508)));
evalcond[4]=(((r02*x13516))+(((-1.0)*x13503*x13512))+(((-1.0)*x13500*x13503*x13508))+(((-1.0)*r01*x13502*x13514))+((r01*x13509)));
evalcond[5]=(x13501+(((-1.0)*r22*sj3*x13515))+((r20*x13500*x13509))+(((-1.0)*x13502*x13507))+((sj3*x13500*x13504))+(((-1.0)*x13513))+((r21*x13508)));
evalcond[6]=(x13510+(((-1.0)*r21*x13502*x13514))+((cj1*sj2))+(((-1.0)*x13500*x13507*x13508))+((r22*x13516))+(((-1.0)*x13507*x13512))+((r21*x13509)));
evalcond[7]=((((-1.0)*x13510))+(((-1.0)*r12*sj3*x13515))+(((-1.0)*cj1*x13506))+((r11*x13508))+((r10*x13500*x13509))+((x13505*x13517))+(((-1.0)*x13502*x13511)));
evalcond[8]=(((gconst22*x13505))+x13501+(((-1.0)*r11*x13502*x13514))+(((-1.0)*x13511*x13512))+(((-1.0)*x13500*x13508*x13511))+(((-1.0)*x13513))+((r12*x13516)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13520 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x13520)==0){
continue;
}
IkReal x13518=pow(x13520,-0.5);
IkReal x13519=((-1.0)*x13518);
CheckValue<IkReal> x13521 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x13521.valid){
continue;
}
IkReal gconst24=((-1.0)*(x13521.value));
IkReal gconst25=(r10*x13519);
IkReal gconst26=(r11*x13519);
CheckValue<IkReal> x13522 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x13522.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j5+(x13522.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x13526 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x13526.valid){
continue;
}
IkReal x13523=((-1.0)*(x13526.value));
IkReal x13524=x13518;
IkReal x13525=((-1.0)*x13524);
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst25;
cj5=gconst26;
j5=x13523;
IkReal gconst24=x13523;
IkReal gconst25=(r10*x13525);
IkReal gconst26=(r11*x13525);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13527=gconst26*gconst26;
IkReal x13528=gconst25*gconst25;
IkReal x13529=(r00*r20);
IkReal x13530=(cj3*r21);
IkReal x13531=(gconst25*gconst26);
IkReal x13532=((1.0)*r01);
IkReal x13533=(cj3*r22);
IkReal x13534=(r01*sj3);
CheckValue<IkReal> x13535=IKPowWithIntegerCheck(IKsign((((sj3*x13528*x13529))+((r00*r21*sj3*x13531))+((r20*x13531*x13534))+((r21*x13527*x13534))+((r02*r22*sj3)))),-1);
if(!x13535.valid){
continue;
}
CheckValue<IkReal> x13536 = IKatan2WithCheck(IkReal(((((-1.0)*gconst26*r00*x13533))+((gconst25*r01*x13533)))),IkReal(((((-1.0)*cj3*r20*x13528*x13532))+(((-1.0)*x13530*x13531*x13532))+((cj3*x13529*x13531))+((r00*x13527*x13530)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13536.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13535.value)))+(x13536.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13537=IKsin(j4);
IkReal x13538=IKcos(j4);
IkReal x13539=(cj1*cj2);
IkReal x13540=(gconst25*sj3);
IkReal x13541=((1.0)*sj3);
IkReal x13542=(gconst26*r20);
IkReal x13543=((1.0)*r00);
IkReal x13544=(cj3*gconst26);
IkReal x13545=((1.0)*sj1);
IkReal x13546=(cj3*gconst25);
IkReal x13547=(cj1*sj2);
IkReal x13548=((1.0)*r10);
IkReal x13549=(sj2*x13545);
IkReal x13550=((1.0)*x13538);
IkReal x13551=(gconst25*x13537);
IkReal x13552=(r12*x13537);
IkReal x13553=(r02*x13537);
IkReal x13554=(r22*x13537);
IkReal x13555=(gconst26*sj3*x13538);
IkReal x13556=((1.0)*gconst26*x13537);
evalcond[0]=((((-1.0)*r22*x13550))+(((-1.0)*r20*x13551))+(((-1.0)*r21*x13556)));
evalcond[1]=((((-1.0)*x13548*x13551))+(((-1.0)*r12*x13550))+(((-1.0)*r11*x13556)));
evalcond[2]=((-1.0)+(((-1.0)*r01*x13556))+(((-1.0)*r02*x13550))+(((-1.0)*x13543*x13551)));
evalcond[3]=((((-1.0)*x13541*x13553))+((r00*x13538*x13540))+((r01*x13546))+((r01*x13555))+(((-1.0)*x13543*x13544)));
evalcond[4]=((((-1.0)*gconst26*r00*x13541))+(((-1.0)*x13538*x13543*x13546))+((r01*x13540))+((cj3*x13553))+(((-1.0)*r01*x13544*x13550)));
evalcond[5]=(x13539+(((-1.0)*x13541*x13554))+(((-1.0)*x13549))+((r21*x13546))+((r21*x13555))+((r20*x13538*x13540))+(((-1.0)*cj3*x13542)));
evalcond[6]=(((cj2*sj1))+x13547+((r21*x13540))+((cj3*x13554))+(((-1.0)*r20*x13546*x13550))+(((-1.0)*r21*x13544*x13550))+(((-1.0)*x13541*x13542)));
evalcond[7]=((((-1.0)*x13541*x13552))+(((-1.0)*cj2*x13545))+(((-1.0)*x13544*x13548))+((r11*x13555))+((r11*x13546))+(((-1.0)*x13547))+((r10*x13538*x13540)));
evalcond[8]=(x13539+(((-1.0)*x13549))+(((-1.0)*gconst26*r10*x13541))+((r11*x13540))+((cj3*x13552))+(((-1.0)*x13538*x13546*x13548))+(((-1.0)*r11*x13544*x13550)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13557=((1.0)*gconst26);
CheckValue<IkReal> x13558 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*gconst25*r10))+(((-1.0)*r11*x13557)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13558.valid){
continue;
}
CheckValue<IkReal> x13559=IKPowWithIntegerCheck(IKsign((((gconst25*r21))+(((-1.0)*r20*x13557)))),-1);
if(!x13559.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13558.value)+(((1.5707963267949)*(x13559.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13560=IKsin(j4);
IkReal x13561=IKcos(j4);
IkReal x13562=(cj1*cj2);
IkReal x13563=(gconst25*sj3);
IkReal x13564=((1.0)*sj3);
IkReal x13565=(gconst26*r20);
IkReal x13566=((1.0)*r00);
IkReal x13567=(cj3*gconst26);
IkReal x13568=((1.0)*sj1);
IkReal x13569=(cj3*gconst25);
IkReal x13570=(cj1*sj2);
IkReal x13571=((1.0)*r10);
IkReal x13572=(sj2*x13568);
IkReal x13573=((1.0)*x13561);
IkReal x13574=(gconst25*x13560);
IkReal x13575=(r12*x13560);
IkReal x13576=(r02*x13560);
IkReal x13577=(r22*x13560);
IkReal x13578=(gconst26*sj3*x13561);
IkReal x13579=((1.0)*gconst26*x13560);
evalcond[0]=((((-1.0)*r22*x13573))+(((-1.0)*r20*x13574))+(((-1.0)*r21*x13579)));
evalcond[1]=((((-1.0)*r11*x13579))+(((-1.0)*x13571*x13574))+(((-1.0)*r12*x13573)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x13573))+(((-1.0)*x13566*x13574))+(((-1.0)*r01*x13579)));
evalcond[3]=((((-1.0)*x13566*x13567))+((r01*x13569))+((r00*x13561*x13563))+(((-1.0)*x13564*x13576))+((r01*x13578)));
evalcond[4]=(((r01*x13563))+(((-1.0)*r01*x13567*x13573))+(((-1.0)*x13561*x13566*x13569))+((cj3*x13576))+(((-1.0)*gconst26*r00*x13564)));
evalcond[5]=(x13562+((r20*x13561*x13563))+((r21*x13578))+(((-1.0)*x13564*x13577))+((r21*x13569))+(((-1.0)*cj3*x13565))+(((-1.0)*x13572)));
evalcond[6]=(((cj2*sj1))+x13570+(((-1.0)*r20*x13569*x13573))+(((-1.0)*x13564*x13565))+(((-1.0)*r21*x13567*x13573))+((cj3*x13577))+((r21*x13563)));
evalcond[7]=((((-1.0)*x13567*x13571))+((r11*x13569))+(((-1.0)*cj2*x13568))+((r11*x13578))+((r10*x13561*x13563))+(((-1.0)*x13570))+(((-1.0)*x13564*x13575)));
evalcond[8]=(x13562+(((-1.0)*gconst26*r10*x13564))+((r11*x13563))+(((-1.0)*r11*x13567*x13573))+((cj3*x13575))+(((-1.0)*x13561*x13569*x13571))+(((-1.0)*x13572)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13582 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x13582)==0){
continue;
}
IkReal x13580=pow(x13582,-0.5);
IkReal x13581=((1.0)*x13580);
CheckValue<IkReal> x13583 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x13583.valid){
continue;
}
IkReal gconst27=((3.14159265358979)+(((-1.0)*(x13583.value))));
IkReal gconst28=(r10*x13581);
IkReal gconst29=(r11*x13581);
CheckValue<IkReal> x13584 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x13584.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5+(x13584.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13588 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x13588.valid){
continue;
}
IkReal x13585=((1.0)*(x13588.value));
IkReal x13586=x13580;
IkReal x13587=((1.0)*x13586);
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13585)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13585)));
IkReal gconst28=(r10*x13587);
IkReal gconst29=(r11*x13587);
j4eval[0]=0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13592 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x13592.valid){
continue;
}
IkReal x13589=((1.0)*(x13592.value));
IkReal x13590=x13580;
IkReal x13591=((1.0)*x13590);
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13589)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13589)));
IkReal gconst28=(r10*x13591);
IkReal gconst29=(r11*x13591);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13593=gconst28*gconst28;
IkReal x13594=gconst29*gconst29;
IkReal x13595=(r01*sj3);
IkReal x13596=(cj3*r00);
IkReal x13597=(r00*sj3);
IkReal x13598=((1.0)*gconst29);
IkReal x13599=(gconst28*r21);
IkReal x13600=(cj3*r01);
IkReal x13601=(r21*x13594);
IkReal x13602=(gconst28*gconst29*r20);
IkReal x13603=(r20*x13593);
CheckValue<IkReal> x13604=IKPowWithIntegerCheck(IKsign((((gconst29*x13597*x13599))+((x13595*x13602))+((x13595*x13601))+((r02*r22*sj3))+((x13597*x13603)))),-1);
if(!x13604.valid){
continue;
}
CheckValue<IkReal> x13605 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x13596*x13598))+((gconst28*r22*x13600)))),IkReal(((((-1.0)*x13598*x13599*x13600))+(((-1.0)*x13600*x13603))+((x13596*x13602))+((x13596*x13601)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13605.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13604.value)))+(x13605.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13606=IKsin(j4);
IkReal x13607=IKcos(j4);
IkReal x13608=(cj1*cj2);
IkReal x13609=(gconst28*r10);
IkReal x13610=(cj3*gconst29);
IkReal x13611=((1.0)*r00);
IkReal x13612=(gconst28*r20);
IkReal x13613=(gconst29*r11);
IkReal x13614=((1.0)*sj1);
IkReal x13615=(gconst29*r21);
IkReal x13616=(cj3*gconst28);
IkReal x13617=(cj1*sj2);
IkReal x13618=(gconst28*sj3);
IkReal x13619=(gconst28*r00);
IkReal x13620=(gconst29*r01);
IkReal x13621=(sj2*x13614);
IkReal x13622=((1.0)*x13607);
IkReal x13623=((1.0)*x13606);
IkReal x13624=(sj3*x13607);
IkReal x13625=(cj3*x13606);
IkReal x13626=((1.0)*gconst29*sj3);
evalcond[0]=((((-1.0)*x13612*x13623))+(((-1.0)*x13615*x13623))+(((-1.0)*r22*x13622)));
evalcond[1]=((((-1.0)*x13613*x13623))+(((-1.0)*x13609*x13623))+(((-1.0)*r12*x13622)));
evalcond[2]=((-1.0)+(((-1.0)*x13620*x13623))+(((-1.0)*gconst28*x13606*x13611))+(((-1.0)*r02*x13622)));
evalcond[3]=((((-1.0)*r02*sj3*x13623))+((r01*x13616))+((r00*x13607*x13618))+((x13620*x13624))+(((-1.0)*x13610*x13611)));
evalcond[4]=(((r01*x13618))+((r02*x13625))+(((-1.0)*x13607*x13611*x13616))+(((-1.0)*r01*x13610*x13622))+(((-1.0)*gconst29*sj3*x13611)));
evalcond[5]=(((x13612*x13624))+(((-1.0)*r20*x13610))+((x13615*x13624))+((r21*x13616))+x13608+(((-1.0)*r22*sj3*x13623))+(((-1.0)*x13621)));
evalcond[6]=(((cj2*sj1))+((r21*x13618))+x13617+(((-1.0)*cj3*x13612*x13622))+(((-1.0)*r21*x13610*x13622))+((r22*x13625))+(((-1.0)*r20*x13626)));
evalcond[7]=(((x13613*x13624))+(((-1.0)*r12*sj3*x13623))+((x13609*x13624))+(((-1.0)*x13617))+((r11*x13616))+(((-1.0)*r10*x13610))+(((-1.0)*cj2*x13614)));
evalcond[8]=(((r12*x13625))+x13608+(((-1.0)*r11*x13610*x13622))+(((-1.0)*r10*x13626))+((r11*x13618))+(((-1.0)*cj3*x13609*x13622))+(((-1.0)*x13621)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13627=((1.0)*gconst29);
CheckValue<IkReal> x13628 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*gconst28*r10))+(((-1.0)*r11*x13627)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13628.valid){
continue;
}
CheckValue<IkReal> x13629=IKPowWithIntegerCheck(IKsign((((gconst28*r21))+(((-1.0)*r20*x13627)))),-1);
if(!x13629.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13628.value)+(((1.5707963267949)*(x13629.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13630=IKsin(j4);
IkReal x13631=IKcos(j4);
IkReal x13632=(cj1*cj2);
IkReal x13633=(gconst28*r10);
IkReal x13634=(cj3*gconst29);
IkReal x13635=((1.0)*r00);
IkReal x13636=(gconst28*r20);
IkReal x13637=(gconst29*r11);
IkReal x13638=((1.0)*sj1);
IkReal x13639=(gconst29*r21);
IkReal x13640=(cj3*gconst28);
IkReal x13641=(cj1*sj2);
IkReal x13642=(gconst28*sj3);
IkReal x13643=(gconst28*r00);
IkReal x13644=(gconst29*r01);
IkReal x13645=(sj2*x13638);
IkReal x13646=((1.0)*x13631);
IkReal x13647=((1.0)*x13630);
IkReal x13648=(sj3*x13631);
IkReal x13649=(cj3*x13630);
IkReal x13650=((1.0)*gconst29*sj3);
evalcond[0]=((((-1.0)*x13636*x13647))+(((-1.0)*x13639*x13647))+(((-1.0)*r22*x13646)));
evalcond[1]=((((-1.0)*x13633*x13647))+(((-1.0)*r12*x13646))+(((-1.0)*x13637*x13647)));
evalcond[2]=((-1.0)+(((-1.0)*gconst28*x13630*x13635))+(((-1.0)*x13644*x13647))+(((-1.0)*r02*x13646)));
evalcond[3]=((((-1.0)*x13634*x13635))+((r00*x13631*x13642))+((x13644*x13648))+(((-1.0)*r02*sj3*x13647))+((r01*x13640)));
evalcond[4]=((((-1.0)*gconst29*sj3*x13635))+((r02*x13649))+((r01*x13642))+(((-1.0)*x13631*x13635*x13640))+(((-1.0)*r01*x13634*x13646)));
evalcond[5]=(x13632+((x13639*x13648))+(((-1.0)*r22*sj3*x13647))+(((-1.0)*x13645))+((x13636*x13648))+(((-1.0)*r20*x13634))+((r21*x13640)));
evalcond[6]=(((cj2*sj1))+(((-1.0)*r20*x13650))+((r22*x13649))+x13641+(((-1.0)*r21*x13634*x13646))+((r21*x13642))+(((-1.0)*cj3*x13636*x13646)));
evalcond[7]=(((x13633*x13648))+(((-1.0)*r10*x13634))+((r11*x13640))+(((-1.0)*cj2*x13638))+(((-1.0)*x13641))+((x13637*x13648))+(((-1.0)*r12*sj3*x13647)));
evalcond[8]=(x13632+((r11*x13642))+(((-1.0)*x13645))+(((-1.0)*r11*x13634*x13646))+((r12*x13649))+(((-1.0)*r10*x13650))+(((-1.0)*cj3*x13633*x13646)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13651=((1.0)*gconst28);
CheckValue<IkReal> x13652=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x13651))+((gconst29*r10)))),-1);
if(!x13652.valid){
continue;
}
CheckValue<IkReal> x13653 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13651))+(((-1.0)*gconst29*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13653.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13652.value)))+(x13653.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13654=IKsin(j4);
IkReal x13655=IKcos(j4);
IkReal x13656=(cj1*cj2);
IkReal x13657=(gconst28*r10);
IkReal x13658=(cj3*gconst29);
IkReal x13659=((1.0)*r00);
IkReal x13660=(gconst28*r20);
IkReal x13661=(gconst29*r11);
IkReal x13662=((1.0)*sj1);
IkReal x13663=(gconst29*r21);
IkReal x13664=(cj3*gconst28);
IkReal x13665=(cj1*sj2);
IkReal x13666=(gconst28*sj3);
IkReal x13667=(gconst28*r00);
IkReal x13668=(gconst29*r01);
IkReal x13669=(sj2*x13662);
IkReal x13670=((1.0)*x13655);
IkReal x13671=((1.0)*x13654);
IkReal x13672=(sj3*x13655);
IkReal x13673=(cj3*x13654);
IkReal x13674=((1.0)*gconst29*sj3);
evalcond[0]=((((-1.0)*x13663*x13671))+(((-1.0)*x13660*x13671))+(((-1.0)*r22*x13670)));
evalcond[1]=((((-1.0)*r12*x13670))+(((-1.0)*x13657*x13671))+(((-1.0)*x13661*x13671)));
evalcond[2]=((-1.0)+(((-1.0)*x13668*x13671))+(((-1.0)*gconst28*x13654*x13659))+(((-1.0)*r02*x13670)));
evalcond[3]=(((r00*x13655*x13666))+(((-1.0)*x13658*x13659))+(((-1.0)*r02*sj3*x13671))+((r01*x13664))+((x13668*x13672)));
evalcond[4]=((((-1.0)*r01*x13658*x13670))+(((-1.0)*gconst29*sj3*x13659))+(((-1.0)*x13655*x13659*x13664))+((r02*x13673))+((r01*x13666)));
evalcond[5]=(x13656+(((-1.0)*r20*x13658))+(((-1.0)*x13669))+((x13660*x13672))+((x13663*x13672))+((r21*x13664))+(((-1.0)*r22*sj3*x13671)));
evalcond[6]=(((cj2*sj1))+x13665+((r22*x13673))+(((-1.0)*cj3*x13660*x13670))+(((-1.0)*r21*x13658*x13670))+(((-1.0)*r20*x13674))+((r21*x13666)));
evalcond[7]=((((-1.0)*cj2*x13662))+(((-1.0)*r10*x13658))+((r11*x13664))+(((-1.0)*x13665))+((x13657*x13672))+(((-1.0)*r12*sj3*x13671))+((x13661*x13672)));
evalcond[8]=(x13656+((r12*x13673))+((r11*x13666))+(((-1.0)*x13669))+(((-1.0)*r11*x13658*x13670))+(((-1.0)*cj3*x13657*x13670))+(((-1.0)*r10*x13674)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13675=((-1.0)*py);
sj0=0;
cj0=1.0;
j0=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x13675);
rxp0_2=(py*r00);
rxp1_0=(r21*x13675);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x13676=(r00*sj5);
IkReal x13677=(cj5*r01);
j4eval[0]=((((-1.0)*x13676))+(((-1.0)*x13677)));
j4eval[1]=(((sj3*x13677))+((sj3*x13676)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13678=((-1.0)*py);
sj0=0;
cj0=1.0;
j0=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x13678);
rxp0_2=(py*r00);
rxp1_0=(r21*x13678);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x13679=((1.0)*r00*sj5);
IkReal x13680=((1.0)*cj5*r01);
j4eval[0]=((((-1.0)*x13679))+(((-1.0)*x13680)));
j4eval[1]=((((-1.0)*cj3*x13679))+(((-1.0)*cj3*x13680)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x13681=((-1.0)*py);
sj0=0;
cj0=1.0;
j0=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x13681);
rxp0_2=(py*r00);
rxp1_0=(r21*x13681);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=cj3;
j4eval[1]=r12;
j4eval[2]=(((cj5*r01*sj3))+((r00*sj3*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13682=((-1.0)*py);
sj0=0;
cj0=1.0;
j0=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x13682);
rxp0_2=(py*r00);
rxp1_0=(r21*x13682);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)));
j4eval[1]=(((cj5*r21))+((r20*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13683=((-1.0)*py);
sj0=0;
cj0=1.0;
j0=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x13683);
rxp0_2=(py*r00);
rxp1_0=(r21*x13683);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=r12;
j4eval[1]=(((cj5*r21))+((r20*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13684=((1.0)*cj2);
CheckValue<IkReal> x13685=IKPowWithIntegerCheck(r12,-1);
if(!x13685.valid){
continue;
}
CheckValue<IkReal> x13686=IKPowWithIntegerCheck((((cj5*r21))+((r20*sj5))),-1);
if(!x13686.valid){
continue;
}
if( IKabs(((x13685.value)*(((((-1.0)*sj1*x13684))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13686.value)*(((((-1.0)*cj1*x13684))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13685.value)*(((((-1.0)*sj1*x13684))+(((-1.0)*cj1*sj2))))))+IKsqr(((x13686.value)*(((((-1.0)*cj1*x13684))+((sj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13685.value)*(((((-1.0)*sj1*x13684))+(((-1.0)*cj1*sj2))))), ((x13686.value)*(((((-1.0)*cj1*x13684))+((sj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13687=IKcos(j4);
IkReal x13688=IKsin(j4);
IkReal x13689=(cj5*r21);
IkReal x13690=((1.0)*sj1);
IkReal x13691=(cj5*r01);
IkReal x13692=(r00*sj5);
IkReal x13693=(r20*sj5);
IkReal x13694=((1.0)*x13688);
evalcond[0]=((-1.0)*r12*x13687);
evalcond[1]=(((x13687*x13692))+((x13687*x13691)));
evalcond[2]=((((-1.0)*x13689*x13694))+(((-1.0)*x13693*x13694)));
evalcond[3]=((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x13690))+(((-1.0)*r12*x13694)));
evalcond[4]=((-1.0)+(((-1.0)*x13691*x13694))+(((-1.0)*x13692*x13694)));
evalcond[5]=(((x13687*x13689))+(((-1.0)*sj2*x13690))+((cj1*cj2))+((x13687*x13693)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13695=IKPowWithIntegerCheck(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01))),-1);
if(!x13695.valid){
continue;
}
CheckValue<IkReal> x13696=IKPowWithIntegerCheck((((cj5*r21))+((r20*sj5))),-1);
if(!x13696.valid){
continue;
}
if( IKabs(x13695.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13696.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x13695.value)+IKsqr(((x13696.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x13695.value, ((x13696.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13697=IKcos(j4);
IkReal x13698=IKsin(j4);
IkReal x13699=(cj5*r21);
IkReal x13700=((1.0)*sj1);
IkReal x13701=(cj5*r01);
IkReal x13702=(r00*sj5);
IkReal x13703=(r20*sj5);
IkReal x13704=((1.0)*x13698);
evalcond[0]=((-1.0)*r12*x13697);
evalcond[1]=(((x13697*x13701))+((x13697*x13702)));
evalcond[2]=((((-1.0)*x13703*x13704))+(((-1.0)*x13699*x13704)));
evalcond[3]=((((-1.0)*r12*x13704))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x13700)));
evalcond[4]=((-1.0)+(((-1.0)*x13702*x13704))+(((-1.0)*x13701*x13704)));
evalcond[5]=((((-1.0)*sj2*x13700))+((x13697*x13703))+((x13697*x13699))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13705=((-1.0)*py);
sj0=0;
cj0=1.0;
j0=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x13705);
rxp0_2=(py*r00);
rxp1_0=(r21*x13705);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=r12;
j4eval[1]=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13706=((-1.0)*py);
sj0=0;
cj0=1.0;
j0=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x13706);
rxp0_2=(py*r00);
rxp1_0=(r21*x13706);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x13707=((1.0)*sj5);
IkReal x13708=((1.0)*cj5);
j4eval[0]=((((-1.0)*r00*x13707))+(((-1.0)*r01*x13708)));
j4eval[1]=((((-1.0)*r20*x13707))+(((-1.0)*r21*x13708)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13709=((1.0)*cj5);
IkReal x13710=((1.0)*sj5);
CheckValue<IkReal> x13711=IKPowWithIntegerCheck(((((-1.0)*r00*x13710))+(((-1.0)*r01*x13709))),-1);
if(!x13711.valid){
continue;
}
CheckValue<IkReal> x13712=IKPowWithIntegerCheck(((((-1.0)*r20*x13710))+(((-1.0)*r21*x13709))),-1);
if(!x13712.valid){
continue;
}
if( IKabs(x13711.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13712.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x13711.value)+IKsqr(((x13712.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x13711.value, ((x13712.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13713=IKsin(j4);
IkReal x13714=IKcos(j4);
IkReal x13715=((1.0)*cj5);
IkReal x13716=((1.0)*sj1);
IkReal x13717=((1.0)*r00*sj5);
IkReal x13718=((1.0)*r20*sj5);
evalcond[0]=((-1.0)*r12*x13714);
evalcond[1]=(((r12*x13713))+(((-1.0)*cj2*x13716))+(((-1.0)*cj1*sj2)));
evalcond[2]=((((-1.0)*x13713*x13718))+(((-1.0)*r21*x13713*x13715)));
evalcond[3]=((((-1.0)*r01*x13714*x13715))+(((-1.0)*x13714*x13717)));
evalcond[4]=((-1.0)+(((-1.0)*x13713*x13717))+(((-1.0)*r01*x13713*x13715)));
evalcond[5]=((((-1.0)*sj2*x13716))+(((-1.0)*x13714*x13718))+(((-1.0)*r21*x13714*x13715))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13719=IKPowWithIntegerCheck(r12,-1);
if(!x13719.valid){
continue;
}
CheckValue<IkReal> x13720=IKPowWithIntegerCheck(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5))),-1);
if(!x13720.valid){
continue;
}
if( IKabs(((x13719.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13720.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13719.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x13720.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13719.value)*((((cj2*sj1))+((cj1*sj2))))), ((x13720.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13721=IKsin(j4);
IkReal x13722=IKcos(j4);
IkReal x13723=((1.0)*cj5);
IkReal x13724=((1.0)*sj1);
IkReal x13725=((1.0)*r00*sj5);
IkReal x13726=((1.0)*r20*sj5);
evalcond[0]=((-1.0)*r12*x13722);
evalcond[1]=((((-1.0)*cj2*x13724))+((r12*x13721))+(((-1.0)*cj1*sj2)));
evalcond[2]=((((-1.0)*r21*x13721*x13723))+(((-1.0)*x13721*x13726)));
evalcond[3]=((((-1.0)*x13722*x13725))+(((-1.0)*r01*x13722*x13723)));
evalcond[4]=((-1.0)+(((-1.0)*x13721*x13725))+(((-1.0)*r01*x13721*x13723)));
evalcond[5]=((((-1.0)*x13722*x13726))+(((-1.0)*sj2*x13724))+((cj1*cj2))+(((-1.0)*r21*x13722*x13723)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13727=IKPowWithIntegerCheck(cj3,-1);
if(!x13727.valid){
continue;
}
CheckValue<IkReal> x13728=IKPowWithIntegerCheck(r12,-1);
if(!x13728.valid){
continue;
}
CheckValue<IkReal> x13729=IKPowWithIntegerCheck((((cj5*r01*sj3))+((r00*sj3*sj5))),-1);
if(!x13729.valid){
continue;
}
if( IKabs(((x13727.value)*(x13728.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13729.value)*((((cj3*cj5*r00))+(((-1.0)*cj3*r01*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13727.value)*(x13728.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x13729.value)*((((cj3*cj5*r00))+(((-1.0)*cj3*r01*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13727.value)*(x13728.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x13729.value)*((((cj3*cj5*r00))+(((-1.0)*cj3*r01*sj5))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13730=IKsin(j4);
IkReal x13731=IKcos(j4);
IkReal x13732=(cj1*cj2);
IkReal x13733=((1.0)*sj3);
IkReal x13734=(sj3*sj5);
IkReal x13735=((1.0)*sj2);
IkReal x13736=(cj5*r20);
IkReal x13737=(cj2*sj1);
IkReal x13738=(r00*sj5);
IkReal x13739=(cj5*r01);
IkReal x13740=((1.0)*cj3);
IkReal x13741=(cj5*r00);
IkReal x13742=(cj5*r21);
IkReal x13743=(cj3*sj5);
IkReal x13744=(sj1*x13735);
IkReal x13745=(r12*x13730);
IkReal x13746=(r20*x13731);
IkReal x13747=((1.0)*x13730);
IkReal x13748=(sj3*x13731);
evalcond[0]=((-1.0)*r12*x13731);
evalcond[1]=(x13732+(((-1.0)*x13744))+((cj3*x13745)));
evalcond[2]=((((-1.0)*r20*sj5*x13747))+(((-1.0)*x13742*x13747)));
evalcond[3]=((-1.0)+(((-1.0)*x13739*x13747))+(((-1.0)*x13738*x13747)));
evalcond[4]=((((-1.0)*x13733*x13745))+(((-1.0)*cj1*x13735))+(((-1.0)*x13737)));
evalcond[5]=(((r01*x13743))+((r00*x13731*x13734))+((x13739*x13748))+(((-1.0)*x13740*x13741)));
evalcond[6]=((((-1.0)*x13733*x13741))+(((-1.0)*x13731*x13739*x13740))+(((-1.0)*x13731*x13738*x13740))+((r01*x13734)));
evalcond[7]=(x13732+((x13742*x13748))+(((-1.0)*x13736*x13740))+((r21*x13743))+(((-1.0)*x13744))+((x13734*x13746)));
evalcond[8]=((((-1.0)*x13733*x13736))+(((-1.0)*x13731*x13740*x13742))+x13737+((cj1*sj2))+((r21*x13734))+(((-1.0)*sj5*x13740*x13746)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13749=((1.0)*cj5*r01);
IkReal x13750=((1.0)*r00*sj5);
CheckValue<IkReal> x13751=IKPowWithIntegerCheck(((((-1.0)*x13750))+(((-1.0)*x13749))),-1);
if(!x13751.valid){
continue;
}
CheckValue<IkReal> x13752=IKPowWithIntegerCheck(((((-1.0)*cj3*x13749))+(((-1.0)*cj3*x13750))),-1);
if(!x13752.valid){
continue;
}
if( IKabs(x13751.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13752.value)*((((cj5*r00*sj3))+(((-1.0)*r01*sj3*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x13751.value)+IKsqr(((x13752.value)*((((cj5*r00*sj3))+(((-1.0)*r01*sj3*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x13751.value, ((x13752.value)*((((cj5*r00*sj3))+(((-1.0)*r01*sj3*sj5))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13753=IKsin(j4);
IkReal x13754=IKcos(j4);
IkReal x13755=(cj1*cj2);
IkReal x13756=((1.0)*sj3);
IkReal x13757=(sj3*sj5);
IkReal x13758=((1.0)*sj2);
IkReal x13759=(cj5*r20);
IkReal x13760=(cj2*sj1);
IkReal x13761=(r00*sj5);
IkReal x13762=(cj5*r01);
IkReal x13763=((1.0)*cj3);
IkReal x13764=(cj5*r00);
IkReal x13765=(cj5*r21);
IkReal x13766=(cj3*sj5);
IkReal x13767=(sj1*x13758);
IkReal x13768=(r12*x13753);
IkReal x13769=(r20*x13754);
IkReal x13770=((1.0)*x13753);
IkReal x13771=(sj3*x13754);
evalcond[0]=((-1.0)*r12*x13754);
evalcond[1]=(x13755+((cj3*x13768))+(((-1.0)*x13767)));
evalcond[2]=((((-1.0)*x13765*x13770))+(((-1.0)*r20*sj5*x13770)));
evalcond[3]=((-1.0)+(((-1.0)*x13762*x13770))+(((-1.0)*x13761*x13770)));
evalcond[4]=((((-1.0)*x13760))+(((-1.0)*x13756*x13768))+(((-1.0)*cj1*x13758)));
evalcond[5]=(((r01*x13766))+((x13762*x13771))+(((-1.0)*x13763*x13764))+((r00*x13754*x13757)));
evalcond[6]=((((-1.0)*x13754*x13762*x13763))+(((-1.0)*x13754*x13761*x13763))+(((-1.0)*x13756*x13764))+((r01*x13757)));
evalcond[7]=(((x13757*x13769))+x13755+(((-1.0)*x13759*x13763))+((x13765*x13771))+((r21*x13766))+(((-1.0)*x13767)));
evalcond[8]=(((r21*x13757))+x13760+(((-1.0)*x13756*x13759))+((cj1*sj2))+(((-1.0)*x13754*x13763*x13765))+(((-1.0)*sj5*x13763*x13769)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13772=((1.0)*r01);
IkReal x13773=(r00*sj5);
CheckValue<IkReal> x13774=IKPowWithIntegerCheck(((((-1.0)*x13773))+(((-1.0)*cj5*x13772))),-1);
if(!x13774.valid){
continue;
}
CheckValue<IkReal> x13775=IKPowWithIntegerCheck((((cj5*r01*sj3))+((sj3*x13773))),-1);
if(!x13775.valid){
continue;
}
if( IKabs(x13774.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13775.value)*((((cj3*cj5*r00))+(((-1.0)*cj3*sj5*x13772)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x13774.value)+IKsqr(((x13775.value)*((((cj3*cj5*r00))+(((-1.0)*cj3*sj5*x13772))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x13774.value, ((x13775.value)*((((cj3*cj5*r00))+(((-1.0)*cj3*sj5*x13772))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13776=IKsin(j4);
IkReal x13777=IKcos(j4);
IkReal x13778=(cj1*cj2);
IkReal x13779=((1.0)*sj3);
IkReal x13780=(sj3*sj5);
IkReal x13781=((1.0)*sj2);
IkReal x13782=(cj5*r20);
IkReal x13783=(cj2*sj1);
IkReal x13784=(r00*sj5);
IkReal x13785=(cj5*r01);
IkReal x13786=((1.0)*cj3);
IkReal x13787=(cj5*r00);
IkReal x13788=(cj5*r21);
IkReal x13789=(cj3*sj5);
IkReal x13790=(sj1*x13781);
IkReal x13791=(r12*x13776);
IkReal x13792=(r20*x13777);
IkReal x13793=((1.0)*x13776);
IkReal x13794=(sj3*x13777);
evalcond[0]=((-1.0)*r12*x13777);
evalcond[1]=(x13778+(((-1.0)*x13790))+((cj3*x13791)));
evalcond[2]=((((-1.0)*r20*sj5*x13793))+(((-1.0)*x13788*x13793)));
evalcond[3]=((-1.0)+(((-1.0)*x13784*x13793))+(((-1.0)*x13785*x13793)));
evalcond[4]=((((-1.0)*cj1*x13781))+(((-1.0)*x13783))+(((-1.0)*x13779*x13791)));
evalcond[5]=(((x13785*x13794))+((r00*x13777*x13780))+((r01*x13789))+(((-1.0)*x13786*x13787)));
evalcond[6]=(((r01*x13780))+(((-1.0)*x13777*x13784*x13786))+(((-1.0)*x13777*x13785*x13786))+(((-1.0)*x13779*x13787)));
evalcond[7]=(x13778+(((-1.0)*x13782*x13786))+(((-1.0)*x13790))+((x13780*x13792))+((r21*x13789))+((x13788*x13794)));
evalcond[8]=(x13783+(((-1.0)*sj5*x13786*x13792))+((cj1*sj2))+(((-1.0)*x13777*x13786*x13788))+(((-1.0)*x13779*x13782))+((r21*x13780)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13795=cj5*cj5;
IkReal x13796=(cj5*r00);
IkReal x13797=((1.0)*cj3);
IkReal x13798=(r21*sj5);
IkReal x13799=(r01*r20);
IkReal x13800=(r00*r20);
IkReal x13801=(cj3*sj5);
IkReal x13802=(cj3*x13795);
IkReal x13803=(sj3*x13795);
CheckValue<IkReal> x13804 = IKatan2WithCheck(IkReal((((r01*r22*x13801))+(((-1.0)*r22*x13796*x13797)))),IkReal(((((-1.0)*x13797*x13799))+(((-1.0)*cj5*r01*x13797*x13798))+((x13799*x13802))+((r00*r21*x13802))+((r20*x13796*x13801)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13804.valid){
continue;
}
CheckValue<IkReal> x13805=IKPowWithIntegerCheck(IKsign((((cj5*sj3*sj5*x13799))+((r01*r21*x13803))+((sj3*x13796*x13798))+(((-1.0)*x13800*x13803))+((sj3*x13800))+((r02*r22*sj3)))),-1);
if(!x13805.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13804.value)+(((1.5707963267949)*(x13805.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13806=IKsin(j4);
IkReal x13807=IKcos(j4);
IkReal x13808=(cj1*cj2);
IkReal x13809=((1.0)*sj3);
IkReal x13810=(sj3*sj5);
IkReal x13811=((1.0)*sj2);
IkReal x13812=(cj5*r10);
IkReal x13813=((1.0)*cj3);
IkReal x13814=(cj5*r20);
IkReal x13815=(cj2*sj1);
IkReal x13816=(r00*sj5);
IkReal x13817=(cj5*r01);
IkReal x13818=(cj5*r00);
IkReal x13819=(r20*sj5);
IkReal x13820=(cj5*r21);
IkReal x13821=(cj3*sj5);
IkReal x13822=(cj5*r11);
IkReal x13823=(sj1*x13811);
IkReal x13824=((1.0)*x13807);
IkReal x13825=(r12*x13806);
IkReal x13826=(cj3*x13806);
IkReal x13827=((1.0)*x13806);
IkReal x13828=(sj3*x13807);
evalcond[0]=((((-1.0)*r22*x13824))+(((-1.0)*x13820*x13827))+(((-1.0)*x13819*x13827)));
evalcond[1]=((((-1.0)*r10*sj5*x13827))+(((-1.0)*r12*x13824))+(((-1.0)*x13822*x13827)));
evalcond[2]=((-1.0)+(((-1.0)*x13816*x13827))+(((-1.0)*r02*x13824))+(((-1.0)*x13817*x13827)));
evalcond[3]=(((r01*x13821))+((x13817*x13828))+((r00*x13807*x13810))+(((-1.0)*x13813*x13818))+(((-1.0)*r02*x13806*x13809)));
evalcond[4]=((((-1.0)*x13807*x13813*x13816))+(((-1.0)*x13807*x13813*x13817))+((r01*x13810))+(((-1.0)*x13809*x13818))+((r02*x13826)));
evalcond[5]=((((-1.0)*x13823))+((x13820*x13828))+((r21*x13821))+x13808+(((-1.0)*r22*x13806*x13809))+(((-1.0)*x13813*x13814))+((r20*x13807*x13810)));
evalcond[6]=((((-1.0)*x13807*x13813*x13819))+x13815+((r21*x13810))+((cj1*sj2))+((r22*x13826))+(((-1.0)*x13809*x13814))+(((-1.0)*x13807*x13813*x13820)));
evalcond[7]=(((r11*x13821))+(((-1.0)*x13815))+(((-1.0)*x13809*x13825))+(((-1.0)*cj1*x13811))+((x13822*x13828))+(((-1.0)*x13812*x13813))+((r10*x13807*x13810)));
evalcond[8]=(((r11*x13810))+(((-1.0)*x13823))+x13808+(((-1.0)*r10*sj5*x13807*x13813))+(((-1.0)*x13809*x13812))+((cj3*x13825))+(((-1.0)*x13807*x13813*x13822)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13829=((1.0)*cj5);
CheckValue<IkReal> x13830=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x13829))+((r21*sj5)))),-1);
if(!x13830.valid){
continue;
}
CheckValue<IkReal> x13831 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*sj5))+(((-1.0)*r11*x13829)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13831.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13830.value)))+(x13831.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13832=IKsin(j4);
IkReal x13833=IKcos(j4);
IkReal x13834=(cj1*cj2);
IkReal x13835=((1.0)*sj3);
IkReal x13836=(sj3*sj5);
IkReal x13837=((1.0)*sj2);
IkReal x13838=(cj5*r10);
IkReal x13839=((1.0)*cj3);
IkReal x13840=(cj5*r20);
IkReal x13841=(cj2*sj1);
IkReal x13842=(r00*sj5);
IkReal x13843=(cj5*r01);
IkReal x13844=(cj5*r00);
IkReal x13845=(r20*sj5);
IkReal x13846=(cj5*r21);
IkReal x13847=(cj3*sj5);
IkReal x13848=(cj5*r11);
IkReal x13849=(sj1*x13837);
IkReal x13850=((1.0)*x13833);
IkReal x13851=(r12*x13832);
IkReal x13852=(cj3*x13832);
IkReal x13853=((1.0)*x13832);
IkReal x13854=(sj3*x13833);
evalcond[0]=((((-1.0)*x13845*x13853))+(((-1.0)*r22*x13850))+(((-1.0)*x13846*x13853)));
evalcond[1]=((((-1.0)*r12*x13850))+(((-1.0)*x13848*x13853))+(((-1.0)*r10*sj5*x13853)));
evalcond[2]=((-1.0)+(((-1.0)*x13842*x13853))+(((-1.0)*x13843*x13853))+(((-1.0)*r02*x13850)));
evalcond[3]=((((-1.0)*r02*x13832*x13835))+(((-1.0)*x13839*x13844))+((x13843*x13854))+((r00*x13833*x13836))+((r01*x13847)));
evalcond[4]=(((r01*x13836))+(((-1.0)*x13835*x13844))+((r02*x13852))+(((-1.0)*x13833*x13839*x13843))+(((-1.0)*x13833*x13839*x13842)));
evalcond[5]=((((-1.0)*x13849))+(((-1.0)*r22*x13832*x13835))+x13834+((r21*x13847))+(((-1.0)*x13839*x13840))+((r20*x13833*x13836))+((x13846*x13854)));
evalcond[6]=(((r22*x13852))+x13841+((cj1*sj2))+((r21*x13836))+(((-1.0)*x13835*x13840))+(((-1.0)*x13833*x13839*x13846))+(((-1.0)*x13833*x13839*x13845)));
evalcond[7]=((((-1.0)*x13838*x13839))+((x13848*x13854))+(((-1.0)*cj1*x13837))+(((-1.0)*x13835*x13851))+((r11*x13847))+((r10*x13833*x13836))+(((-1.0)*x13841)));
evalcond[8]=((((-1.0)*x13849))+x13834+(((-1.0)*x13835*x13838))+((r11*x13836))+((cj3*x13851))+(((-1.0)*r10*sj5*x13833*x13839))+(((-1.0)*x13833*x13839*x13848)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13855=((1.0)*sj5);
CheckValue<IkReal> x13856=IKPowWithIntegerCheck(IKsign((((cj5*r10))+(((-1.0)*r11*x13855)))),-1);
if(!x13856.valid){
continue;
}
CheckValue<IkReal> x13857 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*cj5*r21))+(((-1.0)*r20*x13855)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13857.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13856.value)))+(x13857.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13858=IKsin(j4);
IkReal x13859=IKcos(j4);
IkReal x13860=(cj1*cj2);
IkReal x13861=((1.0)*sj3);
IkReal x13862=(sj3*sj5);
IkReal x13863=((1.0)*sj2);
IkReal x13864=(cj5*r10);
IkReal x13865=((1.0)*cj3);
IkReal x13866=(cj5*r20);
IkReal x13867=(cj2*sj1);
IkReal x13868=(r00*sj5);
IkReal x13869=(cj5*r01);
IkReal x13870=(cj5*r00);
IkReal x13871=(r20*sj5);
IkReal x13872=(cj5*r21);
IkReal x13873=(cj3*sj5);
IkReal x13874=(cj5*r11);
IkReal x13875=(sj1*x13863);
IkReal x13876=((1.0)*x13859);
IkReal x13877=(r12*x13858);
IkReal x13878=(cj3*x13858);
IkReal x13879=((1.0)*x13858);
IkReal x13880=(sj3*x13859);
evalcond[0]=((((-1.0)*x13871*x13879))+(((-1.0)*r22*x13876))+(((-1.0)*x13872*x13879)));
evalcond[1]=((((-1.0)*r12*x13876))+(((-1.0)*x13874*x13879))+(((-1.0)*r10*sj5*x13879)));
evalcond[2]=((-1.0)+(((-1.0)*x13868*x13879))+(((-1.0)*r02*x13876))+(((-1.0)*x13869*x13879)));
evalcond[3]=((((-1.0)*r02*x13858*x13861))+((x13869*x13880))+((r01*x13873))+(((-1.0)*x13865*x13870))+((r00*x13859*x13862)));
evalcond[4]=(((r01*x13862))+(((-1.0)*x13859*x13865*x13868))+(((-1.0)*x13859*x13865*x13869))+(((-1.0)*x13861*x13870))+((r02*x13878)));
evalcond[5]=((((-1.0)*r22*x13858*x13861))+x13860+(((-1.0)*x13875))+((x13872*x13880))+((r20*x13859*x13862))+((r21*x13873))+(((-1.0)*x13865*x13866)));
evalcond[6]=(x13867+((cj1*sj2))+((r21*x13862))+(((-1.0)*x13861*x13866))+(((-1.0)*x13859*x13865*x13872))+(((-1.0)*x13859*x13865*x13871))+((r22*x13878)));
evalcond[7]=(((r10*x13859*x13862))+(((-1.0)*x13867))+(((-1.0)*x13864*x13865))+((r11*x13873))+(((-1.0)*cj1*x13863))+(((-1.0)*x13861*x13877))+((x13874*x13880)));
evalcond[8]=(((cj3*x13877))+x13860+(((-1.0)*x13875))+((r11*x13862))+(((-1.0)*x13861*x13864))+(((-1.0)*r10*sj5*x13859*x13865))+(((-1.0)*x13859*x13865*x13874)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x13881=((1.0)*cj5);
IkReal x13882=(((r11*sj5))+(((-1.0)*r10*x13881)));
j4eval[0]=x13882;
j4eval[1]=((IKabs(((((-1.0)*r21*x13881))+(((-1.0)*r20*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x13882);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x13883=((1.0)*sj5);
IkReal x13884=(((cj5*r20))+(((-1.0)*r21*x13883)));
j4eval[0]=x13884;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*cj5*r11))+(((-1.0)*r10*x13883))))));
j4eval[2]=IKsign(x13884);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x13885=cj5*cj5;
IkReal x13886=(r00*r20);
IkReal x13887=(sj3*x13885);
IkReal x13888=(cj5*sj3*sj5);
IkReal x13889=(((r01*r20*x13888))+((sj3*x13886))+(((-1.0)*x13886*x13887))+((r00*r21*x13888))+((r02*r22*sj3))+((r01*r21*x13887)));
j4eval[0]=x13889;
j4eval[1]=IKsign(x13889);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal x13890=((1.0)*cj5);
IkReal x13891=(((r11*sj5))+(((-1.0)*r10*x13890)));
j4eval[0]=x13891;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r21*x13890))+(((-1.0)*r20*sj5))))));
j4eval[2]=IKsign(x13891);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal x13892=((1.0)*sj5);
IkReal x13893=(((cj5*r20))+(((-1.0)*r21*x13892)));
j4eval[0]=x13893;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*cj5*r11))+(((-1.0)*r10*x13892))))));
j4eval[2]=IKsign(x13893);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal x13894=cj5*cj5;
IkReal x13895=r00*r00;
IkReal x13896=(cj5*r01);
IkReal x13897=(r00*sj5);
IkReal x13898=((((-2.0)*x13896*x13897))+(((-1.0)*(r02*r02)))+((x13894*x13895))+(((-1.0)*x13895))+(((-1.0)*x13894*(r01*r01))));
j4eval[0]=x13898;
j4eval[1]=IKsign(x13898);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x13896))+(((-1.0)*x13897))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13899=((-1.0)*pz);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13899);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13899);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=((((-1.0)*cj5*r11))+(((-1.0)*r10*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13900=((-1.0)*pz);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13900);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13900);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x13901=((1.0)*sj5);
IkReal x13902=((1.0)*cj5);
j4eval[0]=((((-1.0)*r01*x13902))+(((-1.0)*r00*x13901)));
j4eval[1]=((((-1.0)*r11*x13902))+(((-1.0)*r10*x13901)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13903=((1.0)*cj5);
IkReal x13904=((1.0)*sj5);
CheckValue<IkReal> x13905=IKPowWithIntegerCheck(((((-1.0)*r01*x13903))+(((-1.0)*r00*x13904))),-1);
if(!x13905.valid){
continue;
}
CheckValue<IkReal> x13906=IKPowWithIntegerCheck(((((-1.0)*r11*x13903))+(((-1.0)*r10*x13904))),-1);
if(!x13906.valid){
continue;
}
if( IKabs(((-1.0)*(x13905.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13906.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13905.value)))+IKsqr(((x13906.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13905.value)), ((x13906.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13907=IKsin(j4);
IkReal x13908=IKcos(j4);
IkReal x13909=((1.0)*r00*sj5);
IkReal x13910=((1.0)*r10*sj5);
IkReal x13911=((1.0)*cj5*x13908);
IkReal x13912=((1.0)*cj5*x13907);
evalcond[0]=((-1.0)*r22*x13908);
evalcond[1]=(((cj2*sj1))+((r22*x13907))+((cj1*sj2)));
evalcond[2]=((((-1.0)*x13907*x13910))+(((-1.0)*r11*x13912)));
evalcond[3]=((((-1.0)*r01*x13911))+(((-1.0)*x13908*x13909)));
evalcond[4]=((1.0)+(((-1.0)*x13907*x13909))+(((-1.0)*r01*x13912)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r11*x13911))+(((-1.0)*x13908*x13910)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13913=((1.0)*sj1);
CheckValue<IkReal> x13914=IKPowWithIntegerCheck(r22,-1);
if(!x13914.valid){
continue;
}
CheckValue<IkReal> x13915=IKPowWithIntegerCheck(((((-1.0)*cj5*r11))+(((-1.0)*r10*sj5))),-1);
if(!x13915.valid){
continue;
}
if( IKabs(((x13914.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x13913)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13915.value)*(((((-1.0)*sj2*x13913))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13914.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x13913))))))+IKsqr(((x13915.value)*(((((-1.0)*sj2*x13913))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13914.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x13913))))), ((x13915.value)*(((((-1.0)*sj2*x13913))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13916=IKsin(j4);
IkReal x13917=IKcos(j4);
IkReal x13918=((1.0)*r00*sj5);
IkReal x13919=((1.0)*r10*sj5);
IkReal x13920=((1.0)*cj5*x13917);
IkReal x13921=((1.0)*cj5*x13916);
evalcond[0]=((-1.0)*r22*x13917);
evalcond[1]=(((r22*x13916))+((cj2*sj1))+((cj1*sj2)));
evalcond[2]=((((-1.0)*x13916*x13919))+(((-1.0)*r11*x13921)));
evalcond[3]=((((-1.0)*x13917*x13918))+(((-1.0)*r01*x13920)));
evalcond[4]=((1.0)+(((-1.0)*x13916*x13918))+(((-1.0)*r01*x13921)));
evalcond[5]=((((-1.0)*x13917*x13919))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r11*x13920)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13922=((-1.0)*py);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x13922);
rxp0_2=(py*r00);
rxp1_0=(r21*x13922);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
j4eval[1]=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13923=((-1.0)*py);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x13923);
rxp0_2=(py*r00);
rxp1_0=(r21*x13923);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x13924=((1.0)*sj5);
IkReal x13925=((1.0)*cj5);
j4eval[0]=((((-1.0)*r01*x13925))+(((-1.0)*r00*x13924)));
j4eval[1]=((((-1.0)*r21*x13925))+(((-1.0)*r20*x13924)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13926=((1.0)*sj5);
IkReal x13927=((1.0)*cj5);
CheckValue<IkReal> x13928=IKPowWithIntegerCheck(((((-1.0)*r01*x13927))+(((-1.0)*r00*x13926))),-1);
if(!x13928.valid){
continue;
}
CheckValue<IkReal> x13929=IKPowWithIntegerCheck(((((-1.0)*r21*x13927))+(((-1.0)*r20*x13926))),-1);
if(!x13929.valid){
continue;
}
if( IKabs(((-1.0)*(x13928.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13929.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13928.value)))+IKsqr(((x13929.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13928.value)), ((x13929.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13930=IKsin(j4);
IkReal x13931=IKcos(j4);
IkReal x13932=((1.0)*cj5);
IkReal x13933=((1.0)*r00*sj5);
IkReal x13934=((1.0)*r20*sj5);
evalcond[0]=((-1.0)*r12*x13931);
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x13930)));
evalcond[2]=((((-1.0)*r21*x13930*x13932))+(((-1.0)*x13930*x13934)));
evalcond[3]=((((-1.0)*r01*x13931*x13932))+(((-1.0)*x13931*x13933)));
evalcond[4]=((1.0)+(((-1.0)*r01*x13930*x13932))+(((-1.0)*x13930*x13933)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*r21*x13931*x13932))+((cj1*sj2))+(((-1.0)*x13931*x13934)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13935=((1.0)*sj1);
CheckValue<IkReal> x13936=IKPowWithIntegerCheck(r12,-1);
if(!x13936.valid){
continue;
}
CheckValue<IkReal> x13937=IKPowWithIntegerCheck(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5))),-1);
if(!x13937.valid){
continue;
}
if( IKabs(((x13936.value)*(((((-1.0)*sj2*x13935))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13937.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x13935)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13936.value)*(((((-1.0)*sj2*x13935))+((cj1*cj2))))))+IKsqr(((x13937.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x13935))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13936.value)*(((((-1.0)*sj2*x13935))+((cj1*cj2))))), ((x13937.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x13935))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13938=IKsin(j4);
IkReal x13939=IKcos(j4);
IkReal x13940=((1.0)*cj5);
IkReal x13941=((1.0)*r00*sj5);
IkReal x13942=((1.0)*r20*sj5);
evalcond[0]=((-1.0)*r12*x13939);
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x13938)));
evalcond[2]=((((-1.0)*r21*x13938*x13940))+(((-1.0)*x13938*x13942)));
evalcond[3]=((((-1.0)*r01*x13939*x13940))+(((-1.0)*x13939*x13941)));
evalcond[4]=((1.0)+(((-1.0)*r01*x13938*x13940))+(((-1.0)*x13938*x13941)));
evalcond[5]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*x13939*x13940))+(((-1.0)*x13939*x13942)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13943=cj5*cj5;
IkReal x13944=r00*r00;
IkReal x13945=(cj5*r01);
IkReal x13946=(r00*sj5);
CheckValue<IkReal> x13947=IKPowWithIntegerCheck(IKsign((((x13943*x13944))+(((-1.0)*x13943*(r01*r01)))+(((-1.0)*x13944))+(((-1.0)*(r02*r02)))+(((-2.0)*x13945*x13946)))),-1);
if(!x13947.valid){
continue;
}
CheckValue<IkReal> x13948 = IKatan2WithCheck(IkReal(((((-1.0)*x13945))+(((-1.0)*x13946)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x13948.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13947.value)))+(x13948.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13949=IKcos(j4);
IkReal x13950=IKsin(j4);
IkReal x13951=(r00*sj5);
IkReal x13952=(cj5*r01);
IkReal x13953=(r20*sj5);
IkReal x13954=(cj5*r21);
IkReal x13955=(cj5*r11);
IkReal x13956=(r10*sj5);
IkReal x13957=((1.0)*x13949);
IkReal x13958=((1.0)*x13950);
evalcond[0]=((((-1.0)*x13952*x13957))+((r02*x13950))+(((-1.0)*x13951*x13957)));
evalcond[1]=((((-1.0)*r22*x13957))+(((-1.0)*x13953*x13958))+(((-1.0)*x13954*x13958)));
evalcond[2]=((((-1.0)*x13955*x13958))+(((-1.0)*x13956*x13958))+(((-1.0)*r12*x13957)));
evalcond[3]=((1.0)+(((-1.0)*x13952*x13958))+(((-1.0)*r02*x13957))+(((-1.0)*x13951*x13958)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x13950))+(((-1.0)*x13953*x13957))+(((-1.0)*x13954*x13957)));
evalcond[5]=((((-1.0)*x13955*x13957))+((r12*x13950))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x13956*x13957)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13959=((1.0)*sj5);
CheckValue<IkReal> x13960 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r11))+(((-1.0)*r10*x13959)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13960.valid){
continue;
}
CheckValue<IkReal> x13961=IKPowWithIntegerCheck(IKsign((((cj5*r20))+(((-1.0)*r21*x13959)))),-1);
if(!x13961.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13960.value)+(((1.5707963267949)*(x13961.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13962=IKcos(j4);
IkReal x13963=IKsin(j4);
IkReal x13964=(r00*sj5);
IkReal x13965=(cj5*r01);
IkReal x13966=(r20*sj5);
IkReal x13967=(cj5*r21);
IkReal x13968=(cj5*r11);
IkReal x13969=(r10*sj5);
IkReal x13970=((1.0)*x13962);
IkReal x13971=((1.0)*x13963);
evalcond[0]=((((-1.0)*x13964*x13970))+((r02*x13963))+(((-1.0)*x13965*x13970)));
evalcond[1]=((((-1.0)*r22*x13970))+(((-1.0)*x13966*x13971))+(((-1.0)*x13967*x13971)));
evalcond[2]=((((-1.0)*x13968*x13971))+(((-1.0)*x13969*x13971))+(((-1.0)*r12*x13970)));
evalcond[3]=((1.0)+(((-1.0)*x13964*x13971))+(((-1.0)*r02*x13970))+(((-1.0)*x13965*x13971)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x13966*x13970))+(((-1.0)*x13967*x13970))+((r22*x13963)));
evalcond[5]=((((-1.0)*x13968*x13970))+(((-1.0)*x13969*x13970))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x13963)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13972=((1.0)*cj5);
CheckValue<IkReal> x13973=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x13972))+((r11*sj5)))),-1);
if(!x13973.valid){
continue;
}
CheckValue<IkReal> x13974 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x13972))+(((-1.0)*r20*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13974.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13973.value)))+(x13974.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13975=IKcos(j4);
IkReal x13976=IKsin(j4);
IkReal x13977=(r00*sj5);
IkReal x13978=(cj5*r01);
IkReal x13979=(r20*sj5);
IkReal x13980=(cj5*r21);
IkReal x13981=(cj5*r11);
IkReal x13982=(r10*sj5);
IkReal x13983=((1.0)*x13975);
IkReal x13984=((1.0)*x13976);
evalcond[0]=(((r02*x13976))+(((-1.0)*x13978*x13983))+(((-1.0)*x13977*x13983)));
evalcond[1]=((((-1.0)*x13979*x13984))+(((-1.0)*r22*x13983))+(((-1.0)*x13980*x13984)));
evalcond[2]=((((-1.0)*x13982*x13984))+(((-1.0)*r12*x13983))+(((-1.0)*x13981*x13984)));
evalcond[3]=((1.0)+(((-1.0)*x13978*x13984))+(((-1.0)*r02*x13983))+(((-1.0)*x13977*x13984)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x13979*x13983))+((cj1*sj2))+(((-1.0)*x13980*x13983))+((r22*x13976)));
evalcond[5]=((((-1.0)*x13982*x13983))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x13976))+(((-1.0)*x13981*x13983)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x13985=((1.0)*cj5);
IkReal x13986=(((r11*sj5))+(((-1.0)*r10*x13985)));
j4eval[0]=x13986;
j4eval[1]=((IKabs(((((-1.0)*r21*x13985))+(((-1.0)*r20*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x13986);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x13987=((1.0)*sj5);
IkReal x13988=(((cj5*r20))+(((-1.0)*r21*x13987)));
j4eval[0]=x13988;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*cj5*r11))+(((-1.0)*r10*x13987))))));
j4eval[2]=IKsign(x13988);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x13989=cj5*cj5;
IkReal x13990=r00*r00;
IkReal x13991=(r00*sj5);
IkReal x13992=(cj5*r01);
IkReal x13993=((((-1.0)*x13989*x13990))+x13990+((x13989*(r01*r01)))+(r02*r02)+(((2.0)*x13991*x13992)));
j4eval[0]=x13993;
j4eval[1]=((IKabs(r02))+(IKabs((x13991+x13992))));
j4eval[2]=IKsign(x13993);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13994=cj5*cj5;
IkReal x13995=r00*r00;
IkReal x13996=(r00*sj5);
IkReal x13997=(cj5*r01);
CheckValue<IkReal> x13998=IKPowWithIntegerCheck(IKsign(((((2.0)*x13996*x13997))+x13995+(((-1.0)*x13994*x13995))+((x13994*(r01*r01)))+(r02*r02))),-1);
if(!x13998.valid){
continue;
}
CheckValue<IkReal> x13999 = IKatan2WithCheck(IkReal((x13997+x13996)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x13999.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13998.value)))+(x13999.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14000=IKcos(j4);
IkReal x14001=IKsin(j4);
IkReal x14002=(r00*sj5);
IkReal x14003=(cj5*r01);
IkReal x14004=(r20*sj5);
IkReal x14005=(cj5*r21);
IkReal x14006=(cj5*r11);
IkReal x14007=(r10*sj5);
IkReal x14008=((1.0)*x14000);
IkReal x14009=((1.0)*x14001);
evalcond[0]=((((-1.0)*r02*x14009))+((x14000*x14003))+((x14000*x14002)));
evalcond[1]=((((-1.0)*x14005*x14009))+(((-1.0)*x14004*x14009))+(((-1.0)*r22*x14008)));
evalcond[2]=((((-1.0)*x14007*x14009))+(((-1.0)*x14006*x14009))+(((-1.0)*r12*x14008)));
evalcond[3]=((1.0)+(((-1.0)*r02*x14008))+(((-1.0)*x14002*x14009))+(((-1.0)*x14003*x14009)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x14000*x14005))+((x14000*x14004))+(((-1.0)*r22*x14009)));
evalcond[5]=(((x14000*x14007))+((x14000*x14006))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x14009)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14010=((1.0)*sj5);
CheckValue<IkReal> x14011=IKPowWithIntegerCheck(IKsign((((cj5*r20))+(((-1.0)*r21*x14010)))),-1);
if(!x14011.valid){
continue;
}
CheckValue<IkReal> x14012 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r11))+(((-1.0)*r10*x14010)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14012.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14011.value)))+(x14012.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14013=IKcos(j4);
IkReal x14014=IKsin(j4);
IkReal x14015=(r00*sj5);
IkReal x14016=(cj5*r01);
IkReal x14017=(r20*sj5);
IkReal x14018=(cj5*r21);
IkReal x14019=(cj5*r11);
IkReal x14020=(r10*sj5);
IkReal x14021=((1.0)*x14013);
IkReal x14022=((1.0)*x14014);
evalcond[0]=((((-1.0)*r02*x14022))+((x14013*x14016))+((x14013*x14015)));
evalcond[1]=((((-1.0)*r22*x14021))+(((-1.0)*x14018*x14022))+(((-1.0)*x14017*x14022)));
evalcond[2]=((((-1.0)*x14019*x14022))+(((-1.0)*x14020*x14022))+(((-1.0)*r12*x14021)));
evalcond[3]=((1.0)+(((-1.0)*x14016*x14022))+(((-1.0)*x14015*x14022))+(((-1.0)*r02*x14021)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x14013*x14017))+((x14013*x14018))+(((-1.0)*r22*x14022)));
evalcond[5]=(((x14013*x14020))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x14022))+((x14013*x14019)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14023=((1.0)*cj5);
CheckValue<IkReal> x14024 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x14023))+(((-1.0)*r20*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14024.valid){
continue;
}
CheckValue<IkReal> x14025=IKPowWithIntegerCheck(IKsign((((r11*sj5))+(((-1.0)*r10*x14023)))),-1);
if(!x14025.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14024.value)+(((1.5707963267949)*(x14025.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14026=IKcos(j4);
IkReal x14027=IKsin(j4);
IkReal x14028=(r00*sj5);
IkReal x14029=(cj5*r01);
IkReal x14030=(r20*sj5);
IkReal x14031=(cj5*r21);
IkReal x14032=(cj5*r11);
IkReal x14033=(r10*sj5);
IkReal x14034=((1.0)*x14026);
IkReal x14035=((1.0)*x14027);
evalcond[0]=(((x14026*x14028))+((x14026*x14029))+(((-1.0)*r02*x14035)));
evalcond[1]=((((-1.0)*x14030*x14035))+(((-1.0)*x14031*x14035))+(((-1.0)*r22*x14034)));
evalcond[2]=((((-1.0)*x14033*x14035))+(((-1.0)*x14032*x14035))+(((-1.0)*r12*x14034)));
evalcond[3]=((1.0)+(((-1.0)*x14028*x14035))+(((-1.0)*x14029*x14035))+(((-1.0)*r02*x14034)));
evalcond[4]=(((cj2*sj1))+((x14026*x14031))+((x14026*x14030))+((cj1*sj2))+(((-1.0)*r22*x14035)));
evalcond[5]=(((x14026*x14033))+((x14026*x14032))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x14035)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14037 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x14037)==0){
continue;
}
IkReal x14036=pow(x14037,-0.5);
CheckValue<IkReal> x14038 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x14038.valid){
continue;
}
IkReal gconst36=((-1.0)*(x14038.value));
IkReal gconst37=(r10*x14036);
IkReal gconst38=(r11*x14036);
CheckValue<IkReal> x14039 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x14039.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x14039.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x14042 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x14042.valid){
continue;
}
IkReal x14040=((-1.0)*(x14042.value));
IkReal x14041=x14036;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst37;
cj5=gconst38;
j5=x14040;
IkReal gconst36=x14040;
IkReal gconst37=(r10*x14041);
IkReal gconst38=(r11*x14041);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14043=gconst37*gconst37;
IkReal x14044=gconst38*gconst38;
IkReal x14045=(r20*sj3);
IkReal x14046=((1.0)*cj3);
IkReal x14047=(gconst38*r00);
IkReal x14048=(cj3*gconst37);
IkReal x14049=(r21*sj3);
IkReal x14050=(gconst37*gconst38*r01);
CheckValue<IkReal> x14051 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x14046*x14047))+((r01*r22*x14048)))),IkReal((((cj3*r00*r21*x14044))+(((-1.0)*r21*x14046*x14050))+(((-1.0)*r01*r20*x14043*x14046))+((r20*x14047*x14048)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14051.valid){
continue;
}
CheckValue<IkReal> x14052=IKPowWithIntegerCheck(IKsign((((r00*x14043*x14045))+((r01*x14044*x14049))+((gconst37*x14047*x14049))+((x14045*x14050))+((r02*r22*sj3)))),-1);
if(!x14052.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14051.value)+(((1.5707963267949)*(x14052.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14053=IKsin(j4);
IkReal x14054=IKcos(j4);
IkReal x14055=(cj2*sj1);
IkReal x14056=(cj1*sj2);
IkReal x14057=(cj3*gconst37);
IkReal x14058=(gconst38*r11);
IkReal x14059=(sj1*sj2);
IkReal x14060=(gconst37*sj3);
IkReal x14061=(gconst37*r00);
IkReal x14062=(cj1*cj2);
IkReal x14063=(gconst37*r20);
IkReal x14064=(gconst38*r21);
IkReal x14065=(gconst37*r10);
IkReal x14066=((1.0)*gconst38);
IkReal x14067=(gconst38*r01);
IkReal x14068=((1.0)*x14054);
IkReal x14069=((1.0)*x14053);
IkReal x14070=(sj3*x14054);
IkReal x14071=(cj3*x14053);
IkReal x14072=(r20*x14066);
IkReal x14073=(x14055+x14056);
evalcond[0]=((((-1.0)*r22*x14068))+(((-1.0)*x14064*x14069))+(((-1.0)*x14063*x14069)));
evalcond[1]=((((-1.0)*x14058*x14069))+(((-1.0)*x14065*x14069))+(((-1.0)*r12*x14068)));
evalcond[2]=((1.0)+(((-1.0)*r01*x14053*x14066))+(((-1.0)*x14061*x14069))+(((-1.0)*r02*x14068)));
evalcond[3]=((((-1.0)*r02*sj3*x14069))+((x14067*x14070))+((r00*x14054*x14060))+(((-1.0)*cj3*r00*x14066))+((r01*x14057)));
evalcond[4]=(((r02*x14071))+(((-1.0)*cj3*r01*x14054*x14066))+(((-1.0)*r00*sj3*x14066))+((r01*x14060))+(((-1.0)*r00*x14057*x14068)));
evalcond[5]=(((r11*x14057))+((x14058*x14070))+(((-1.0)*cj3*r10*x14066))+x14073+(((-1.0)*r12*sj3*x14069))+((r10*x14054*x14060)));
evalcond[6]=((((-1.0)*x14059))+((r20*x14054*x14060))+(((-1.0)*r22*sj3*x14069))+(((-1.0)*cj3*x14072))+x14062+((x14064*x14070))+((r21*x14057)));
evalcond[7]=((((-1.0)*cj3*x14064*x14068))+((r22*x14071))+((r21*x14060))+(((-1.0)*r20*x14057*x14068))+x14073+(((-1.0)*sj3*x14072)));
evalcond[8]=((((-1.0)*cj3*x14058*x14068))+(((-1.0)*x14062))+(((-1.0)*r10*x14057*x14068))+((r11*x14060))+((r12*x14071))+x14059+(((-1.0)*r10*sj3*x14066)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14074=((1.0)*gconst37);
CheckValue<IkReal> x14075=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x14074))+((gconst38*r20)))),-1);
if(!x14075.valid){
continue;
}
CheckValue<IkReal> x14076 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*gconst38*r11))+(((-1.0)*r10*x14074)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14076.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14075.value)))+(x14076.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14077=IKsin(j4);
IkReal x14078=IKcos(j4);
IkReal x14079=(cj2*sj1);
IkReal x14080=(cj1*sj2);
IkReal x14081=(cj3*gconst37);
IkReal x14082=(gconst38*r11);
IkReal x14083=(sj1*sj2);
IkReal x14084=(gconst37*sj3);
IkReal x14085=(gconst37*r00);
IkReal x14086=(cj1*cj2);
IkReal x14087=(gconst37*r20);
IkReal x14088=(gconst38*r21);
IkReal x14089=(gconst37*r10);
IkReal x14090=((1.0)*gconst38);
IkReal x14091=(gconst38*r01);
IkReal x14092=((1.0)*x14078);
IkReal x14093=((1.0)*x14077);
IkReal x14094=(sj3*x14078);
IkReal x14095=(cj3*x14077);
IkReal x14096=(r20*x14090);
IkReal x14097=(x14080+x14079);
evalcond[0]=((((-1.0)*r22*x14092))+(((-1.0)*x14087*x14093))+(((-1.0)*x14088*x14093)));
evalcond[1]=((((-1.0)*x14089*x14093))+(((-1.0)*r12*x14092))+(((-1.0)*x14082*x14093)));
evalcond[2]=((1.0)+(((-1.0)*x14085*x14093))+(((-1.0)*r02*x14092))+(((-1.0)*r01*x14077*x14090)));
evalcond[3]=(((r01*x14081))+((x14091*x14094))+(((-1.0)*r02*sj3*x14093))+((r00*x14078*x14084))+(((-1.0)*cj3*r00*x14090)));
evalcond[4]=((((-1.0)*cj3*r01*x14078*x14090))+((r01*x14084))+(((-1.0)*r00*sj3*x14090))+(((-1.0)*r00*x14081*x14092))+((r02*x14095)));
evalcond[5]=((((-1.0)*r12*sj3*x14093))+((x14082*x14094))+((r11*x14081))+(((-1.0)*cj3*r10*x14090))+((r10*x14078*x14084))+x14097);
evalcond[6]=(((x14088*x14094))+(((-1.0)*x14083))+(((-1.0)*cj3*x14096))+((r21*x14081))+((r20*x14078*x14084))+x14086+(((-1.0)*r22*sj3*x14093)));
evalcond[7]=((((-1.0)*sj3*x14096))+((r21*x14084))+x14097+((r22*x14095))+(((-1.0)*cj3*x14088*x14092))+(((-1.0)*r20*x14081*x14092)));
evalcond[8]=((((-1.0)*r10*sj3*x14090))+(((-1.0)*x14086))+((r11*x14084))+((r12*x14095))+x14083+(((-1.0)*r10*x14081*x14092))+(((-1.0)*cj3*x14082*x14092)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14100 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x14100)==0){
continue;
}
IkReal x14098=pow(x14100,-0.5);
IkReal x14099=((-1.0)*x14098);
CheckValue<IkReal> x14101 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x14101.valid){
continue;
}
IkReal gconst39=((3.14159265358979)+(((-1.0)*(x14101.value))));
IkReal gconst40=(r10*x14099);
IkReal gconst41=(r11*x14099);
CheckValue<IkReal> x14102 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x14102.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x14102.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x14106 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x14106.valid){
continue;
}
IkReal x14103=((1.0)*(x14106.value));
IkReal x14104=x14098;
IkReal x14105=((-1.0)*x14104);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst40;
cj5=gconst41;
j5=((3.14159265)+(((-1.0)*x14103)));
IkReal gconst39=((3.14159265358979)+(((-1.0)*x14103)));
IkReal gconst40=(r10*x14105);
IkReal gconst41=(r11*x14105);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14110 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x14110.valid){
continue;
}
IkReal x14107=((1.0)*(x14110.value));
IkReal x14108=x14098;
IkReal x14109=((-1.0)*x14108);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst40;
cj5=gconst41;
j5=((3.14159265)+(((-1.0)*x14107)));
IkReal gconst39=((3.14159265358979)+(((-1.0)*x14107)));
IkReal gconst40=(r10*x14109);
IkReal gconst41=(r11*x14109);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14111=gconst40*gconst40;
IkReal x14112=gconst41*gconst41;
IkReal x14113=(r21*sj3);
IkReal x14114=(r20*sj3);
IkReal x14115=(gconst40*gconst41);
IkReal x14116=((1.0)*gconst41);
IkReal x14117=(cj3*r00);
IkReal x14118=(cj3*gconst40*r01);
CheckValue<IkReal> x14119=IKPowWithIntegerCheck(IKsign((((r01*x14114*x14115))+((r00*x14111*x14114))+((r01*x14112*x14113))+((r00*x14113*x14115))+((r02*r22*sj3)))),-1);
if(!x14119.valid){
continue;
}
CheckValue<IkReal> x14120 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x14116*x14117))+((r22*x14118)))),IkReal((((r21*x14112*x14117))+((r20*x14115*x14117))+(((-1.0)*cj3*r01*r21*x14115))+(((-1.0)*cj3*r01*r20*x14111)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14120.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14119.value)))+(x14120.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14121=IKsin(j4);
IkReal x14122=IKcos(j4);
IkReal x14123=(cj2*sj1);
IkReal x14124=(cj1*sj2);
IkReal x14125=((1.0)*sj3);
IkReal x14126=(gconst41*r10);
IkReal x14127=(gconst41*r21);
IkReal x14128=(gconst40*sj3);
IkReal x14129=(cj3*gconst40);
IkReal x14130=(gconst41*r01);
IkReal x14131=(sj1*sj2);
IkReal x14132=(gconst41*r20);
IkReal x14133=(cj1*cj2);
IkReal x14134=((1.0)*cj3);
IkReal x14135=(gconst41*r11);
IkReal x14136=(gconst41*r00);
IkReal x14137=((1.0)*x14122);
IkReal x14138=(r12*x14121);
IkReal x14139=((1.0)*x14121);
IkReal x14140=(sj3*x14122);
IkReal x14141=(cj3*x14121);
IkReal x14142=(x14124+x14123);
evalcond[0]=((((-1.0)*gconst40*r20*x14139))+(((-1.0)*r22*x14137))+(((-1.0)*x14127*x14139)));
evalcond[1]=((((-1.0)*gconst40*r10*x14139))+(((-1.0)*x14135*x14139))+(((-1.0)*r12*x14137)));
evalcond[2]=((1.0)+(((-1.0)*r02*x14137))+(((-1.0)*gconst40*r00*x14139))+(((-1.0)*x14130*x14139)));
evalcond[3]=((((-1.0)*r02*x14121*x14125))+((r01*x14129))+(((-1.0)*x14134*x14136))+((r00*x14122*x14128))+((x14130*x14140)));
evalcond[4]=((((-1.0)*r00*x14129*x14137))+(((-1.0)*x14122*x14130*x14134))+((r02*x14141))+((r01*x14128))+(((-1.0)*x14125*x14136)));
evalcond[5]=(((r10*x14122*x14128))+(((-1.0)*x14125*x14138))+x14142+(((-1.0)*x14126*x14134))+((x14135*x14140))+((r11*x14129)));
evalcond[6]=(((r21*x14129))+(((-1.0)*x14131))+((x14127*x14140))+(((-1.0)*r22*x14121*x14125))+((r20*x14122*x14128))+(((-1.0)*x14132*x14134))+x14133);
evalcond[7]=(((r21*x14128))+(((-1.0)*r20*x14129*x14137))+(((-1.0)*x14122*x14127*x14134))+(((-1.0)*x14125*x14132))+((r22*x14141))+x14142);
evalcond[8]=((((-1.0)*x14133))+(((-1.0)*r10*x14129*x14137))+(((-1.0)*x14122*x14134*x14135))+x14131+((r11*x14128))+((cj3*x14138))+(((-1.0)*x14125*x14126)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14143=((1.0)*gconst40);
CheckValue<IkReal> x14144=IKPowWithIntegerCheck(IKsign((((gconst41*r20))+(((-1.0)*r21*x14143)))),-1);
if(!x14144.valid){
continue;
}
CheckValue<IkReal> x14145 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*gconst41*r11))+(((-1.0)*r10*x14143)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14145.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14144.value)))+(x14145.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14146=IKsin(j4);
IkReal x14147=IKcos(j4);
IkReal x14148=(cj2*sj1);
IkReal x14149=(cj1*sj2);
IkReal x14150=((1.0)*sj3);
IkReal x14151=(gconst41*r10);
IkReal x14152=(gconst41*r21);
IkReal x14153=(gconst40*sj3);
IkReal x14154=(cj3*gconst40);
IkReal x14155=(gconst41*r01);
IkReal x14156=(sj1*sj2);
IkReal x14157=(gconst41*r20);
IkReal x14158=(cj1*cj2);
IkReal x14159=((1.0)*cj3);
IkReal x14160=(gconst41*r11);
IkReal x14161=(gconst41*r00);
IkReal x14162=((1.0)*x14147);
IkReal x14163=(r12*x14146);
IkReal x14164=((1.0)*x14146);
IkReal x14165=(sj3*x14147);
IkReal x14166=(cj3*x14146);
IkReal x14167=(x14149+x14148);
evalcond[0]=((((-1.0)*r22*x14162))+(((-1.0)*gconst40*r20*x14164))+(((-1.0)*x14152*x14164)));
evalcond[1]=((((-1.0)*gconst40*r10*x14164))+(((-1.0)*r12*x14162))+(((-1.0)*x14160*x14164)));
evalcond[2]=((1.0)+(((-1.0)*r02*x14162))+(((-1.0)*gconst40*r00*x14164))+(((-1.0)*x14155*x14164)));
evalcond[3]=(((r00*x14147*x14153))+((x14155*x14165))+(((-1.0)*r02*x14146*x14150))+((r01*x14154))+(((-1.0)*x14159*x14161)));
evalcond[4]=((((-1.0)*x14150*x14161))+((r02*x14166))+(((-1.0)*r00*x14154*x14162))+((r01*x14153))+(((-1.0)*x14147*x14155*x14159)));
evalcond[5]=((((-1.0)*x14151*x14159))+(((-1.0)*x14150*x14163))+((x14160*x14165))+((r11*x14154))+x14167+((r10*x14147*x14153)));
evalcond[6]=((((-1.0)*x14157*x14159))+(((-1.0)*r22*x14146*x14150))+x14158+((r21*x14154))+((r20*x14147*x14153))+((x14152*x14165))+(((-1.0)*x14156)));
evalcond[7]=((((-1.0)*r20*x14154*x14162))+((r22*x14166))+x14167+((r21*x14153))+(((-1.0)*x14147*x14152*x14159))+(((-1.0)*x14150*x14157)));
evalcond[8]=(((cj3*x14163))+(((-1.0)*r10*x14154*x14162))+((r11*x14153))+x14156+(((-1.0)*x14147*x14159*x14160))+(((-1.0)*x14158))+(((-1.0)*x14150*x14151)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14168=((1.0)*gconst41);
CheckValue<IkReal> x14169=IKPowWithIntegerCheck(IKsign((((gconst40*r11))+(((-1.0)*r10*x14168)))),-1);
if(!x14169.valid){
continue;
}
CheckValue<IkReal> x14170 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x14168))+(((-1.0)*gconst40*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14170.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14169.value)))+(x14170.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14171=IKsin(j4);
IkReal x14172=IKcos(j4);
IkReal x14173=(cj2*sj1);
IkReal x14174=(cj1*sj2);
IkReal x14175=((1.0)*sj3);
IkReal x14176=(gconst41*r10);
IkReal x14177=(gconst41*r21);
IkReal x14178=(gconst40*sj3);
IkReal x14179=(cj3*gconst40);
IkReal x14180=(gconst41*r01);
IkReal x14181=(sj1*sj2);
IkReal x14182=(gconst41*r20);
IkReal x14183=(cj1*cj2);
IkReal x14184=((1.0)*cj3);
IkReal x14185=(gconst41*r11);
IkReal x14186=(gconst41*r00);
IkReal x14187=((1.0)*x14172);
IkReal x14188=(r12*x14171);
IkReal x14189=((1.0)*x14171);
IkReal x14190=(sj3*x14172);
IkReal x14191=(cj3*x14171);
IkReal x14192=(x14174+x14173);
evalcond[0]=((((-1.0)*x14177*x14189))+(((-1.0)*r22*x14187))+(((-1.0)*gconst40*r20*x14189)));
evalcond[1]=((((-1.0)*r12*x14187))+(((-1.0)*x14185*x14189))+(((-1.0)*gconst40*r10*x14189)));
evalcond[2]=((1.0)+(((-1.0)*x14180*x14189))+(((-1.0)*gconst40*r00*x14189))+(((-1.0)*r02*x14187)));
evalcond[3]=(((r01*x14179))+((x14180*x14190))+(((-1.0)*x14184*x14186))+((r00*x14172*x14178))+(((-1.0)*r02*x14171*x14175)));
evalcond[4]=((((-1.0)*x14175*x14186))+((r02*x14191))+((r01*x14178))+(((-1.0)*x14172*x14180*x14184))+(((-1.0)*r00*x14179*x14187)));
evalcond[5]=((((-1.0)*x14175*x14188))+((r10*x14172*x14178))+((r11*x14179))+(((-1.0)*x14176*x14184))+((x14185*x14190))+x14192);
evalcond[6]=(((r20*x14172*x14178))+((r21*x14179))+(((-1.0)*x14182*x14184))+((x14177*x14190))+x14183+(((-1.0)*r22*x14171*x14175))+(((-1.0)*x14181)));
evalcond[7]=((((-1.0)*r20*x14179*x14187))+(((-1.0)*x14175*x14182))+((r21*x14178))+(((-1.0)*x14172*x14177*x14184))+((r22*x14191))+x14192);
evalcond[8]=((((-1.0)*r10*x14179*x14187))+((cj3*x14188))+((r11*x14178))+(((-1.0)*x14172*x14184*x14185))+(((-1.0)*x14175*x14176))+x14181+(((-1.0)*x14183)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x14193=((-1.0)*py);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14193);
rxp0_2=(py*r00);
rxp1_0=(r21*x14193);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x14194=(r00*sj5);
IkReal x14195=(cj5*r01);
j4eval[0]=((((-1.0)*x14195))+(((-1.0)*x14194)));
j4eval[1]=(((sj3*x14194))+((sj3*x14195)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x14196=((-1.0)*py);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14196);
rxp0_2=(py*r00);
rxp1_0=(r21*x14196);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=(((cj5*r01*sj3))+((r00*sj3*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x14197=((-1.0)*py);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14197);
rxp0_2=(py*r00);
rxp1_0=(r21*x14197);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=cj3;
j4eval[1]=r12;
j4eval[2]=(((cj5*r01*sj3))+((r00*sj3*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14198=IKPowWithIntegerCheck(cj3,-1);
if(!x14198.valid){
continue;
}
CheckValue<IkReal> x14199=IKPowWithIntegerCheck(r12,-1);
if(!x14199.valid){
continue;
}
CheckValue<IkReal> x14200=IKPowWithIntegerCheck((((cj5*r01*sj3))+((r00*sj3*sj5))),-1);
if(!x14200.valid){
continue;
}
if( IKabs(((x14198.value)*(x14199.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14200.value)*((((cj3*cj5*r00))+(((-1.0)*cj3*r01*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14198.value)*(x14199.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))+IKsqr(((x14200.value)*((((cj3*cj5*r00))+(((-1.0)*cj3*r01*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14198.value)*(x14199.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))), ((x14200.value)*((((cj3*cj5*r00))+(((-1.0)*cj3*r01*sj5))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14201=IKsin(j4);
IkReal x14202=IKcos(j4);
IkReal x14203=(cj2*sj1);
IkReal x14204=(cj1*sj2);
IkReal x14205=((1.0)*sj3);
IkReal x14206=(sj3*sj5);
IkReal x14207=(cj5*r20);
IkReal x14208=(sj1*sj2);
IkReal x14209=(r00*sj5);
IkReal x14210=(cj5*r01);
IkReal x14211=((1.0)*cj3);
IkReal x14212=(cj1*cj2);
IkReal x14213=(cj5*r00);
IkReal x14214=(cj5*r21);
IkReal x14215=(cj3*sj5);
IkReal x14216=(r12*x14201);
IkReal x14217=(r20*x14202);
IkReal x14218=((1.0)*x14201);
IkReal x14219=(sj3*x14202);
IkReal x14220=(x14203+x14204);
evalcond[0]=((-1.0)*r12*x14202);
evalcond[1]=((((-1.0)*x14205*x14216))+x14220);
evalcond[2]=((((-1.0)*x14212))+((cj3*x14216))+x14208);
evalcond[3]=((((-1.0)*x14214*x14218))+(((-1.0)*r20*sj5*x14218)));
evalcond[4]=((1.0)+(((-1.0)*x14210*x14218))+(((-1.0)*x14209*x14218)));
evalcond[5]=((((-1.0)*x14211*x14213))+((r00*x14202*x14206))+((x14210*x14219))+((r01*x14215)));
evalcond[6]=((((-1.0)*x14205*x14213))+(((-1.0)*x14202*x14209*x14211))+((r01*x14206))+(((-1.0)*x14202*x14210*x14211)));
evalcond[7]=(((x14206*x14217))+((x14214*x14219))+(((-1.0)*x14207*x14211))+(((-1.0)*x14208))+((r21*x14215))+x14212);
evalcond[8]=((((-1.0)*x14205*x14207))+((r21*x14206))+(((-1.0)*sj5*x14211*x14217))+(((-1.0)*x14202*x14211*x14214))+x14220);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14221=IKPowWithIntegerCheck(r12,-1);
if(!x14221.valid){
continue;
}
CheckValue<IkReal> x14222=IKPowWithIntegerCheck(sj3,-1);
if(!x14222.valid){
continue;
}
CheckValue<IkReal> x14223=IKPowWithIntegerCheck((((cj5*r01*sj3))+((r00*sj3*sj5))),-1);
if(!x14223.valid){
continue;
}
if( IKabs(((x14221.value)*(x14222.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14223.value)*((((cj3*cj5*r00))+(((-1.0)*cj3*r01*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14221.value)*(x14222.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x14223.value)*((((cj3*cj5*r00))+(((-1.0)*cj3*r01*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14221.value)*(x14222.value)*((((cj2*sj1))+((cj1*sj2))))), ((x14223.value)*((((cj3*cj5*r00))+(((-1.0)*cj3*r01*sj5))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14224=IKsin(j4);
IkReal x14225=IKcos(j4);
IkReal x14226=(cj2*sj1);
IkReal x14227=(cj1*sj2);
IkReal x14228=((1.0)*sj3);
IkReal x14229=(sj3*sj5);
IkReal x14230=(cj5*r20);
IkReal x14231=(sj1*sj2);
IkReal x14232=(r00*sj5);
IkReal x14233=(cj5*r01);
IkReal x14234=((1.0)*cj3);
IkReal x14235=(cj1*cj2);
IkReal x14236=(cj5*r00);
IkReal x14237=(cj5*r21);
IkReal x14238=(cj3*sj5);
IkReal x14239=(r12*x14224);
IkReal x14240=(r20*x14225);
IkReal x14241=((1.0)*x14224);
IkReal x14242=(sj3*x14225);
IkReal x14243=(x14226+x14227);
evalcond[0]=((-1.0)*r12*x14225);
evalcond[1]=((((-1.0)*x14228*x14239))+x14243);
evalcond[2]=(((cj3*x14239))+(((-1.0)*x14235))+x14231);
evalcond[3]=((((-1.0)*x14237*x14241))+(((-1.0)*r20*sj5*x14241)));
evalcond[4]=((1.0)+(((-1.0)*x14232*x14241))+(((-1.0)*x14233*x14241)));
evalcond[5]=((((-1.0)*x14234*x14236))+((r00*x14225*x14229))+((x14233*x14242))+((r01*x14238)));
evalcond[6]=((((-1.0)*x14228*x14236))+(((-1.0)*x14225*x14232*x14234))+(((-1.0)*x14225*x14233*x14234))+((r01*x14229)));
evalcond[7]=(((x14237*x14242))+((r21*x14238))+(((-1.0)*x14231))+x14235+((x14229*x14240))+(((-1.0)*x14230*x14234)));
evalcond[8]=((((-1.0)*x14228*x14230))+(((-1.0)*sj5*x14234*x14240))+((r21*x14229))+(((-1.0)*x14225*x14234*x14237))+x14243);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14244=((1.0)*r01);
IkReal x14245=(r00*sj5);
CheckValue<IkReal> x14246=IKPowWithIntegerCheck(((((-1.0)*x14245))+(((-1.0)*cj5*x14244))),-1);
if(!x14246.valid){
continue;
}
CheckValue<IkReal> x14247=IKPowWithIntegerCheck((((sj3*x14245))+((cj5*r01*sj3))),-1);
if(!x14247.valid){
continue;
}
if( IKabs(((-1.0)*(x14246.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14247.value)*((((cj3*cj5*r00))+(((-1.0)*cj3*sj5*x14244)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x14246.value)))+IKsqr(((x14247.value)*((((cj3*cj5*r00))+(((-1.0)*cj3*sj5*x14244))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x14246.value)), ((x14247.value)*((((cj3*cj5*r00))+(((-1.0)*cj3*sj5*x14244))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14248=IKsin(j4);
IkReal x14249=IKcos(j4);
IkReal x14250=(cj2*sj1);
IkReal x14251=(cj1*sj2);
IkReal x14252=((1.0)*sj3);
IkReal x14253=(sj3*sj5);
IkReal x14254=(cj5*r20);
IkReal x14255=(sj1*sj2);
IkReal x14256=(r00*sj5);
IkReal x14257=(cj5*r01);
IkReal x14258=((1.0)*cj3);
IkReal x14259=(cj1*cj2);
IkReal x14260=(cj5*r00);
IkReal x14261=(cj5*r21);
IkReal x14262=(cj3*sj5);
IkReal x14263=(r12*x14248);
IkReal x14264=(r20*x14249);
IkReal x14265=((1.0)*x14248);
IkReal x14266=(sj3*x14249);
IkReal x14267=(x14251+x14250);
evalcond[0]=((-1.0)*r12*x14249);
evalcond[1]=((((-1.0)*x14252*x14263))+x14267);
evalcond[2]=(((cj3*x14263))+x14255+(((-1.0)*x14259)));
evalcond[3]=((((-1.0)*x14261*x14265))+(((-1.0)*r20*sj5*x14265)));
evalcond[4]=((1.0)+(((-1.0)*x14257*x14265))+(((-1.0)*x14256*x14265)));
evalcond[5]=(((r00*x14249*x14253))+((x14257*x14266))+(((-1.0)*x14258*x14260))+((r01*x14262)));
evalcond[6]=((((-1.0)*x14252*x14260))+(((-1.0)*x14249*x14256*x14258))+(((-1.0)*x14249*x14257*x14258))+((r01*x14253)));
evalcond[7]=((((-1.0)*x14254*x14258))+((r21*x14262))+((x14261*x14266))+((x14253*x14264))+x14259+(((-1.0)*x14255)));
evalcond[8]=((((-1.0)*sj5*x14258*x14264))+((r21*x14253))+(((-1.0)*x14252*x14254))+(((-1.0)*x14249*x14258*x14261))+x14267);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14268=cj5*cj5;
IkReal x14269=(cj5*r00);
IkReal x14270=((1.0)*cj3);
IkReal x14271=(r21*sj5);
IkReal x14272=(r01*r20);
IkReal x14273=(r00*r20);
IkReal x14274=(cj3*sj5);
IkReal x14275=(cj3*x14268);
IkReal x14276=(sj3*x14268);
CheckValue<IkReal> x14277=IKPowWithIntegerCheck(IKsign((((sj3*x14273))+((cj5*sj3*sj5*x14272))+(((-1.0)*x14273*x14276))+((r01*r21*x14276))+((r02*r22*sj3))+((sj3*x14269*x14271)))),-1);
if(!x14277.valid){
continue;
}
CheckValue<IkReal> x14278 = IKatan2WithCheck(IkReal((((r01*r22*x14274))+(((-1.0)*r22*x14269*x14270)))),IkReal((((x14272*x14275))+(((-1.0)*x14270*x14272))+((r20*x14269*x14274))+((r00*r21*x14275))+(((-1.0)*cj5*r01*x14270*x14271)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14278.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14277.value)))+(x14278.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14279=IKsin(j4);
IkReal x14280=IKcos(j4);
IkReal x14281=(cj2*sj1);
IkReal x14282=(cj1*sj2);
IkReal x14283=((1.0)*sj3);
IkReal x14284=(sj3*sj5);
IkReal x14285=(cj5*r10);
IkReal x14286=((1.0)*cj3);
IkReal x14287=(cj5*r20);
IkReal x14288=(sj1*sj2);
IkReal x14289=(r00*sj5);
IkReal x14290=(cj5*r01);
IkReal x14291=(cj5*r00);
IkReal x14292=(r20*sj5);
IkReal x14293=(cj5*r21);
IkReal x14294=(cj1*cj2);
IkReal x14295=(cj3*sj5);
IkReal x14296=(cj5*r11);
IkReal x14297=((1.0)*x14280);
IkReal x14298=(r12*x14279);
IkReal x14299=((1.0)*x14279);
IkReal x14300=(r02*x14279);
IkReal x14301=(r22*x14279);
IkReal x14302=(x14281+x14282);
IkReal x14303=(cj5*sj3*x14280);
evalcond[0]=((((-1.0)*r22*x14297))+(((-1.0)*x14293*x14299))+(((-1.0)*x14292*x14299)));
evalcond[1]=((((-1.0)*r10*sj5*x14299))+(((-1.0)*r12*x14297))+(((-1.0)*x14296*x14299)));
evalcond[2]=((1.0)+(((-1.0)*x14290*x14299))+(((-1.0)*x14289*x14299))+(((-1.0)*r02*x14297)));
evalcond[3]=(((r00*x14280*x14284))+((r01*x14295))+(((-1.0)*x14283*x14300))+(((-1.0)*x14286*x14291))+((sj3*x14280*x14290)));
evalcond[4]=((((-1.0)*x14283*x14291))+((r01*x14284))+(((-1.0)*x14280*x14286*x14290))+(((-1.0)*x14280*x14286*x14289))+((cj3*x14300)));
evalcond[5]=((((-1.0)*x14283*x14298))+((r11*x14295))+((r10*x14280*x14284))+(((-1.0)*x14285*x14286))+x14302+((sj3*x14280*x14296)));
evalcond[6]=(((r21*x14295))+(((-1.0)*x14283*x14301))+(((-1.0)*x14286*x14287))+(((-1.0)*x14288))+x14294+((sj3*x14280*x14293))+((r20*x14280*x14284)));
evalcond[7]=(((r21*x14284))+(((-1.0)*x14283*x14287))+(((-1.0)*x14280*x14286*x14293))+(((-1.0)*x14280*x14286*x14292))+x14302+((cj3*x14301)));
evalcond[8]=(((cj3*x14298))+(((-1.0)*x14283*x14285))+(((-1.0)*r10*sj5*x14280*x14286))+(((-1.0)*x14294))+((r11*x14284))+(((-1.0)*x14280*x14286*x14296))+x14288);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14304=((1.0)*sj5);
CheckValue<IkReal> x14305=IKPowWithIntegerCheck(IKsign((((cj5*r20))+(((-1.0)*r21*x14304)))),-1);
if(!x14305.valid){
continue;
}
CheckValue<IkReal> x14306 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r11))+(((-1.0)*r10*x14304)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14306.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14305.value)))+(x14306.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14307=IKsin(j4);
IkReal x14308=IKcos(j4);
IkReal x14309=(cj2*sj1);
IkReal x14310=(cj1*sj2);
IkReal x14311=((1.0)*sj3);
IkReal x14312=(sj3*sj5);
IkReal x14313=(cj5*r10);
IkReal x14314=((1.0)*cj3);
IkReal x14315=(cj5*r20);
IkReal x14316=(sj1*sj2);
IkReal x14317=(r00*sj5);
IkReal x14318=(cj5*r01);
IkReal x14319=(cj5*r00);
IkReal x14320=(r20*sj5);
IkReal x14321=(cj5*r21);
IkReal x14322=(cj1*cj2);
IkReal x14323=(cj3*sj5);
IkReal x14324=(cj5*r11);
IkReal x14325=((1.0)*x14308);
IkReal x14326=(r12*x14307);
IkReal x14327=((1.0)*x14307);
IkReal x14328=(r02*x14307);
IkReal x14329=(r22*x14307);
IkReal x14330=(x14309+x14310);
IkReal x14331=(cj5*sj3*x14308);
evalcond[0]=((((-1.0)*x14320*x14327))+(((-1.0)*x14321*x14327))+(((-1.0)*r22*x14325)));
evalcond[1]=((((-1.0)*r10*sj5*x14327))+(((-1.0)*x14324*x14327))+(((-1.0)*r12*x14325)));
evalcond[2]=((1.0)+(((-1.0)*x14317*x14327))+(((-1.0)*x14318*x14327))+(((-1.0)*r02*x14325)));
evalcond[3]=(((r01*x14323))+(((-1.0)*x14311*x14328))+((r00*x14308*x14312))+((sj3*x14308*x14318))+(((-1.0)*x14314*x14319)));
evalcond[4]=(((cj3*x14328))+((r01*x14312))+(((-1.0)*x14308*x14314*x14317))+(((-1.0)*x14308*x14314*x14318))+(((-1.0)*x14311*x14319)));
evalcond[5]=(((r10*x14308*x14312))+((sj3*x14308*x14324))+(((-1.0)*x14311*x14326))+(((-1.0)*x14313*x14314))+((r11*x14323))+x14330);
evalcond[6]=(((sj3*x14308*x14321))+(((-1.0)*x14311*x14329))+(((-1.0)*x14316))+((r21*x14323))+(((-1.0)*x14314*x14315))+((r20*x14308*x14312))+x14322);
evalcond[7]=(((cj3*x14329))+((r21*x14312))+x14330+(((-1.0)*x14311*x14315))+(((-1.0)*x14308*x14314*x14320))+(((-1.0)*x14308*x14314*x14321)));
evalcond[8]=(((r11*x14312))+(((-1.0)*r10*sj5*x14308*x14314))+((cj3*x14326))+x14316+(((-1.0)*x14311*x14313))+(((-1.0)*x14322))+(((-1.0)*x14308*x14314*x14324)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14332=((1.0)*cj5);
CheckValue<IkReal> x14333=IKPowWithIntegerCheck(IKsign((((r11*sj5))+(((-1.0)*r10*x14332)))),-1);
if(!x14333.valid){
continue;
}
CheckValue<IkReal> x14334 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x14332))+(((-1.0)*r20*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14334.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14333.value)))+(x14334.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14335=IKsin(j4);
IkReal x14336=IKcos(j4);
IkReal x14337=(cj2*sj1);
IkReal x14338=(cj1*sj2);
IkReal x14339=((1.0)*sj3);
IkReal x14340=(sj3*sj5);
IkReal x14341=(cj5*r10);
IkReal x14342=((1.0)*cj3);
IkReal x14343=(cj5*r20);
IkReal x14344=(sj1*sj2);
IkReal x14345=(r00*sj5);
IkReal x14346=(cj5*r01);
IkReal x14347=(cj5*r00);
IkReal x14348=(r20*sj5);
IkReal x14349=(cj5*r21);
IkReal x14350=(cj1*cj2);
IkReal x14351=(cj3*sj5);
IkReal x14352=(cj5*r11);
IkReal x14353=((1.0)*x14336);
IkReal x14354=(r12*x14335);
IkReal x14355=((1.0)*x14335);
IkReal x14356=(r02*x14335);
IkReal x14357=(r22*x14335);
IkReal x14358=(x14337+x14338);
IkReal x14359=(cj5*sj3*x14336);
evalcond[0]=((((-1.0)*x14348*x14355))+(((-1.0)*r22*x14353))+(((-1.0)*x14349*x14355)));
evalcond[1]=((((-1.0)*r10*sj5*x14355))+(((-1.0)*r12*x14353))+(((-1.0)*x14352*x14355)));
evalcond[2]=((1.0)+(((-1.0)*x14345*x14355))+(((-1.0)*r02*x14353))+(((-1.0)*x14346*x14355)));
evalcond[3]=((((-1.0)*x14342*x14347))+((sj3*x14336*x14346))+((r01*x14351))+((r00*x14336*x14340))+(((-1.0)*x14339*x14356)));
evalcond[4]=(((cj3*x14356))+(((-1.0)*x14339*x14347))+((r01*x14340))+(((-1.0)*x14336*x14342*x14345))+(((-1.0)*x14336*x14342*x14346)));
evalcond[5]=(((r11*x14351))+((sj3*x14336*x14352))+(((-1.0)*x14341*x14342))+x14358+((r10*x14336*x14340))+(((-1.0)*x14339*x14354)));
evalcond[6]=((((-1.0)*x14344))+(((-1.0)*x14342*x14343))+((sj3*x14336*x14349))+((r21*x14351))+((r20*x14336*x14340))+x14350+(((-1.0)*x14339*x14357)));
evalcond[7]=(((cj3*x14357))+(((-1.0)*x14339*x14343))+((r21*x14340))+(((-1.0)*x14336*x14342*x14349))+(((-1.0)*x14336*x14342*x14348))+x14358);
evalcond[8]=(((cj3*x14354))+(((-1.0)*x14339*x14341))+(((-1.0)*r10*sj5*x14336*x14342))+(((-1.0)*x14350))+(((-1.0)*x14336*x14342*x14352))+((r11*x14340))+x14344);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14362 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x14362)==0){
continue;
}
IkReal x14360=pow(x14362,-0.5);
IkReal x14361=((-1.0)*x14360);
CheckValue<IkReal> x14363 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x14363.valid){
continue;
}
IkReal gconst12=((-1.0)*(x14363.value));
IkReal gconst13=(r10*x14361);
IkReal gconst14=(r11*x14361);
CheckValue<IkReal> x14364 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x14364.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j5+(x14364.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x14368 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x14368.valid){
continue;
}
IkReal x14365=((-1.0)*(x14368.value));
IkReal x14366=x14360;
IkReal x14367=((-1.0)*x14366);
sj5=gconst13;
cj5=gconst14;
j5=x14365;
IkReal gconst12=x14365;
IkReal gconst13=(r10*x14367);
IkReal gconst14=(r11*x14367);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14372 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x14372.valid){
continue;
}
IkReal x14369=((-1.0)*(x14372.value));
IkReal x14370=x14360;
IkReal x14371=((-1.0)*x14370);
sj5=gconst13;
cj5=gconst14;
j5=x14369;
IkReal gconst12=x14369;
IkReal gconst13=(r10*x14371);
IkReal gconst14=(r11*x14371);
IkReal x14373=r12*r12;
IkReal x14374=((1.0)*cj0);
IkReal x14375=(r02*sj0);
CheckValue<IkReal> x14379=IKPowWithIntegerCheck(((-1.0)+x14373),-1);
if(!x14379.valid){
continue;
}
IkReal x14376=x14379.value;
if((((1.0)+(((-1.0)*x14373)))) < -0.00001)
continue;
IkReal x14377=IKsqrt(((1.0)+(((-1.0)*x14373))));
IkReal x14378=(x14376*x14377);
j4eval[0]=((IKabs(((((-1.0)*r12*x14374))+x14375)))+(IKabs((((r12*x14375*x14378))+(((-1.0)*x14373*x14374*x14378))+((cj0*x14378))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x14383 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x14383.valid){
continue;
}
IkReal x14380=((-1.0)*(x14383.value));
IkReal x14381=x14360;
IkReal x14382=((-1.0)*x14381);
sj5=gconst13;
cj5=gconst14;
j5=x14380;
IkReal gconst12=x14380;
IkReal gconst13=(r10*x14382);
IkReal gconst14=(r11*x14382);
CheckValue<IkReal> x14387=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x14387.valid){
continue;
}
IkReal x14384=x14387.value;
IkReal x14385=(sj3*x14384);
IkReal x14386=(((sj3*(r22*r22)))+(((2.0)*r10*r11*r20*r21*x14385))+((x14385*(r10*r10)*(r20*r20)))+((x14385*(r11*r11)*(r21*r21))));
j4eval[0]=x14386;
j4eval[1]=IKsign(x14386);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x14391 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x14391.valid){
continue;
}
IkReal x14388=((-1.0)*(x14391.value));
IkReal x14389=x14360;
IkReal x14390=((-1.0)*x14389);
sj5=gconst13;
cj5=gconst14;
j5=x14388;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst12=x14388;
IkReal gconst13=(r10*x14390);
IkReal gconst14=(r11*x14390);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14395 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x14395.valid){
continue;
}
IkReal x14392=((-1.0)*(x14395.value));
IkReal x14393=x14360;
IkReal x14394=((-1.0)*x14393);
sj5=gconst13;
cj5=gconst14;
j5=x14392;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst12=x14392;
IkReal gconst13=(r10*x14394);
IkReal gconst14=(r11*x14394);
IkReal x14396=r12*r12;
IkReal x14397=((1.0)*cj0);
IkReal x14398=(r02*sj0);
CheckValue<IkReal> x14402=IKPowWithIntegerCheck(((-1.0)+x14396),-1);
if(!x14402.valid){
continue;
}
IkReal x14399=x14402.value;
if((((1.0)+(((-1.0)*x14396)))) < -0.00001)
continue;
IkReal x14400=IKsqrt(((1.0)+(((-1.0)*x14396))));
IkReal x14401=(x14399*x14400);
j4eval[0]=((IKabs(((((-1.0)*r12*x14397))+x14398)))+(IKabs((((cj0*x14401))+(((-1.0)*x14396*x14397*x14401))+((r12*x14398*x14401))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x14406 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x14406.valid){
continue;
}
IkReal x14403=((-1.0)*(x14406.value));
IkReal x14404=x14360;
IkReal x14405=((-1.0)*x14404);
sj5=gconst13;
cj5=gconst14;
j5=x14403;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst12=x14403;
IkReal gconst13=(r10*x14405);
IkReal gconst14=(r11*x14405);
IkReal x14407=(cj1*sj2);
IkReal x14408=(cj2*sj1);
IkReal x14409=((1.0)+(((-1.0)*(r12*r12))));
CheckValue<IkReal> x14415=IKPowWithIntegerCheck(x14409,-1);
if(!x14415.valid){
continue;
}
IkReal x14410=x14415.value;
IkReal x14411=((1.0)*x14410);
IkReal x14412=x14360;
IkReal x14413=(r12*r22*x14412);
IkReal x14414=((((-2.0)*r10*r11*r20*r21*x14410))+(((-1.0)*x14411*(r11*r11)*(r21*r21)))+(((-1.0)*x14411*(r10*r10)*(r20*r20)))+(((-1.0)*(r22*r22))));
j4eval[0]=x14414;
j4eval[1]=IKsign(x14414);
j4eval[2]=((IKabs((((x14408*x14413))+((x14407*x14413)))))+(IKabs((((r22*x14408))+((r22*x14407))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14416=(gconst14*r21);
IkReal x14417=(cj1*sj2);
IkReal x14418=(gconst13*r20);
IkReal x14419=(cj2*sj1);
CheckValue<IkReal> x14420=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x14418*x14418)))+(((-1.0)*(x14416*x14416)))+(((-1.0)*(r22*r22)))+(((-2.0)*x14416*x14418)))),-1);
if(!x14420.valid){
continue;
}
CheckValue<IkReal> x14421 = IKatan2WithCheck(IkReal((((r22*x14417))+((r22*x14419)))),IkReal(((((-1.0)*x14418*x14419))+(((-1.0)*x14416*x14417))+(((-1.0)*x14416*x14419))+(((-1.0)*x14417*x14418)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14421.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14420.value)))+(x14421.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14422=IKsin(j4);
IkReal x14423=IKcos(j4);
IkReal x14424=(gconst13*r20);
IkReal x14425=(gconst13*r10);
IkReal x14426=(gconst14*r11);
IkReal x14427=(gconst14*r01);
IkReal x14428=(gconst13*r00);
IkReal x14429=((1.0)*sj0);
IkReal x14430=(gconst14*r21);
IkReal x14431=(cj1*cj2);
IkReal x14432=((1.0)*cj0);
IkReal x14433=(sj1*sj2);
IkReal x14434=((1.0)*x14423);
IkReal x14435=((1.0)*x14422);
evalcond[0]=((((-1.0)*r22*x14434))+(((-1.0)*x14424*x14435))+(((-1.0)*x14430*x14435)));
evalcond[1]=((((-1.0)*x14432))+(((-1.0)*x14428*x14435))+(((-1.0)*r02*x14434))+(((-1.0)*x14427*x14435)));
evalcond[2]=((((-1.0)*x14426*x14435))+(((-1.0)*x14425*x14435))+(((-1.0)*r12*x14434))+(((-1.0)*x14429)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x14424*x14434))+((r22*x14422))+(((-1.0)*x14430*x14434)));
evalcond[4]=(((sj0*x14433))+(((-1.0)*x14428*x14434))+(((-1.0)*x14429*x14431))+((r02*x14422))+(((-1.0)*x14427*x14434)));
evalcond[5]=((((-1.0)*x14432*x14433))+((cj0*x14431))+(((-1.0)*x14426*x14434))+(((-1.0)*x14425*x14434))+((r12*x14422)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14436=((1.0)*gconst13);
CheckValue<IkReal> x14437=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x14436))+((gconst14*r20)))),-1);
if(!x14437.valid){
continue;
}
CheckValue<IkReal> x14438 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r12))+((r02*sj0)))),IkReal((((cj0*gconst14*r11))+((cj0*gconst13*r10))+(((-1.0)*r00*sj0*x14436))+(((-1.0)*gconst14*r01*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14438.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14437.value)))+(x14438.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14439=IKsin(j4);
IkReal x14440=IKcos(j4);
IkReal x14441=(gconst13*r20);
IkReal x14442=(gconst13*r10);
IkReal x14443=(gconst14*r11);
IkReal x14444=(gconst14*r01);
IkReal x14445=(gconst13*r00);
IkReal x14446=((1.0)*sj0);
IkReal x14447=(gconst14*r21);
IkReal x14448=(cj1*cj2);
IkReal x14449=((1.0)*cj0);
IkReal x14450=(sj1*sj2);
IkReal x14451=((1.0)*x14440);
IkReal x14452=((1.0)*x14439);
evalcond[0]=((((-1.0)*r22*x14451))+(((-1.0)*x14441*x14452))+(((-1.0)*x14447*x14452)));
evalcond[1]=((((-1.0)*x14449))+(((-1.0)*r02*x14451))+(((-1.0)*x14445*x14452))+(((-1.0)*x14444*x14452)));
evalcond[2]=((((-1.0)*x14443*x14452))+(((-1.0)*x14446))+(((-1.0)*x14442*x14452))+(((-1.0)*r12*x14451)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x14439))+(((-1.0)*x14441*x14451))+(((-1.0)*x14447*x14451)));
evalcond[4]=(((sj0*x14450))+(((-1.0)*x14446*x14448))+((r02*x14439))+(((-1.0)*x14445*x14451))+(((-1.0)*x14444*x14451)));
evalcond[5]=((((-1.0)*x14443*x14451))+(((-1.0)*x14449*x14450))+((r12*x14439))+(((-1.0)*x14442*x14451))+((cj0*x14448)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14453=((1.0)*sj0);
CheckValue<IkReal> x14454 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst14*r21*x14453))+(((-1.0)*gconst13*r20*x14453)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14454.valid){
continue;
}
CheckValue<IkReal> x14455=IKPowWithIntegerCheck(IKsign((((gconst13*r01))+(((-1.0)*gconst14*r00)))),-1);
if(!x14455.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14454.value)+(((1.5707963267949)*(x14455.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14456=IKsin(j4);
IkReal x14457=IKcos(j4);
IkReal x14458=(gconst13*r20);
IkReal x14459=(gconst13*r10);
IkReal x14460=(gconst14*r11);
IkReal x14461=(gconst14*r01);
IkReal x14462=(gconst13*r00);
IkReal x14463=((1.0)*sj0);
IkReal x14464=(gconst14*r21);
IkReal x14465=(cj1*cj2);
IkReal x14466=((1.0)*cj0);
IkReal x14467=(sj1*sj2);
IkReal x14468=((1.0)*x14457);
IkReal x14469=((1.0)*x14456);
evalcond[0]=((((-1.0)*x14464*x14469))+(((-1.0)*x14458*x14469))+(((-1.0)*r22*x14468)));
evalcond[1]=((((-1.0)*x14462*x14469))+(((-1.0)*r02*x14468))+(((-1.0)*x14466))+(((-1.0)*x14461*x14469)));
evalcond[2]=((((-1.0)*x14460*x14469))+(((-1.0)*r12*x14468))+(((-1.0)*x14463))+(((-1.0)*x14459*x14469)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x14464*x14468))+((r22*x14456))+(((-1.0)*x14458*x14468)));
evalcond[4]=((((-1.0)*x14463*x14465))+(((-1.0)*x14462*x14468))+((sj0*x14467))+((r02*x14456))+(((-1.0)*x14461*x14468)));
evalcond[5]=(((r12*x14456))+(((-1.0)*x14460*x14468))+(((-1.0)*x14466*x14467))+((cj0*x14465))+(((-1.0)*x14459*x14468)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x14473 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x14473.valid){
continue;
}
IkReal x14470=((-1.0)*(x14473.value));
IkReal x14471=x14360;
IkReal x14472=((-1.0)*x14471);
sj5=gconst13;
cj5=gconst14;
j5=x14470;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst12=x14470;
IkReal gconst13=(r10*x14472);
IkReal gconst14=(r11*x14472);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14477 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x14477.valid){
continue;
}
IkReal x14474=((-1.0)*(x14477.value));
IkReal x14475=x14360;
IkReal x14476=((-1.0)*x14475);
sj5=gconst13;
cj5=gconst14;
j5=x14474;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst12=x14474;
IkReal gconst13=(r10*x14476);
IkReal gconst14=(r11*x14476);
IkReal x14478=r12*r12;
IkReal x14479=((1.0)*cj0);
IkReal x14480=(r02*sj0);
CheckValue<IkReal> x14484=IKPowWithIntegerCheck(((-1.0)+x14478),-1);
if(!x14484.valid){
continue;
}
IkReal x14481=x14484.value;
if((((1.0)+(((-1.0)*x14478)))) < -0.00001)
continue;
IkReal x14482=IKsqrt(((1.0)+(((-1.0)*x14478))));
IkReal x14483=(x14481*x14482);
j4eval[0]=((IKabs((((r12*x14480*x14483))+(((-1.0)*x14478*x14479*x14483))+((cj0*x14483)))))+(IKabs(((((-1.0)*r12*x14479))+x14480))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14488 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x14488.valid){
continue;
}
IkReal x14485=((-1.0)*(x14488.value));
IkReal x14486=x14360;
IkReal x14487=((-1.0)*x14486);
sj5=gconst13;
cj5=gconst14;
j5=x14485;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst12=x14485;
IkReal gconst13=(r10*x14487);
IkReal gconst14=(r11*x14487);
IkReal x14489=(cj1*r22*sj2);
IkReal x14490=(cj2*r22*sj1);
IkReal x14491=x14360;
IkReal x14492=(r12*x14491);
j4eval[0]=((IKabs((((x14490*x14492))+((x14489*x14492)))))+(IKabs((x14490+x14489))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14493=(gconst14*r21);
IkReal x14494=(cj1*sj2);
IkReal x14495=(gconst13*r20);
IkReal x14496=(cj2*sj1);
CheckValue<IkReal> x14497 = IKatan2WithCheck(IkReal((((r22*x14494))+((r22*x14496)))),IkReal(((((-1.0)*x14494*x14495))+(((-1.0)*x14493*x14496))+(((-1.0)*x14493*x14494))+(((-1.0)*x14495*x14496)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14497.valid){
continue;
}
CheckValue<IkReal> x14498=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((2.0)*x14493*x14495))+(x14495*x14495)+(x14493*x14493))),-1);
if(!x14498.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14497.value)+(((1.5707963267949)*(x14498.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14499=IKsin(j4);
IkReal x14500=IKcos(j4);
IkReal x14501=(gconst14*r01);
IkReal x14502=(gconst14*r11);
IkReal x14503=(gconst14*r21);
IkReal x14504=((1.0)*sj0);
IkReal x14505=(cj1*cj2);
IkReal x14506=((1.0)*cj0);
IkReal x14507=(sj1*sj2);
IkReal x14508=((1.0)*x14500);
IkReal x14509=(gconst13*x14500);
IkReal x14510=((1.0)*x14499);
evalcond[0]=((((-1.0)*x14503*x14510))+(((-1.0)*r22*x14508))+(((-1.0)*gconst13*r20*x14510)));
evalcond[1]=((((-1.0)*x14501*x14510))+(((-1.0)*r02*x14508))+(((-1.0)*x14506))+(((-1.0)*gconst13*r00*x14510)));
evalcond[2]=((((-1.0)*x14504))+(((-1.0)*r12*x14508))+(((-1.0)*x14502*x14510))+(((-1.0)*gconst13*r10*x14510)));
evalcond[3]=(((cj2*sj1))+((r20*x14509))+(((-1.0)*r22*x14510))+((cj1*sj2))+((x14500*x14503)));
evalcond[4]=(((sj0*x14507))+(((-1.0)*x14504*x14505))+((x14500*x14501))+(((-1.0)*r02*x14510))+((r00*x14509)));
evalcond[5]=((((-1.0)*x14506*x14507))+((r10*x14509))+((x14500*x14502))+(((-1.0)*r12*x14510))+((cj0*x14505)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14511=((1.0)*gconst13);
CheckValue<IkReal> x14512=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x14511))+((gconst14*r20)))),-1);
if(!x14512.valid){
continue;
}
CheckValue<IkReal> x14513 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r12))+((r02*sj0)))),IkReal((((cj0*gconst14*r11))+((cj0*gconst13*r10))+(((-1.0)*gconst14*r01*sj0))+(((-1.0)*r00*sj0*x14511)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14513.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14512.value)))+(x14513.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14514=IKsin(j4);
IkReal x14515=IKcos(j4);
IkReal x14516=(gconst14*r01);
IkReal x14517=(gconst14*r11);
IkReal x14518=(gconst14*r21);
IkReal x14519=((1.0)*sj0);
IkReal x14520=(cj1*cj2);
IkReal x14521=((1.0)*cj0);
IkReal x14522=(sj1*sj2);
IkReal x14523=((1.0)*x14515);
IkReal x14524=(gconst13*x14515);
IkReal x14525=((1.0)*x14514);
evalcond[0]=((((-1.0)*r22*x14523))+(((-1.0)*x14518*x14525))+(((-1.0)*gconst13*r20*x14525)));
evalcond[1]=((((-1.0)*x14521))+(((-1.0)*r02*x14523))+(((-1.0)*gconst13*r00*x14525))+(((-1.0)*x14516*x14525)));
evalcond[2]=((((-1.0)*x14517*x14525))+(((-1.0)*gconst13*r10*x14525))+(((-1.0)*x14519))+(((-1.0)*r12*x14523)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x14525))+((cj1*sj2))+((r20*x14524))+((x14515*x14518)));
evalcond[4]=(((r00*x14524))+(((-1.0)*x14519*x14520))+((x14515*x14516))+((sj0*x14522))+(((-1.0)*r02*x14525)));
evalcond[5]=(((cj0*x14520))+((x14515*x14517))+(((-1.0)*x14521*x14522))+(((-1.0)*r12*x14525))+((r10*x14524)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14526=((1.0)*sj0);
CheckValue<IkReal> x14527 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst14*r21*x14526))+(((-1.0)*gconst13*r20*x14526)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14527.valid){
continue;
}
CheckValue<IkReal> x14528=IKPowWithIntegerCheck(IKsign((((gconst13*r01))+(((-1.0)*gconst14*r00)))),-1);
if(!x14528.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14527.value)+(((1.5707963267949)*(x14528.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14529=IKsin(j4);
IkReal x14530=IKcos(j4);
IkReal x14531=(gconst14*r01);
IkReal x14532=(gconst14*r11);
IkReal x14533=(gconst14*r21);
IkReal x14534=((1.0)*sj0);
IkReal x14535=(cj1*cj2);
IkReal x14536=((1.0)*cj0);
IkReal x14537=(sj1*sj2);
IkReal x14538=((1.0)*x14530);
IkReal x14539=(gconst13*x14530);
IkReal x14540=((1.0)*x14529);
evalcond[0]=((((-1.0)*r22*x14538))+(((-1.0)*x14533*x14540))+(((-1.0)*gconst13*r20*x14540)));
evalcond[1]=((((-1.0)*gconst13*r00*x14540))+(((-1.0)*x14536))+(((-1.0)*x14531*x14540))+(((-1.0)*r02*x14538)));
evalcond[2]=((((-1.0)*x14534))+(((-1.0)*r12*x14538))+(((-1.0)*gconst13*r10*x14540))+(((-1.0)*x14532*x14540)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r20*x14539))+((x14530*x14533))+(((-1.0)*r22*x14540)));
evalcond[4]=(((sj0*x14537))+((r00*x14539))+(((-1.0)*r02*x14540))+((x14530*x14531))+(((-1.0)*x14534*x14535)));
evalcond[5]=((((-1.0)*r12*x14540))+((cj0*x14535))+((x14530*x14532))+(((-1.0)*x14536*x14537))+((r10*x14539)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x14544 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x14544.valid){
continue;
}
IkReal x14541=((-1.0)*(x14544.value));
IkReal x14542=x14360;
IkReal x14543=((-1.0)*x14542);
sj5=gconst13;
cj5=gconst14;
j5=x14541;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst12=x14541;
IkReal gconst13=(r10*x14543);
IkReal gconst14=(r11*x14543);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14545=gconst13*gconst13;
IkReal x14546=gconst14*gconst14;
IkReal x14547=(gconst13*r20);
IkReal x14548=(r00*sj3);
IkReal x14549=(r01*sj3);
IkReal x14550=(cj3*r01);
IkReal x14551=(cj3*gconst14*r00);
IkReal x14552=(r20*x14545);
IkReal x14553=(r21*x14546);
IkReal x14554=(gconst13*gconst14*r21);
CheckValue<IkReal> x14555 = IKatan2WithCheck(IkReal((((gconst13*r22*x14550))+(((-1.0)*r22*x14551)))),IkReal(((((-1.0)*x14550*x14554))+(((-1.0)*x14550*x14552))+((cj3*r00*x14553))+((x14547*x14551)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14555.valid){
continue;
}
CheckValue<IkReal> x14556=IKPowWithIntegerCheck(IKsign((((x14549*x14553))+((gconst14*x14547*x14549))+((x14548*x14554))+((x14548*x14552))+((r02*r22*sj3)))),-1);
if(!x14556.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14555.value)+(((1.5707963267949)*(x14556.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14557=IKsin(j4);
IkReal x14558=IKcos(j4);
IkReal x14559=(cj2*sj1);
IkReal x14560=(cj1*sj2);
IkReal x14561=(cj3*gconst13);
IkReal x14562=(gconst13*sj3);
IkReal x14563=(sj1*sj2);
IkReal x14564=(cj3*gconst14);
IkReal x14565=((1.0)*r00);
IkReal x14566=(gconst14*r01);
IkReal x14567=(gconst14*r11);
IkReal x14568=(cj1*cj2);
IkReal x14569=((1.0)*r20);
IkReal x14570=(gconst14*sj3);
IkReal x14571=((1.0)*r10);
IkReal x14572=(gconst14*r21);
IkReal x14573=((1.0)*x14558);
IkReal x14574=((1.0)*x14557);
IkReal x14575=(cj3*x14557);
IkReal x14576=(sj3*x14558);
IkReal x14577=(x14559+x14560);
evalcond[0]=((((-1.0)*gconst13*x14557*x14569))+(((-1.0)*r22*x14573))+(((-1.0)*x14572*x14574)));
evalcond[1]=((((-1.0)*gconst13*x14557*x14571))+(((-1.0)*r12*x14573))+(((-1.0)*x14567*x14574)));
evalcond[2]=((1.0)+(((-1.0)*gconst13*x14557*x14565))+(((-1.0)*r02*x14573))+(((-1.0)*x14566*x14574)));
evalcond[3]=(((r01*x14561))+((x14566*x14576))+(((-1.0)*x14564*x14565))+(((-1.0)*r02*sj3*x14574))+((r00*x14558*x14562)));
evalcond[4]=(((r01*x14562))+(((-1.0)*x14558*x14561*x14565))+(((-1.0)*x14565*x14570))+((r02*x14575))+(((-1.0)*r01*x14564*x14573)));
evalcond[5]=(((x14567*x14576))+(((-1.0)*x14564*x14571))+x14577+((r11*x14561))+((r10*x14558*x14562))+(((-1.0)*r12*sj3*x14574)));
evalcond[6]=(((r20*x14558*x14562))+((r21*x14558*x14570))+((r21*x14561))+(((-1.0)*r22*sj3*x14574))+x14568+(((-1.0)*x14564*x14569))+(((-1.0)*x14563)));
evalcond[7]=((((-1.0)*x14558*x14561*x14569))+((r21*x14562))+(((-1.0)*r21*x14564*x14573))+(((-1.0)*x14569*x14570))+x14577+((r22*x14575)));
evalcond[8]=((((-1.0)*x14558*x14561*x14571))+(((-1.0)*x14570*x14571))+(((-1.0)*r11*x14564*x14573))+x14563+((r11*x14562))+(((-1.0)*x14568))+((r12*x14575)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14578=((1.0)*gconst13);
CheckValue<IkReal> x14579 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*gconst14*r11))+(((-1.0)*r10*x14578)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14579.valid){
continue;
}
CheckValue<IkReal> x14580=IKPowWithIntegerCheck(IKsign((((gconst14*r20))+(((-1.0)*r21*x14578)))),-1);
if(!x14580.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14579.value)+(((1.5707963267949)*(x14580.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14581=IKsin(j4);
IkReal x14582=IKcos(j4);
IkReal x14583=(cj2*sj1);
IkReal x14584=(cj1*sj2);
IkReal x14585=(cj3*gconst13);
IkReal x14586=(gconst13*sj3);
IkReal x14587=(sj1*sj2);
IkReal x14588=(cj3*gconst14);
IkReal x14589=((1.0)*r00);
IkReal x14590=(gconst14*r01);
IkReal x14591=(gconst14*r11);
IkReal x14592=(cj1*cj2);
IkReal x14593=((1.0)*r20);
IkReal x14594=(gconst14*sj3);
IkReal x14595=((1.0)*r10);
IkReal x14596=(gconst14*r21);
IkReal x14597=((1.0)*x14582);
IkReal x14598=((1.0)*x14581);
IkReal x14599=(cj3*x14581);
IkReal x14600=(sj3*x14582);
IkReal x14601=(x14584+x14583);
evalcond[0]=((((-1.0)*gconst13*x14581*x14593))+(((-1.0)*x14596*x14598))+(((-1.0)*r22*x14597)));
evalcond[1]=((((-1.0)*gconst13*x14581*x14595))+(((-1.0)*r12*x14597))+(((-1.0)*x14591*x14598)));
evalcond[2]=((1.0)+(((-1.0)*r02*x14597))+(((-1.0)*gconst13*x14581*x14589))+(((-1.0)*x14590*x14598)));
evalcond[3]=(((x14590*x14600))+(((-1.0)*x14588*x14589))+((r00*x14582*x14586))+((r01*x14585))+(((-1.0)*r02*sj3*x14598)));
evalcond[4]=((((-1.0)*x14582*x14585*x14589))+(((-1.0)*x14589*x14594))+((r01*x14586))+(((-1.0)*r01*x14588*x14597))+((r02*x14599)));
evalcond[5]=((((-1.0)*x14588*x14595))+x14601+((r10*x14582*x14586))+((r11*x14585))+((x14591*x14600))+(((-1.0)*r12*sj3*x14598)));
evalcond[6]=((((-1.0)*x14588*x14593))+((r21*x14582*x14594))+(((-1.0)*x14587))+((r21*x14585))+x14592+((r20*x14582*x14586))+(((-1.0)*r22*sj3*x14598)));
evalcond[7]=((((-1.0)*r21*x14588*x14597))+((r22*x14599))+(((-1.0)*x14593*x14594))+((r21*x14586))+(((-1.0)*x14582*x14585*x14593))+x14601);
evalcond[8]=((((-1.0)*r11*x14588*x14597))+(((-1.0)*x14594*x14595))+(((-1.0)*x14592))+x14587+(((-1.0)*x14582*x14585*x14595))+((r11*x14586))+((r12*x14599)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x14602=((-1.0)*r11);
IkReal x14603=((-1.0)*r10);
CheckValue<IkReal> x14605 = IKatan2WithCheck(IkReal(r10),IkReal(x14602),IKFAST_ATAN2_MAGTHRESH);
if(!x14605.valid){
continue;
}
IkReal x14604=((-1.0)*(x14605.value));
sj5=gconst13;
cj5=gconst14;
j5=x14604;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x14603);
rxp1_1=(px*r21);
rxp1_2=(px*x14602);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst12=x14604;
IkReal gconst13=x14603;
IkReal gconst14=x14602;
j4eval[0]=1.0;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14606=((-1.0)*r11);
IkReal x14607=((-1.0)*r10);
CheckValue<IkReal> x14609 = IKatan2WithCheck(IkReal(r10),IkReal(x14606),IKFAST_ATAN2_MAGTHRESH);
if(!x14609.valid){
continue;
}
IkReal x14608=((-1.0)*(x14609.value));
sj5=gconst13;
cj5=gconst14;
j5=x14608;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x14607);
rxp1_1=(px*r21);
rxp1_2=(px*x14606);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst12=x14608;
IkReal gconst13=x14607;
IkReal gconst14=x14606;
j4eval[0]=r02;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14610=((-1.0)*r11);
IkReal x14611=((-1.0)*r10);
CheckValue<IkReal> x14613 = IKatan2WithCheck(IkReal(r10),IkReal(x14610),IKFAST_ATAN2_MAGTHRESH);
if(!x14613.valid){
continue;
}
IkReal x14612=((-1.0)*(x14613.value));
sj5=gconst13;
cj5=gconst14;
j5=x14612;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x14611);
rxp1_1=(px*r21);
rxp1_2=(px*x14610);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst12=x14612;
IkReal gconst13=x14611;
IkReal gconst14=x14610;
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14615=IKPowWithIntegerCheck(r02,-1);
if(!x14615.valid){
continue;
}
IkReal x14614=x14615.value;
CheckValue<IkReal> x14616=IKPowWithIntegerCheck(cj3,-1);
if(!x14616.valid){
continue;
}
if( IKabs((x14614*(x14616.value)*((((cj1*cj2*sj0))+(((-1.0)*sj0*sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*x14614)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x14614*(x14616.value)*((((cj1*cj2*sj0))+(((-1.0)*sj0*sj1*sj2))))))+IKsqr(((-1.0)*cj0*x14614))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x14614*(x14616.value)*((((cj1*cj2*sj0))+(((-1.0)*sj0*sj1*sj2))))), ((-1.0)*cj0*x14614));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14617=IKsin(j4);
IkReal x14618=IKcos(j4);
IkReal x14619=((1.0)*cj3);
IkReal x14620=(r10*sj3);
IkReal x14621=(r11*sj3);
IkReal x14622=(cj2*sj1);
IkReal x14623=(gconst14*r11);
IkReal x14624=(gconst13*r21);
IkReal x14625=((1.0)*cj0);
IkReal x14626=((1.0)*sj0);
IkReal x14627=(cj1*sj2);
IkReal x14628=(gconst14*r20);
IkReal x14629=(cj1*cj2);
IkReal x14630=(gconst13*x14618);
IkReal x14631=((1.0)*sj1*sj2);
IkReal x14632=((1.0)*x14617);
IkReal x14633=(gconst14*x14618);
evalcond[0]=((((-1.0)*r02*x14618))+(((-1.0)*x14625)));
evalcond[1]=((((-1.0)*gconst13*r20*x14632))+(((-1.0)*gconst14*r21*x14632)));
evalcond[2]=((((-1.0)*r02*sj3*x14632))+((sj0*x14622))+((sj0*x14627)));
evalcond[3]=(((sj0*sj1*sj2))+((cj3*r02*x14617))+(((-1.0)*x14626*x14629)));
evalcond[4]=((((-1.0)*x14626))+(((-1.0)*x14623*x14632))+(((-1.0)*gconst13*r10*x14632)));
evalcond[5]=(((r21*sj3*x14633))+((r20*sj3*x14630))+((cj3*x14624))+(((-1.0)*x14631))+(((-1.0)*x14619*x14628))+x14629);
evalcond[6]=(((sj3*x14624))+(((-1.0)*r21*x14619*x14633))+(((-1.0)*sj3*x14628))+x14627+x14622+(((-1.0)*r20*x14619*x14630)));
evalcond[7]=(((x14621*x14633))+(((-1.0)*gconst14*r10*x14619))+(((-1.0)*x14622*x14625))+(((-1.0)*x14625*x14627))+((cj3*gconst13*r11))+((x14620*x14630)));
evalcond[8]=(((gconst13*x14621))+(((-1.0)*x14618*x14619*x14623))+(((-1.0)*gconst14*x14620))+((cj0*x14629))+(((-1.0)*r10*x14619*x14630))+(((-1.0)*sj1*sj2*x14625)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14635=IKPowWithIntegerCheck(r02,-1);
if(!x14635.valid){
continue;
}
IkReal x14634=x14635.value;
CheckValue<IkReal> x14636=IKPowWithIntegerCheck(sj3,-1);
if(!x14636.valid){
continue;
}
if( IKabs((x14634*(x14636.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*x14634)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x14634*(x14636.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))))+IKsqr(((-1.0)*cj0*x14634))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x14634*(x14636.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))), ((-1.0)*cj0*x14634));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14637=IKsin(j4);
IkReal x14638=IKcos(j4);
IkReal x14639=((1.0)*cj3);
IkReal x14640=(r10*sj3);
IkReal x14641=(r11*sj3);
IkReal x14642=(cj2*sj1);
IkReal x14643=(gconst14*r11);
IkReal x14644=(gconst13*r21);
IkReal x14645=((1.0)*cj0);
IkReal x14646=((1.0)*sj0);
IkReal x14647=(cj1*sj2);
IkReal x14648=(gconst14*r20);
IkReal x14649=(cj1*cj2);
IkReal x14650=(gconst13*x14638);
IkReal x14651=((1.0)*sj1*sj2);
IkReal x14652=((1.0)*x14637);
IkReal x14653=(gconst14*x14638);
evalcond[0]=((((-1.0)*r02*x14638))+(((-1.0)*x14645)));
evalcond[1]=((((-1.0)*gconst14*r21*x14652))+(((-1.0)*gconst13*r20*x14652)));
evalcond[2]=(((sj0*x14647))+((sj0*x14642))+(((-1.0)*r02*sj3*x14652)));
evalcond[3]=((((-1.0)*x14646*x14649))+((cj3*r02*x14637))+((sj0*sj1*sj2)));
evalcond[4]=((((-1.0)*gconst13*r10*x14652))+(((-1.0)*x14646))+(((-1.0)*x14643*x14652)));
evalcond[5]=(((r21*sj3*x14653))+x14649+((r20*sj3*x14650))+(((-1.0)*x14651))+(((-1.0)*x14639*x14648))+((cj3*x14644)));
evalcond[6]=((((-1.0)*r20*x14639*x14650))+((sj3*x14644))+x14642+x14647+(((-1.0)*sj3*x14648))+(((-1.0)*r21*x14639*x14653)));
evalcond[7]=((((-1.0)*x14642*x14645))+((x14640*x14650))+((x14641*x14653))+(((-1.0)*x14645*x14647))+(((-1.0)*gconst14*r10*x14639))+((cj3*gconst13*r11)));
evalcond[8]=((((-1.0)*x14638*x14639*x14643))+(((-1.0)*gconst14*x14640))+((cj0*x14649))+(((-1.0)*r10*x14639*x14650))+((gconst13*x14641))+(((-1.0)*sj1*sj2*x14645)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14654=IKPowWithIntegerCheck(((((-1.0)*gconst13*r10))+(((-1.0)*gconst14*r11))),-1);
if(!x14654.valid){
continue;
}
CheckValue<IkReal> x14655=IKPowWithIntegerCheck(r02,-1);
if(!x14655.valid){
continue;
}
if( IKabs((sj0*(x14654.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*(x14655.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((sj0*(x14654.value)))+IKsqr(((-1.0)*cj0*(x14655.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((sj0*(x14654.value)), ((-1.0)*cj0*(x14655.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14656=IKsin(j4);
IkReal x14657=IKcos(j4);
IkReal x14658=((1.0)*cj3);
IkReal x14659=(r10*sj3);
IkReal x14660=(r11*sj3);
IkReal x14661=(cj2*sj1);
IkReal x14662=(gconst14*r11);
IkReal x14663=(gconst13*r21);
IkReal x14664=((1.0)*cj0);
IkReal x14665=((1.0)*sj0);
IkReal x14666=(cj1*sj2);
IkReal x14667=(gconst14*r20);
IkReal x14668=(cj1*cj2);
IkReal x14669=(gconst13*x14657);
IkReal x14670=((1.0)*sj1*sj2);
IkReal x14671=((1.0)*x14656);
IkReal x14672=(gconst14*x14657);
evalcond[0]=((((-1.0)*r02*x14657))+(((-1.0)*x14664)));
evalcond[1]=((((-1.0)*gconst13*r20*x14671))+(((-1.0)*gconst14*r21*x14671)));
evalcond[2]=(((sj0*x14666))+((sj0*x14661))+(((-1.0)*r02*sj3*x14671)));
evalcond[3]=(((sj0*sj1*sj2))+(((-1.0)*x14665*x14668))+((cj3*r02*x14656)));
evalcond[4]=((((-1.0)*gconst13*r10*x14671))+(((-1.0)*x14665))+(((-1.0)*x14662*x14671)));
evalcond[5]=((((-1.0)*x14670))+((r20*sj3*x14669))+(((-1.0)*x14658*x14667))+((cj3*x14663))+x14668+((r21*sj3*x14672)));
evalcond[6]=((((-1.0)*r20*x14658*x14669))+(((-1.0)*r21*x14658*x14672))+x14661+x14666+(((-1.0)*sj3*x14667))+((sj3*x14663)));
evalcond[7]=((((-1.0)*x14664*x14666))+((x14660*x14672))+(((-1.0)*gconst14*r10*x14658))+(((-1.0)*x14661*x14664))+((x14659*x14669))+((cj3*gconst13*r11)));
evalcond[8]=((((-1.0)*sj1*sj2*x14664))+(((-1.0)*x14657*x14658*x14662))+((gconst13*x14660))+((cj0*x14668))+(((-1.0)*r10*x14658*x14669))+(((-1.0)*gconst14*x14659)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x14676 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x14676.valid){
continue;
}
IkReal x14673=((-1.0)*(x14676.value));
IkReal x14674=x14360;
IkReal x14675=((-1.0)*x14674);
sj5=gconst13;
cj5=gconst14;
j5=x14673;
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst12=x14673;
IkReal gconst13=(r10*x14675);
IkReal gconst14=(r11*x14675);
IkReal x14677=r12*r12;
IkReal x14678=((1.0)*cj0);
IkReal x14679=(r02*sj0);
CheckValue<IkReal> x14683=IKPowWithIntegerCheck(((-1.0)+x14677),-1);
if(!x14683.valid){
continue;
}
IkReal x14680=x14683.value;
if((((1.0)+(((-1.0)*x14677)))) < -0.00001)
continue;
IkReal x14681=IKsqrt(((1.0)+(((-1.0)*x14677))));
IkReal x14682=(x14680*x14681);
j4eval[0]=((IKabs(((((-1.0)*x14677*x14678*x14682))+((r12*x14679*x14682))+((cj0*x14682)))))+(IKabs(((((-1.0)*r12*x14678))+x14679))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14684=(gconst14*sj3);
IkReal x14685=(sj1*sj2);
IkReal x14686=(cj3*r02);
IkReal x14687=(gconst14*r20);
IkReal x14688=((1.0)*r20*sj3);
IkReal x14689=((1.0)*gconst13*r21);
IkReal x14690=(gconst13*r20*sj3);
IkReal x14691=((1.0)*cj1*cj2);
CheckValue<IkReal> x14692=IKPowWithIntegerCheck(((((-1.0)*gconst14*r01*r21*x14684))+(((-1.0)*r00*x14688*(gconst13*gconst13)))+(((-1.0)*r00*x14684*x14689))+(((-1.0)*gconst13*r01*r20*x14684))),-1);
if(!x14692.valid){
continue;
}
CheckValue<IkReal> x14693=IKPowWithIntegerCheck((x14690+((r21*x14684))),-1);
if(!x14693.valid){
continue;
}
if( IKabs(((x14692.value)*((((cj0*r21*x14684))+((cj0*x14690))+(((-1.0)*r02*x14691))+((x14686*x14687))+(((-1.0)*x14686*x14689))+((r02*x14685)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14693.value)*((((cj3*x14687))+(((-1.0)*x14691))+(((-1.0)*cj3*x14689))+x14685)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14692.value)*((((cj0*r21*x14684))+((cj0*x14690))+(((-1.0)*r02*x14691))+((x14686*x14687))+(((-1.0)*x14686*x14689))+((r02*x14685))))))+IKsqr(((x14693.value)*((((cj3*x14687))+(((-1.0)*x14691))+(((-1.0)*cj3*x14689))+x14685))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14692.value)*((((cj0*r21*x14684))+((cj0*x14690))+(((-1.0)*r02*x14691))+((x14686*x14687))+(((-1.0)*x14686*x14689))+((r02*x14685))))), ((x14693.value)*((((cj3*x14687))+(((-1.0)*x14691))+(((-1.0)*cj3*x14689))+x14685))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14694=IKsin(j4);
IkReal x14695=IKcos(j4);
IkReal x14696=((1.0)*sj3);
IkReal x14697=((1.0)*cj3);
IkReal x14698=(gconst14*r10);
IkReal x14699=(r11*sj3);
IkReal x14700=(cj2*sj1);
IkReal x14701=(gconst14*r00);
IkReal x14702=(gconst14*r11);
IkReal x14703=(gconst13*r21);
IkReal x14704=(r01*sj3);
IkReal x14705=(cj3*gconst13);
IkReal x14706=((1.0)*sj0);
IkReal x14707=(cj1*sj2);
IkReal x14708=(gconst14*r20);
IkReal x14709=(cj1*cj2);
IkReal x14710=((1.0)*cj0);
IkReal x14711=(r12*x14694);
IkReal x14712=(gconst13*x14695);
IkReal x14713=((1.0)*sj1*sj2);
IkReal x14714=((1.0)*x14694);
IkReal x14715=(gconst14*x14695);
IkReal x14716=((1.0)*x14695);
IkReal x14717=(r02*x14694);
evalcond[0]=((((-1.0)*gconst14*r21*x14714))+(((-1.0)*gconst13*r20*x14714)));
evalcond[1]=((((-1.0)*gconst14*r01*x14714))+(((-1.0)*r02*x14716))+(((-1.0)*gconst13*r00*x14714))+(((-1.0)*x14710)));
evalcond[2]=((((-1.0)*x14702*x14714))+(((-1.0)*x14706))+(((-1.0)*gconst13*r10*x14714))+(((-1.0)*r12*x14716)));
evalcond[3]=(((r21*sj3*x14715))+((cj3*x14703))+(((-1.0)*x14697*x14708))+(((-1.0)*x14713))+x14709+((r20*sj3*x14712)));
evalcond[4]=((((-1.0)*r20*x14697*x14712))+(((-1.0)*r21*x14697*x14715))+x14707+x14700+(((-1.0)*x14696*x14708))+((sj3*x14703)));
evalcond[5]=(((sj0*x14707))+((sj0*x14700))+(((-1.0)*x14696*x14717))+((r01*x14705))+(((-1.0)*x14697*x14701))+((x14704*x14715))+((r00*sj3*x14712)));
evalcond[6]=((((-1.0)*x14706*x14709))+((cj3*x14717))+(((-1.0)*r00*x14697*x14712))+((sj0*sj1*sj2))+(((-1.0)*x14696*x14701))+((gconst13*x14704))+(((-1.0)*r01*x14697*x14715)));
evalcond[7]=((((-1.0)*x14696*x14711))+(((-1.0)*x14707*x14710))+(((-1.0)*x14697*x14698))+((x14699*x14715))+((r11*x14705))+((r10*sj3*x14712))+(((-1.0)*x14700*x14710)));
evalcond[8]=(((cj3*x14711))+((cj0*x14709))+(((-1.0)*x14696*x14698))+(((-1.0)*sj1*sj2*x14710))+(((-1.0)*x14695*x14697*x14702))+(((-1.0)*r10*x14697*x14712))+((gconst13*x14699)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14718=((1.0)*gconst13);
CheckValue<IkReal> x14719 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r12))+((r02*sj0)))),IkReal((((cj0*gconst14*r11))+(((-1.0)*r00*sj0*x14718))+((cj0*gconst13*r10))+(((-1.0)*gconst14*r01*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14719.valid){
continue;
}
CheckValue<IkReal> x14720=IKPowWithIntegerCheck(IKsign((((gconst14*r20))+(((-1.0)*r21*x14718)))),-1);
if(!x14720.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14719.value)+(((1.5707963267949)*(x14720.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14721=IKsin(j4);
IkReal x14722=IKcos(j4);
IkReal x14723=((1.0)*sj3);
IkReal x14724=((1.0)*cj3);
IkReal x14725=(gconst14*r10);
IkReal x14726=(r11*sj3);
IkReal x14727=(cj2*sj1);
IkReal x14728=(gconst14*r00);
IkReal x14729=(gconst14*r11);
IkReal x14730=(gconst13*r21);
IkReal x14731=(r01*sj3);
IkReal x14732=(cj3*gconst13);
IkReal x14733=((1.0)*sj0);
IkReal x14734=(cj1*sj2);
IkReal x14735=(gconst14*r20);
IkReal x14736=(cj1*cj2);
IkReal x14737=((1.0)*cj0);
IkReal x14738=(r12*x14721);
IkReal x14739=(gconst13*x14722);
IkReal x14740=((1.0)*sj1*sj2);
IkReal x14741=((1.0)*x14721);
IkReal x14742=(gconst14*x14722);
IkReal x14743=((1.0)*x14722);
IkReal x14744=(r02*x14721);
evalcond[0]=((((-1.0)*gconst13*r20*x14741))+(((-1.0)*gconst14*r21*x14741)));
evalcond[1]=((((-1.0)*gconst14*r01*x14741))+(((-1.0)*gconst13*r00*x14741))+(((-1.0)*r02*x14743))+(((-1.0)*x14737)));
evalcond[2]=((((-1.0)*x14729*x14741))+(((-1.0)*gconst13*r10*x14741))+(((-1.0)*x14733))+(((-1.0)*r12*x14743)));
evalcond[3]=((((-1.0)*x14740))+((r20*sj3*x14739))+((cj3*x14730))+x14736+(((-1.0)*x14724*x14735))+((r21*sj3*x14742)));
evalcond[4]=((((-1.0)*r21*x14724*x14742))+(((-1.0)*x14723*x14735))+(((-1.0)*r20*x14724*x14739))+((sj3*x14730))+x14727+x14734);
evalcond[5]=(((r01*x14732))+((x14731*x14742))+((sj0*x14734))+((sj0*x14727))+((r00*sj3*x14739))+(((-1.0)*x14723*x14744))+(((-1.0)*x14724*x14728)));
evalcond[6]=((((-1.0)*x14723*x14728))+((gconst13*x14731))+((cj3*x14744))+(((-1.0)*r01*x14724*x14742))+((sj0*sj1*sj2))+(((-1.0)*r00*x14724*x14739))+(((-1.0)*x14733*x14736)));
evalcond[7]=((((-1.0)*x14723*x14738))+((r10*sj3*x14739))+((r11*x14732))+((x14726*x14742))+(((-1.0)*x14727*x14737))+(((-1.0)*x14734*x14737))+(((-1.0)*x14724*x14725)));
evalcond[8]=(((cj0*x14736))+(((-1.0)*x14723*x14725))+(((-1.0)*sj1*sj2*x14737))+((gconst13*x14726))+(((-1.0)*x14722*x14724*x14729))+((cj3*x14738))+(((-1.0)*r10*x14724*x14739)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14745=gconst13*gconst13;
IkReal x14746=r20*r20;
IkReal x14747=gconst14*gconst14;
IkReal x14748=r21*r21;
IkReal x14749=(gconst14*r21);
IkReal x14750=(cj1*cj2);
IkReal x14751=(gconst13*r20);
IkReal x14752=(cj3*gconst14);
IkReal x14753=((1.0)*r20);
IkReal x14754=(sj1*sj2);
IkReal x14755=(cj3*r21);
CheckValue<IkReal> x14756=IKPowWithIntegerCheck(IKsign((((sj3*(r22*r22)))+((sj3*x14745*x14746))+((sj3*x14747*x14748))+(((2.0)*sj3*x14749*x14751)))),-1);
if(!x14756.valid){
continue;
}
CheckValue<IkReal> x14757 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x14754))+((r22*x14750))+(((-1.0)*r22*x14752*x14753))+((gconst13*r22*x14755)))),IkReal((((x14749*x14754))+(((-1.0)*x14745*x14753*x14755))+((r20*x14747*x14755))+((gconst13*x14746*x14752))+(((-1.0)*x14750*x14751))+(((-1.0)*x14749*x14750))+((x14751*x14754))+(((-1.0)*gconst13*x14748*x14752)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14757.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14756.value)))+(x14757.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14758=IKsin(j4);
IkReal x14759=IKcos(j4);
IkReal x14760=((1.0)*sj3);
IkReal x14761=(cj3*gconst13);
IkReal x14762=(gconst13*sj3);
IkReal x14763=(gconst14*r10);
IkReal x14764=(cj2*sj1);
IkReal x14765=(cj3*gconst14);
IkReal x14766=((1.0)*r00);
IkReal x14767=(gconst14*r11);
IkReal x14768=(gconst14*r21);
IkReal x14769=(gconst14*r01);
IkReal x14770=((1.0)*sj0);
IkReal x14771=(cj1*sj2);
IkReal x14772=(cj1*cj2);
IkReal x14773=((1.0)*cj0);
IkReal x14774=((1.0)*x14759);
IkReal x14775=(r12*x14758);
IkReal x14776=(cj3*x14758);
IkReal x14777=((1.0)*sj1*sj2);
IkReal x14778=((1.0)*x14758);
IkReal x14779=(sj3*x14759);
evalcond[0]=((((-1.0)*x14768*x14778))+(((-1.0)*r22*x14774))+(((-1.0)*gconst13*r20*x14778)));
evalcond[1]=((((-1.0)*r02*x14774))+(((-1.0)*x14773))+(((-1.0)*gconst13*x14758*x14766))+(((-1.0)*x14769*x14778)));
evalcond[2]=((((-1.0)*x14770))+(((-1.0)*gconst13*r10*x14778))+(((-1.0)*x14767*x14778))+(((-1.0)*r12*x14774)));
evalcond[3]=((((-1.0)*r22*x14758*x14760))+(((-1.0)*r20*x14765))+(((-1.0)*x14777))+((x14768*x14779))+((r20*x14759*x14762))+((r21*x14761))+x14772);
evalcond[4]=((((-1.0)*r21*x14765*x14774))+((r22*x14776))+(((-1.0)*gconst14*r20*x14760))+((r21*x14762))+x14764+x14771+(((-1.0)*r20*x14761*x14774)));
evalcond[5]=((((-1.0)*r02*x14758*x14760))+((sj0*x14764))+((r01*x14761))+((x14769*x14779))+((r00*x14759*x14762))+((sj0*x14771))+(((-1.0)*x14765*x14766)));
evalcond[6]=((((-1.0)*x14770*x14772))+(((-1.0)*r01*x14765*x14774))+((r01*x14762))+(((-1.0)*x14759*x14761*x14766))+((sj0*sj1*sj2))+(((-1.0)*gconst14*r00*x14760))+((r02*x14776)));
evalcond[7]=((((-1.0)*x14771*x14773))+((x14767*x14779))+((r11*x14761))+(((-1.0)*cj3*x14763))+(((-1.0)*x14764*x14773))+(((-1.0)*x14760*x14775))+((r10*x14759*x14762)));
evalcond[8]=((((-1.0)*x14760*x14763))+((cj3*x14775))+(((-1.0)*sj1*sj2*x14773))+((cj0*x14772))+((r11*x14762))+(((-1.0)*r11*x14765*x14774))+(((-1.0)*r10*x14761*x14774)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14780=((1.0)*gconst13);
CheckValue<IkReal> x14781 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r12))+((r02*sj0)))),IkReal((((cj0*gconst14*r11))+((cj0*gconst13*r10))+(((-1.0)*r00*sj0*x14780))+(((-1.0)*gconst14*r01*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14781.valid){
continue;
}
CheckValue<IkReal> x14782=IKPowWithIntegerCheck(IKsign((((gconst14*r20))+(((-1.0)*r21*x14780)))),-1);
if(!x14782.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14781.value)+(((1.5707963267949)*(x14782.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14783=IKsin(j4);
IkReal x14784=IKcos(j4);
IkReal x14785=((1.0)*sj3);
IkReal x14786=(cj3*gconst13);
IkReal x14787=(gconst13*sj3);
IkReal x14788=(gconst14*r10);
IkReal x14789=(cj2*sj1);
IkReal x14790=(cj3*gconst14);
IkReal x14791=((1.0)*r00);
IkReal x14792=(gconst14*r11);
IkReal x14793=(gconst14*r21);
IkReal x14794=(gconst14*r01);
IkReal x14795=((1.0)*sj0);
IkReal x14796=(cj1*sj2);
IkReal x14797=(cj1*cj2);
IkReal x14798=((1.0)*cj0);
IkReal x14799=((1.0)*x14784);
IkReal x14800=(r12*x14783);
IkReal x14801=(cj3*x14783);
IkReal x14802=((1.0)*sj1*sj2);
IkReal x14803=((1.0)*x14783);
IkReal x14804=(sj3*x14784);
evalcond[0]=((((-1.0)*gconst13*r20*x14803))+(((-1.0)*x14793*x14803))+(((-1.0)*r22*x14799)));
evalcond[1]=((((-1.0)*r02*x14799))+(((-1.0)*x14794*x14803))+(((-1.0)*gconst13*x14783*x14791))+(((-1.0)*x14798)));
evalcond[2]=((((-1.0)*r12*x14799))+(((-1.0)*gconst13*r10*x14803))+(((-1.0)*x14792*x14803))+(((-1.0)*x14795)));
evalcond[3]=(((x14793*x14804))+((r20*x14784*x14787))+(((-1.0)*r20*x14790))+(((-1.0)*x14802))+((r21*x14786))+(((-1.0)*r22*x14783*x14785))+x14797);
evalcond[4]=(((r22*x14801))+((r21*x14787))+(((-1.0)*r20*x14786*x14799))+x14789+x14796+(((-1.0)*r21*x14790*x14799))+(((-1.0)*gconst14*r20*x14785)));
evalcond[5]=(((r01*x14786))+((sj0*x14796))+((r00*x14784*x14787))+(((-1.0)*x14790*x14791))+(((-1.0)*r02*x14783*x14785))+((x14794*x14804))+((sj0*x14789)));
evalcond[6]=((((-1.0)*r01*x14790*x14799))+((r01*x14787))+(((-1.0)*x14784*x14786*x14791))+((sj0*sj1*sj2))+(((-1.0)*x14795*x14797))+(((-1.0)*gconst14*r00*x14785))+((r02*x14801)));
evalcond[7]=((((-1.0)*x14796*x14798))+(((-1.0)*x14789*x14798))+((x14792*x14804))+((r11*x14786))+(((-1.0)*cj3*x14788))+((r10*x14784*x14787))+(((-1.0)*x14785*x14800)));
evalcond[8]=((((-1.0)*r11*x14790*x14799))+((cj3*x14800))+(((-1.0)*x14785*x14788))+((cj0*x14797))+((r11*x14787))+(((-1.0)*sj1*sj2*x14798))+(((-1.0)*r10*x14786*x14799)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14805=((1.0)*sj0);
CheckValue<IkReal> x14806 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst13*r20*x14805))+(((-1.0)*gconst14*r21*x14805)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14806.valid){
continue;
}
CheckValue<IkReal> x14807=IKPowWithIntegerCheck(IKsign((((gconst13*r01))+(((-1.0)*gconst14*r00)))),-1);
if(!x14807.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14806.value)+(((1.5707963267949)*(x14807.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14808=IKsin(j4);
IkReal x14809=IKcos(j4);
IkReal x14810=((1.0)*sj3);
IkReal x14811=(cj3*gconst13);
IkReal x14812=(gconst13*sj3);
IkReal x14813=(gconst14*r10);
IkReal x14814=(cj2*sj1);
IkReal x14815=(cj3*gconst14);
IkReal x14816=((1.0)*r00);
IkReal x14817=(gconst14*r11);
IkReal x14818=(gconst14*r21);
IkReal x14819=(gconst14*r01);
IkReal x14820=((1.0)*sj0);
IkReal x14821=(cj1*sj2);
IkReal x14822=(cj1*cj2);
IkReal x14823=((1.0)*cj0);
IkReal x14824=((1.0)*x14809);
IkReal x14825=(r12*x14808);
IkReal x14826=(cj3*x14808);
IkReal x14827=((1.0)*sj1*sj2);
IkReal x14828=((1.0)*x14808);
IkReal x14829=(sj3*x14809);
evalcond[0]=((((-1.0)*x14818*x14828))+(((-1.0)*r22*x14824))+(((-1.0)*gconst13*r20*x14828)));
evalcond[1]=((((-1.0)*gconst13*x14808*x14816))+(((-1.0)*x14819*x14828))+(((-1.0)*x14823))+(((-1.0)*r02*x14824)));
evalcond[2]=((((-1.0)*gconst13*r10*x14828))+(((-1.0)*x14817*x14828))+(((-1.0)*x14820))+(((-1.0)*r12*x14824)));
evalcond[3]=(x14822+((r21*x14811))+(((-1.0)*x14827))+(((-1.0)*r22*x14808*x14810))+((x14818*x14829))+(((-1.0)*r20*x14815))+((r20*x14809*x14812)));
evalcond[4]=((((-1.0)*gconst14*r20*x14810))+x14821+x14814+((r21*x14812))+((r22*x14826))+(((-1.0)*r20*x14811*x14824))+(((-1.0)*r21*x14815*x14824)));
evalcond[5]=((((-1.0)*x14815*x14816))+(((-1.0)*r02*x14808*x14810))+((sj0*x14821))+((r00*x14809*x14812))+((r01*x14811))+((sj0*x14814))+((x14819*x14829)));
evalcond[6]=((((-1.0)*gconst14*r00*x14810))+((r02*x14826))+(((-1.0)*x14820*x14822))+(((-1.0)*x14809*x14811*x14816))+((r01*x14812))+(((-1.0)*r01*x14815*x14824))+((sj0*sj1*sj2)));
evalcond[7]=((((-1.0)*x14814*x14823))+(((-1.0)*x14821*x14823))+((x14817*x14829))+(((-1.0)*cj3*x14813))+((r11*x14811))+(((-1.0)*x14810*x14825))+((r10*x14809*x14812)));
evalcond[8]=(((cj3*x14825))+(((-1.0)*r11*x14815*x14824))+(((-1.0)*sj1*sj2*x14823))+((cj0*x14822))+((r11*x14812))+(((-1.0)*r10*x14811*x14824))+(((-1.0)*x14810*x14813)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14832 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x14832)==0){
continue;
}
IkReal x14830=pow(x14832,-0.5);
IkReal x14831=((1.0)*x14830);
CheckValue<IkReal> x14833 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x14833.valid){
continue;
}
IkReal gconst15=((3.14159265358979)+(((-1.0)*(x14833.value))));
IkReal gconst16=(r10*x14831);
IkReal gconst17=(r11*x14831);
CheckValue<IkReal> x14834 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x14834.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5+(x14834.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
CheckValue<IkReal> x14838 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x14838.valid){
continue;
}
IkReal x14835=((1.0)*(x14838.value));
IkReal x14836=x14830;
IkReal x14837=((1.0)*x14836);
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14835)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14835)));
IkReal gconst16=(r10*x14837);
IkReal gconst17=(r11*x14837);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r12*r12))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x14842 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x14842.valid){
continue;
}
IkReal x14839=((1.0)*(x14842.value));
IkReal x14840=x14830;
IkReal x14841=((1.0)*x14840);
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14839)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14839)));
IkReal gconst16=(r10*x14841);
IkReal gconst17=(r11*x14841);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14843=((1.0)*gconst16);
CheckValue<IkReal> x14844 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r12))+((r02*sj0)))),IkReal((((cj0*gconst16*r10))+(((-1.0)*gconst17*r01*sj0))+((cj0*gconst17*r11))+(((-1.0)*r00*sj0*x14843)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14844.valid){
continue;
}
CheckValue<IkReal> x14845=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x14843))+((gconst17*r20)))),-1);
if(!x14845.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14844.value)+(((1.5707963267949)*(x14845.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14846=IKsin(j4);
IkReal x14847=IKcos(j4);
IkReal x14848=((1.0)*sj3);
IkReal x14849=(cj3*gconst17);
IkReal x14850=((1.0)*r00);
IkReal x14851=(gconst16*r10);
IkReal x14852=(gconst16*sj3);
IkReal x14853=(cj2*sj1);
IkReal x14854=(gconst17*r01);
IkReal x14855=(cj3*gconst16);
IkReal x14856=((1.0)*cj0);
IkReal x14857=(gconst17*r11);
IkReal x14858=((1.0)*sj0);
IkReal x14859=(gconst17*r21);
IkReal x14860=(cj1*cj2);
IkReal x14861=(cj1*sj2);
IkReal x14862=((1.0)*x14847);
IkReal x14863=(r12*x14846);
IkReal x14864=(cj3*x14846);
IkReal x14865=((1.0)*x14846);
IkReal x14866=((1.0)*sj1*sj2);
IkReal x14867=(sj3*x14847);
evalcond[0]=((((-1.0)*x14859*x14865))+(((-1.0)*gconst16*r20*x14865))+(((-1.0)*r22*x14862)));
evalcond[1]=((((-1.0)*r02*x14862))+(((-1.0)*gconst16*x14846*x14850))+(((-1.0)*x14856))+(((-1.0)*x14854*x14865)));
evalcond[2]=((((-1.0)*x14857*x14865))+(((-1.0)*x14851*x14865))+(((-1.0)*x14858))+(((-1.0)*r12*x14862)));
evalcond[3]=(((r21*x14855))+x14860+(((-1.0)*r22*x14846*x14848))+((r20*x14847*x14852))+(((-1.0)*r20*x14849))+((x14859*x14867))+(((-1.0)*x14866)));
evalcond[4]=(((r21*x14852))+(((-1.0)*r20*x14855*x14862))+x14861+x14853+(((-1.0)*gconst17*r20*x14848))+(((-1.0)*r21*x14849*x14862))+((r22*x14864)));
evalcond[5]=(((sj0*x14861))+((sj0*x14853))+((r00*x14847*x14852))+((x14854*x14867))+(((-1.0)*x14849*x14850))+(((-1.0)*r02*x14846*x14848))+((r01*x14855)));
evalcond[6]=((((-1.0)*r01*x14849*x14862))+((r02*x14864))+(((-1.0)*gconst17*r00*x14848))+(((-1.0)*x14847*x14850*x14855))+(((-1.0)*x14858*x14860))+((sj0*sj1*sj2))+((r01*x14852)));
evalcond[7]=((((-1.0)*x14856*x14861))+((x14857*x14867))+(((-1.0)*x14848*x14863))+((r11*x14855))+((x14851*x14867))+(((-1.0)*r10*x14849))+(((-1.0)*x14853*x14856)));
evalcond[8]=((((-1.0)*sj1*sj2*x14856))+(((-1.0)*r11*x14849*x14862))+(((-1.0)*cj3*x14851*x14862))+((r11*x14852))+(((-1.0)*gconst17*r10*x14848))+((cj3*x14863))+((cj0*x14860)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14868=((1.0)*gconst17);
CheckValue<IkReal> x14869=IKPowWithIntegerCheck(IKsign((((gconst16*r01))+(((-1.0)*r00*x14868)))),-1);
if(!x14869.valid){
continue;
}
CheckValue<IkReal> x14870 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst16*r20*sj0))+(((-1.0)*r21*sj0*x14868)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14870.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14869.value)))+(x14870.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14871=IKsin(j4);
IkReal x14872=IKcos(j4);
IkReal x14873=((1.0)*sj3);
IkReal x14874=(cj3*gconst17);
IkReal x14875=((1.0)*r00);
IkReal x14876=(gconst16*r10);
IkReal x14877=(gconst16*sj3);
IkReal x14878=(cj2*sj1);
IkReal x14879=(gconst17*r01);
IkReal x14880=(cj3*gconst16);
IkReal x14881=((1.0)*cj0);
IkReal x14882=(gconst17*r11);
IkReal x14883=((1.0)*sj0);
IkReal x14884=(gconst17*r21);
IkReal x14885=(cj1*cj2);
IkReal x14886=(cj1*sj2);
IkReal x14887=((1.0)*x14872);
IkReal x14888=(r12*x14871);
IkReal x14889=(cj3*x14871);
IkReal x14890=((1.0)*x14871);
IkReal x14891=((1.0)*sj1*sj2);
IkReal x14892=(sj3*x14872);
evalcond[0]=((((-1.0)*r22*x14887))+(((-1.0)*x14884*x14890))+(((-1.0)*gconst16*r20*x14890)));
evalcond[1]=((((-1.0)*r02*x14887))+(((-1.0)*x14879*x14890))+(((-1.0)*x14881))+(((-1.0)*gconst16*x14871*x14875)));
evalcond[2]=((((-1.0)*r12*x14887))+(((-1.0)*x14883))+(((-1.0)*x14882*x14890))+(((-1.0)*x14876*x14890)));
evalcond[3]=(x14885+(((-1.0)*r20*x14874))+((x14884*x14892))+((r21*x14880))+(((-1.0)*x14891))+(((-1.0)*r22*x14871*x14873))+((r20*x14872*x14877)));
evalcond[4]=((((-1.0)*r20*x14880*x14887))+((r22*x14889))+x14886+x14878+(((-1.0)*gconst17*r20*x14873))+((r21*x14877))+(((-1.0)*r21*x14874*x14887)));
evalcond[5]=(((r00*x14872*x14877))+((x14879*x14892))+((r01*x14880))+(((-1.0)*r02*x14871*x14873))+((sj0*x14886))+((sj0*x14878))+(((-1.0)*x14874*x14875)));
evalcond[6]=((((-1.0)*x14872*x14875*x14880))+((r01*x14877))+(((-1.0)*gconst17*r00*x14873))+((sj0*sj1*sj2))+(((-1.0)*x14883*x14885))+((r02*x14889))+(((-1.0)*r01*x14874*x14887)));
evalcond[7]=((((-1.0)*x14873*x14888))+((r11*x14880))+(((-1.0)*x14878*x14881))+((x14876*x14892))+(((-1.0)*r10*x14874))+((x14882*x14892))+(((-1.0)*x14881*x14886)));
evalcond[8]=(((r11*x14877))+((cj0*x14885))+(((-1.0)*cj3*x14876*x14887))+(((-1.0)*gconst17*r10*x14873))+((cj3*x14888))+(((-1.0)*sj1*sj2*x14881))+(((-1.0)*r11*x14874*x14887)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14893=((1.0)*gconst16);
CheckValue<IkReal> x14894=IKPowWithIntegerCheck(IKsign((((gconst17*r10))+(((-1.0)*r11*x14893)))),-1);
if(!x14894.valid){
continue;
}
CheckValue<IkReal> x14895 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x14893))+(((-1.0)*cj0*gconst17*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14895.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14894.value)))+(x14895.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14896=IKsin(j4);
IkReal x14897=IKcos(j4);
IkReal x14898=((1.0)*sj3);
IkReal x14899=(cj3*gconst17);
IkReal x14900=((1.0)*r00);
IkReal x14901=(gconst16*r10);
IkReal x14902=(gconst16*sj3);
IkReal x14903=(cj2*sj1);
IkReal x14904=(gconst17*r01);
IkReal x14905=(cj3*gconst16);
IkReal x14906=((1.0)*cj0);
IkReal x14907=(gconst17*r11);
IkReal x14908=((1.0)*sj0);
IkReal x14909=(gconst17*r21);
IkReal x14910=(cj1*cj2);
IkReal x14911=(cj1*sj2);
IkReal x14912=((1.0)*x14897);
IkReal x14913=(r12*x14896);
IkReal x14914=(cj3*x14896);
IkReal x14915=((1.0)*x14896);
IkReal x14916=((1.0)*sj1*sj2);
IkReal x14917=(sj3*x14897);
evalcond[0]=((((-1.0)*r22*x14912))+(((-1.0)*gconst16*r20*x14915))+(((-1.0)*x14909*x14915)));
evalcond[1]=((((-1.0)*gconst16*x14896*x14900))+(((-1.0)*r02*x14912))+(((-1.0)*x14906))+(((-1.0)*x14904*x14915)));
evalcond[2]=((((-1.0)*x14907*x14915))+(((-1.0)*r12*x14912))+(((-1.0)*x14908))+(((-1.0)*x14901*x14915)));
evalcond[3]=(((x14909*x14917))+((r21*x14905))+(((-1.0)*x14916))+x14910+((r20*x14897*x14902))+(((-1.0)*r20*x14899))+(((-1.0)*r22*x14896*x14898)));
evalcond[4]=(((r22*x14914))+((r21*x14902))+x14903+x14911+(((-1.0)*r21*x14899*x14912))+(((-1.0)*r20*x14905*x14912))+(((-1.0)*gconst17*r20*x14898)));
evalcond[5]=(((r01*x14905))+(((-1.0)*x14899*x14900))+((r00*x14897*x14902))+(((-1.0)*r02*x14896*x14898))+((x14904*x14917))+((sj0*x14911))+((sj0*x14903)));
evalcond[6]=(((r01*x14902))+((r02*x14914))+(((-1.0)*gconst17*r00*x14898))+(((-1.0)*x14897*x14900*x14905))+((sj0*sj1*sj2))+(((-1.0)*r01*x14899*x14912))+(((-1.0)*x14908*x14910)));
evalcond[7]=((((-1.0)*x14898*x14913))+(((-1.0)*x14903*x14906))+((r11*x14905))+((x14901*x14917))+(((-1.0)*x14906*x14911))+(((-1.0)*r10*x14899))+((x14907*x14917)));
evalcond[8]=(((cj3*x14913))+(((-1.0)*sj1*sj2*x14906))+((r11*x14902))+(((-1.0)*r11*x14899*x14912))+(((-1.0)*gconst17*r10*x14898))+(((-1.0)*cj3*x14901*x14912))+((cj0*x14910)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x14918=((1.0)*cj5);
IkReal x14919=(((r01*sj5))+(((-1.0)*r00*x14918)));
j4eval[0]=x14919;
j4eval[1]=IKsign(x14919);
j4eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*r21*x14918))+(((-1.0)*r20*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x14920=((1.0)*sj5);
IkReal x14921=(((cj5*r20))+(((-1.0)*r21*x14920)));
j4eval[0]=x14921;
j4eval[1]=IKsign(x14921);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*r00*x14920))+(((-1.0)*cj5*r01))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x14922=cj5*cj5;
IkReal x14923=(r11*sj3);
IkReal x14924=(cj5*sj5);
IkReal x14925=(r10*r20*sj3);
IkReal x14926=(x14925+(((-1.0)*x14922*x14925))+((r12*r22*sj3))+((r10*r21*sj3*x14924))+((r20*x14923*x14924))+((r21*x14922*x14923)));
j4eval[0]=x14926;
j4eval[1]=IKsign(x14926);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal x14927=((1.0)*cj5);
IkReal x14928=(((r01*sj5))+(((-1.0)*r00*x14927)));
j4eval[0]=x14928;
j4eval[1]=IKsign(x14928);
j4eval[2]=((IKabs(((((-1.0)*r21*x14927))+(((-1.0)*r20*sj5)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal x14929=((1.0)*sj5);
IkReal x14930=(((cj5*r20))+(((-1.0)*r21*x14929)));
j4eval[0]=x14930;
j4eval[1]=IKsign(x14930);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*r00*x14929))+(((-1.0)*cj5*r01))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal x14931=cj5*cj5;
IkReal x14932=r10*r10;
IkReal x14933=(cj5*r11);
IkReal x14934=(r10*sj5);
IkReal x14935=((((2.0)*x14933*x14934))+(r12*r12)+((x14931*(r11*r11)))+x14932+(((-1.0)*x14931*x14932)));
j4eval[0]=x14935;
j4eval[1]=IKsign(x14935);
j4eval[2]=((IKabs(((((-1.0)*x14934))+(((-1.0)*x14933)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14936=cj5*cj5;
IkReal x14937=r10*r10;
IkReal x14938=(cj5*r11);
IkReal x14939=(r10*sj5);
CheckValue<IkReal> x14940 = IKatan2WithCheck(IkReal(((((-1.0)*x14938))+(((-1.0)*x14939)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x14940.valid){
continue;
}
CheckValue<IkReal> x14941=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((2.0)*x14938*x14939))+x14937+((x14936*(r11*r11)))+(((-1.0)*x14936*x14937)))),-1);
if(!x14941.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14940.value)+(((1.5707963267949)*(x14941.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14942=IKcos(j4);
IkReal x14943=IKsin(j4);
IkReal x14944=(r00*sj5);
IkReal x14945=(cj5*r01);
IkReal x14946=(r20*sj5);
IkReal x14947=(cj5*r21);
IkReal x14948=(cj5*r11);
IkReal x14949=(r10*sj5);
IkReal x14950=((1.0)*x14942);
IkReal x14951=((1.0)*x14943);
evalcond[0]=(((r12*x14943))+(((-1.0)*x14948*x14950))+(((-1.0)*x14949*x14950)));
evalcond[1]=((((-1.0)*x14946*x14951))+(((-1.0)*x14947*x14951))+(((-1.0)*r22*x14950)));
evalcond[2]=((((-1.0)*x14945*x14951))+(((-1.0)*r02*x14950))+(((-1.0)*x14944*x14951)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x14950))+(((-1.0)*x14948*x14951))+(((-1.0)*x14949*x14951)));
evalcond[4]=(((cj2*sj1))+((r22*x14943))+((cj1*sj2))+(((-1.0)*x14946*x14950))+(((-1.0)*x14947*x14950)));
evalcond[5]=((((-1.0)*x14945*x14950))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x14943))+(((-1.0)*x14944*x14950)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14952=((1.0)*sj5);
CheckValue<IkReal> x14953 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x14952))+(((-1.0)*cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14953.valid){
continue;
}
CheckValue<IkReal> x14954=IKPowWithIntegerCheck(IKsign((((cj5*r20))+(((-1.0)*r21*x14952)))),-1);
if(!x14954.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14953.value)+(((1.5707963267949)*(x14954.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14955=IKcos(j4);
IkReal x14956=IKsin(j4);
IkReal x14957=(r00*sj5);
IkReal x14958=(cj5*r01);
IkReal x14959=(r20*sj5);
IkReal x14960=(cj5*r21);
IkReal x14961=(cj5*r11);
IkReal x14962=(r10*sj5);
IkReal x14963=((1.0)*x14955);
IkReal x14964=((1.0)*x14956);
evalcond[0]=(((r12*x14956))+(((-1.0)*x14962*x14963))+(((-1.0)*x14961*x14963)));
evalcond[1]=((((-1.0)*r22*x14963))+(((-1.0)*x14960*x14964))+(((-1.0)*x14959*x14964)));
evalcond[2]=((((-1.0)*r02*x14963))+(((-1.0)*x14957*x14964))+(((-1.0)*x14958*x14964)));
evalcond[3]=((-1.0)+(((-1.0)*x14962*x14964))+(((-1.0)*r12*x14963))+(((-1.0)*x14961*x14964)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x14956))+(((-1.0)*x14960*x14963))+(((-1.0)*x14959*x14963)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x14956))+(((-1.0)*x14957*x14963))+(((-1.0)*x14958*x14963)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14965=((1.0)*cj5);
CheckValue<IkReal> x14966 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x14965))+(((-1.0)*r20*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14966.valid){
continue;
}
CheckValue<IkReal> x14967=IKPowWithIntegerCheck(IKsign((((r01*sj5))+(((-1.0)*r00*x14965)))),-1);
if(!x14967.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14966.value)+(((1.5707963267949)*(x14967.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14968=IKcos(j4);
IkReal x14969=IKsin(j4);
IkReal x14970=(r00*sj5);
IkReal x14971=(cj5*r01);
IkReal x14972=(r20*sj5);
IkReal x14973=(cj5*r21);
IkReal x14974=(cj5*r11);
IkReal x14975=(r10*sj5);
IkReal x14976=((1.0)*x14968);
IkReal x14977=((1.0)*x14969);
evalcond[0]=((((-1.0)*x14975*x14976))+((r12*x14969))+(((-1.0)*x14974*x14976)));
evalcond[1]=((((-1.0)*r22*x14976))+(((-1.0)*x14973*x14977))+(((-1.0)*x14972*x14977)));
evalcond[2]=((((-1.0)*x14971*x14977))+(((-1.0)*x14970*x14977))+(((-1.0)*r02*x14976)));
evalcond[3]=((-1.0)+(((-1.0)*x14975*x14977))+(((-1.0)*r12*x14976))+(((-1.0)*x14974*x14977)));
evalcond[4]=(((cj2*sj1))+((r22*x14969))+((cj1*sj2))+(((-1.0)*x14973*x14976))+(((-1.0)*x14972*x14976)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x14969))+(((-1.0)*x14971*x14976))+(((-1.0)*x14970*x14976)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x14978=((1.0)*cj5);
IkReal x14979=(((r01*sj5))+(((-1.0)*r00*x14978)));
j4eval[0]=x14979;
j4eval[1]=IKsign(x14979);
j4eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*r21*x14978))+(((-1.0)*r20*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x14980=((1.0)*sj5);
IkReal x14981=(((cj5*r20))+(((-1.0)*r21*x14980)));
j4eval[0]=x14981;
j4eval[1]=IKsign(x14981);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*r00*x14980))+(((-1.0)*cj5*r01))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x14982=(cj2*sj1);
IkReal x14983=(r10*sj5);
IkReal x14984=(cj5*r11);
IkReal x14985=(cj1*sj2);
IkReal x14986=((((-1.0)*r01*sj5))+((cj5*r00)));
j4eval[0]=x14986;
j4eval[1]=IKsign(x14986);
j4eval[2]=((IKabs((((r12*x14982))+((r12*x14985)))))+(IKabs((((x14984*x14985))+((x14983*x14985))+((x14982*x14984))+((x14982*x14983))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14987=(cj2*sj1);
IkReal x14988=(r10*sj5);
IkReal x14989=(cj5*r11);
IkReal x14990=(cj1*sj2);
CheckValue<IkReal> x14991=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj5))+((cj5*r00)))),-1);
if(!x14991.valid){
continue;
}
CheckValue<IkReal> x14992 = IKatan2WithCheck(IkReal((((x14987*x14989))+((x14987*x14988))+((x14989*x14990))+((x14988*x14990)))),IkReal((((r12*x14990))+((r12*x14987)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14992.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14991.value)))+(x14992.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14993=IKcos(j4);
IkReal x14994=IKsin(j4);
IkReal x14995=(r00*sj5);
IkReal x14996=(cj5*r01);
IkReal x14997=(r20*sj5);
IkReal x14998=(cj5*r21);
IkReal x14999=(cj5*r11);
IkReal x15000=(r10*sj5);
IkReal x15001=((1.0)*x14993);
IkReal x15002=((1.0)*x14994);
evalcond[0]=(((x14993*x14999))+((x14993*x15000))+(((-1.0)*r12*x15002)));
evalcond[1]=((((-1.0)*x14997*x15002))+(((-1.0)*r22*x15001))+(((-1.0)*x14998*x15002)));
evalcond[2]=((((-1.0)*x14996*x15002))+(((-1.0)*r02*x15001))+(((-1.0)*x14995*x15002)));
evalcond[3]=((-1.0)+(((-1.0)*x15000*x15002))+(((-1.0)*x14999*x15002))+(((-1.0)*r12*x15001)));
evalcond[4]=(((cj2*sj1))+((x14993*x14997))+((x14993*x14998))+((cj1*sj2))+(((-1.0)*r22*x15002)));
evalcond[5]=(((x14993*x14995))+((x14993*x14996))+(((-1.0)*r02*x15002))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15003=((1.0)*sj5);
CheckValue<IkReal> x15004 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x15003))+(((-1.0)*cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15004.valid){
continue;
}
CheckValue<IkReal> x15005=IKPowWithIntegerCheck(IKsign((((cj5*r20))+(((-1.0)*r21*x15003)))),-1);
if(!x15005.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15004.value)+(((1.5707963267949)*(x15005.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15006=IKcos(j4);
IkReal x15007=IKsin(j4);
IkReal x15008=(r00*sj5);
IkReal x15009=(cj5*r01);
IkReal x15010=(r20*sj5);
IkReal x15011=(cj5*r21);
IkReal x15012=(cj5*r11);
IkReal x15013=(r10*sj5);
IkReal x15014=((1.0)*x15006);
IkReal x15015=((1.0)*x15007);
evalcond[0]=((((-1.0)*r12*x15015))+((x15006*x15013))+((x15006*x15012)));
evalcond[1]=((((-1.0)*x15010*x15015))+(((-1.0)*x15011*x15015))+(((-1.0)*r22*x15014)));
evalcond[2]=((((-1.0)*x15009*x15015))+(((-1.0)*x15008*x15015))+(((-1.0)*r02*x15014)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x15014))+(((-1.0)*x15012*x15015))+(((-1.0)*x15013*x15015)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x15015))+((x15006*x15011))+((x15006*x15010)));
evalcond[5]=(((x15006*x15008))+((x15006*x15009))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x15015)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15016=((1.0)*cj5);
CheckValue<IkReal> x15017=IKPowWithIntegerCheck(IKsign((((r01*sj5))+(((-1.0)*r00*x15016)))),-1);
if(!x15017.valid){
continue;
}
CheckValue<IkReal> x15018 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x15016))+(((-1.0)*r20*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15018.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15017.value)))+(x15018.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15019=IKcos(j4);
IkReal x15020=IKsin(j4);
IkReal x15021=(r00*sj5);
IkReal x15022=(cj5*r01);
IkReal x15023=(r20*sj5);
IkReal x15024=(cj5*r21);
IkReal x15025=(cj5*r11);
IkReal x15026=(r10*sj5);
IkReal x15027=((1.0)*x15019);
IkReal x15028=((1.0)*x15020);
evalcond[0]=((((-1.0)*r12*x15028))+((x15019*x15025))+((x15019*x15026)));
evalcond[1]=((((-1.0)*x15024*x15028))+(((-1.0)*x15023*x15028))+(((-1.0)*r22*x15027)));
evalcond[2]=((((-1.0)*r02*x15027))+(((-1.0)*x15022*x15028))+(((-1.0)*x15021*x15028)));
evalcond[3]=((-1.0)+(((-1.0)*x15026*x15028))+(((-1.0)*x15025*x15028))+(((-1.0)*r12*x15027)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x15019*x15024))+((x15019*x15023))+(((-1.0)*r22*x15028)));
evalcond[5]=((((-1.0)*r02*x15028))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x15019*x15021))+((x15019*x15022)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15029=((-1.0)*px);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15029);
rxp1_1=(px*r21);
rxp1_2=(r11*x15029);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x15030=(r10*sj5);
IkReal x15031=(cj5*r11);
j4eval[0]=((((-1.0)*x15031))+(((-1.0)*x15030)));
j4eval[1]=(((sj3*x15031))+((sj3*x15030)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x15032=((-1.0)*px);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15032);
rxp1_1=(px*r21);
rxp1_2=(r11*x15032);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=(((cj5*r11*sj3))+((r10*sj3*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x15033=((-1.0)*px);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15033);
rxp1_1=(px*r21);
rxp1_2=(r11*x15033);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=(((cj5*r11*sj3))+((r10*sj3*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15034=IKPowWithIntegerCheck(cj3,-1);
if(!x15034.valid){
continue;
}
CheckValue<IkReal> x15035=IKPowWithIntegerCheck(r02,-1);
if(!x15035.valid){
continue;
}
CheckValue<IkReal> x15036=IKPowWithIntegerCheck((((cj5*r11*sj3))+((r10*sj3*sj5))),-1);
if(!x15036.valid){
continue;
}
if( IKabs(((x15034.value)*(x15035.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15036.value)*(((((-1.0)*cj3*r11*sj5))+((cj3*cj5*r10)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15034.value)*(x15035.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))+IKsqr(((x15036.value)*(((((-1.0)*cj3*r11*sj5))+((cj3*cj5*r10))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x15034.value)*(x15035.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))), ((x15036.value)*(((((-1.0)*cj3*r11*sj5))+((cj3*cj5*r10))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15037=IKsin(j4);
IkReal x15038=IKcos(j4);
IkReal x15039=(cj2*sj1);
IkReal x15040=(cj1*sj2);
IkReal x15041=(r20*sj3);
IkReal x15042=((1.0)*cj5);
IkReal x15043=(cj3*r10);
IkReal x15044=(sj3*sj5);
IkReal x15045=(r10*sj3);
IkReal x15046=(sj1*sj2);
IkReal x15047=(cj1*cj2);
IkReal x15048=((1.0)*r20);
IkReal x15049=(cj3*r21);
IkReal x15050=(cj3*r11);
IkReal x15051=(sj5*x15038);
IkReal x15052=(sj5*x15037);
IkReal x15053=(r02*x15037);
IkReal x15054=(x15039+x15040);
IkReal x15055=(cj5*sj3*x15038);
evalcond[0]=((-1.0)*r02*x15038);
evalcond[1]=((((-1.0)*sj3*x15053))+x15054);
evalcond[2]=(x15046+(((-1.0)*x15047))+((cj3*x15053)));
evalcond[3]=((((-1.0)*x15048*x15052))+(((-1.0)*r21*x15037*x15042)));
evalcond[4]=((-1.0)+(((-1.0)*r10*x15052))+(((-1.0)*r11*x15037*x15042)));
evalcond[5]=(((sj5*x15050))+(((-1.0)*x15042*x15043))+((r10*x15038*x15044))+((r11*x15055)));
evalcond[6]=((((-1.0)*x15043*x15051))+((r11*x15044))+(((-1.0)*x15038*x15042*x15050))+(((-1.0)*x15042*x15045)));
evalcond[7]=(x15047+((r21*x15055))+((sj5*x15049))+(((-1.0)*cj3*r20*x15042))+(((-1.0)*x15046))+((x15041*x15051)));
evalcond[8]=((((-1.0)*x15041*x15042))+(((-1.0)*cj3*x15048*x15051))+x15054+(((-1.0)*x15038*x15042*x15049))+((r21*x15044)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15056=IKPowWithIntegerCheck(r02,-1);
if(!x15056.valid){
continue;
}
CheckValue<IkReal> x15057=IKPowWithIntegerCheck(sj3,-1);
if(!x15057.valid){
continue;
}
CheckValue<IkReal> x15058=IKPowWithIntegerCheck((((cj5*r11*sj3))+((r10*sj3*sj5))),-1);
if(!x15058.valid){
continue;
}
if( IKabs(((x15056.value)*(x15057.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15058.value)*(((((-1.0)*cj3*r11*sj5))+((cj3*cj5*r10)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15056.value)*(x15057.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x15058.value)*(((((-1.0)*cj3*r11*sj5))+((cj3*cj5*r10))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x15056.value)*(x15057.value)*((((cj2*sj1))+((cj1*sj2))))), ((x15058.value)*(((((-1.0)*cj3*r11*sj5))+((cj3*cj5*r10))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15059=IKsin(j4);
IkReal x15060=IKcos(j4);
IkReal x15061=(cj2*sj1);
IkReal x15062=(cj1*sj2);
IkReal x15063=(r20*sj3);
IkReal x15064=((1.0)*cj5);
IkReal x15065=(cj3*r10);
IkReal x15066=(sj3*sj5);
IkReal x15067=(r10*sj3);
IkReal x15068=(sj1*sj2);
IkReal x15069=(cj1*cj2);
IkReal x15070=((1.0)*r20);
IkReal x15071=(cj3*r21);
IkReal x15072=(cj3*r11);
IkReal x15073=(sj5*x15060);
IkReal x15074=(sj5*x15059);
IkReal x15075=(r02*x15059);
IkReal x15076=(x15062+x15061);
IkReal x15077=(cj5*sj3*x15060);
evalcond[0]=((-1.0)*r02*x15060);
evalcond[1]=(x15076+(((-1.0)*sj3*x15075)));
evalcond[2]=(((cj3*x15075))+x15068+(((-1.0)*x15069)));
evalcond[3]=((((-1.0)*r21*x15059*x15064))+(((-1.0)*x15070*x15074)));
evalcond[4]=((-1.0)+(((-1.0)*r10*x15074))+(((-1.0)*r11*x15059*x15064)));
evalcond[5]=((((-1.0)*x15064*x15065))+((sj5*x15072))+((r11*x15077))+((r10*x15060*x15066)));
evalcond[6]=((((-1.0)*x15060*x15064*x15072))+(((-1.0)*x15064*x15067))+((r11*x15066))+(((-1.0)*x15065*x15073)));
evalcond[7]=(((x15063*x15073))+((sj5*x15071))+x15069+(((-1.0)*x15068))+((r21*x15077))+(((-1.0)*cj3*r20*x15064)));
evalcond[8]=((((-1.0)*x15063*x15064))+((r21*x15066))+(((-1.0)*x15060*x15064*x15071))+(((-1.0)*cj3*x15070*x15073))+x15076);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15078=((1.0)*r11);
IkReal x15079=(r10*sj5);
CheckValue<IkReal> x15080=IKPowWithIntegerCheck(((((-1.0)*cj5*x15078))+(((-1.0)*x15079))),-1);
if(!x15080.valid){
continue;
}
CheckValue<IkReal> x15081=IKPowWithIntegerCheck((((cj5*r11*sj3))+((sj3*x15079))),-1);
if(!x15081.valid){
continue;
}
if( IKabs(x15080.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15081.value)*((((cj3*cj5*r10))+(((-1.0)*cj3*sj5*x15078)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x15080.value)+IKsqr(((x15081.value)*((((cj3*cj5*r10))+(((-1.0)*cj3*sj5*x15078))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x15080.value, ((x15081.value)*((((cj3*cj5*r10))+(((-1.0)*cj3*sj5*x15078))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15082=IKsin(j4);
IkReal x15083=IKcos(j4);
IkReal x15084=(cj2*sj1);
IkReal x15085=(cj1*sj2);
IkReal x15086=(r20*sj3);
IkReal x15087=((1.0)*cj5);
IkReal x15088=(cj3*r10);
IkReal x15089=(sj3*sj5);
IkReal x15090=(r10*sj3);
IkReal x15091=(sj1*sj2);
IkReal x15092=(cj1*cj2);
IkReal x15093=((1.0)*r20);
IkReal x15094=(cj3*r21);
IkReal x15095=(cj3*r11);
IkReal x15096=(sj5*x15083);
IkReal x15097=(sj5*x15082);
IkReal x15098=(r02*x15082);
IkReal x15099=(x15085+x15084);
IkReal x15100=(cj5*sj3*x15083);
evalcond[0]=((-1.0)*r02*x15083);
evalcond[1]=(x15099+(((-1.0)*sj3*x15098)));
evalcond[2]=(x15091+(((-1.0)*x15092))+((cj3*x15098)));
evalcond[3]=((((-1.0)*x15093*x15097))+(((-1.0)*r21*x15082*x15087)));
evalcond[4]=((-1.0)+(((-1.0)*r10*x15097))+(((-1.0)*r11*x15082*x15087)));
evalcond[5]=(((r10*x15083*x15089))+((sj5*x15095))+(((-1.0)*x15087*x15088))+((r11*x15100)));
evalcond[6]=((((-1.0)*x15083*x15087*x15095))+(((-1.0)*x15087*x15090))+((r11*x15089))+(((-1.0)*x15088*x15096)));
evalcond[7]=(((x15086*x15096))+(((-1.0)*cj3*r20*x15087))+((sj5*x15094))+((r21*x15100))+x15092+(((-1.0)*x15091)));
evalcond[8]=((((-1.0)*x15086*x15087))+(((-1.0)*x15083*x15087*x15094))+x15099+(((-1.0)*cj3*x15093*x15096))+((r21*x15089)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15101=cj5*cj5;
IkReal x15102=(cj3*r20);
IkReal x15103=(cj5*sj5);
IkReal x15104=(cj3*r11);
IkReal x15105=(r20*sj3);
IkReal x15106=(r21*sj3);
IkReal x15107=(r11*x15101);
IkReal x15108=(r10*x15101);
CheckValue<IkReal> x15109=IKPowWithIntegerCheck(IKsign(((((-1.0)*x15105*x15108))+((x15106*x15107))+((r10*x15103*x15106))+((r11*x15103*x15105))+((r10*x15105))+((r12*r22*sj3)))),-1);
if(!x15109.valid){
continue;
}
CheckValue<IkReal> x15110 = IKatan2WithCheck(IkReal(((((-1.0)*cj3*cj5*r10*r22))+((r22*sj5*x15104)))),IkReal(((((-1.0)*r21*x15103*x15104))+((cj3*r21*x15108))+(((-1.0)*r11*x15102))+((x15102*x15107))+((r10*x15102*x15103)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15110.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15109.value)))+(x15110.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15111=IKsin(j4);
IkReal x15112=IKcos(j4);
IkReal x15113=(cj2*sj1);
IkReal x15114=(cj1*sj2);
IkReal x15115=((1.0)*sj3);
IkReal x15116=(sj3*sj5);
IkReal x15117=(cj5*r10);
IkReal x15118=((1.0)*cj3);
IkReal x15119=(cj5*r20);
IkReal x15120=(sj1*sj2);
IkReal x15121=(r00*sj5);
IkReal x15122=(cj5*r01);
IkReal x15123=(cj5*r00);
IkReal x15124=(r20*sj5);
IkReal x15125=(cj5*r21);
IkReal x15126=(cj1*cj2);
IkReal x15127=(cj3*sj5);
IkReal x15128=(cj5*r11);
IkReal x15129=((1.0)*x15112);
IkReal x15130=(r12*x15111);
IkReal x15131=(cj3*x15111);
IkReal x15132=((1.0)*x15111);
IkReal x15133=(x15114+x15113);
IkReal x15134=(cj5*sj3*x15112);
evalcond[0]=((((-1.0)*x15124*x15132))+(((-1.0)*r22*x15129))+(((-1.0)*x15125*x15132)));
evalcond[1]=((((-1.0)*r02*x15129))+(((-1.0)*x15121*x15132))+(((-1.0)*x15122*x15132)));
evalcond[2]=((-1.0)+(((-1.0)*x15128*x15132))+(((-1.0)*r12*x15129))+(((-1.0)*r10*sj5*x15132)));
evalcond[3]=((((-1.0)*x15115*x15130))+(((-1.0)*x15117*x15118))+((sj3*x15112*x15128))+((r10*x15112*x15116))+((r11*x15127)));
evalcond[4]=(((r11*x15116))+(((-1.0)*x15115*x15117))+(((-1.0)*x15112*x15118*x15128))+(((-1.0)*r10*sj5*x15112*x15118))+((cj3*x15130)));
evalcond[5]=((((-1.0)*r02*x15111*x15115))+((r01*x15127))+((sj3*x15112*x15122))+x15133+(((-1.0)*x15118*x15123))+((r00*x15112*x15116)));
evalcond[6]=((((-1.0)*x15118*x15119))+((r21*x15127))+((r20*x15112*x15116))+(((-1.0)*r22*x15111*x15115))+((sj3*x15112*x15125))+x15126+(((-1.0)*x15120)));
evalcond[7]=(((r22*x15131))+(((-1.0)*x15115*x15119))+x15133+(((-1.0)*x15112*x15118*x15124))+(((-1.0)*x15112*x15118*x15125))+((r21*x15116)));
evalcond[8]=((((-1.0)*x15115*x15123))+x15120+(((-1.0)*x15112*x15118*x15122))+(((-1.0)*x15112*x15118*x15121))+(((-1.0)*x15126))+((r01*x15116))+((r02*x15131)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15135=((1.0)*sj5);
CheckValue<IkReal> x15136=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x15135))+((cj5*r20)))),-1);
if(!x15136.valid){
continue;
}
CheckValue<IkReal> x15137 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x15135))+(((-1.0)*cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15137.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15136.value)))+(x15137.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15138=IKsin(j4);
IkReal x15139=IKcos(j4);
IkReal x15140=(cj2*sj1);
IkReal x15141=(cj1*sj2);
IkReal x15142=((1.0)*sj3);
IkReal x15143=(sj3*sj5);
IkReal x15144=(cj5*r10);
IkReal x15145=((1.0)*cj3);
IkReal x15146=(cj5*r20);
IkReal x15147=(sj1*sj2);
IkReal x15148=(r00*sj5);
IkReal x15149=(cj5*r01);
IkReal x15150=(cj5*r00);
IkReal x15151=(r20*sj5);
IkReal x15152=(cj5*r21);
IkReal x15153=(cj1*cj2);
IkReal x15154=(cj3*sj5);
IkReal x15155=(cj5*r11);
IkReal x15156=((1.0)*x15139);
IkReal x15157=(r12*x15138);
IkReal x15158=(cj3*x15138);
IkReal x15159=((1.0)*x15138);
IkReal x15160=(x15140+x15141);
IkReal x15161=(cj5*sj3*x15139);
evalcond[0]=((((-1.0)*r22*x15156))+(((-1.0)*x15152*x15159))+(((-1.0)*x15151*x15159)));
evalcond[1]=((((-1.0)*r02*x15156))+(((-1.0)*x15149*x15159))+(((-1.0)*x15148*x15159)));
evalcond[2]=((-1.0)+(((-1.0)*x15155*x15159))+(((-1.0)*r10*sj5*x15159))+(((-1.0)*r12*x15156)));
evalcond[3]=((((-1.0)*x15144*x15145))+(((-1.0)*x15142*x15157))+((r11*x15154))+((r10*x15139*x15143))+((sj3*x15139*x15155)));
evalcond[4]=(((cj3*x15157))+((r11*x15143))+(((-1.0)*x15139*x15145*x15155))+(((-1.0)*x15142*x15144))+(((-1.0)*r10*sj5*x15139*x15145)));
evalcond[5]=((((-1.0)*x15145*x15150))+((r01*x15154))+x15160+((sj3*x15139*x15149))+(((-1.0)*r02*x15138*x15142))+((r00*x15139*x15143)));
evalcond[6]=(((r21*x15154))+(((-1.0)*x15147))+x15153+(((-1.0)*r22*x15138*x15142))+(((-1.0)*x15145*x15146))+((sj3*x15139*x15152))+((r20*x15139*x15143)));
evalcond[7]=((((-1.0)*x15139*x15145*x15152))+(((-1.0)*x15139*x15145*x15151))+((r22*x15158))+x15160+(((-1.0)*x15142*x15146))+((r21*x15143)));
evalcond[8]=((((-1.0)*x15139*x15145*x15148))+(((-1.0)*x15139*x15145*x15149))+x15147+((r01*x15143))+(((-1.0)*x15153))+(((-1.0)*x15142*x15150))+((r02*x15158)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15162=((1.0)*cj5);
CheckValue<IkReal> x15163=IKPowWithIntegerCheck(IKsign((((r01*sj5))+(((-1.0)*r00*x15162)))),-1);
if(!x15163.valid){
continue;
}
CheckValue<IkReal> x15164 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x15162))+(((-1.0)*r20*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15164.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15163.value)))+(x15164.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15165=IKsin(j4);
IkReal x15166=IKcos(j4);
IkReal x15167=(cj2*sj1);
IkReal x15168=(cj1*sj2);
IkReal x15169=((1.0)*sj3);
IkReal x15170=(sj3*sj5);
IkReal x15171=(cj5*r10);
IkReal x15172=((1.0)*cj3);
IkReal x15173=(cj5*r20);
IkReal x15174=(sj1*sj2);
IkReal x15175=(r00*sj5);
IkReal x15176=(cj5*r01);
IkReal x15177=(cj5*r00);
IkReal x15178=(r20*sj5);
IkReal x15179=(cj5*r21);
IkReal x15180=(cj1*cj2);
IkReal x15181=(cj3*sj5);
IkReal x15182=(cj5*r11);
IkReal x15183=((1.0)*x15166);
IkReal x15184=(r12*x15165);
IkReal x15185=(cj3*x15165);
IkReal x15186=((1.0)*x15165);
IkReal x15187=(x15168+x15167);
IkReal x15188=(cj5*sj3*x15166);
evalcond[0]=((((-1.0)*x15178*x15186))+(((-1.0)*x15179*x15186))+(((-1.0)*r22*x15183)));
evalcond[1]=((((-1.0)*x15175*x15186))+(((-1.0)*r02*x15183))+(((-1.0)*x15176*x15186)));
evalcond[2]=((-1.0)+(((-1.0)*x15182*x15186))+(((-1.0)*r12*x15183))+(((-1.0)*r10*sj5*x15186)));
evalcond[3]=(((r10*x15166*x15170))+(((-1.0)*x15171*x15172))+((r11*x15181))+((sj3*x15166*x15182))+(((-1.0)*x15169*x15184)));
evalcond[4]=((((-1.0)*r10*sj5*x15166*x15172))+(((-1.0)*x15166*x15172*x15182))+((r11*x15170))+((cj3*x15184))+(((-1.0)*x15169*x15171)));
evalcond[5]=(((sj3*x15166*x15176))+((r00*x15166*x15170))+(((-1.0)*r02*x15165*x15169))+x15187+((r01*x15181))+(((-1.0)*x15172*x15177)));
evalcond[6]=((((-1.0)*r22*x15165*x15169))+((sj3*x15166*x15179))+(((-1.0)*x15174))+x15180+((r21*x15181))+((r20*x15166*x15170))+(((-1.0)*x15172*x15173)));
evalcond[7]=((((-1.0)*x15166*x15172*x15179))+(((-1.0)*x15166*x15172*x15178))+x15187+((r21*x15170))+((r22*x15185))+(((-1.0)*x15169*x15173)));
evalcond[8]=((((-1.0)*x15180))+((r02*x15185))+(((-1.0)*x15166*x15172*x15176))+(((-1.0)*x15166*x15172*x15175))+x15174+(((-1.0)*x15169*x15177))+((r01*x15170)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x15189=((1.0)*sj5);
IkReal x15190=((((-1.0)*r01*x15189))+((cj5*r00)));
j4eval[0]=x15190;
j4eval[1]=IKsign(x15190);
j4eval[2]=((IKabs(((((-1.0)*r20*x15189))+(((-1.0)*cj5*r21)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x15191=((1.0)*cj5);
IkReal x15192=(((r21*sj5))+(((-1.0)*r20*x15191)));
j4eval[0]=x15192;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r00*sj5))+(((-1.0)*r01*x15191))))));
j4eval[2]=IKsign(x15192);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x15193=cj5*cj5;
IkReal x15194=(r11*sj3);
IkReal x15195=(cj5*sj5);
IkReal x15196=(r10*r20*sj3);
IkReal x15197=(((r20*x15194*x15195))+((r10*r21*sj3*x15195))+x15196+((r21*x15193*x15194))+((r12*r22*sj3))+(((-1.0)*x15193*x15196)));
j4eval[0]=x15197;
j4eval[1]=IKsign(x15197);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal x15198=((1.0)*sj5);
IkReal x15199=((((-1.0)*r01*x15198))+((cj5*r00)));
j4eval[0]=x15199;
j4eval[1]=IKsign(x15199);
j4eval[2]=((IKabs(((((-1.0)*cj5*r21))+(((-1.0)*r20*x15198)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal x15200=((1.0)*cj5);
IkReal x15201=((((-1.0)*r20*x15200))+((r21*sj5)));
j4eval[0]=x15201;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r00*sj5))+(((-1.0)*r01*x15200))))));
j4eval[2]=IKsign(x15201);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal x15202=cj5*cj5;
IkReal x15203=r10*r10;
IkReal x15204=(cj5*r11);
IkReal x15205=(r10*sj5);
IkReal x15206=(((x15202*x15203))+(((-1.0)*x15203))+(((-2.0)*x15204*x15205))+(((-1.0)*(r12*r12)))+(((-1.0)*x15202*(r11*r11))));
j4eval[0]=x15206;
j4eval[1]=IKsign(x15206);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x15205))+(((-1.0)*x15204))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15207=cj5*cj5;
IkReal x15208=r10*r10;
IkReal x15209=(cj5*r11);
IkReal x15210=(r10*sj5);
CheckValue<IkReal> x15211=IKPowWithIntegerCheck(IKsign(((((-1.0)*x15207*(r11*r11)))+(((-1.0)*x15208))+(((-1.0)*(r12*r12)))+(((-2.0)*x15209*x15210))+((x15207*x15208)))),-1);
if(!x15211.valid){
continue;
}
CheckValue<IkReal> x15212 = IKatan2WithCheck(IkReal(((((-1.0)*x15209))+(((-1.0)*x15210)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x15212.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15211.value)))+(x15212.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15213=IKcos(j4);
IkReal x15214=IKsin(j4);
IkReal x15215=(r00*sj5);
IkReal x15216=(cj5*r01);
IkReal x15217=(r20*sj5);
IkReal x15218=(cj5*r21);
IkReal x15219=(cj5*r11);
IkReal x15220=(r10*sj5);
IkReal x15221=((1.0)*x15213);
IkReal x15222=((1.0)*x15214);
evalcond[0]=((((-1.0)*x15220*x15221))+((r12*x15214))+(((-1.0)*x15219*x15221)));
evalcond[1]=((((-1.0)*x15218*x15222))+(((-1.0)*x15217*x15222))+(((-1.0)*r22*x15221)));
evalcond[2]=((((-1.0)*r02*x15221))+(((-1.0)*x15216*x15222))+(((-1.0)*x15215*x15222)));
evalcond[3]=((1.0)+(((-1.0)*x15220*x15222))+(((-1.0)*r12*x15221))+(((-1.0)*x15219*x15222)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x15218*x15221))+((cj1*sj2))+((r22*x15214))+(((-1.0)*x15217*x15221)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*x15216*x15221))+(((-1.0)*x15215*x15221))+((cj1*cj2))+((r02*x15214)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15223=((1.0)*cj5);
CheckValue<IkReal> x15224 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*sj5))+(((-1.0)*r01*x15223)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15224.valid){
continue;
}
CheckValue<IkReal> x15225=IKPowWithIntegerCheck(IKsign((((r21*sj5))+(((-1.0)*r20*x15223)))),-1);
if(!x15225.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15224.value)+(((1.5707963267949)*(x15225.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15226=IKcos(j4);
IkReal x15227=IKsin(j4);
IkReal x15228=(r00*sj5);
IkReal x15229=(cj5*r01);
IkReal x15230=(r20*sj5);
IkReal x15231=(cj5*r21);
IkReal x15232=(cj5*r11);
IkReal x15233=(r10*sj5);
IkReal x15234=((1.0)*x15226);
IkReal x15235=((1.0)*x15227);
evalcond[0]=(((r12*x15227))+(((-1.0)*x15232*x15234))+(((-1.0)*x15233*x15234)));
evalcond[1]=((((-1.0)*x15230*x15235))+(((-1.0)*x15231*x15235))+(((-1.0)*r22*x15234)));
evalcond[2]=((((-1.0)*x15228*x15235))+(((-1.0)*r02*x15234))+(((-1.0)*x15229*x15235)));
evalcond[3]=((1.0)+(((-1.0)*x15232*x15235))+(((-1.0)*x15233*x15235))+(((-1.0)*r12*x15234)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x15230*x15234))+((r22*x15227))+(((-1.0)*x15231*x15234))+((cj1*sj2)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*x15228*x15234))+((r02*x15227))+((cj1*cj2))+(((-1.0)*x15229*x15234)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15236=((1.0)*sj5);
CheckValue<IkReal> x15237=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x15236))+((cj5*r00)))),-1);
if(!x15237.valid){
continue;
}
CheckValue<IkReal> x15238 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x15236))+(((-1.0)*cj5*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15238.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15237.value)))+(x15238.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15239=IKcos(j4);
IkReal x15240=IKsin(j4);
IkReal x15241=(r00*sj5);
IkReal x15242=(cj5*r01);
IkReal x15243=(r20*sj5);
IkReal x15244=(cj5*r21);
IkReal x15245=(cj5*r11);
IkReal x15246=(r10*sj5);
IkReal x15247=((1.0)*x15239);
IkReal x15248=((1.0)*x15240);
evalcond[0]=((((-1.0)*x15246*x15247))+((r12*x15240))+(((-1.0)*x15245*x15247)));
evalcond[1]=((((-1.0)*r22*x15247))+(((-1.0)*x15244*x15248))+(((-1.0)*x15243*x15248)));
evalcond[2]=((((-1.0)*x15242*x15248))+(((-1.0)*r02*x15247))+(((-1.0)*x15241*x15248)));
evalcond[3]=((1.0)+(((-1.0)*x15246*x15248))+(((-1.0)*r12*x15247))+(((-1.0)*x15245*x15248)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x15240))+(((-1.0)*x15244*x15247))+(((-1.0)*x15243*x15247)));
evalcond[5]=((((-1.0)*x15242*x15247))+(((-1.0)*sj1*sj2))+(((-1.0)*x15241*x15247))+((cj1*cj2))+((r02*x15240)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x15249=((1.0)*sj5);
IkReal x15250=((((-1.0)*r01*x15249))+((cj5*r00)));
j4eval[0]=x15250;
j4eval[1]=IKsign(x15250);
j4eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*cj5*r21))+(((-1.0)*r20*x15249))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x15251=((1.0)*cj5);
IkReal x15252=(((r21*sj5))+(((-1.0)*r20*x15251)));
j4eval[0]=x15252;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r00*sj5))+(((-1.0)*r01*x15251))))));
j4eval[2]=IKsign(x15252);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x15253=cj5*cj5;
IkReal x15254=r10*r10;
IkReal x15255=(cj5*r11);
IkReal x15256=(r10*sj5);
IkReal x15257=((((2.0)*x15255*x15256))+(r12*r12)+(((-1.0)*x15253*x15254))+x15254+((x15253*(r11*r11))));
j4eval[0]=x15257;
j4eval[1]=((IKabs(r12))+(IKabs((x15255+x15256))));
j4eval[2]=IKsign(x15257);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15258=cj5*cj5;
IkReal x15259=r10*r10;
IkReal x15260=(r10*sj5);
IkReal x15261=(cj5*r11);
CheckValue<IkReal> x15262 = IKatan2WithCheck(IkReal((x15261+x15260)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x15262.valid){
continue;
}
CheckValue<IkReal> x15263=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-1.0)*x15258*x15259))+(((2.0)*x15260*x15261))+x15259+((x15258*(r11*r11))))),-1);
if(!x15263.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15262.value)+(((1.5707963267949)*(x15263.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15264=IKcos(j4);
IkReal x15265=IKsin(j4);
IkReal x15266=(r00*sj5);
IkReal x15267=(cj5*r01);
IkReal x15268=(r20*sj5);
IkReal x15269=(cj5*r21);
IkReal x15270=(cj5*r11);
IkReal x15271=(r10*sj5);
IkReal x15272=((1.0)*x15264);
IkReal x15273=((1.0)*x15265);
evalcond[0]=(((x15264*x15270))+((x15264*x15271))+(((-1.0)*r12*x15273)));
evalcond[1]=((((-1.0)*x15268*x15273))+(((-1.0)*r22*x15272))+(((-1.0)*x15269*x15273)));
evalcond[2]=((((-1.0)*r02*x15272))+(((-1.0)*x15267*x15273))+(((-1.0)*x15266*x15273)));
evalcond[3]=((1.0)+(((-1.0)*x15271*x15273))+(((-1.0)*x15270*x15273))+(((-1.0)*r12*x15272)));
evalcond[4]=(((x15264*x15268))+((x15264*x15269))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x15273)));
evalcond[5]=(((x15264*x15267))+((x15264*x15266))+(((-1.0)*r02*x15273))+(((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15274=((1.0)*cj5);
CheckValue<IkReal> x15275=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x15274))+((r21*sj5)))),-1);
if(!x15275.valid){
continue;
}
CheckValue<IkReal> x15276 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*x15274))+(((-1.0)*r00*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15276.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15275.value)))+(x15276.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15277=IKcos(j4);
IkReal x15278=IKsin(j4);
IkReal x15279=(r00*sj5);
IkReal x15280=(cj5*r01);
IkReal x15281=(r20*sj5);
IkReal x15282=(cj5*r21);
IkReal x15283=(cj5*r11);
IkReal x15284=(r10*sj5);
IkReal x15285=((1.0)*x15277);
IkReal x15286=((1.0)*x15278);
evalcond[0]=((((-1.0)*r12*x15286))+((x15277*x15284))+((x15277*x15283)));
evalcond[1]=((((-1.0)*x15281*x15286))+(((-1.0)*x15282*x15286))+(((-1.0)*r22*x15285)));
evalcond[2]=((((-1.0)*x15280*x15286))+(((-1.0)*r02*x15285))+(((-1.0)*x15279*x15286)));
evalcond[3]=((1.0)+(((-1.0)*r12*x15285))+(((-1.0)*x15283*x15286))+(((-1.0)*x15284*x15286)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x15286))+((x15277*x15281))+((x15277*x15282)));
evalcond[5]=(((x15277*x15279))+(((-1.0)*sj1*sj2))+(((-1.0)*r02*x15286))+((cj1*cj2))+((x15277*x15280)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15287=((1.0)*sj5);
CheckValue<IkReal> x15288=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x15287))+((cj5*r00)))),-1);
if(!x15288.valid){
continue;
}
CheckValue<IkReal> x15289 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*cj5*r21))+(((-1.0)*r20*x15287)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15289.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15288.value)))+(x15289.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15290=IKcos(j4);
IkReal x15291=IKsin(j4);
IkReal x15292=(r00*sj5);
IkReal x15293=(cj5*r01);
IkReal x15294=(r20*sj5);
IkReal x15295=(cj5*r21);
IkReal x15296=(cj5*r11);
IkReal x15297=(r10*sj5);
IkReal x15298=((1.0)*x15290);
IkReal x15299=((1.0)*x15291);
evalcond[0]=((((-1.0)*r12*x15299))+((x15290*x15296))+((x15290*x15297)));
evalcond[1]=((((-1.0)*x15294*x15299))+(((-1.0)*r22*x15298))+(((-1.0)*x15295*x15299)));
evalcond[2]=((((-1.0)*x15293*x15299))+(((-1.0)*x15292*x15299))+(((-1.0)*r02*x15298)));
evalcond[3]=((1.0)+(((-1.0)*r12*x15298))+(((-1.0)*x15296*x15299))+(((-1.0)*x15297*x15299)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x15299))+((x15290*x15295))+((x15290*x15294)));
evalcond[5]=((((-1.0)*sj1*sj2))+((cj1*cj2))+((x15290*x15292))+((x15290*x15293))+(((-1.0)*r02*x15299)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15301 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x15301)==0){
continue;
}
IkReal x15300=pow(x15301,-0.5);
CheckValue<IkReal> x15302 = IKatan2WithCheck(IkReal(((-1.0)*r20)),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x15302.valid){
continue;
}
IkReal gconst54=((-1.0)*(x15302.value));
IkReal gconst55=(r20*x15300);
IkReal gconst56=(r21*x15300);
CheckValue<IkReal> x15303 = IKatan2WithCheck(IkReal(((-1.0)*r20)),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x15303.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x15303.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x15306 = IKatan2WithCheck(IkReal(((-1.0)*r20)),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x15306.valid){
continue;
}
IkReal x15304=((-1.0)*(x15306.value));
IkReal x15305=x15300;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst55;
cj5=gconst56;
j5=x15304;
IkReal gconst54=x15304;
IkReal gconst55=(r20*x15305);
IkReal gconst56=(r21*x15305);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15307=gconst56*gconst56;
IkReal x15308=gconst55*gconst55;
IkReal x15309=(r00*r10);
IkReal x15310=(r01*r11);
IkReal x15311=(r00*r11);
IkReal x15312=((1.0)*cj3);
IkReal x15313=(r01*r10);
IkReal x15314=(cj3*gconst55*gconst56);
IkReal x15315=(gconst55*gconst56*sj3);
CheckValue<IkReal> x15316 = IKatan2WithCheck(IkReal((((cj3*gconst55*r02*r11))+(((-1.0)*gconst56*r02*r10*x15312)))),IkReal((((x15309*x15314))+((cj3*x15307*x15313))+(((-1.0)*gconst55*gconst56*x15310*x15312))+(((-1.0)*x15308*x15311*x15312)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15316.valid){
continue;
}
CheckValue<IkReal> x15317=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+((sj3*x15308*x15309))+((sj3*x15307*x15310))+((x15313*x15315))+((x15311*x15315)))),-1);
if(!x15317.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15316.value)+(((1.5707963267949)*(x15317.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15318=IKsin(j4);
IkReal x15319=IKcos(j4);
IkReal x15320=(cj1*cj2);
IkReal x15321=(gconst56*r11);
IkReal x15322=((1.0)*sj2);
IkReal x15323=(cj3*gconst55);
IkReal x15324=(gconst56*r21);
IkReal x15325=(gconst55*r20);
IkReal x15326=(gconst55*r10);
IkReal x15327=(gconst56*sj3);
IkReal x15328=((1.0)*r00);
IkReal x15329=(gconst55*r00);
IkReal x15330=(cj2*sj1);
IkReal x15331=(gconst55*sj3);
IkReal x15332=(cj3*gconst56);
IkReal x15333=((1.0)*r10);
IkReal x15334=((1.0)*r20);
IkReal x15335=(sj1*x15322);
IkReal x15336=((1.0)*x15319);
IkReal x15337=((1.0)*x15318);
IkReal x15338=(cj3*x15318);
IkReal x15339=(sj3*x15319);
evalcond[0]=((((-1.0)*x15324*x15337))+(((-1.0)*x15325*x15337))+(((-1.0)*r22*x15336)));
evalcond[1]=((((-1.0)*gconst55*x15318*x15328))+(((-1.0)*r02*x15336))+(((-1.0)*gconst56*r01*x15337)));
evalcond[2]=((1.0)+(((-1.0)*x15321*x15337))+(((-1.0)*r12*x15336))+(((-1.0)*x15326*x15337)));
evalcond[3]=(((r11*x15323))+(((-1.0)*x15332*x15333))+(((-1.0)*r12*sj3*x15337))+((x15326*x15339))+((x15321*x15339)));
evalcond[4]=(((r12*x15338))+(((-1.0)*cj3*x15321*x15336))+((r11*x15331))+(((-1.0)*x15319*x15323*x15333))+(((-1.0)*x15327*x15333)));
evalcond[5]=((((-1.0)*x15332*x15334))+x15320+(((-1.0)*r22*sj3*x15337))+(((-1.0)*x15335))+((x15324*x15339))+((x15325*x15339))+((r21*x15323)));
evalcond[6]=(((cj1*sj2))+x15330+(((-1.0)*cj3*x15324*x15336))+((r21*x15331))+(((-1.0)*x15319*x15323*x15334))+((r22*x15338))+(((-1.0)*x15327*x15334)));
evalcond[7]=((((-1.0)*x15330))+((r01*x15319*x15327))+((x15329*x15339))+(((-1.0)*cj1*x15322))+((r01*x15323))+(((-1.0)*r02*sj3*x15337))+(((-1.0)*x15328*x15332)));
evalcond[8]=(((r01*x15331))+(((-1.0)*x15319*x15323*x15328))+(((-1.0)*r01*x15332*x15336))+x15320+(((-1.0)*x15335))+(((-1.0)*x15327*x15328))+((r02*x15338)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15340=((1.0)*gconst55);
CheckValue<IkReal> x15341=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x15340))+((gconst56*r00)))),-1);
if(!x15341.valid){
continue;
}
CheckValue<IkReal> x15342 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst56*r21))+(((-1.0)*r20*x15340)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15342.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15341.value)))+(x15342.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15343=IKsin(j4);
IkReal x15344=IKcos(j4);
IkReal x15345=(cj1*cj2);
IkReal x15346=(gconst56*r11);
IkReal x15347=((1.0)*sj2);
IkReal x15348=(cj3*gconst55);
IkReal x15349=(gconst56*r21);
IkReal x15350=(gconst55*r20);
IkReal x15351=(gconst55*r10);
IkReal x15352=(gconst56*sj3);
IkReal x15353=((1.0)*r00);
IkReal x15354=(gconst55*r00);
IkReal x15355=(cj2*sj1);
IkReal x15356=(gconst55*sj3);
IkReal x15357=(cj3*gconst56);
IkReal x15358=((1.0)*r10);
IkReal x15359=((1.0)*r20);
IkReal x15360=(sj1*x15347);
IkReal x15361=((1.0)*x15344);
IkReal x15362=((1.0)*x15343);
IkReal x15363=(cj3*x15343);
IkReal x15364=(sj3*x15344);
evalcond[0]=((((-1.0)*x15350*x15362))+(((-1.0)*x15349*x15362))+(((-1.0)*r22*x15361)));
evalcond[1]=((((-1.0)*r02*x15361))+(((-1.0)*gconst55*x15343*x15353))+(((-1.0)*gconst56*r01*x15362)));
evalcond[2]=((1.0)+(((-1.0)*r12*x15361))+(((-1.0)*x15346*x15362))+(((-1.0)*x15351*x15362)));
evalcond[3]=((((-1.0)*r12*sj3*x15362))+((r11*x15348))+(((-1.0)*x15357*x15358))+((x15351*x15364))+((x15346*x15364)));
evalcond[4]=((((-1.0)*x15344*x15348*x15358))+(((-1.0)*cj3*x15346*x15361))+(((-1.0)*x15352*x15358))+((r12*x15363))+((r11*x15356)));
evalcond[5]=(((r21*x15348))+((x15350*x15364))+(((-1.0)*r22*sj3*x15362))+(((-1.0)*x15360))+x15345+((x15349*x15364))+(((-1.0)*x15357*x15359)));
evalcond[6]=((((-1.0)*cj3*x15349*x15361))+(((-1.0)*x15344*x15348*x15359))+((r22*x15363))+((cj1*sj2))+(((-1.0)*x15352*x15359))+x15355+((r21*x15356)));
evalcond[7]=((((-1.0)*cj1*x15347))+((r01*x15348))+((r01*x15344*x15352))+(((-1.0)*x15353*x15357))+((x15354*x15364))+(((-1.0)*r02*sj3*x15362))+(((-1.0)*x15355)));
evalcond[8]=((((-1.0)*r01*x15357*x15361))+(((-1.0)*x15344*x15348*x15353))+(((-1.0)*x15352*x15353))+(((-1.0)*x15360))+x15345+((r02*x15363))+((r01*x15356)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15367 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x15367)==0){
continue;
}
IkReal x15365=pow(x15367,-0.5);
IkReal x15366=((-1.0)*x15365);
CheckValue<IkReal> x15368 = IKatan2WithCheck(IkReal(((-1.0)*r20)),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x15368.valid){
continue;
}
IkReal gconst57=((3.14159265358979)+(((-1.0)*(x15368.value))));
IkReal gconst58=(r20*x15366);
IkReal gconst59=(r21*x15366);
CheckValue<IkReal> x15369 = IKatan2WithCheck(IkReal(((-1.0)*r20)),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x15369.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x15369.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x15373 = IKatan2WithCheck(IkReal(((-1.0)*r20)),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x15373.valid){
continue;
}
IkReal x15370=((1.0)*(x15373.value));
IkReal x15371=x15365;
IkReal x15372=((-1.0)*x15371);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst58;
cj5=gconst59;
j5=((3.14159265)+(((-1.0)*x15370)));
IkReal gconst57=((3.14159265358979)+(((-1.0)*x15370)));
IkReal gconst58=(r20*x15372);
IkReal gconst59=(r21*x15372);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x15377 = IKatan2WithCheck(IkReal(((-1.0)*r20)),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x15377.valid){
continue;
}
IkReal x15374=((1.0)*(x15377.value));
IkReal x15375=x15365;
IkReal x15376=((-1.0)*x15375);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst58;
cj5=gconst59;
j5=((3.14159265)+(((-1.0)*x15374)));
IkReal gconst57=((3.14159265358979)+(((-1.0)*x15374)));
IkReal gconst58=(r20*x15376);
IkReal gconst59=(r21*x15376);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x15381 = IKatan2WithCheck(IkReal(((-1.0)*r20)),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x15381.valid){
continue;
}
IkReal x15378=((1.0)*(x15381.value));
IkReal x15379=x15365;
IkReal x15380=((-1.0)*x15379);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst58;
cj5=gconst59;
j5=((3.14159265)+(((-1.0)*x15378)));
IkReal gconst57=((3.14159265358979)+(((-1.0)*x15378)));
IkReal gconst58=(r20*x15380);
IkReal gconst59=(r21*x15380);
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15382=gconst59*gconst59;
IkReal x15383=gconst58*gconst58;
IkReal x15384=(r11*sj3);
IkReal x15385=(cj3*r10);
IkReal x15386=((1.0)*gconst59);
IkReal x15387=(r10*sj3);
IkReal x15388=(gconst58*r21);
IkReal x15389=(cj3*r11);
IkReal x15390=(gconst58*gconst59*r20);
IkReal x15391=(r21*x15382);
IkReal x15392=(r20*x15383);
CheckValue<IkReal> x15393 = IKatan2WithCheck(IkReal((((gconst58*r22*x15389))+(((-1.0)*r22*x15385*x15386)))),IkReal((((x15385*x15390))+((x15385*x15391))+(((-1.0)*x15386*x15388*x15389))+(((-1.0)*x15389*x15392)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15393.valid){
continue;
}
CheckValue<IkReal> x15394=IKPowWithIntegerCheck(IKsign((((x15384*x15391))+((x15384*x15390))+((gconst59*x15387*x15388))+((r12*r22*sj3))+((x15387*x15392)))),-1);
if(!x15394.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15393.value)+(((1.5707963267949)*(x15394.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15395=IKsin(j4);
IkReal x15396=IKcos(j4);
IkReal x15397=(cj1*cj2);
IkReal x15398=((1.0)*sj2);
IkReal x15399=(cj3*gconst59);
IkReal x15400=(gconst59*r01);
IkReal x15401=(gconst58*r10);
IkReal x15402=(gconst58*r21);
IkReal x15403=(gconst58*r00);
IkReal x15404=((1.0)*r20);
IkReal x15405=(gconst59*sj3);
IkReal x15406=((1.0)*r10);
IkReal x15407=(cj3*gconst58);
IkReal x15408=(cj2*sj1);
IkReal x15409=(gconst59*r11);
IkReal x15410=(gconst59*r21);
IkReal x15411=((1.0)*r00);
IkReal x15412=(gconst58*r20);
IkReal x15413=(gconst58*sj3);
IkReal x15414=(sj1*x15398);
IkReal x15415=((1.0)*x15396);
IkReal x15416=((1.0)*x15395);
IkReal x15417=(sj3*x15396);
IkReal x15418=(cj3*x15395);
evalcond[0]=((((-1.0)*r22*x15415))+(((-1.0)*gconst58*x15395*x15404))+(((-1.0)*x15410*x15416)));
evalcond[1]=((((-1.0)*x15400*x15416))+(((-1.0)*r02*x15415))+(((-1.0)*x15403*x15416)));
evalcond[2]=((1.0)+(((-1.0)*x15401*x15416))+(((-1.0)*r12*x15415))+(((-1.0)*x15409*x15416)));
evalcond[3]=(((x15401*x15417))+((r11*x15396*x15405))+(((-1.0)*x15399*x15406))+(((-1.0)*r12*sj3*x15416))+((r11*x15407)));
evalcond[4]=(((r11*x15413))+((r12*x15418))+(((-1.0)*cj3*x15401*x15415))+(((-1.0)*x15405*x15406))+(((-1.0)*r11*x15399*x15415)));
evalcond[5]=(x15397+((r21*x15396*x15405))+(((-1.0)*r22*sj3*x15416))+((x15412*x15417))+(((-1.0)*x15399*x15404))+((cj3*x15402))+(((-1.0)*x15414)));
evalcond[6]=((((-1.0)*x15404*x15405))+(((-1.0)*x15396*x15404*x15407))+((cj1*sj2))+((sj3*x15402))+x15408+(((-1.0)*r21*x15399*x15415))+((r22*x15418)));
evalcond[7]=(((x15403*x15417))+(((-1.0)*x15408))+((x15400*x15417))+(((-1.0)*r02*sj3*x15416))+((r01*x15407))+(((-1.0)*x15399*x15411))+(((-1.0)*cj1*x15398)));
evalcond[8]=((((-1.0)*r01*x15399*x15415))+(((-1.0)*cj3*x15403*x15415))+((r01*x15413))+x15397+(((-1.0)*x15405*x15411))+((r02*x15418))+(((-1.0)*x15414)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15419=((1.0)*gconst59);
CheckValue<IkReal> x15420 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*gconst58*r00))+(((-1.0)*r01*x15419)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15420.valid){
continue;
}
CheckValue<IkReal> x15421=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x15419))+((gconst58*r21)))),-1);
if(!x15421.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15420.value)+(((1.5707963267949)*(x15421.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15422=IKsin(j4);
IkReal x15423=IKcos(j4);
IkReal x15424=(cj1*cj2);
IkReal x15425=((1.0)*sj2);
IkReal x15426=(cj3*gconst59);
IkReal x15427=(gconst59*r01);
IkReal x15428=(gconst58*r10);
IkReal x15429=(gconst58*r21);
IkReal x15430=(gconst58*r00);
IkReal x15431=((1.0)*r20);
IkReal x15432=(gconst59*sj3);
IkReal x15433=((1.0)*r10);
IkReal x15434=(cj3*gconst58);
IkReal x15435=(cj2*sj1);
IkReal x15436=(gconst59*r11);
IkReal x15437=(gconst59*r21);
IkReal x15438=((1.0)*r00);
IkReal x15439=(gconst58*r20);
IkReal x15440=(gconst58*sj3);
IkReal x15441=(sj1*x15425);
IkReal x15442=((1.0)*x15423);
IkReal x15443=((1.0)*x15422);
IkReal x15444=(sj3*x15423);
IkReal x15445=(cj3*x15422);
evalcond[0]=((((-1.0)*r22*x15442))+(((-1.0)*gconst58*x15422*x15431))+(((-1.0)*x15437*x15443)));
evalcond[1]=((((-1.0)*x15430*x15443))+(((-1.0)*r02*x15442))+(((-1.0)*x15427*x15443)));
evalcond[2]=((1.0)+(((-1.0)*x15428*x15443))+(((-1.0)*r12*x15442))+(((-1.0)*x15436*x15443)));
evalcond[3]=((((-1.0)*x15426*x15433))+((r11*x15434))+((x15428*x15444))+(((-1.0)*r12*sj3*x15443))+((r11*x15423*x15432)));
evalcond[4]=(((r11*x15440))+((r12*x15445))+(((-1.0)*r11*x15426*x15442))+(((-1.0)*cj3*x15428*x15442))+(((-1.0)*x15432*x15433)));
evalcond[5]=((((-1.0)*r22*sj3*x15443))+(((-1.0)*x15426*x15431))+((cj3*x15429))+((x15439*x15444))+x15424+(((-1.0)*x15441))+((r21*x15423*x15432)));
evalcond[6]=((((-1.0)*x15431*x15432))+((sj3*x15429))+(((-1.0)*x15423*x15431*x15434))+((cj1*sj2))+((r22*x15445))+x15435+(((-1.0)*r21*x15426*x15442)));
evalcond[7]=((((-1.0)*r02*sj3*x15443))+((x15430*x15444))+(((-1.0)*x15426*x15438))+((x15427*x15444))+(((-1.0)*x15435))+((r01*x15434))+(((-1.0)*cj1*x15425)));
evalcond[8]=((((-1.0)*cj3*x15430*x15442))+((r01*x15440))+((r02*x15445))+(((-1.0)*r01*x15426*x15442))+x15424+(((-1.0)*x15441))+(((-1.0)*x15432*x15438)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15446=((1.0)*gconst58);
CheckValue<IkReal> x15447=IKPowWithIntegerCheck(IKsign((((gconst59*r00))+(((-1.0)*r01*x15446)))),-1);
if(!x15447.valid){
continue;
}
CheckValue<IkReal> x15448 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x15446))+(((-1.0)*gconst59*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15448.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15447.value)))+(x15448.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15449=IKsin(j4);
IkReal x15450=IKcos(j4);
IkReal x15451=(cj1*cj2);
IkReal x15452=((1.0)*sj2);
IkReal x15453=(cj3*gconst59);
IkReal x15454=(gconst59*r01);
IkReal x15455=(gconst58*r10);
IkReal x15456=(gconst58*r21);
IkReal x15457=(gconst58*r00);
IkReal x15458=((1.0)*r20);
IkReal x15459=(gconst59*sj3);
IkReal x15460=((1.0)*r10);
IkReal x15461=(cj3*gconst58);
IkReal x15462=(cj2*sj1);
IkReal x15463=(gconst59*r11);
IkReal x15464=(gconst59*r21);
IkReal x15465=((1.0)*r00);
IkReal x15466=(gconst58*r20);
IkReal x15467=(gconst58*sj3);
IkReal x15468=(sj1*x15452);
IkReal x15469=((1.0)*x15450);
IkReal x15470=((1.0)*x15449);
IkReal x15471=(sj3*x15450);
IkReal x15472=(cj3*x15449);
evalcond[0]=((((-1.0)*gconst58*x15449*x15458))+(((-1.0)*r22*x15469))+(((-1.0)*x15464*x15470)));
evalcond[1]=((((-1.0)*x15454*x15470))+(((-1.0)*x15457*x15470))+(((-1.0)*r02*x15469)));
evalcond[2]=((1.0)+(((-1.0)*x15455*x15470))+(((-1.0)*x15463*x15470))+(((-1.0)*r12*x15469)));
evalcond[3]=((((-1.0)*r12*sj3*x15470))+((x15455*x15471))+((r11*x15450*x15459))+(((-1.0)*x15453*x15460))+((r11*x15461)));
evalcond[4]=((((-1.0)*r11*x15453*x15469))+(((-1.0)*x15459*x15460))+((r12*x15472))+((r11*x15467))+(((-1.0)*cj3*x15455*x15469)));
evalcond[5]=(((cj3*x15456))+(((-1.0)*x15468))+((r21*x15450*x15459))+x15451+(((-1.0)*r22*sj3*x15470))+((x15466*x15471))+(((-1.0)*x15453*x15458)));
evalcond[6]=((((-1.0)*x15458*x15459))+((sj3*x15456))+((r22*x15472))+((cj1*sj2))+x15462+(((-1.0)*x15450*x15458*x15461))+(((-1.0)*r21*x15453*x15469)));
evalcond[7]=(((x15457*x15471))+(((-1.0)*x15462))+((x15454*x15471))+((r01*x15461))+(((-1.0)*cj1*x15452))+(((-1.0)*x15453*x15465))+(((-1.0)*r02*sj3*x15470)));
evalcond[8]=(((r02*x15472))+(((-1.0)*r01*x15453*x15469))+(((-1.0)*cj3*x15457*x15469))+(((-1.0)*x15468))+((r01*x15467))+(((-1.0)*x15459*x15465))+x15451);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15475 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x15475)==0){
continue;
}
IkReal x15473=pow(x15475,-0.5);
IkReal x15474=((-1.0)*x15473);
CheckValue<IkReal> x15476 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x15476.valid){
continue;
}
IkReal gconst60=((-1.0)*(x15476.value));
IkReal gconst61=(r00*x15474);
IkReal gconst62=(r01*x15474);
CheckValue<IkReal> x15477 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x15477.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x15477.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x15481 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x15481.valid){
continue;
}
IkReal x15478=((-1.0)*(x15481.value));
IkReal x15479=x15473;
IkReal x15480=((-1.0)*x15479);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst61;
cj5=gconst62;
j5=x15478;
IkReal gconst60=x15478;
IkReal gconst61=(r00*x15480);
IkReal gconst62=(r01*x15480);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15482=gconst62*gconst62;
IkReal x15483=gconst61*gconst61;
IkReal x15484=(cj3*r11);
IkReal x15485=(r21*sj3);
IkReal x15486=((1.0)*gconst62);
IkReal x15487=(cj3*r10);
IkReal x15488=(r20*x15483);
IkReal x15489=(gconst61*gconst62*r10);
CheckValue<IkReal> x15490 = IKatan2WithCheck(IkReal((((gconst61*r22*x15484))+(((-1.0)*r22*x15486*x15487)))),IkReal((((gconst61*gconst62*r20*x15487))+((r21*x15482*x15487))+(((-1.0)*gconst61*r21*x15484*x15486))+(((-1.0)*x15484*x15488)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15490.valid){
continue;
}
CheckValue<IkReal> x15491=IKPowWithIntegerCheck(IKsign((((r11*x15482*x15485))+((x15485*x15489))+((r10*sj3*x15488))+((gconst61*gconst62*r11*r20*sj3))+((r12*r22*sj3)))),-1);
if(!x15491.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15490.value)+(((1.5707963267949)*(x15491.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15492=IKsin(j4);
IkReal x15493=IKcos(j4);
IkReal x15494=(cj1*cj2);
IkReal x15495=(cj3*gconst61);
IkReal x15496=(gconst61*r00);
IkReal x15497=((1.0)*sj2);
IkReal x15498=(gconst61*r20);
IkReal x15499=(gconst61*sj3);
IkReal x15500=(cj2*sj1);
IkReal x15501=(gconst62*r21);
IkReal x15502=(cj3*gconst62);
IkReal x15503=((1.0)*r20);
IkReal x15504=((1.0)*r10);
IkReal x15505=(gconst62*sj3);
IkReal x15506=(sj1*x15497);
IkReal x15507=((1.0)*x15493);
IkReal x15508=((1.0)*x15492);
IkReal x15509=(cj3*x15492);
IkReal x15510=((1.0)*gconst62*r00);
IkReal x15511=(sj3*x15493);
evalcond[0]=((((-1.0)*r22*x15507))+(((-1.0)*x15501*x15508))+(((-1.0)*x15498*x15508)));
evalcond[1]=((((-1.0)*x15496*x15508))+(((-1.0)*gconst62*r01*x15508))+(((-1.0)*r02*x15507)));
evalcond[2]=((1.0)+(((-1.0)*gconst61*x15492*x15504))+(((-1.0)*gconst62*r11*x15508))+(((-1.0)*r12*x15507)));
evalcond[3]=(((r11*x15493*x15505))+((r11*x15495))+(((-1.0)*x15502*x15504))+(((-1.0)*r12*sj3*x15508))+((r10*x15493*x15499)));
evalcond[4]=(((r11*x15499))+(((-1.0)*x15504*x15505))+(((-1.0)*r11*x15502*x15507))+((r12*x15509))+(((-1.0)*x15493*x15495*x15504)));
evalcond[5]=((((-1.0)*r22*sj3*x15508))+(((-1.0)*x15506))+(((-1.0)*x15502*x15503))+((x15498*x15511))+x15494+((r21*x15495))+((x15501*x15511)));
evalcond[6]=(((r22*x15509))+((cj1*sj2))+(((-1.0)*x15503*x15505))+x15500+((r21*x15499))+(((-1.0)*x15493*x15495*x15503))+(((-1.0)*cj3*x15501*x15507)));
evalcond[7]=(((r01*x15495))+(((-1.0)*r00*x15502))+((x15496*x15511))+(((-1.0)*r02*sj3*x15508))+(((-1.0)*cj1*x15497))+((r01*x15493*x15505))+(((-1.0)*x15500)));
evalcond[8]=(((r01*x15499))+(((-1.0)*r00*x15505))+(((-1.0)*x15506))+(((-1.0)*r01*x15502*x15507))+(((-1.0)*r00*x15495*x15507))+((r02*x15509))+x15494);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15512=((1.0)*gconst62);
CheckValue<IkReal> x15513 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*gconst61*r00))+(((-1.0)*r01*x15512)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15513.valid){
continue;
}
CheckValue<IkReal> x15514=IKPowWithIntegerCheck(IKsign((((gconst61*r21))+(((-1.0)*r20*x15512)))),-1);
if(!x15514.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15513.value)+(((1.5707963267949)*(x15514.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15515=IKsin(j4);
IkReal x15516=IKcos(j4);
IkReal x15517=(cj1*cj2);
IkReal x15518=(cj3*gconst61);
IkReal x15519=(gconst61*r00);
IkReal x15520=((1.0)*sj2);
IkReal x15521=(gconst61*r20);
IkReal x15522=(gconst61*sj3);
IkReal x15523=(cj2*sj1);
IkReal x15524=(gconst62*r21);
IkReal x15525=(cj3*gconst62);
IkReal x15526=((1.0)*r20);
IkReal x15527=((1.0)*r10);
IkReal x15528=(gconst62*sj3);
IkReal x15529=(sj1*x15520);
IkReal x15530=((1.0)*x15516);
IkReal x15531=((1.0)*x15515);
IkReal x15532=(cj3*x15515);
IkReal x15533=((1.0)*gconst62*r00);
IkReal x15534=(sj3*x15516);
evalcond[0]=((((-1.0)*x15521*x15531))+(((-1.0)*r22*x15530))+(((-1.0)*x15524*x15531)));
evalcond[1]=((((-1.0)*x15519*x15531))+(((-1.0)*r02*x15530))+(((-1.0)*gconst62*r01*x15531)));
evalcond[2]=((1.0)+(((-1.0)*r12*x15530))+(((-1.0)*gconst61*x15515*x15527))+(((-1.0)*gconst62*r11*x15531)));
evalcond[3]=((((-1.0)*r12*sj3*x15531))+((r11*x15516*x15528))+((r11*x15518))+(((-1.0)*x15525*x15527))+((r10*x15516*x15522)));
evalcond[4]=((((-1.0)*r11*x15525*x15530))+(((-1.0)*x15516*x15518*x15527))+((r12*x15532))+(((-1.0)*x15527*x15528))+((r11*x15522)));
evalcond[5]=(((x15524*x15534))+((r21*x15518))+(((-1.0)*x15525*x15526))+(((-1.0)*x15529))+((x15521*x15534))+(((-1.0)*r22*sj3*x15531))+x15517);
evalcond[6]=(((cj1*sj2))+(((-1.0)*x15516*x15518*x15526))+((r21*x15522))+(((-1.0)*cj3*x15524*x15530))+(((-1.0)*x15526*x15528))+x15523+((r22*x15532)));
evalcond[7]=((((-1.0)*r00*x15525))+((x15519*x15534))+((r01*x15516*x15528))+(((-1.0)*x15523))+(((-1.0)*r02*sj3*x15531))+(((-1.0)*cj1*x15520))+((r01*x15518)));
evalcond[8]=(((r02*x15532))+(((-1.0)*r00*x15528))+((r01*x15522))+(((-1.0)*x15529))+(((-1.0)*r01*x15525*x15530))+x15517+(((-1.0)*r00*x15518*x15530)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15537 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x15537)==0){
continue;
}
IkReal x15535=pow(x15537,-0.5);
IkReal x15536=((1.0)*x15535);
CheckValue<IkReal> x15538 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x15538.valid){
continue;
}
IkReal gconst63=((3.14159265358979)+(((-1.0)*(x15538.value))));
IkReal gconst64=(r00*x15536);
IkReal gconst65=(r01*x15536);
CheckValue<IkReal> x15539 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x15539.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x15539.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x15543 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x15543.valid){
continue;
}
IkReal x15540=((1.0)*(x15543.value));
IkReal x15541=x15535;
IkReal x15542=((1.0)*x15541);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst64;
cj5=gconst65;
j5=((3.14159265)+(((-1.0)*x15540)));
IkReal gconst63=((3.14159265358979)+(((-1.0)*x15540)));
IkReal gconst64=(r00*x15542);
IkReal gconst65=(r01*x15542);
j4eval[0]=0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x15547 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x15547.valid){
continue;
}
IkReal x15544=((1.0)*(x15547.value));
IkReal x15545=x15535;
IkReal x15546=((1.0)*x15545);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst64;
cj5=gconst65;
j5=((3.14159265)+(((-1.0)*x15544)));
IkReal gconst63=((3.14159265358979)+(((-1.0)*x15544)));
IkReal gconst64=(r00*x15546);
IkReal gconst65=(r01*x15546);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15548=gconst64*gconst64;
IkReal x15549=gconst65*gconst65;
IkReal x15550=(r11*sj3);
IkReal x15551=(cj3*r10);
IkReal x15552=((1.0)*gconst65);
IkReal x15553=(r10*sj3);
IkReal x15554=(cj3*r11);
IkReal x15555=(gconst64*r21);
IkReal x15556=(gconst64*gconst65*r20);
IkReal x15557=(r21*x15549);
IkReal x15558=(r20*x15548);
CheckValue<IkReal> x15559 = IKatan2WithCheck(IkReal((((gconst64*r22*x15554))+(((-1.0)*r22*x15551*x15552)))),IkReal((((x15551*x15556))+((x15551*x15557))+(((-1.0)*x15552*x15554*x15555))+(((-1.0)*x15554*x15558)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15559.valid){
continue;
}
CheckValue<IkReal> x15560=IKPowWithIntegerCheck(IKsign((((gconst65*x15553*x15555))+((x15550*x15557))+((x15550*x15556))+((r12*r22*sj3))+((x15553*x15558)))),-1);
if(!x15560.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15559.value)+(((1.5707963267949)*(x15560.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15561=IKsin(j4);
IkReal x15562=IKcos(j4);
IkReal x15563=(cj1*cj2);
IkReal x15564=(gconst64*r20);
IkReal x15565=(gconst65*r01);
IkReal x15566=(gconst64*sj3);
IkReal x15567=(cj3*gconst64);
IkReal x15568=(gconst64*r00);
IkReal x15569=((1.0)*sj1);
IkReal x15570=(cj1*sj2);
IkReal x15571=(gconst65*r11);
IkReal x15572=(gconst65*r21);
IkReal x15573=(gconst64*r10);
IkReal x15574=(sj2*x15569);
IkReal x15575=((1.0)*x15562);
IkReal x15576=((1.0)*x15561);
IkReal x15577=(sj3*x15562);
IkReal x15578=((1.0)*gconst65*r00);
IkReal x15579=(cj3*x15561);
IkReal x15580=((1.0)*gconst65*r10);
IkReal x15581=((1.0)*gconst65*r20);
evalcond[0]=((((-1.0)*r22*x15575))+(((-1.0)*x15572*x15576))+(((-1.0)*x15564*x15576)));
evalcond[1]=((((-1.0)*r02*x15575))+(((-1.0)*x15568*x15576))+(((-1.0)*x15565*x15576)));
evalcond[2]=((1.0)+(((-1.0)*r12*x15575))+(((-1.0)*x15571*x15576))+(((-1.0)*x15573*x15576)));
evalcond[3]=((((-1.0)*cj3*x15580))+(((-1.0)*r12*sj3*x15576))+((x15571*x15577))+((r10*x15562*x15566))+((r11*x15567)));
evalcond[4]=((((-1.0)*sj3*x15580))+((r12*x15579))+((r11*x15566))+(((-1.0)*r10*x15567*x15575))+(((-1.0)*cj3*x15571*x15575)));
evalcond[5]=((((-1.0)*cj3*x15581))+((r21*x15567))+((x15572*x15577))+((x15564*x15577))+x15563+(((-1.0)*x15574))+(((-1.0)*r22*sj3*x15576)));
evalcond[6]=(((cj2*sj1))+(((-1.0)*cj3*x15564*x15575))+((r22*x15579))+((r21*x15566))+(((-1.0)*sj3*x15581))+(((-1.0)*cj3*x15572*x15575))+x15570);
evalcond[7]=((((-1.0)*cj3*x15578))+(((-1.0)*cj2*x15569))+(((-1.0)*r02*sj3*x15576))+((x15565*x15577))+((r00*x15562*x15566))+((r01*x15567))+(((-1.0)*x15570)));
evalcond[8]=((((-1.0)*cj3*x15565*x15575))+(((-1.0)*sj3*x15578))+((r02*x15579))+((r01*x15566))+(((-1.0)*r00*x15567*x15575))+x15563+(((-1.0)*x15574)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15582=((1.0)*gconst65);
CheckValue<IkReal> x15583=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x15582))+((gconst64*r21)))),-1);
if(!x15583.valid){
continue;
}
CheckValue<IkReal> x15584 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*x15582))+(((-1.0)*gconst64*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15584.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15583.value)))+(x15584.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15585=IKsin(j4);
IkReal x15586=IKcos(j4);
IkReal x15587=(cj1*cj2);
IkReal x15588=(gconst64*r20);
IkReal x15589=(gconst65*r01);
IkReal x15590=(gconst64*sj3);
IkReal x15591=(cj3*gconst64);
IkReal x15592=(gconst64*r00);
IkReal x15593=((1.0)*sj1);
IkReal x15594=(cj1*sj2);
IkReal x15595=(gconst65*r11);
IkReal x15596=(gconst65*r21);
IkReal x15597=(gconst64*r10);
IkReal x15598=(sj2*x15593);
IkReal x15599=((1.0)*x15586);
IkReal x15600=((1.0)*x15585);
IkReal x15601=(sj3*x15586);
IkReal x15602=((1.0)*gconst65*r00);
IkReal x15603=(cj3*x15585);
IkReal x15604=((1.0)*gconst65*r10);
IkReal x15605=((1.0)*gconst65*r20);
evalcond[0]=((((-1.0)*r22*x15599))+(((-1.0)*x15596*x15600))+(((-1.0)*x15588*x15600)));
evalcond[1]=((((-1.0)*r02*x15599))+(((-1.0)*x15592*x15600))+(((-1.0)*x15589*x15600)));
evalcond[2]=((1.0)+(((-1.0)*r12*x15599))+(((-1.0)*x15595*x15600))+(((-1.0)*x15597*x15600)));
evalcond[3]=((((-1.0)*cj3*x15604))+((r10*x15586*x15590))+((r11*x15591))+(((-1.0)*r12*sj3*x15600))+((x15595*x15601)));
evalcond[4]=(((r11*x15590))+(((-1.0)*cj3*x15595*x15599))+((r12*x15603))+(((-1.0)*r10*x15591*x15599))+(((-1.0)*sj3*x15604)));
evalcond[5]=(((x15596*x15601))+(((-1.0)*r22*sj3*x15600))+(((-1.0)*cj3*x15605))+((x15588*x15601))+((r21*x15591))+(((-1.0)*x15598))+x15587);
evalcond[6]=(((cj2*sj1))+((r21*x15590))+(((-1.0)*cj3*x15596*x15599))+(((-1.0)*cj3*x15588*x15599))+((r22*x15603))+x15594+(((-1.0)*sj3*x15605)));
evalcond[7]=((((-1.0)*x15594))+(((-1.0)*cj2*x15593))+(((-1.0)*r02*sj3*x15600))+(((-1.0)*cj3*x15602))+((x15589*x15601))+((r00*x15586*x15590))+((r01*x15591)));
evalcond[8]=((((-1.0)*r00*x15591*x15599))+(((-1.0)*cj3*x15589*x15599))+((r02*x15603))+(((-1.0)*x15598))+x15587+(((-1.0)*sj3*x15602))+((r01*x15590)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15606=((1.0)*gconst64);
CheckValue<IkReal> x15607=IKPowWithIntegerCheck(IKsign((((gconst65*r00))+(((-1.0)*r01*x15606)))),-1);
if(!x15607.valid){
continue;
}
CheckValue<IkReal> x15608 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst65*r21))+(((-1.0)*r20*x15606)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15608.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15607.value)))+(x15608.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15609=IKsin(j4);
IkReal x15610=IKcos(j4);
IkReal x15611=(cj1*cj2);
IkReal x15612=(gconst64*r20);
IkReal x15613=(gconst65*r01);
IkReal x15614=(gconst64*sj3);
IkReal x15615=(cj3*gconst64);
IkReal x15616=(gconst64*r00);
IkReal x15617=((1.0)*sj1);
IkReal x15618=(cj1*sj2);
IkReal x15619=(gconst65*r11);
IkReal x15620=(gconst65*r21);
IkReal x15621=(gconst64*r10);
IkReal x15622=(sj2*x15617);
IkReal x15623=((1.0)*x15610);
IkReal x15624=((1.0)*x15609);
IkReal x15625=(sj3*x15610);
IkReal x15626=((1.0)*gconst65*r00);
IkReal x15627=(cj3*x15609);
IkReal x15628=((1.0)*gconst65*r10);
IkReal x15629=((1.0)*gconst65*r20);
evalcond[0]=((((-1.0)*x15620*x15624))+(((-1.0)*x15612*x15624))+(((-1.0)*r22*x15623)));
evalcond[1]=((((-1.0)*x15616*x15624))+(((-1.0)*r02*x15623))+(((-1.0)*x15613*x15624)));
evalcond[2]=((1.0)+(((-1.0)*r12*x15623))+(((-1.0)*x15619*x15624))+(((-1.0)*x15621*x15624)));
evalcond[3]=((((-1.0)*cj3*x15628))+((r10*x15610*x15614))+((x15619*x15625))+((r11*x15615))+(((-1.0)*r12*sj3*x15624)));
evalcond[4]=((((-1.0)*r10*x15615*x15623))+(((-1.0)*cj3*x15619*x15623))+((r11*x15614))+(((-1.0)*sj3*x15628))+((r12*x15627)));
evalcond[5]=((((-1.0)*cj3*x15629))+((r21*x15615))+((x15620*x15625))+(((-1.0)*r22*sj3*x15624))+(((-1.0)*x15622))+x15611+((x15612*x15625)));
evalcond[6]=(((cj2*sj1))+((r21*x15614))+((r22*x15627))+x15618+(((-1.0)*cj3*x15620*x15623))+(((-1.0)*cj3*x15612*x15623))+(((-1.0)*sj3*x15629)));
evalcond[7]=((((-1.0)*cj3*x15626))+(((-1.0)*cj2*x15617))+((r01*x15615))+(((-1.0)*r02*sj3*x15624))+(((-1.0)*x15618))+((x15613*x15625))+((r00*x15610*x15614)));
evalcond[8]=(((r01*x15614))+(((-1.0)*x15622))+((r02*x15627))+x15611+(((-1.0)*r00*x15615*x15623))+(((-1.0)*sj3*x15626))+(((-1.0)*cj3*x15613*x15623)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15630=((-1.0)*px);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15630);
rxp1_1=(px*r21);
rxp1_2=(r11*x15630);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x15631=(r10*sj5);
IkReal x15632=(cj5*r11);
j4eval[0]=((((-1.0)*x15631))+(((-1.0)*x15632)));
j4eval[1]=(((sj3*x15632))+((sj3*x15631)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15633=((-1.0)*px);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15633);
rxp1_1=(px*r21);
rxp1_2=(r11*x15633);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x15634=((1.0)*r10*sj5);
IkReal x15635=((1.0)*cj5*r11);
j4eval[0]=((((-1.0)*x15635))+(((-1.0)*x15634)));
j4eval[1]=((((-1.0)*cj3*x15634))+(((-1.0)*cj3*x15635)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x15636=((-1.0)*px);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15636);
rxp1_1=(px*r21);
rxp1_2=(r11*x15636);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=(((cj5*r11*sj3))+((r10*sj3*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15637=IKPowWithIntegerCheck(cj3,-1);
if(!x15637.valid){
continue;
}
CheckValue<IkReal> x15638=IKPowWithIntegerCheck(r02,-1);
if(!x15638.valid){
continue;
}
CheckValue<IkReal> x15639=IKPowWithIntegerCheck((((cj5*r11*sj3))+((r10*sj3*sj5))),-1);
if(!x15639.valid){
continue;
}
if( IKabs(((x15637.value)*(x15638.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15639.value)*(((((-1.0)*cj3*r11*sj5))+((cj3*cj5*r10)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15637.value)*(x15638.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x15639.value)*(((((-1.0)*cj3*r11*sj5))+((cj3*cj5*r10))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x15637.value)*(x15638.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x15639.value)*(((((-1.0)*cj3*r11*sj5))+((cj3*cj5*r10))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15640=IKsin(j4);
IkReal x15641=IKcos(j4);
IkReal x15642=(cj1*cj2);
IkReal x15643=(r20*sj3);
IkReal x15644=((1.0)*cj5);
IkReal x15645=(cj3*r10);
IkReal x15646=(sj3*sj5);
IkReal x15647=(r10*sj3);
IkReal x15648=((1.0)*sj1);
IkReal x15649=((1.0)*r20);
IkReal x15650=(cj3*r21);
IkReal x15651=(cj1*sj2);
IkReal x15652=(cj3*r11);
IkReal x15653=(sj2*x15648);
IkReal x15654=(sj5*x15641);
IkReal x15655=(sj5*x15640);
IkReal x15656=(r02*x15640);
IkReal x15657=(cj5*sj3*x15641);
evalcond[0]=((-1.0)*r02*x15641);
evalcond[1]=(((cj3*x15656))+x15642+(((-1.0)*x15653)));
evalcond[2]=((((-1.0)*x15649*x15655))+(((-1.0)*r21*x15640*x15644)));
evalcond[3]=((1.0)+(((-1.0)*r11*x15640*x15644))+(((-1.0)*r10*x15655)));
evalcond[4]=((((-1.0)*sj3*x15656))+(((-1.0)*x15651))+(((-1.0)*cj2*x15648)));
evalcond[5]=(((sj5*x15652))+((r11*x15657))+(((-1.0)*x15644*x15645))+((r10*x15641*x15646)));
evalcond[6]=((((-1.0)*x15645*x15654))+(((-1.0)*x15641*x15644*x15652))+(((-1.0)*x15644*x15647))+((r11*x15646)));
evalcond[7]=(((sj5*x15650))+(((-1.0)*cj3*r20*x15644))+x15642+(((-1.0)*x15653))+((r21*x15657))+((x15643*x15654)));
evalcond[8]=(((cj2*sj1))+(((-1.0)*x15643*x15644))+(((-1.0)*x15641*x15644*x15650))+x15651+((r21*x15646))+(((-1.0)*cj3*x15649*x15654)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15658=((1.0)*cj5*r11);
IkReal x15659=((1.0)*r10*sj5);
CheckValue<IkReal> x15660=IKPowWithIntegerCheck(((((-1.0)*x15659))+(((-1.0)*x15658))),-1);
if(!x15660.valid){
continue;
}
CheckValue<IkReal> x15661=IKPowWithIntegerCheck(((((-1.0)*cj3*x15658))+(((-1.0)*cj3*x15659))),-1);
if(!x15661.valid){
continue;
}
if( IKabs(((-1.0)*(x15660.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15661.value)*(((((-1.0)*r11*sj3*sj5))+((cj5*r10*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x15660.value)))+IKsqr(((x15661.value)*(((((-1.0)*r11*sj3*sj5))+((cj5*r10*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x15660.value)), ((x15661.value)*(((((-1.0)*r11*sj3*sj5))+((cj5*r10*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15662=IKsin(j4);
IkReal x15663=IKcos(j4);
IkReal x15664=(cj1*cj2);
IkReal x15665=(r20*sj3);
IkReal x15666=((1.0)*cj5);
IkReal x15667=(cj3*r10);
IkReal x15668=(sj3*sj5);
IkReal x15669=(r10*sj3);
IkReal x15670=((1.0)*sj1);
IkReal x15671=((1.0)*r20);
IkReal x15672=(cj3*r21);
IkReal x15673=(cj1*sj2);
IkReal x15674=(cj3*r11);
IkReal x15675=(sj2*x15670);
IkReal x15676=(sj5*x15663);
IkReal x15677=(sj5*x15662);
IkReal x15678=(r02*x15662);
IkReal x15679=(cj5*sj3*x15663);
evalcond[0]=((-1.0)*r02*x15663);
evalcond[1]=((((-1.0)*x15675))+((cj3*x15678))+x15664);
evalcond[2]=((((-1.0)*r21*x15662*x15666))+(((-1.0)*x15671*x15677)));
evalcond[3]=((1.0)+(((-1.0)*r10*x15677))+(((-1.0)*r11*x15662*x15666)));
evalcond[4]=((((-1.0)*cj2*x15670))+(((-1.0)*x15673))+(((-1.0)*sj3*x15678)));
evalcond[5]=(((sj5*x15674))+((r11*x15679))+(((-1.0)*x15666*x15667))+((r10*x15663*x15668)));
evalcond[6]=((((-1.0)*x15667*x15676))+((r11*x15668))+(((-1.0)*x15663*x15666*x15674))+(((-1.0)*x15666*x15669)));
evalcond[7]=((((-1.0)*x15675))+((sj5*x15672))+(((-1.0)*cj3*r20*x15666))+x15664+((r21*x15679))+((x15665*x15676)));
evalcond[8]=(((cj2*sj1))+(((-1.0)*x15665*x15666))+(((-1.0)*x15663*x15666*x15672))+x15673+((r21*x15668))+(((-1.0)*cj3*x15671*x15676)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15680=((1.0)*r11);
IkReal x15681=(r10*sj5);
CheckValue<IkReal> x15682=IKPowWithIntegerCheck(((((-1.0)*x15681))+(((-1.0)*cj5*x15680))),-1);
if(!x15682.valid){
continue;
}
CheckValue<IkReal> x15683=IKPowWithIntegerCheck((((cj5*r11*sj3))+((sj3*x15681))),-1);
if(!x15683.valid){
continue;
}
if( IKabs(((-1.0)*(x15682.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15683.value)*(((((-1.0)*cj3*sj5*x15680))+((cj3*cj5*r10)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x15682.value)))+IKsqr(((x15683.value)*(((((-1.0)*cj3*sj5*x15680))+((cj3*cj5*r10))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x15682.value)), ((x15683.value)*(((((-1.0)*cj3*sj5*x15680))+((cj3*cj5*r10))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15684=IKsin(j4);
IkReal x15685=IKcos(j4);
IkReal x15686=(cj1*cj2);
IkReal x15687=(r20*sj3);
IkReal x15688=((1.0)*cj5);
IkReal x15689=(cj3*r10);
IkReal x15690=(sj3*sj5);
IkReal x15691=(r10*sj3);
IkReal x15692=((1.0)*sj1);
IkReal x15693=((1.0)*r20);
IkReal x15694=(cj3*r21);
IkReal x15695=(cj1*sj2);
IkReal x15696=(cj3*r11);
IkReal x15697=(sj2*x15692);
IkReal x15698=(sj5*x15685);
IkReal x15699=(sj5*x15684);
IkReal x15700=(r02*x15684);
IkReal x15701=(cj5*sj3*x15685);
evalcond[0]=((-1.0)*r02*x15685);
evalcond[1]=((((-1.0)*x15697))+((cj3*x15700))+x15686);
evalcond[2]=((((-1.0)*x15693*x15699))+(((-1.0)*r21*x15684*x15688)));
evalcond[3]=((1.0)+(((-1.0)*r10*x15699))+(((-1.0)*r11*x15684*x15688)));
evalcond[4]=((((-1.0)*cj2*x15692))+(((-1.0)*sj3*x15700))+(((-1.0)*x15695)));
evalcond[5]=(((r11*x15701))+(((-1.0)*x15688*x15689))+((sj5*x15696))+((r10*x15685*x15690)));
evalcond[6]=((((-1.0)*x15689*x15698))+((r11*x15690))+(((-1.0)*x15685*x15688*x15696))+(((-1.0)*x15688*x15691)));
evalcond[7]=((((-1.0)*x15697))+((sj5*x15694))+x15686+(((-1.0)*cj3*r20*x15688))+((r21*x15701))+((x15687*x15698)));
evalcond[8]=(((cj2*sj1))+(((-1.0)*cj3*x15693*x15698))+((r21*x15690))+x15695+(((-1.0)*x15687*x15688))+(((-1.0)*x15685*x15688*x15694)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15702=cj5*cj5;
IkReal x15703=(cj3*r20);
IkReal x15704=(cj5*sj5);
IkReal x15705=(cj3*r11);
IkReal x15706=(r20*sj3);
IkReal x15707=(r21*sj3);
IkReal x15708=(r11*x15702);
IkReal x15709=(r10*x15702);
CheckValue<IkReal> x15710=IKPowWithIntegerCheck(IKsign((((r10*x15704*x15707))+((x15707*x15708))+(((-1.0)*x15706*x15709))+((r12*r22*sj3))+((r10*x15706))+((r11*x15704*x15706)))),-1);
if(!x15710.valid){
continue;
}
CheckValue<IkReal> x15711 = IKatan2WithCheck(IkReal((((r22*sj5*x15705))+(((-1.0)*cj3*cj5*r10*r22)))),IkReal(((((-1.0)*r21*x15704*x15705))+((cj3*r21*x15709))+((x15703*x15708))+(((-1.0)*r11*x15703))+((r10*x15703*x15704)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15711.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15710.value)))+(x15711.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15712=IKsin(j4);
IkReal x15713=IKcos(j4);
IkReal x15714=(cj1*cj2);
IkReal x15715=((1.0)*sj3);
IkReal x15716=(sj3*sj5);
IkReal x15717=((1.0)*sj2);
IkReal x15718=(cj5*r10);
IkReal x15719=((1.0)*cj3);
IkReal x15720=(cj5*r20);
IkReal x15721=(r00*sj5);
IkReal x15722=(cj5*r01);
IkReal x15723=(cj5*r00);
IkReal x15724=(r20*sj5);
IkReal x15725=(cj5*r21);
IkReal x15726=(cj2*sj1);
IkReal x15727=(cj3*sj5);
IkReal x15728=(cj5*r11);
IkReal x15729=(sj1*x15717);
IkReal x15730=((1.0)*x15713);
IkReal x15731=(r12*x15712);
IkReal x15732=(cj3*x15712);
IkReal x15733=((1.0)*x15712);
IkReal x15734=(cj5*sj3*x15713);
evalcond[0]=((((-1.0)*x15725*x15733))+(((-1.0)*x15724*x15733))+(((-1.0)*r22*x15730)));
evalcond[1]=((((-1.0)*r02*x15730))+(((-1.0)*x15722*x15733))+(((-1.0)*x15721*x15733)));
evalcond[2]=((1.0)+(((-1.0)*r12*x15730))+(((-1.0)*x15728*x15733))+(((-1.0)*r10*sj5*x15733)));
evalcond[3]=(((r11*x15727))+((sj3*x15713*x15728))+(((-1.0)*x15715*x15731))+((r10*x15713*x15716))+(((-1.0)*x15718*x15719)));
evalcond[4]=((((-1.0)*x15715*x15718))+(((-1.0)*r10*sj5*x15713*x15719))+((cj3*x15731))+((r11*x15716))+(((-1.0)*x15713*x15719*x15728)));
evalcond[5]=((((-1.0)*x15729))+((r21*x15727))+((sj3*x15713*x15725))+x15714+((r20*x15713*x15716))+(((-1.0)*r22*x15712*x15715))+(((-1.0)*x15719*x15720)));
evalcond[6]=(((cj1*sj2))+(((-1.0)*x15715*x15720))+((r21*x15716))+x15726+((r22*x15732))+(((-1.0)*x15713*x15719*x15724))+(((-1.0)*x15713*x15719*x15725)));
evalcond[7]=((((-1.0)*x15726))+((r01*x15727))+((r00*x15713*x15716))+((sj3*x15713*x15722))+(((-1.0)*r02*x15712*x15715))+(((-1.0)*cj1*x15717))+(((-1.0)*x15719*x15723)));
evalcond[8]=((((-1.0)*x15729))+((r01*x15716))+(((-1.0)*x15715*x15723))+x15714+(((-1.0)*x15713*x15719*x15722))+(((-1.0)*x15713*x15719*x15721))+((r02*x15732)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15735=((1.0)*cj5);
CheckValue<IkReal> x15736 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*sj5))+(((-1.0)*r01*x15735)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15736.valid){
continue;
}
CheckValue<IkReal> x15737=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x15735))+((r21*sj5)))),-1);
if(!x15737.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15736.value)+(((1.5707963267949)*(x15737.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15738=IKsin(j4);
IkReal x15739=IKcos(j4);
IkReal x15740=(cj1*cj2);
IkReal x15741=((1.0)*sj3);
IkReal x15742=(sj3*sj5);
IkReal x15743=((1.0)*sj2);
IkReal x15744=(cj5*r10);
IkReal x15745=((1.0)*cj3);
IkReal x15746=(cj5*r20);
IkReal x15747=(r00*sj5);
IkReal x15748=(cj5*r01);
IkReal x15749=(cj5*r00);
IkReal x15750=(r20*sj5);
IkReal x15751=(cj5*r21);
IkReal x15752=(cj2*sj1);
IkReal x15753=(cj3*sj5);
IkReal x15754=(cj5*r11);
IkReal x15755=(sj1*x15743);
IkReal x15756=((1.0)*x15739);
IkReal x15757=(r12*x15738);
IkReal x15758=(cj3*x15738);
IkReal x15759=((1.0)*x15738);
IkReal x15760=(cj5*sj3*x15739);
evalcond[0]=((((-1.0)*r22*x15756))+(((-1.0)*x15750*x15759))+(((-1.0)*x15751*x15759)));
evalcond[1]=((((-1.0)*x15748*x15759))+(((-1.0)*r02*x15756))+(((-1.0)*x15747*x15759)));
evalcond[2]=((1.0)+(((-1.0)*r10*sj5*x15759))+(((-1.0)*x15754*x15759))+(((-1.0)*r12*x15756)));
evalcond[3]=(((r10*x15739*x15742))+(((-1.0)*x15741*x15757))+(((-1.0)*x15744*x15745))+((r11*x15753))+((sj3*x15739*x15754)));
evalcond[4]=((((-1.0)*r10*sj5*x15739*x15745))+(((-1.0)*x15741*x15744))+((cj3*x15757))+((r11*x15742))+(((-1.0)*x15739*x15745*x15754)));
evalcond[5]=((((-1.0)*x15755))+((r21*x15753))+((r20*x15739*x15742))+x15740+(((-1.0)*x15745*x15746))+(((-1.0)*r22*x15738*x15741))+((sj3*x15739*x15751)));
evalcond[6]=(((r22*x15758))+(((-1.0)*x15741*x15746))+((cj1*sj2))+((r21*x15742))+x15752+(((-1.0)*x15739*x15745*x15750))+(((-1.0)*x15739*x15745*x15751)));
evalcond[7]=((((-1.0)*r02*x15738*x15741))+(((-1.0)*cj1*x15743))+((r00*x15739*x15742))+(((-1.0)*x15752))+(((-1.0)*x15745*x15749))+((r01*x15753))+((sj3*x15739*x15748)));
evalcond[8]=(((r02*x15758))+(((-1.0)*x15755))+(((-1.0)*x15741*x15749))+x15740+(((-1.0)*x15739*x15745*x15748))+(((-1.0)*x15739*x15745*x15747))+((r01*x15742)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15761=((1.0)*sj5);
CheckValue<IkReal> x15762=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x15761))+((cj5*r00)))),-1);
if(!x15762.valid){
continue;
}
CheckValue<IkReal> x15763 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x15761))+(((-1.0)*cj5*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15763.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15762.value)))+(x15763.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15764=IKsin(j4);
IkReal x15765=IKcos(j4);
IkReal x15766=(cj1*cj2);
IkReal x15767=((1.0)*sj3);
IkReal x15768=(sj3*sj5);
IkReal x15769=((1.0)*sj2);
IkReal x15770=(cj5*r10);
IkReal x15771=((1.0)*cj3);
IkReal x15772=(cj5*r20);
IkReal x15773=(r00*sj5);
IkReal x15774=(cj5*r01);
IkReal x15775=(cj5*r00);
IkReal x15776=(r20*sj5);
IkReal x15777=(cj5*r21);
IkReal x15778=(cj2*sj1);
IkReal x15779=(cj3*sj5);
IkReal x15780=(cj5*r11);
IkReal x15781=(sj1*x15769);
IkReal x15782=((1.0)*x15765);
IkReal x15783=(r12*x15764);
IkReal x15784=(cj3*x15764);
IkReal x15785=((1.0)*x15764);
IkReal x15786=(cj5*sj3*x15765);
evalcond[0]=((((-1.0)*x15777*x15785))+(((-1.0)*x15776*x15785))+(((-1.0)*r22*x15782)));
evalcond[1]=((((-1.0)*x15774*x15785))+(((-1.0)*x15773*x15785))+(((-1.0)*r02*x15782)));
evalcond[2]=((1.0)+(((-1.0)*r10*sj5*x15785))+(((-1.0)*r12*x15782))+(((-1.0)*x15780*x15785)));
evalcond[3]=(((sj3*x15765*x15780))+(((-1.0)*x15770*x15771))+((r10*x15765*x15768))+((r11*x15779))+(((-1.0)*x15767*x15783)));
evalcond[4]=((((-1.0)*x15765*x15771*x15780))+((cj3*x15783))+(((-1.0)*r10*sj5*x15765*x15771))+((r11*x15768))+(((-1.0)*x15767*x15770)));
evalcond[5]=(((r21*x15779))+(((-1.0)*r22*x15764*x15767))+((r20*x15765*x15768))+x15766+(((-1.0)*x15781))+(((-1.0)*x15771*x15772))+((sj3*x15765*x15777)));
evalcond[6]=(((r21*x15768))+((cj1*sj2))+((r22*x15784))+x15778+(((-1.0)*x15765*x15771*x15776))+(((-1.0)*x15765*x15771*x15777))+(((-1.0)*x15767*x15772)));
evalcond[7]=((((-1.0)*cj1*x15769))+(((-1.0)*x15778))+((r01*x15779))+(((-1.0)*r02*x15764*x15767))+(((-1.0)*x15771*x15775))+((sj3*x15765*x15774))+((r00*x15765*x15768)));
evalcond[8]=(((r01*x15768))+((r02*x15784))+x15766+(((-1.0)*x15765*x15771*x15773))+(((-1.0)*x15765*x15771*x15774))+(((-1.0)*x15781))+(((-1.0)*x15767*x15775)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15787=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15787);
rxp0_2=(py*r00);
rxp1_0=(r21*x15787);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)));
j4eval[1]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15788=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15788);
rxp0_2=(py*r00);
rxp1_0=(r21*x15788);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=cj3;
j4eval[1]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15789=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15789);
rxp0_2=(py*r00);
rxp1_0=(r21*x15789);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=r12;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x15790=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15790);
rxp0_2=(py*r00);
rxp1_0=(r21*x15790);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15791=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15791);
rxp0_2=(py*r00);
rxp1_0=(r21*x15791);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15792=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15792);
rxp0_2=(py*r00);
rxp1_0=(r21*x15792);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15795=IKPowWithIntegerCheck(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01))),-1);
if(!x15795.valid){
continue;
}
IkReal x15793=x15795.value;
IkReal x15794=(sj0*x15793);
cj4array[0]=(((cj1*cj2*x15794))+(((-1.0)*sj1*sj2*x15794)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15796=IKsin(j4);
IkReal x15797=IKcos(j4);
IkReal x15798=(r20*sj5);
IkReal x15799=((1.0)*cj5*r21);
IkReal x15800=((1.0)*x15797);
IkReal x15801=((1.0)*x15796);
evalcond[0]=(r12*x15796);
evalcond[1]=((((-1.0)*r12*x15800))+(((-1.0)*sj0)));
evalcond[2]=((((-1.0)*x15798*x15801))+(((-1.0)*x15796*x15799)));
evalcond[3]=((((-1.0)*cj5*r01*x15801))+(((-1.0)*r00*sj5*x15801)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x15798*x15800))+((cj1*sj2))+(((-1.0)*x15797*x15799)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15804=IKPowWithIntegerCheck(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5))),-1);
if(!x15804.valid){
continue;
}
IkReal x15802=x15804.value;
IkReal x15803=((1.0)*x15802);
cj4array[0]=((((-1.0)*cj2*sj1*x15803))+(((-1.0)*cj1*sj2*x15803)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15805=IKsin(j4);
IkReal x15806=IKcos(j4);
IkReal x15807=((1.0)*cj5);
IkReal x15808=((1.0)*sj0);
IkReal x15809=(r00*sj5);
IkReal x15810=((1.0)*x15806);
IkReal x15811=((1.0)*x15805);
evalcond[0]=(r12*x15805);
evalcond[1]=((((-1.0)*x15808))+(((-1.0)*r12*x15810)));
evalcond[2]=((((-1.0)*r20*sj5*x15811))+(((-1.0)*r21*x15805*x15807)));
evalcond[3]=((((-1.0)*x15809*x15811))+(((-1.0)*r01*x15805*x15807)));
evalcond[4]=((((-1.0)*x15809*x15810))+(((-1.0)*r01*x15806*x15807))+((sj0*sj1*sj2))+(((-1.0)*cj1*cj2*x15808)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15812=IKPowWithIntegerCheck(r12,-1);
if(!x15812.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x15812.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15813=IKsin(j4);
IkReal x15814=IKcos(j4);
IkReal x15815=((1.0)*cj5);
IkReal x15816=((1.0)*r00*sj5);
IkReal x15817=((1.0)*r20*sj5);
evalcond[0]=(r12*x15813);
evalcond[1]=((((-1.0)*x15813*x15817))+(((-1.0)*r21*x15813*x15815)));
evalcond[2]=((((-1.0)*x15813*x15816))+(((-1.0)*r01*x15813*x15815)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x15814*x15817))+((cj1*sj2))+(((-1.0)*r21*x15814*x15815)));
evalcond[4]=((((-1.0)*r01*x15814*x15815))+(((-1.0)*x15814*x15816))+(((-1.0)*cj1*cj2*sj0))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x15818=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15818);
rxp0_2=(py*r00);
rxp1_0=(r21*x15818);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15819=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15819);
rxp0_2=(py*r00);
rxp1_0=(r21*x15819);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=(((cj5*r21))+((r20*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15820=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15820);
rxp0_2=(py*r00);
rxp1_0=(r21*x15820);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=(((r00*sj5))+((cj5*r01)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15823=IKPowWithIntegerCheck((((r00*sj5))+((cj5*r01))),-1);
if(!x15823.valid){
continue;
}
IkReal x15821=x15823.value;
IkReal x15822=(sj0*x15821);
cj4array[0]=(((cj1*cj2*x15822))+(((-1.0)*sj1*sj2*x15822)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15824=IKsin(j4);
IkReal x15825=IKcos(j4);
IkReal x15826=(cj5*r21);
IkReal x15827=(r20*sj5);
IkReal x15828=((1.0)*x15824);
evalcond[0]=((-1.0)*r12*x15824);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r12*x15825)));
evalcond[2]=((((-1.0)*x15826*x15828))+(((-1.0)*x15827*x15828)));
evalcond[3]=((((-1.0)*r00*sj5*x15828))+(((-1.0)*cj5*r01*x15828)));
evalcond[4]=(((cj2*sj1))+((x15825*x15826))+((x15825*x15827))+((cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15831=IKPowWithIntegerCheck((((cj5*r21))+((r20*sj5))),-1);
if(!x15831.valid){
continue;
}
IkReal x15829=x15831.value;
IkReal x15830=((1.0)*x15829);
cj4array[0]=((((-1.0)*cj1*sj2*x15830))+(((-1.0)*cj2*sj1*x15830)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15832=IKsin(j4);
IkReal x15833=IKcos(j4);
IkReal x15834=((1.0)*sj0);
IkReal x15835=(r00*sj5);
IkReal x15836=(cj5*r01);
IkReal x15837=((1.0)*x15832);
evalcond[0]=((-1.0)*r12*x15832);
evalcond[1]=((((-1.0)*x15834))+(((-1.0)*r12*x15833)));
evalcond[2]=((((-1.0)*r20*sj5*x15837))+(((-1.0)*cj5*r21*x15837)));
evalcond[3]=((((-1.0)*x15836*x15837))+(((-1.0)*x15835*x15837)));
evalcond[4]=(((sj0*sj1*sj2))+(((-1.0)*cj1*cj2*x15834))+((x15833*x15836))+((x15833*x15835)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15838=IKPowWithIntegerCheck(r12,-1);
if(!x15838.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x15838.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15839=IKsin(j4);
IkReal x15840=IKcos(j4);
IkReal x15841=(cj5*r21);
IkReal x15842=(r00*sj5);
IkReal x15843=(cj5*r01);
IkReal x15844=(r20*sj5);
IkReal x15845=((1.0)*x15839);
evalcond[0]=((-1.0)*r12*x15839);
evalcond[1]=((((-1.0)*x15844*x15845))+(((-1.0)*x15841*x15845)));
evalcond[2]=((((-1.0)*x15843*x15845))+(((-1.0)*x15842*x15845)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x15840*x15844))+((x15840*x15841)));
evalcond[4]=((((-1.0)*cj1*cj2*sj0))+((sj0*sj1*sj2))+((x15840*x15843))+((x15840*x15842)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x15846=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15846);
rxp0_2=(py*r00);
rxp1_0=(r21*x15846);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15847=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15847);
rxp0_2=(py*r00);
rxp1_0=(r21*x15847);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=(((cj5*r21))+((r20*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15848=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15848);
rxp0_2=(py*r00);
rxp1_0=(r21*x15848);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=(((r00*sj5))+((cj5*r01)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15851=IKPowWithIntegerCheck((((r00*sj5))+((cj5*r01))),-1);
if(!x15851.valid){
continue;
}
IkReal x15849=x15851.value;
IkReal x15850=((1.0)*sj0*x15849);
cj4array[0]=((((-1.0)*cj2*sj1*x15850))+(((-1.0)*cj1*sj2*x15850)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15852=IKsin(j4);
IkReal x15853=IKcos(j4);
IkReal x15854=(cj5*r21);
IkReal x15855=(r20*sj5);
IkReal x15856=((1.0)*x15852);
evalcond[0]=((-1.0)*r12*x15852);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r12*x15853)));
evalcond[2]=((((-1.0)*x15854*x15856))+(((-1.0)*x15855*x15856)));
evalcond[3]=((((-1.0)*r00*sj5*x15856))+(((-1.0)*cj5*r01*x15856)));
evalcond[4]=((((-1.0)*sj1*sj2))+((x15853*x15854))+((x15853*x15855))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15858=IKPowWithIntegerCheck((((cj5*r21))+((r20*sj5))),-1);
if(!x15858.valid){
continue;
}
IkReal x15857=x15858.value;
cj4array[0]=((((-1.0)*cj1*cj2*x15857))+((sj1*sj2*x15857)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15859=IKsin(j4);
IkReal x15860=IKcos(j4);
IkReal x15861=(r00*sj5);
IkReal x15862=(cj5*r01);
IkReal x15863=((1.0)*x15859);
evalcond[0]=((-1.0)*r12*x15859);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r12*x15860)));
evalcond[2]=((((-1.0)*r20*sj5*x15863))+(((-1.0)*cj5*r21*x15863)));
evalcond[3]=((((-1.0)*x15862*x15863))+(((-1.0)*x15861*x15863)));
evalcond[4]=(((x15860*x15862))+((x15860*x15861))+((cj1*sj0*sj2))+((cj2*sj0*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15864=IKPowWithIntegerCheck(r12,-1);
if(!x15864.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x15864.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15865=IKsin(j4);
IkReal x15866=IKcos(j4);
IkReal x15867=(cj5*r21);
IkReal x15868=(cj5*r01);
IkReal x15869=((1.0)*x15865);
IkReal x15870=(sj5*x15866);
evalcond[0]=((-1.0)*r12*x15865);
evalcond[1]=((((-1.0)*r20*sj5*x15869))+(((-1.0)*x15867*x15869)));
evalcond[2]=((((-1.0)*r00*sj5*x15869))+(((-1.0)*x15868*x15869)));
evalcond[3]=(((x15866*x15867))+(((-1.0)*sj1*sj2))+((r20*x15870))+((cj1*cj2)));
evalcond[4]=(((x15866*x15868))+((r00*x15870))+((cj1*sj0*sj2))+((cj2*sj0*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x15871=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15871);
rxp0_2=(py*r00);
rxp1_0=(r21*x15871);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15872=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15872);
rxp0_2=(py*r00);
rxp1_0=(r21*x15872);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15873=((-1.0)*py);
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15873);
rxp0_2=(py*r00);
rxp1_0=(r21*x15873);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15876=IKPowWithIntegerCheck(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01))),-1);
if(!x15876.valid){
continue;
}
IkReal x15874=x15876.value;
IkReal x15875=((1.0)*sj0*x15874);
cj4array[0]=((((-1.0)*cj1*sj2*x15875))+(((-1.0)*cj2*sj1*x15875)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15877=IKsin(j4);
IkReal x15878=IKcos(j4);
IkReal x15879=(r20*sj5);
IkReal x15880=((1.0)*cj5*r21);
IkReal x15881=((1.0)*x15878);
IkReal x15882=((1.0)*x15877);
evalcond[0]=(r12*x15877);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r12*x15881)));
evalcond[2]=((((-1.0)*x15877*x15880))+(((-1.0)*x15879*x15882)));
evalcond[3]=((((-1.0)*r00*sj5*x15882))+(((-1.0)*cj5*r01*x15882)));
evalcond[4]=((((-1.0)*x15878*x15880))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*x15879*x15881)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15884=IKPowWithIntegerCheck(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5))),-1);
if(!x15884.valid){
continue;
}
IkReal x15883=x15884.value;
cj4array[0]=((((-1.0)*cj1*cj2*x15883))+((sj1*sj2*x15883)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15885=IKsin(j4);
IkReal x15886=IKcos(j4);
IkReal x15887=((1.0)*cj5);
IkReal x15888=(r00*sj5);
IkReal x15889=((1.0)*x15886);
IkReal x15890=((1.0)*x15885);
evalcond[0]=(r12*x15885);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r12*x15889)));
evalcond[2]=((((-1.0)*r20*sj5*x15890))+(((-1.0)*r21*x15885*x15887)));
evalcond[3]=((((-1.0)*x15888*x15890))+(((-1.0)*r01*x15885*x15887)));
evalcond[4]=((((-1.0)*r01*x15886*x15887))+(((-1.0)*x15888*x15889))+((cj1*sj0*sj2))+((cj2*sj0*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15891=IKPowWithIntegerCheck(r12,-1);
if(!x15891.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x15891.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15892=IKsin(j4);
IkReal x15893=IKcos(j4);
IkReal x15894=((1.0)*cj5);
IkReal x15895=((1.0)*r00*sj5);
IkReal x15896=((1.0)*r20*sj5);
evalcond[0]=(r12*x15892);
evalcond[1]=((((-1.0)*r21*x15892*x15894))+(((-1.0)*x15892*x15896)));
evalcond[2]=((((-1.0)*x15892*x15895))+(((-1.0)*r01*x15892*x15894)));
evalcond[3]=((((-1.0)*x15893*x15896))+(((-1.0)*sj1*sj2))+(((-1.0)*r21*x15893*x15894))+((cj1*cj2)));
evalcond[4]=((((-1.0)*x15893*x15895))+((cj1*sj0*sj2))+((cj2*sj0*sj1))+(((-1.0)*r01*x15893*x15894)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15897=((-1.0)*r00);
CheckValue<IkReal> x15898 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x15897),IKFAST_ATAN2_MAGTHRESH);
if(!x15898.valid){
continue;
}
IkReal gconst66=((-1.0)*(x15898.value));
IkReal gconst67=r01;
IkReal gconst68=x15897;
CheckValue<IkReal> x15899 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x15899.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x15899.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15900=((-1.0)*r00);
IkReal x15901=((-1.0)*py);
CheckValue<IkReal> x15903 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x15900),IKFAST_ATAN2_MAGTHRESH);
if(!x15903.valid){
continue;
}
IkReal x15902=((-1.0)*(x15903.value));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15901);
rxp0_2=(py*r00);
rxp1_0=(r21*x15901);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj5=gconst67;
cj5=gconst68;
j5=x15902;
IkReal gconst66=x15902;
IkReal gconst67=r01;
IkReal gconst68=x15900;
j4eval[0]=cj3;
j4eval[1]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15904=((-1.0)*r00);
IkReal x15905=((-1.0)*py);
CheckValue<IkReal> x15907 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x15904),IKFAST_ATAN2_MAGTHRESH);
if(!x15907.valid){
continue;
}
IkReal x15906=((-1.0)*(x15907.value));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15905);
rxp0_2=(py*r00);
rxp1_0=(r21*x15905);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj5=gconst67;
cj5=gconst68;
j5=x15906;
IkReal gconst66=x15906;
IkReal gconst67=r01;
IkReal gconst68=x15904;
j4eval[0]=r12;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x15908=((-1.0)*r00);
IkReal x15909=((-1.0)*py);
CheckValue<IkReal> x15911 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x15908),IKFAST_ATAN2_MAGTHRESH);
if(!x15911.valid){
continue;
}
IkReal x15910=((-1.0)*(x15911.value));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15909);
rxp0_2=(py*r00);
rxp1_0=(r21*x15909);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj5=gconst67;
cj5=gconst68;
j5=x15910;
IkReal gconst66=x15910;
IkReal gconst67=r01;
IkReal gconst68=x15908;
j4eval[0]=cj3;
j4eval[1]=r12;
j4eval[2]=((((-1.0)*r00*r21*sj3))+((r01*r20*sj3)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15912=(sj1*sj2);
IkReal x15913=((1.0)*cj1*cj2);
CheckValue<IkReal> x15914=IKPowWithIntegerCheck(cj3,-1);
if(!x15914.valid){
continue;
}
CheckValue<IkReal> x15915=IKPowWithIntegerCheck(r12,-1);
if(!x15915.valid){
continue;
}
CheckValue<IkReal> x15916=IKPowWithIntegerCheck((((gconst67*r20*sj3))+((gconst68*r21*sj3))),-1);
if(!x15916.valid){
continue;
}
if( IKabs(((x15914.value)*(x15915.value)*(((((-1.0)*cj0*x15913))+((cj0*x15912)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15916.value)*(((((-1.0)*cj3*gconst67*r21))+((cj3*gconst68*r20))+(((-1.0)*x15913))+x15912)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15914.value)*(x15915.value)*(((((-1.0)*cj0*x15913))+((cj0*x15912))))))+IKsqr(((x15916.value)*(((((-1.0)*cj3*gconst67*r21))+((cj3*gconst68*r20))+(((-1.0)*x15913))+x15912))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x15914.value)*(x15915.value)*(((((-1.0)*cj0*x15913))+((cj0*x15912))))), ((x15916.value)*(((((-1.0)*cj3*gconst67*r21))+((cj3*gconst68*r20))+(((-1.0)*x15913))+x15912))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15917=IKsin(j4);
IkReal x15918=IKcos(j4);
IkReal x15919=(gconst67*r01);
IkReal x15920=(gconst67*r20);
IkReal x15921=(r00*sj3);
IkReal x15922=((1.0)*sj1);
IkReal x15923=(cj2*sj1);
IkReal x15924=(gconst67*r21);
IkReal x15925=(gconst68*r01);
IkReal x15926=((1.0)*gconst68);
IkReal x15927=(cj0*cj2);
IkReal x15928=((1.0)*sj0);
IkReal x15929=(cj1*sj2);
IkReal x15930=(cj1*cj2);
IkReal x15931=((1.0)*cj0);
IkReal x15932=((1.0)*x15917);
IkReal x15933=(cj3*x15926);
IkReal x15934=(r21*x15918);
IkReal x15935=(gconst67*x15918);
IkReal x15936=((1.0)*x15918);
IkReal x15937=(sj3*x15918);
evalcond[0]=((((-1.0)*r12*x15936))+(((-1.0)*x15928)));
evalcond[1]=((((-1.0)*r21*x15917*x15926))+(((-1.0)*x15920*x15932)));
evalcond[2]=(((cj3*r12*x15917))+((cj1*x15927))+(((-1.0)*cj0*sj2*x15922)));
evalcond[3]=((((-1.0)*gconst67*r00*x15932))+(((-1.0)*x15931))+(((-1.0)*x15925*x15932)));
evalcond[4]=((((-1.0)*x15922*x15927))+(((-1.0)*x15929*x15931))+(((-1.0)*r12*sj3*x15932)));
evalcond[5]=((((-1.0)*r20*x15933))+((cj3*x15924))+((x15920*x15937))+((gconst68*sj3*x15934))+(((-1.0)*sj2*x15922))+x15930);
evalcond[6]=(((sj3*x15924))+(((-1.0)*x15933*x15934))+(((-1.0)*r20*sj3*x15926))+(((-1.0)*cj3*x15920*x15936))+x15929+x15923);
evalcond[7]=((((-1.0)*r00*x15933))+((x15925*x15937))+((sj0*x15929))+((sj0*x15923))+((x15921*x15935))+((cj3*x15919)));
evalcond[8]=((((-1.0)*x15921*x15926))+((sj3*x15919))+(((-1.0)*cj3*x15925*x15936))+((sj0*sj1*sj2))+(((-1.0)*x15928*x15930))+(((-1.0)*cj3*r00*x15935)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15940=IKPowWithIntegerCheck(r12,-1);
if(!x15940.valid){
continue;
}
IkReal x15938=x15940.value;
IkReal x15939=((1.0)*cj0);
CheckValue<IkReal> x15941=IKPowWithIntegerCheck(sj3,-1);
if(!x15941.valid){
continue;
}
if( IKabs((x15938*(x15941.value)*(((((-1.0)*cj2*sj1*x15939))+(((-1.0)*cj1*sj2*x15939)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15938)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15938*(x15941.value)*(((((-1.0)*cj2*sj1*x15939))+(((-1.0)*cj1*sj2*x15939))))))+IKsqr(((-1.0)*sj0*x15938))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15938*(x15941.value)*(((((-1.0)*cj2*sj1*x15939))+(((-1.0)*cj1*sj2*x15939))))), ((-1.0)*sj0*x15938));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15942=IKsin(j4);
IkReal x15943=IKcos(j4);
IkReal x15944=(gconst67*r01);
IkReal x15945=(gconst67*r20);
IkReal x15946=(r00*sj3);
IkReal x15947=((1.0)*sj1);
IkReal x15948=(cj2*sj1);
IkReal x15949=(gconst67*r21);
IkReal x15950=(gconst68*r01);
IkReal x15951=((1.0)*gconst68);
IkReal x15952=(cj0*cj2);
IkReal x15953=((1.0)*sj0);
IkReal x15954=(cj1*sj2);
IkReal x15955=(cj1*cj2);
IkReal x15956=((1.0)*cj0);
IkReal x15957=((1.0)*x15942);
IkReal x15958=(cj3*x15951);
IkReal x15959=(r21*x15943);
IkReal x15960=(gconst67*x15943);
IkReal x15961=((1.0)*x15943);
IkReal x15962=(sj3*x15943);
evalcond[0]=((((-1.0)*x15953))+(((-1.0)*r12*x15961)));
evalcond[1]=((((-1.0)*x15945*x15957))+(((-1.0)*r21*x15942*x15951)));
evalcond[2]=((((-1.0)*cj0*sj2*x15947))+((cj3*r12*x15942))+((cj1*x15952)));
evalcond[3]=((((-1.0)*x15950*x15957))+(((-1.0)*x15956))+(((-1.0)*gconst67*r00*x15957)));
evalcond[4]=((((-1.0)*r12*sj3*x15957))+(((-1.0)*x15947*x15952))+(((-1.0)*x15954*x15956)));
evalcond[5]=(((cj3*x15949))+(((-1.0)*sj2*x15947))+((gconst68*sj3*x15959))+(((-1.0)*r20*x15958))+((x15945*x15962))+x15955);
evalcond[6]=((((-1.0)*x15958*x15959))+(((-1.0)*r20*sj3*x15951))+(((-1.0)*cj3*x15945*x15961))+((sj3*x15949))+x15954+x15948);
evalcond[7]=(((sj0*x15954))+((cj3*x15944))+((x15946*x15960))+(((-1.0)*r00*x15958))+((x15950*x15962))+((sj0*x15948)));
evalcond[8]=((((-1.0)*cj3*r00*x15960))+(((-1.0)*x15946*x15951))+(((-1.0)*x15953*x15955))+((sj0*sj1*sj2))+(((-1.0)*cj3*x15950*x15961))+((sj3*x15944)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15964=IKPowWithIntegerCheck(r12,-1);
if(!x15964.valid){
continue;
}
IkReal x15963=x15964.value;
CheckValue<IkReal> x15965=IKPowWithIntegerCheck(cj3,-1);
if(!x15965.valid){
continue;
}
if( IKabs((x15963*(x15965.value)*(((((-1.0)*cj0*cj1*cj2))+((cj0*sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15963)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15963*(x15965.value)*(((((-1.0)*cj0*cj1*cj2))+((cj0*sj1*sj2))))))+IKsqr(((-1.0)*sj0*x15963))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15963*(x15965.value)*(((((-1.0)*cj0*cj1*cj2))+((cj0*sj1*sj2))))), ((-1.0)*sj0*x15963));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15966=IKsin(j4);
IkReal x15967=IKcos(j4);
IkReal x15968=(gconst67*r01);
IkReal x15969=(gconst67*r20);
IkReal x15970=(r00*sj3);
IkReal x15971=((1.0)*sj1);
IkReal x15972=(cj2*sj1);
IkReal x15973=(gconst67*r21);
IkReal x15974=(gconst68*r01);
IkReal x15975=((1.0)*gconst68);
IkReal x15976=(cj0*cj2);
IkReal x15977=((1.0)*sj0);
IkReal x15978=(cj1*sj2);
IkReal x15979=(cj1*cj2);
IkReal x15980=((1.0)*cj0);
IkReal x15981=((1.0)*x15966);
IkReal x15982=(cj3*x15975);
IkReal x15983=(r21*x15967);
IkReal x15984=(gconst67*x15967);
IkReal x15985=((1.0)*x15967);
IkReal x15986=(sj3*x15967);
evalcond[0]=((((-1.0)*x15977))+(((-1.0)*r12*x15985)));
evalcond[1]=((((-1.0)*x15969*x15981))+(((-1.0)*r21*x15966*x15975)));
evalcond[2]=(((cj1*x15976))+((cj3*r12*x15966))+(((-1.0)*cj0*sj2*x15971)));
evalcond[3]=((((-1.0)*x15980))+(((-1.0)*gconst67*r00*x15981))+(((-1.0)*x15974*x15981)));
evalcond[4]=((((-1.0)*r12*sj3*x15981))+(((-1.0)*x15978*x15980))+(((-1.0)*x15971*x15976)));
evalcond[5]=((((-1.0)*sj2*x15971))+((gconst68*sj3*x15983))+((x15969*x15986))+(((-1.0)*r20*x15982))+((cj3*x15973))+x15979);
evalcond[6]=((((-1.0)*r20*sj3*x15975))+(((-1.0)*cj3*x15969*x15985))+(((-1.0)*x15982*x15983))+((sj3*x15973))+x15972+x15978);
evalcond[7]=(((sj0*x15972))+((sj0*x15978))+((x15970*x15984))+(((-1.0)*r00*x15982))+((cj3*x15968))+((x15974*x15986)));
evalcond[8]=((((-1.0)*x15970*x15975))+(((-1.0)*x15977*x15979))+(((-1.0)*cj3*r00*x15984))+(((-1.0)*cj3*x15974*x15985))+((sj0*sj1*sj2))+((sj3*x15968)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15987=((-1.0)*r01);
CheckValue<IkReal> x15988 = IKatan2WithCheck(IkReal(x15987),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x15988.valid){
continue;
}
IkReal gconst69=((3.14159265358979)+(((-1.0)*(x15988.value))));
IkReal gconst70=x15987;
IkReal gconst71=((1.0)*r00);
CheckValue<IkReal> x15989 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x15989.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x15989.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15990=((-1.0)*r01);
IkReal x15991=((-1.0)*py);
CheckValue<IkReal> x15993 = IKatan2WithCheck(IkReal(x15990),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x15993.valid){
continue;
}
IkReal x15992=((1.0)*(x15993.value));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15991);
rxp0_2=(py*r00);
rxp1_0=(r21*x15991);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x15992)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x15992)));
IkReal gconst70=x15990;
IkReal gconst71=((1.0)*r00);
j4eval[0]=cj3;
j4eval[1]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15994=((-1.0)*r01);
IkReal x15995=((-1.0)*py);
CheckValue<IkReal> x15997 = IKatan2WithCheck(IkReal(x15994),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x15997.valid){
continue;
}
IkReal x15996=((1.0)*(x15997.value));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15995);
rxp0_2=(py*r00);
rxp1_0=(r21*x15995);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x15996)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x15996)));
IkReal gconst70=x15994;
IkReal gconst71=((1.0)*r00);
j4eval[0]=r12;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x15998=((-1.0)*r01);
IkReal x15999=((-1.0)*py);
CheckValue<IkReal> x16001 = IKatan2WithCheck(IkReal(x15998),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x16001.valid){
continue;
}
IkReal x16000=((1.0)*(x16001.value));
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15999);
rxp0_2=(py*r00);
rxp1_0=(r21*x15999);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x16000)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x16000)));
IkReal gconst70=x15998;
IkReal gconst71=((1.0)*r00);
IkReal x16002=((1.0)*sj3);
j4eval[0]=cj3;
j4eval[1]=r12;
j4eval[2]=(((r00*r21*x16002))+(((-1.0)*r01*r20*x16002)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16003=(sj1*sj2);
IkReal x16004=((1.0)*cj1*cj2);
CheckValue<IkReal> x16005=IKPowWithIntegerCheck(cj3,-1);
if(!x16005.valid){
continue;
}
CheckValue<IkReal> x16006=IKPowWithIntegerCheck(r12,-1);
if(!x16006.valid){
continue;
}
CheckValue<IkReal> x16007=IKPowWithIntegerCheck((((gconst71*r21*sj3))+((gconst70*r20*sj3))),-1);
if(!x16007.valid){
continue;
}
if( IKabs(((x16005.value)*(x16006.value)*(((((-1.0)*cj0*x16004))+((cj0*x16003)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x16007.value)*(((((-1.0)*x16004))+x16003+(((-1.0)*cj3*gconst70*r21))+((cj3*gconst71*r20)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x16005.value)*(x16006.value)*(((((-1.0)*cj0*x16004))+((cj0*x16003))))))+IKsqr(((x16007.value)*(((((-1.0)*x16004))+x16003+(((-1.0)*cj3*gconst70*r21))+((cj3*gconst71*r20))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x16005.value)*(x16006.value)*(((((-1.0)*cj0*x16004))+((cj0*x16003))))), ((x16007.value)*(((((-1.0)*x16004))+x16003+(((-1.0)*cj3*gconst70*r21))+((cj3*gconst71*r20))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16008=IKsin(j4);
IkReal x16009=IKcos(j4);
IkReal x16010=(gconst70*r21);
IkReal x16011=(cj2*sj1);
IkReal x16012=(cj3*gconst70);
IkReal x16013=(gconst71*sj3);
IkReal x16014=((1.0)*cj0);
IkReal x16015=((1.0)*sj0);
IkReal x16016=(cj1*sj2);
IkReal x16017=(cj1*cj2);
IkReal x16018=((1.0)*x16008);
IkReal x16019=((1.0)*cj3*gconst71);
IkReal x16020=(r01*x16009);
IkReal x16021=((1.0)*sj1*sj2);
IkReal x16022=((1.0)*x16009);
IkReal x16023=(r21*x16009);
IkReal x16024=(gconst70*sj3*x16009);
evalcond[0]=((((-1.0)*x16015))+(((-1.0)*r12*x16022)));
evalcond[1]=((((-1.0)*gconst70*r20*x16018))+(((-1.0)*gconst71*r21*x16018)));
evalcond[2]=(((cj3*r12*x16008))+(((-1.0)*sj1*sj2*x16014))+((cj0*x16017)));
evalcond[3]=((((-1.0)*x16014))+(((-1.0)*gconst70*r00*x16018))+(((-1.0)*gconst71*r01*x16018)));
evalcond[4]=((((-1.0)*x16011*x16014))+(((-1.0)*r12*sj3*x16018))+(((-1.0)*x16014*x16016)));
evalcond[5]=((((-1.0)*r20*x16019))+(((-1.0)*x16021))+((cj3*x16010))+((r20*x16024))+x16017+((x16013*x16023)));
evalcond[6]=((((-1.0)*r20*x16012*x16022))+((sj3*x16010))+x16011+x16016+(((-1.0)*r20*x16013))+(((-1.0)*x16019*x16023)));
evalcond[7]=((((-1.0)*r00*x16019))+((sj0*x16011))+((sj0*x16016))+((r01*x16012))+((x16013*x16020))+((r00*x16024)));
evalcond[8]=((((-1.0)*r00*x16012*x16022))+((gconst70*r01*sj3))+((sj0*sj1*sj2))+(((-1.0)*r00*x16013))+(((-1.0)*x16015*x16017))+(((-1.0)*x16019*x16020)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x16027=IKPowWithIntegerCheck(r12,-1);
if(!x16027.valid){
continue;
}
IkReal x16025=x16027.value;
IkReal x16026=((1.0)*cj0);
CheckValue<IkReal> x16028=IKPowWithIntegerCheck(sj3,-1);
if(!x16028.valid){
continue;
}
if( IKabs((x16025*(x16028.value)*(((((-1.0)*cj1*sj2*x16026))+(((-1.0)*cj2*sj1*x16026)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x16025)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x16025*(x16028.value)*(((((-1.0)*cj1*sj2*x16026))+(((-1.0)*cj2*sj1*x16026))))))+IKsqr(((-1.0)*sj0*x16025))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x16025*(x16028.value)*(((((-1.0)*cj1*sj2*x16026))+(((-1.0)*cj2*sj1*x16026))))), ((-1.0)*sj0*x16025));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16029=IKsin(j4);
IkReal x16030=IKcos(j4);
IkReal x16031=(gconst70*r21);
IkReal x16032=(cj2*sj1);
IkReal x16033=(cj3*gconst70);
IkReal x16034=(gconst71*sj3);
IkReal x16035=((1.0)*cj0);
IkReal x16036=((1.0)*sj0);
IkReal x16037=(cj1*sj2);
IkReal x16038=(cj1*cj2);
IkReal x16039=((1.0)*x16029);
IkReal x16040=((1.0)*cj3*gconst71);
IkReal x16041=(r01*x16030);
IkReal x16042=((1.0)*sj1*sj2);
IkReal x16043=((1.0)*x16030);
IkReal x16044=(r21*x16030);
IkReal x16045=(gconst70*sj3*x16030);
evalcond[0]=((((-1.0)*r12*x16043))+(((-1.0)*x16036)));
evalcond[1]=((((-1.0)*gconst70*r20*x16039))+(((-1.0)*gconst71*r21*x16039)));
evalcond[2]=(((cj0*x16038))+(((-1.0)*sj1*sj2*x16035))+((cj3*r12*x16029)));
evalcond[3]=((((-1.0)*gconst70*r00*x16039))+(((-1.0)*gconst71*r01*x16039))+(((-1.0)*x16035)));
evalcond[4]=((((-1.0)*r12*sj3*x16039))+(((-1.0)*x16032*x16035))+(((-1.0)*x16035*x16037)));
evalcond[5]=(((x16034*x16044))+((cj3*x16031))+(((-1.0)*x16042))+x16038+(((-1.0)*r20*x16040))+((r20*x16045)));
evalcond[6]=(((sj3*x16031))+(((-1.0)*r20*x16033*x16043))+(((-1.0)*x16040*x16044))+x16037+x16032+(((-1.0)*r20*x16034)));
evalcond[7]=(((x16034*x16041))+((sj0*x16037))+((sj0*x16032))+((r01*x16033))+(((-1.0)*r00*x16040))+((r00*x16045)));
evalcond[8]=((((-1.0)*r00*x16033*x16043))+(((-1.0)*x16040*x16041))+((gconst70*r01*sj3))+((sj0*sj1*sj2))+(((-1.0)*x16036*x16038))+(((-1.0)*r00*x16034)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x16047=IKPowWithIntegerCheck(r12,-1);
if(!x16047.valid){
continue;
}
IkReal x16046=x16047.value;
CheckValue<IkReal> x16048=IKPowWithIntegerCheck(cj3,-1);
if(!x16048.valid){
continue;
}
if( IKabs((x16046*(x16048.value)*(((((-1.0)*cj0*cj1*cj2))+((cj0*sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x16046)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x16046*(x16048.value)*(((((-1.0)*cj0*cj1*cj2))+((cj0*sj1*sj2))))))+IKsqr(((-1.0)*sj0*x16046))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x16046*(x16048.value)*(((((-1.0)*cj0*cj1*cj2))+((cj0*sj1*sj2))))), ((-1.0)*sj0*x16046));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16049=IKsin(j4);
IkReal x16050=IKcos(j4);
IkReal x16051=(gconst70*r21);
IkReal x16052=(cj2*sj1);
IkReal x16053=(cj3*gconst70);
IkReal x16054=(gconst71*sj3);
IkReal x16055=((1.0)*cj0);
IkReal x16056=((1.0)*sj0);
IkReal x16057=(cj1*sj2);
IkReal x16058=(cj1*cj2);
IkReal x16059=((1.0)*x16049);
IkReal x16060=((1.0)*cj3*gconst71);
IkReal x16061=(r01*x16050);
IkReal x16062=((1.0)*sj1*sj2);
IkReal x16063=((1.0)*x16050);
IkReal x16064=(r21*x16050);
IkReal x16065=(gconst70*sj3*x16050);
evalcond[0]=((((-1.0)*x16056))+(((-1.0)*r12*x16063)));
evalcond[1]=((((-1.0)*gconst70*r20*x16059))+(((-1.0)*gconst71*r21*x16059)));
evalcond[2]=(((cj0*x16058))+((cj3*r12*x16049))+(((-1.0)*sj1*sj2*x16055)));
evalcond[3]=((((-1.0)*gconst70*r00*x16059))+(((-1.0)*gconst71*r01*x16059))+(((-1.0)*x16055)));
evalcond[4]=((((-1.0)*r12*sj3*x16059))+(((-1.0)*x16055*x16057))+(((-1.0)*x16052*x16055)));
evalcond[5]=(((cj3*x16051))+(((-1.0)*r20*x16060))+((x16054*x16064))+(((-1.0)*x16062))+x16058+((r20*x16065)));
evalcond[6]=((((-1.0)*x16060*x16064))+(((-1.0)*r20*x16053*x16063))+x16057+x16052+((sj3*x16051))+(((-1.0)*r20*x16054)));
evalcond[7]=((((-1.0)*r00*x16060))+((sj0*x16052))+((sj0*x16057))+((r00*x16065))+((x16054*x16061))+((r01*x16053)));
evalcond[8]=((((-1.0)*x16060*x16061))+(((-1.0)*r00*x16054))+((gconst70*r01*sj3))+((sj0*sj1*sj2))+(((-1.0)*x16056*x16058))+(((-1.0)*r00*x16053*x16063)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x16068=IKPowWithIntegerCheck(r12,-1);
if(!x16068.valid){
continue;
}
IkReal x16066=x16068.value;
IkReal x16067=((1.0)*cj0);
CheckValue<IkReal> x16069=IKPowWithIntegerCheck(sj3,-1);
if(!x16069.valid){
continue;
}
if( IKabs((x16066*(x16069.value)*(((((-1.0)*cj1*sj2*x16067))+(((-1.0)*cj2*sj1*x16067)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x16066)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x16066*(x16069.value)*(((((-1.0)*cj1*sj2*x16067))+(((-1.0)*cj2*sj1*x16067))))))+IKsqr(((-1.0)*sj0*x16066))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x16066*(x16069.value)*(((((-1.0)*cj1*sj2*x16067))+(((-1.0)*cj2*sj1*x16067))))), ((-1.0)*sj0*x16066));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16070=IKsin(j4);
IkReal x16071=IKcos(j4);
IkReal x16072=((1.0)*sj3);
IkReal x16073=(sj3*sj5);
IkReal x16074=(cj5*r20);
IkReal x16075=(cj2*sj1);
IkReal x16076=(r00*sj5);
IkReal x16077=(cj5*r01);
IkReal x16078=(cj5*r00);
IkReal x16079=(cj5*r21);
IkReal x16080=(cj3*sj5);
IkReal x16081=((1.0)*cj0);
IkReal x16082=((1.0)*sj0);
IkReal x16083=((1.0)*cj3);
IkReal x16084=(cj1*sj2);
IkReal x16085=(cj1*cj2);
IkReal x16086=(r12*x16070);
IkReal x16087=(r20*x16071);
IkReal x16088=((1.0)*x16070);
IkReal x16089=((1.0)*sj1*sj2);
IkReal x16090=(sj3*x16071);
IkReal x16091=(x16071*x16083);
evalcond[0]=((((-1.0)*r12*x16071))+(((-1.0)*x16082)));
evalcond[1]=((((-1.0)*r20*sj5*x16088))+(((-1.0)*x16079*x16088)));
evalcond[2]=(((cj3*x16086))+(((-1.0)*sj1*sj2*x16081))+((cj0*x16085)));
evalcond[3]=((((-1.0)*x16076*x16088))+(((-1.0)*x16077*x16088))+(((-1.0)*x16081)));
evalcond[4]=((((-1.0)*x16072*x16086))+(((-1.0)*x16075*x16081))+(((-1.0)*x16081*x16084)));
evalcond[5]=(((x16073*x16087))+((r21*x16080))+((x16079*x16090))+x16085+(((-1.0)*x16074*x16083))+(((-1.0)*x16089)));
evalcond[6]=(((r21*x16073))+(((-1.0)*x16080*x16087))+x16084+x16075+(((-1.0)*x16072*x16074))+(((-1.0)*x16079*x16091)));
evalcond[7]=((((-1.0)*x16078*x16083))+((sj0*x16084))+((r00*x16071*x16073))+((x16077*x16090))+((sj0*x16075))+((r01*x16080)));
evalcond[8]=((((-1.0)*x16076*x16091))+(((-1.0)*x16072*x16078))+((sj0*sj1*sj2))+(((-1.0)*x16077*x16091))+(((-1.0)*x16082*x16085))+((r01*x16073)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x16093=IKPowWithIntegerCheck(r12,-1);
if(!x16093.valid){
continue;
}
IkReal x16092=x16093.value;
CheckValue<IkReal> x16094=IKPowWithIntegerCheck(cj3,-1);
if(!x16094.valid){
continue;
}
if( IKabs((x16092*(x16094.value)*(((((-1.0)*cj0*cj1*cj2))+((cj0*sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x16092)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x16092*(x16094.value)*(((((-1.0)*cj0*cj1*cj2))+((cj0*sj1*sj2))))))+IKsqr(((-1.0)*sj0*x16092))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x16092*(x16094.value)*(((((-1.0)*cj0*cj1*cj2))+((cj0*sj1*sj2))))), ((-1.0)*sj0*x16092));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16095=IKsin(j4);
IkReal x16096=IKcos(j4);
IkReal x16097=((1.0)*sj3);
IkReal x16098=(sj3*sj5);
IkReal x16099=(cj5*r20);
IkReal x16100=(cj2*sj1);
IkReal x16101=(r00*sj5);
IkReal x16102=(cj5*r01);
IkReal x16103=(cj5*r00);
IkReal x16104=(cj5*r21);
IkReal x16105=(cj3*sj5);
IkReal x16106=((1.0)*cj0);
IkReal x16107=((1.0)*sj0);
IkReal x16108=((1.0)*cj3);
IkReal x16109=(cj1*sj2);
IkReal x16110=(cj1*cj2);
IkReal x16111=(r12*x16095);
IkReal x16112=(r20*x16096);
IkReal x16113=((1.0)*x16095);
IkReal x16114=((1.0)*sj1*sj2);
IkReal x16115=(sj3*x16096);
IkReal x16116=(x16096*x16108);
evalcond[0]=((((-1.0)*x16107))+(((-1.0)*r12*x16096)));
evalcond[1]=((((-1.0)*r20*sj5*x16113))+(((-1.0)*x16104*x16113)));
evalcond[2]=((((-1.0)*sj1*sj2*x16106))+((cj3*x16111))+((cj0*x16110)));
evalcond[3]=((((-1.0)*x16101*x16113))+(((-1.0)*x16106))+(((-1.0)*x16102*x16113)));
evalcond[4]=((((-1.0)*x16100*x16106))+(((-1.0)*x16097*x16111))+(((-1.0)*x16106*x16109)));
evalcond[5]=((((-1.0)*x16114))+((r21*x16105))+x16110+(((-1.0)*x16099*x16108))+((x16098*x16112))+((x16104*x16115)));
evalcond[6]=(((r21*x16098))+(((-1.0)*x16105*x16112))+x16109+x16100+(((-1.0)*x16104*x16116))+(((-1.0)*x16097*x16099)));
evalcond[7]=(((r01*x16105))+((x16102*x16115))+((sj0*x16109))+((sj0*x16100))+(((-1.0)*x16103*x16108))+((r00*x16096*x16098)));
evalcond[8]=((((-1.0)*x16101*x16116))+(((-1.0)*x16097*x16103))+(((-1.0)*x16102*x16116))+((sj0*sj1*sj2))+(((-1.0)*x16107*x16110))+((r01*x16098)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x16117=IKPowWithIntegerCheck(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01))),-1);
if(!x16117.valid){
continue;
}
CheckValue<IkReal> x16118=IKPowWithIntegerCheck(r12,-1);
if(!x16118.valid){
continue;
}
if( IKabs((cj0*(x16117.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x16118.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj0*(x16117.value)))+IKsqr(((-1.0)*sj0*(x16118.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((cj0*(x16117.value)), ((-1.0)*sj0*(x16118.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16119=IKsin(j4);
IkReal x16120=IKcos(j4);
IkReal x16121=((1.0)*sj3);
IkReal x16122=(sj3*sj5);
IkReal x16123=(cj5*r20);
IkReal x16124=(cj2*sj1);
IkReal x16125=(r00*sj5);
IkReal x16126=(cj5*r01);
IkReal x16127=(cj5*r00);
IkReal x16128=(cj5*r21);
IkReal x16129=(cj3*sj5);
IkReal x16130=((1.0)*cj0);
IkReal x16131=((1.0)*sj0);
IkReal x16132=((1.0)*cj3);
IkReal x16133=(cj1*sj2);
IkReal x16134=(cj1*cj2);
IkReal x16135=(r12*x16119);
IkReal x16136=(r20*x16120);
IkReal x16137=((1.0)*x16119);
IkReal x16138=((1.0)*sj1*sj2);
IkReal x16139=(sj3*x16120);
IkReal x16140=(x16120*x16132);
evalcond[0]=((((-1.0)*r12*x16120))+(((-1.0)*x16131)));
evalcond[1]=((((-1.0)*x16128*x16137))+(((-1.0)*r20*sj5*x16137)));
evalcond[2]=(((cj0*x16134))+((cj3*x16135))+(((-1.0)*sj1*sj2*x16130)));
evalcond[3]=((((-1.0)*x16125*x16137))+(((-1.0)*x16126*x16137))+(((-1.0)*x16130)));
evalcond[4]=((((-1.0)*x16121*x16135))+(((-1.0)*x16124*x16130))+(((-1.0)*x16130*x16133)));
evalcond[5]=(((x16128*x16139))+((x16122*x16136))+(((-1.0)*x16123*x16132))+x16134+((r21*x16129))+(((-1.0)*x16138)));
evalcond[6]=((((-1.0)*x16121*x16123))+x16124+x16133+((r21*x16122))+(((-1.0)*x16128*x16140))+(((-1.0)*x16129*x16136)));
evalcond[7]=(((r00*x16120*x16122))+(((-1.0)*x16127*x16132))+((x16126*x16139))+((r01*x16129))+((sj0*x16124))+((sj0*x16133)));
evalcond[8]=((((-1.0)*x16125*x16140))+(((-1.0)*x16126*x16140))+(((-1.0)*x16121*x16127))+((sj0*sj1*sj2))+((r01*x16122))+(((-1.0)*x16131*x16134)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16141=((1.0)*sj0);
CheckValue<IkReal> x16142=IKPowWithIntegerCheck(IKsign((((cj5*r20))+(((-1.0)*r21*sj5)))),-1);
if(!x16142.valid){
continue;
}
CheckValue<IkReal> x16143 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r12))+((r02*sj0)))),IkReal((((cj0*cj5*r11))+(((-1.0)*cj5*r01*x16141))+((cj0*r10*sj5))+(((-1.0)*r00*sj5*x16141)))),IKFAST_ATAN2_MAGTHRESH);
if(!x16143.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x16142.value)))+(x16143.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16144=IKsin(j4);
IkReal x16145=IKcos(j4);
IkReal x16146=((1.0)*sj3);
IkReal x16147=(sj3*sj5);
IkReal x16148=(cj5*r10);
IkReal x16149=((1.0)*cj3);
IkReal x16150=(cj5*r20);
IkReal x16151=(cj2*sj1);
IkReal x16152=(r00*sj5);
IkReal x16153=(cj5*r01);
IkReal x16154=(cj5*r00);
IkReal x16155=(r20*sj5);
IkReal x16156=(cj5*r21);
IkReal x16157=(cj3*sj5);
IkReal x16158=(cj5*r11);
IkReal x16159=((1.0)*cj0);
IkReal x16160=((1.0)*sj0);
IkReal x16161=(cj1*cj2);
IkReal x16162=(cj1*sj2);
IkReal x16163=((1.0)*x16145);
IkReal x16164=(r12*x16144);
IkReal x16165=(cj3*x16144);
IkReal x16166=((1.0)*x16144);
IkReal x16167=((1.0)*sj1*sj2);
IkReal x16168=(sj3*x16145);
evalcond[0]=((((-1.0)*x16156*x16166))+(((-1.0)*x16155*x16166))+(((-1.0)*r22*x16163)));
evalcond[1]=((((-1.0)*x16152*x16166))+(((-1.0)*r02*x16163))+(((-1.0)*x16159))+(((-1.0)*x16153*x16166)));
evalcond[2]=((((-1.0)*r10*sj5*x16166))+(((-1.0)*x16158*x16166))+(((-1.0)*r12*x16163))+(((-1.0)*x16160)));
evalcond[3]=(((r21*x16157))+((r20*x16145*x16147))+((x16156*x16168))+(((-1.0)*x16149*x16150))+x16161+(((-1.0)*r22*x16144*x16146))+(((-1.0)*x16167)));
evalcond[4]=(((r21*x16147))+x16162+x16151+(((-1.0)*x16145*x16149*x16155))+(((-1.0)*x16145*x16149*x16156))+((r22*x16165))+(((-1.0)*x16146*x16150)));
evalcond[5]=((((-1.0)*r02*x16144*x16146))+((sj0*x16162))+((sj0*x16151))+((r00*x16145*x16147))+(((-1.0)*x16149*x16154))+((r01*x16157))+((x16153*x16168)));
evalcond[6]=(((r02*x16165))+(((-1.0)*x16145*x16149*x16153))+(((-1.0)*x16145*x16149*x16152))+((r01*x16147))+(((-1.0)*x16160*x16161))+((sj0*sj1*sj2))+(((-1.0)*x16146*x16154)));
evalcond[7]=((((-1.0)*x16159*x16162))+((r11*x16157))+((x16158*x16168))+(((-1.0)*x16148*x16149))+(((-1.0)*x16151*x16159))+(((-1.0)*x16146*x16164))+((r10*x16145*x16147)));
evalcond[8]=(((r11*x16147))+(((-1.0)*sj1*sj2*x16159))+(((-1.0)*r10*sj5*x16145*x16149))+(((-1.0)*x16145*x16149*x16158))+((cj3*x16164))+(((-1.0)*x16146*x16148))+((cj0*x16161)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16169=((1.0)*sj0);
CheckValue<IkReal> x16170=IKPowWithIntegerCheck(IKsign((((r01*sj5))+(((-1.0)*cj5*r00)))),-1);
if(!x16170.valid){
continue;
}
CheckValue<IkReal> x16171 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj5*x16169))+(((-1.0)*cj5*r21*x16169)))),IKFAST_ATAN2_MAGTHRESH);
if(!x16171.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x16170.value)))+(x16171.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16172=IKsin(j4);
IkReal x16173=IKcos(j4);
IkReal x16174=((1.0)*sj3);
IkReal x16175=(sj3*sj5);
IkReal x16176=(cj5*r10);
IkReal x16177=((1.0)*cj3);
IkReal x16178=(cj5*r20);
IkReal x16179=(cj2*sj1);
IkReal x16180=(r00*sj5);
IkReal x16181=(cj5*r01);
IkReal x16182=(cj5*r00);
IkReal x16183=(r20*sj5);
IkReal x16184=(cj5*r21);
IkReal x16185=(cj3*sj5);
IkReal x16186=(cj5*r11);
IkReal x16187=((1.0)*cj0);
IkReal x16188=((1.0)*sj0);
IkReal x16189=(cj1*cj2);
IkReal x16190=(cj1*sj2);
IkReal x16191=((1.0)*x16173);
IkReal x16192=(r12*x16172);
IkReal x16193=(cj3*x16172);
IkReal x16194=((1.0)*x16172);
IkReal x16195=((1.0)*sj1*sj2);
IkReal x16196=(sj3*x16173);
evalcond[0]=((((-1.0)*x16183*x16194))+(((-1.0)*r22*x16191))+(((-1.0)*x16184*x16194)));
evalcond[1]=((((-1.0)*r02*x16191))+(((-1.0)*x16187))+(((-1.0)*x16181*x16194))+(((-1.0)*x16180*x16194)));
evalcond[2]=((((-1.0)*r12*x16191))+(((-1.0)*x16186*x16194))+(((-1.0)*x16188))+(((-1.0)*r10*sj5*x16194)));
evalcond[3]=((((-1.0)*r22*x16172*x16174))+((r21*x16185))+((r20*x16173*x16175))+((x16184*x16196))+(((-1.0)*x16195))+x16189+(((-1.0)*x16177*x16178)));
evalcond[4]=((((-1.0)*x16174*x16178))+((r22*x16193))+(((-1.0)*x16173*x16177*x16184))+(((-1.0)*x16173*x16177*x16183))+x16190+x16179+((r21*x16175)));
evalcond[5]=(((r00*x16173*x16175))+((sj0*x16179))+(((-1.0)*r02*x16172*x16174))+((r01*x16185))+((x16181*x16196))+((sj0*x16190))+(((-1.0)*x16177*x16182)));
evalcond[6]=((((-1.0)*x16188*x16189))+(((-1.0)*x16174*x16182))+(((-1.0)*x16173*x16177*x16181))+(((-1.0)*x16173*x16177*x16180))+((r01*x16175))+((r02*x16193))+((sj0*sj1*sj2)));
evalcond[7]=((((-1.0)*x16179*x16187))+(((-1.0)*x16174*x16192))+(((-1.0)*x16187*x16190))+((r11*x16185))+(((-1.0)*x16176*x16177))+((r10*x16173*x16175))+((x16186*x16196)));
evalcond[8]=((((-1.0)*x16174*x16176))+((r11*x16175))+(((-1.0)*x16173*x16177*x16186))+((cj0*x16189))+(((-1.0)*sj1*sj2*x16187))+(((-1.0)*r10*sj5*x16173*x16177))+((cj3*x16192)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16197=((1.0)*cj0);
CheckValue<IkReal> x16198 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj5*r21*x16197))+(((-1.0)*r20*sj5*x16197)))),IKFAST_ATAN2_MAGTHRESH);
if(!x16198.valid){
continue;
}
CheckValue<IkReal> x16199=IKPowWithIntegerCheck(IKsign((((cj5*r10))+(((-1.0)*r11*sj5)))),-1);
if(!x16199.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x16198.value)+(((1.5707963267949)*(x16199.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16200=IKsin(j4);
IkReal x16201=IKcos(j4);
IkReal x16202=((1.0)*sj3);
IkReal x16203=(sj3*sj5);
IkReal x16204=(cj5*r10);
IkReal x16205=((1.0)*cj3);
IkReal x16206=(cj5*r20);
IkReal x16207=(cj2*sj1);
IkReal x16208=(r00*sj5);
IkReal x16209=(cj5*r01);
IkReal x16210=(cj5*r00);
IkReal x16211=(r20*sj5);
IkReal x16212=(cj5*r21);
IkReal x16213=(cj3*sj5);
IkReal x16214=(cj5*r11);
IkReal x16215=((1.0)*cj0);
IkReal x16216=((1.0)*sj0);
IkReal x16217=(cj1*cj2);
IkReal x16218=(cj1*sj2);
IkReal x16219=((1.0)*x16201);
IkReal x16220=(r12*x16200);
IkReal x16221=(cj3*x16200);
IkReal x16222=((1.0)*x16200);
IkReal x16223=((1.0)*sj1*sj2);
IkReal x16224=(sj3*x16201);
evalcond[0]=((((-1.0)*x16212*x16222))+(((-1.0)*r22*x16219))+(((-1.0)*x16211*x16222)));
evalcond[1]=((((-1.0)*x16209*x16222))+(((-1.0)*x16215))+(((-1.0)*x16208*x16222))+(((-1.0)*r02*x16219)));
evalcond[2]=((((-1.0)*x16214*x16222))+(((-1.0)*r10*sj5*x16222))+(((-1.0)*x16216))+(((-1.0)*r12*x16219)));
evalcond[3]=(((x16212*x16224))+x16217+(((-1.0)*r22*x16200*x16202))+(((-1.0)*x16223))+((r20*x16201*x16203))+(((-1.0)*x16205*x16206))+((r21*x16213)));
evalcond[4]=(((r22*x16221))+(((-1.0)*x16202*x16206))+x16207+x16218+((r21*x16203))+(((-1.0)*x16201*x16205*x16211))+(((-1.0)*x16201*x16205*x16212)));
evalcond[5]=(((r01*x16213))+((x16209*x16224))+(((-1.0)*x16205*x16210))+((sj0*x16207))+((r00*x16201*x16203))+(((-1.0)*r02*x16200*x16202))+((sj0*x16218)));
evalcond[6]=((((-1.0)*x16201*x16205*x16208))+(((-1.0)*x16201*x16205*x16209))+((sj0*sj1*sj2))+((r01*x16203))+((r02*x16221))+(((-1.0)*x16202*x16210))+(((-1.0)*x16216*x16217)));
evalcond[7]=((((-1.0)*x16215*x16218))+((x16214*x16224))+(((-1.0)*x16204*x16205))+((r10*x16201*x16203))+(((-1.0)*x16207*x16215))+((r11*x16213))+(((-1.0)*x16202*x16220)));
evalcond[8]=((((-1.0)*x16202*x16204))+(((-1.0)*sj1*sj2*x16215))+((cj0*x16217))+((r11*x16203))+((cj3*x16220))+(((-1.0)*r10*sj5*x16201*x16205))+(((-1.0)*x16201*x16205*x16214)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16225=cj5*cj5;
IkReal x16226=r20*r20;
IkReal x16227=r21*r21;
IkReal x16228=((1.0)*r20);
IkReal x16229=(cj2*sj1);
IkReal x16230=((1.0)*cj3);
IkReal x16231=(cj5*r21);
IkReal x16232=(cj1*sj2);
IkReal x16233=(r21*sj3);
IkReal x16234=((2.0)*r20);
IkReal x16235=(cj5*sj3*sj5);
CheckValue<IkReal> x16236=IKPowWithIntegerCheck(IKsign(((((-1.0)*x16226*x16230))+(((-1.0)*x16230*(r22*r22)))+(((-1.0)*x16225*x16227*x16230))+((cj3*x16225*x16226))+(((-1.0)*cj3*sj5*x16231*x16234)))),-1);
if(!x16236.valid){
continue;
}
CheckValue<IkReal> x16237 = IKatan2WithCheck(IkReal((((r22*x16229))+((r22*x16232))+((r22*sj5*x16233))+(((-1.0)*cj5*r22*sj3*x16228)))),IkReal(((((-1.0)*x16229*x16231))+(((-1.0)*sj5*x16228*x16229))+((x16226*x16235))+((x16225*x16233*x16234))+(((-1.0)*sj5*x16228*x16232))+(((-1.0)*x16227*x16235))+(((-1.0)*x16231*x16232))+(((-1.0)*x16228*x16233)))),IKFAST_ATAN2_MAGTHRESH);
if(!x16237.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x16236.value)))+(x16237.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x16238=IKsin(j4);
IkReal x16239=IKcos(j4);
IkReal x16240=(cj5*r21);
IkReal x16241=(r20*sj5);
IkReal x16242=(r21*sj5);
IkReal x16243=((1.0)*x16239);
IkReal x16244=((1.0)*x16238);
IkReal x16245=(sj3*x16239);
IkReal x16246=((1.0)*cj5*r20);
evalcond[0]=((((-1.0)*x16241*x16244))+(((-1.0)*x16240*x16244))+(((-1.0)*r22*x16243)));
evalcond[1]=((((-1.0)*sj1*sj2))+(((-1.0)*cj3*x16246))+(((-1.0)*r22*sj3*x16244))+((cj1*cj2))+((x16241*x16245))+((x16240*x16245))+((cj3*x16242)));
evalcond[2]=(((cj2*sj1))+(((-1.0)*cj3*x16241*x16243))+((sj3*x16242))+(((-1.0)*sj3*x16246))+((cj1*sj2))+((cj3*r22*x16238))+(((-1.0)*cj3*x16240*x16243)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x16247=((1.0)*cj4);
IkReal x16248=((1.0)*sj4*sj5);
IkReal x16249=((1.0)*cj5*sj4);
if( IKabs(((((-1.0)*r11*x16249))+(((-1.0)*r12*x16247))+(((-1.0)*r10*x16248)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x16249))+(((-1.0)*r02*x16247))+(((-1.0)*r00*x16248)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x16249))+(((-1.0)*r12*x16247))+(((-1.0)*r10*x16248))))+IKsqr(((((-1.0)*r01*x16249))+(((-1.0)*r02*x16247))+(((-1.0)*r00*x16248))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r11*x16249))+(((-1.0)*r12*x16247))+(((-1.0)*r10*x16248))), ((((-1.0)*r01*x16249))+(((-1.0)*r02*x16247))+(((-1.0)*r00*x16248))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x16250=IKcos(j0);
IkReal x16251=IKsin(j0);
IkReal x16252=(r02*sj4);
IkReal x16253=((0.3495)*sj1);
IkReal x16254=(cj5*r00);
IkReal x16255=((0.3484)*sj1);
IkReal x16256=(sj3*sj5);
IkReal x16257=(cj4*r01);
IkReal x16258=(cj4*r00);
IkReal x16259=((1.0)*sj3);
IkReal x16260=(cj5*r10);
IkReal x16261=(r12*sj4);
IkReal x16262=((1.0)*sj1);
IkReal x16263=(cj5*sj3);
IkReal x16264=(cj4*r11);
IkReal x16265=((1.0)*cj4);
IkReal x16266=(cj3*sj5);
IkReal x16267=((0.1005)*sj5);
IkReal x16268=(cj2*x16250);
IkReal x16269=((1.0)*cj3*cj5);
IkReal x16270=((1.0)*sj4*sj5);
IkReal x16271=(cj2*x16251);
IkReal x16272=((1.0)*cj5*sj4);
IkReal x16273=(cj1*sj2*x16250);
IkReal x16274=(cj1*sj2*x16251);
evalcond[0]=((((-1.0)*r02*x16265))+(((-1.0)*x16250))+(((-1.0)*r01*x16272))+(((-1.0)*r00*x16270)));
evalcond[1]=((((-1.0)*x16251))+(((-1.0)*r12*x16265))+(((-1.0)*r10*x16270))+(((-1.0)*r11*x16272)));
evalcond[2]=((((-0.1005)*x16254))+((r01*x16267))+(((-1.0)*px))+(((-1.0)*x16253*x16271))+(((-1.0)*x16251*x16255))+(((0.1002)*x16250))+(((-0.3495)*x16274)));
evalcond[3]=(((x16253*x16268))+((x16250*x16255))+(((-0.1005)*x16260))+(((-1.0)*py))+((r11*x16267))+(((0.3495)*x16273))+(((0.1002)*x16251)));
evalcond[4]=(x16274+((sj1*x16271))+((r01*x16266))+(((-1.0)*cj3*x16254))+(((-1.0)*x16252*x16259))+((x16257*x16263))+((x16256*x16258)));
evalcond[5]=((((-1.0)*x16258*x16266))+((cj3*x16252))+((r01*x16256))+(((-1.0)*x16257*x16269))+(((-1.0)*x16254*x16259))+((sj1*sj2*x16251))+(((-1.0)*cj1*x16271)));
evalcond[6]=((((-1.0)*x16259*x16261))+((cj4*r10*x16256))+(((-1.0)*x16273))+(((-1.0)*x16262*x16268))+((r11*x16266))+(((-1.0)*cj3*x16260))+((x16263*x16264)));
evalcond[7]=((((-1.0)*x16259*x16260))+(((-1.0)*sj2*x16250*x16262))+(((-1.0)*x16264*x16269))+(((-1.0)*r10*x16265*x16266))+((cj3*x16261))+((cj1*x16268))+((r11*x16256)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16275=cj5*cj5;
IkReal x16276=r21*r21;
IkReal x16277=r20*r20;
IkReal x16278=(cj3*cj5);
IkReal x16279=(cj5*r21);
IkReal x16280=((1.0)*r22);
IkReal x16281=(r20*sj5);
IkReal x16282=(sj1*sj2);
IkReal x16283=(cj3*r21);
IkReal x16284=(sj3*x16275);
IkReal x16285=((1.0)*cj1*cj2);
CheckValue<IkReal> x16286 = IKatan2WithCheck(IkReal((((r22*sj5*x16283))+(((-1.0)*x16280*x16282))+((cj1*cj2*r22))+(((-1.0)*r20*x16278*x16280)))),IkReal(((((2.0)*r20*x16275*x16283))+(((-1.0)*x16281*x16285))+((x16281*x16282))+(((-1.0)*r20*x16283))+(((-1.0)*sj5*x16276*x16278))+((sj5*x16277*x16278))+((x16279*x16282))+(((-1.0)*x16279*x16285)))),IKFAST_ATAN2_MAGTHRESH);
if(!x16286.valid){
continue;
}
CheckValue<IkReal> x16287=IKPowWithIntegerCheck(IKsign((((sj3*(r22*r22)))+(((-1.0)*x16277*x16284))+((x16276*x16284))+(((2.0)*sj3*x16279*x16281))+((sj3*x16277)))),-1);
if(!x16287.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x16286.value)+(((1.5707963267949)*(x16287.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x16288=IKsin(j4);
IkReal x16289=IKcos(j4);
IkReal x16290=(cj5*r21);
IkReal x16291=(r20*sj5);
IkReal x16292=(r21*sj5);
IkReal x16293=((1.0)*x16289);
IkReal x16294=((1.0)*x16288);
IkReal x16295=(sj3*x16289);
IkReal x16296=((1.0)*cj5*r20);
evalcond[0]=((((-1.0)*r22*x16293))+(((-1.0)*x16290*x16294))+(((-1.0)*x16291*x16294)));
evalcond[1]=((((-1.0)*r22*sj3*x16294))+(((-1.0)*sj1*sj2))+(((-1.0)*cj3*x16296))+((cj3*x16292))+((x16290*x16295))+((cj1*cj2))+((x16291*x16295)));
evalcond[2]=(((cj2*sj1))+((cj3*r22*x16288))+((cj1*sj2))+(((-1.0)*sj3*x16296))+(((-1.0)*cj3*x16291*x16293))+((sj3*x16292))+(((-1.0)*cj3*x16290*x16293)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x16297=((1.0)*cj4);
IkReal x16298=((1.0)*sj4*sj5);
IkReal x16299=((1.0)*cj5*sj4);
if( IKabs(((((-1.0)*r10*x16298))+(((-1.0)*r11*x16299))+(((-1.0)*r12*x16297)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x16299))+(((-1.0)*r00*x16298))+(((-1.0)*r02*x16297)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x16298))+(((-1.0)*r11*x16299))+(((-1.0)*r12*x16297))))+IKsqr(((((-1.0)*r01*x16299))+(((-1.0)*r00*x16298))+(((-1.0)*r02*x16297))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r10*x16298))+(((-1.0)*r11*x16299))+(((-1.0)*r12*x16297))), ((((-1.0)*r01*x16299))+(((-1.0)*r00*x16298))+(((-1.0)*r02*x16297))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x16300=IKcos(j0);
IkReal x16301=IKsin(j0);
IkReal x16302=(r02*sj4);
IkReal x16303=((0.3495)*sj1);
IkReal x16304=(cj5*r00);
IkReal x16305=((0.3484)*sj1);
IkReal x16306=(sj3*sj5);
IkReal x16307=(cj4*r01);
IkReal x16308=(cj4*r00);
IkReal x16309=((1.0)*sj3);
IkReal x16310=(cj5*r10);
IkReal x16311=(r12*sj4);
IkReal x16312=((1.0)*sj1);
IkReal x16313=(cj5*sj3);
IkReal x16314=(cj4*r11);
IkReal x16315=((1.0)*cj4);
IkReal x16316=(cj3*sj5);
IkReal x16317=((0.1005)*sj5);
IkReal x16318=(cj2*x16300);
IkReal x16319=((1.0)*cj3*cj5);
IkReal x16320=((1.0)*sj4*sj5);
IkReal x16321=(cj2*x16301);
IkReal x16322=((1.0)*cj5*sj4);
IkReal x16323=(cj1*sj2*x16300);
IkReal x16324=(cj1*sj2*x16301);
evalcond[0]=((((-1.0)*r02*x16315))+(((-1.0)*r00*x16320))+(((-1.0)*x16300))+(((-1.0)*r01*x16322)));
evalcond[1]=((((-1.0)*r11*x16322))+(((-1.0)*r12*x16315))+(((-1.0)*r10*x16320))+(((-1.0)*x16301)));
evalcond[2]=((((-1.0)*x16303*x16321))+(((-0.3495)*x16324))+(((-1.0)*x16301*x16305))+((r01*x16317))+(((-1.0)*px))+(((-0.1005)*x16304))+(((0.1002)*x16300)));
evalcond[3]=(((r11*x16317))+((x16300*x16305))+(((-1.0)*py))+((x16303*x16318))+(((-0.1005)*x16310))+(((0.3495)*x16323))+(((0.1002)*x16301)));
evalcond[4]=((((-1.0)*x16302*x16309))+x16324+((r01*x16316))+((sj1*x16321))+((x16306*x16308))+(((-1.0)*cj3*x16304))+((x16307*x16313)));
evalcond[5]=(((sj1*sj2*x16301))+(((-1.0)*cj1*x16321))+((cj3*x16302))+((r01*x16306))+(((-1.0)*x16307*x16319))+(((-1.0)*x16304*x16309))+(((-1.0)*x16308*x16316)));
evalcond[6]=((((-1.0)*x16323))+(((-1.0)*x16312*x16318))+((r11*x16316))+((cj4*r10*x16306))+((x16313*x16314))+(((-1.0)*x16309*x16311))+(((-1.0)*cj3*x16310)));
evalcond[7]=((((-1.0)*r10*x16315*x16316))+((r11*x16306))+(((-1.0)*x16314*x16319))+((cj1*x16318))+(((-1.0)*sj2*x16300*x16312))+((cj3*x16311))+(((-1.0)*x16309*x16310)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
template<int D>
static inline bool matrixinverse(IkReal* A)
{
    int n = D;
    int info;
    IkReal IKFAST_ALIGNED16(work[D*D*(D-1)]);
    int ipiv[D];
    dgetrf_(&n, &n, A, &n, &ipiv[0], &info);
    if( info != 0 ) {
        return false;
    }
    int worksize=D*D*(D-1);
    dgetri_(&n, A, &n, &ipiv[0], &work[0], &worksize, &info);
    return info==0;
}

/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - probot_c800 (921f379d97bac629d167f8d4a49162b8)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
